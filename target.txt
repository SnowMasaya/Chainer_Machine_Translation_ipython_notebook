About this document ...
Python Tutorial
Index
is Copyright 1993, 1994, 1995, 1996, 1997, NikosDrakos, Computer Based Learning Unit, University ofLeeds, and Copyright 1997, 1998, RossMoore, Mathematics Department, Macquarie University,Sydney.
The application of
to the Pythondocumentation has been heavily tailored by Fred L. Drake,Jr.
Original navigation icons were contributed by ChristopherPetrilli.
There's no need to worry about text markup; ourdocumentation team will gladly take care of that.
Questions regarding how to use the information in thisdocument should be sent to the Python news group, comp.lang.python, or the Python mailing list (which is gated to the newsgroup andcarries the same content). For any of these channels, please be sure not to send HTML email.Thanks.
Python Documentation Index
Front Matter
Release 2.4
30 November 2004
Contents
1.
Whetting Your Appetite
2. Using the Python Interpreter
2.1 Invoking the Interpreter
2.1.1 Argument Passing
2.1.2 Interactive Mode
2.2 The Interpreter and Its Environment
2.2.1 Error Handling
2.2.2 Executable Python Scripts
2.2.3 Source Code Encoding
2.2.4 The Interactive Startup File
3. An Informal Introduction to Python
3.1 Using Python as a Calculator
3.1.1 Numbers
3.1.2 Strings
3.1.3 Unicode Strings
3.1.4 Lists
3.2 First Steps Towards Programming
4. More Control Flow Tools
4.1 if Statements
4.2 for Statements
4.3 The range() Function
4.4 break and continue Statements, andelse Clauses on Loops
4.5 pass Statements
4.6 Defining Functions
4.7 More on Defining Functions
4.7.1 Default Argument Values
4.7.2 Keyword Arguments
4.7.3 Arbitrary Argument Lists
4.7.4 Unpacking Argument Lists
4.7.5 Lambda Forms
4.7.6 Documentation Strings
5. Data Structures
5.1 More on Lists
5.1.1 Using Lists as Stacks
5.1.2 Using Lists as Queues
5.1.3 Functional Programming Tools
5.1.4 List Comprehensions
5.2 The del statement
5.3 Tuples and Sequences
5.4 Sets
5.5 Dictionaries
5.6 Looping Techniques
5.7 More on Conditions
5.8 Comparing Sequences and Other Types
6. Modules
6.1 More on Modules
6.1.1 The Module Search Path
6.1.2 ``Compiled'' Python files
6.2 Standard Modules
6.3 The dir() Function
6.4 Packages
6.4.1 Importing * From a Package
6.4.2 Intra-package References
6.4.3 Packages in Multiple Directories
7. Input and Output
7.1 Fancier Output Formatting
7.2 Reading and Writing Files
7.2.1 Methods of File Objects
7.2.2 The pickle Module
8. Errors and Exceptions
8.1 Syntax Errors
8.2 Exceptions
8.3 Handling Exceptions
8.4 Raising Exceptions
8.5 User-defined Exceptions
8.6 Defining Clean-up Actions
9. Classes
9.1 A Word About Terminology
9.2 Python Scopes and Name Spaces
9.3 A First Look at Classes
9.3.1 Class Definition Syntax
9.3.2 Class Objects
9.3.3 Instance Objects
9.3.4 Method Objects
9.4 Random Remarks
9.5 Inheritance
9.5.1 Multiple Inheritance
9.6 Private Variables
9.7 Odds and Ends
9.8 Exceptions Are Classes Too
9.9 Iterators
9.10 Generators
9.11 Generator Expressions
10. Brief Tour of the Standard Library
10.1 Operating System Interface
10.2 File Wildcards
10.3 Command Line Arguments
10.4 Error Output Redirection and Program Termination
10.5 String Pattern Matching
10.6 Mathematics
10.7 Internet Access
10.8 Dates and Times
10.9 Data Compression
10.10 Performance Measurement
10.11 Quality Control
10.12 Batteries Included
11. Brief Tour of the Standard Library - Part II
11.1 Output Formatting
11.2 Templating
11.3 Working with Binary Data Record Layouts
11.4 Multi-threading
11.5 Logging
11.6 Weak References
11.7 Tools for Working with Lists
11.8 Decimal Floating Point Arithmetic
12. What Now?
A. Interactive Input Editing and History Substitution
A.1 Line Editing
A.2 History Substitution
A.3 Key Bindings
A.4 Commentary B.
Floating Point Arithmetic: Issues and Limitations
B.1 Representation Error C.
History and License
C.1 History of the software
Glossary
Release 2.4, documentation updated on 30 November 2004. See
About this document..
.
for information on suggesting changes.
Python/C API Reference Manual
5.9 Comparisons
Python Reference Manual
5.8 Binary bit-wise operations
5. Expressions
5.10 Boolean operations
Unlike C, all comparison operations in Python have the same priority,which is lower than that of any arithmetic, shifting or bitwiseoperation.
Also unlike C, expressions like a b c have theinterpretation that is conventional in mathematics:
The spelling is consideredobsolescent.The operators , , ==, =, =, and!= comparethe values of two objects.
The objects need not have the same type.If both are numbers, they are converted to a common type.
Otherwise,objects of different types always compare unequal, and areordered consistently but arbitrarily.(This unusual definition of comparison was used to simplify thedefinition of operations like sorting and the in andnot in operators.
In the future, the comparison rules forobjects of different types are likely to change.)Comparison of objects of the same type depends on the type:
Numbers are compared arithmetically.
Strings are compared lexicographically using the numeric equivalents(the result of the built-in function ord()) of theircharacters.
Unicode and 8-bit strings are fully interoperable in thisbehavior.
Tuples and lists are compared lexicographically using comparison ofcorresponding elements.
This means that to compare equal, eachelement must compare equal and the two sequences must be of the sametype and have the same length.If not equal, the sequences are ordered the same as their firstdiffering elements.
For example, cmp([1,2,x], [1,2,y]) returnsthe same as cmp(x,y).
If the corresponding element does notexist, the shorter sequence is ordered first (for example,[1,2] [1,2,3]).
Mappings (dictionaries) compare equal if and only if their sorted(key, value) lists compare equal.
Outcomes other than equality are resolved consistently, but are nototherwise defined.
Most other types compare unequal unless they are the same object;the choice whether one object is considered smaller or larger thananother one is made arbitrarily but consistently within oneexecution of a program.
The operators in and not in test for setmembership.
evaluates to true if xis a member of the set s, and false otherwise.
returns the negation of
x in s .The set membership test has traditionally been bound to sequences; anobject is a member of a set if the set is a sequence and contains anelement equal to that object.
However, it is possible for an objectto support membership tests without being a sequence.
In particular,dictionaries support memership testing as a nicer way of spelling
; other mapping types may follow suit.For the list and tuple types,
x in y
is true if andonly if there exists an index i such that
x == y[i] is true.For the Unicode and string types,
is true ifand only if x is a substring of y.
An equivalent test isy. find(x) != -1.
For user-defined classes which define the __contains__() method,
is true if and only if
y.__contains__(x) is true.For user-defined classes which do not define __contains__() anddo define __getitem__(),
is true ifand only if there is a non-negative integer index i such that
x == y[i], and all lower integer indicesdo not raise IndexError exception.
(If any other exceptionis raised, it is as if in raised that exception).The operator not in is defined to have the inverse true valueof in.
The operators is and is not test for object identity:
is true if and only if x and yare the same object.
yields the inversetruth value.
Footnotes ... equal.
The implementation computesthis efficiently, without constructing lists or sorting.
... defined.
Earlier versions of Python usedlexicographic comparison of the sorted (key, value) lists, but thiswas very expensive for the common case of comparing for equality.
Aneven earlier version of Python compared dictionaries by identity only,but this caused surprises because people expected to be able to testa dictionary for emptiness by comparing it to {}.
Documenting Python
1 Introduction
2 Directory Structure
3 Style Guide
4 LaTeX Primer
4.1 Syntax
4.2 Hierarchical Structure
4.3 Common Environments
5 Document Classes
6 Special Markup Constructs
6.1 Markup for the Preamble
6.2 Meta-information Markup
6.3 Information Units
6.4 Showing Code Examples
6.5 Inline Markup
6.6 Miscellaneous Text Markup
6.7 Module-specific Markup
6.8 Library-level Markup
6.9 Table Markup
6.10 Reference List Markup
6.11 Index-generating Markup
6.12 Grammar Production Displays
6.13 Graphical Interface Components
7 Processing Tools
7.1 External Tools
7.2 Internal Tools
7.3 Working on Cygwin
8 Including Graphics
9 Future Directions
9.1 Structured Documentation
9.2 Discussion Forums
Release 2.4, documentation updated on 30 November 2004.
11.22.3 DateTime Objects
Python Library Reference
11.22.2 Boolean Objects
11.22.4 Binary Objects
This class may be initialized with seconds since the epoch, atime tuple, or an ISO 8601 time/date string. It has the followingmethods, supported mainly for internal use by themarshalling/unmarshalling code:
Accept a string as the instance's new time value.
Write the XML-RPC encoding of this DateTime item to the out stream object.
It also supports certain of Python's built-in operators through _cmp__ and __repr__ methods.
5. Embedding Python in Another Application
Extending and Embedding the Python Interpreter
4.3 Using DLLs in
Extending and Embedding the
5.1 Very High Level 5.
Embedding Python in Another Application
The previous chapters discussed how to extend Python, that is, how toextend the functionality of Python by attaching a library of Cfunctions to it.
It is also possible to do it the other way around:enrich your C/C++ application by embedding Python in it.
You can also use it yourself if some of the functionalitycan be written in Python more easily.Embedding Python is similar to extending it, but not quite.
Thedifference is that when you extend Python, the main program of theapplication is still the Python interpreter, while if you embedPython, the main program may have nothing to do with Python --instead, some parts of the application occasionally call the Pythoninterpreter to run some Python code.So if you are embedding Python, you are providing your own mainprogram.
One of the things this main program has to do is initializethe Python interpreter.
At the very least, you have to call thefunction Py_Initialize() (on Mac OS, callPyMac_Initialize() instead).
There are optional calls topass command line arguments to Python.
Then later you can call theinterpreter from any part of the application.There are several different ways to call the interpreter: you can passa string containing Python statements toPyRun_SimpleString(), or you can pass a stdio file pointerand a file name (for identification in error messages only) toPyRun_SimpleFile().
You can also call the lower-leveloperations described in the previous chapters to construct and usePython objects.A simple demo of embedding Python can be found in the directoryDemo/embed/ of the source distribution.
See Also:
5.1 Very High Level Embedding
5.2 Beyond Very High Level Embedding: An overview
5.3 Pure Embedding
5.4 Extending Embedded Python
5.5 Embedding Python in C++
5.6 Linking Requirements
5.1 Very High Level
4.2 Exceptions
4.1.1 Interaction with dynamic
4. Execution model
Exceptions are a means of breaking out of the normal flow of controlof a code block in order to handle errors or other exceptionalconditions.
An exception israised at the point where the erroris detected; it may be handled
bythe surrounding code block or by any code block that directly orindirectly invoked the code block where the error occurred.
The Python interpreter raises an exception when it detects a run-timeerror (such as division by zero).
A Python program can alsoexplicitly raise an exception with the raise statement.Exception handlers are specified with the try ... exceptstatement.
Ineither case, it prints a stack backtrace, except when the exception is SystemExit
.Exceptions are identified by class instances.Selection of a matching except clause is based on object identity.The except clause must reference the same class or a baseclass of it.When an exception is raised, an object (maybe None) is passedas the exception's value; this object does not affect theselection of an exception handler, but is passed to the selectedexception handler as additional information.
For class exceptions,this object must be an instance of the exception class being raised.
Warning:Messages to exceptions are not part of the Python API.
Their contents maychange from one version of Python to the next without warning and should notbe relied on by code which will run under multiple versions of theinterpreter.
See also the description of the try statement insection7.4 and raise statement insection6.9.
Copyright 2001-2004 Python Software Foundation.All rights reserved.Copyright 2000 BeOpen.com.All rights reserved.Copyright 1995-2000 Corporation for National Research Initiatives.All rights reserved.Copyright 1991-1995 Stichting Mathematisch Centrum.All rights reserved.See the end of this document for complete license and permissionsinformation.
Abstract:
Python is an interpreted, object-oriented programming language.
Thisdocument describes how to write modules in C or C++ to extend thePython interpreter with new modules.
Those modules can define newfunctions but also new object types and their methods.
The documentalso describes how to embed the Python interpreter in anotherapplication, for use as an extension language.
Finally, it shows howto compile and link extension modules so that they can be loadeddynamically (at run time) into the interpreter, if the underlyingoperating system supports this feature.This document assumes basic knowledge about Python.
For an informalintroduction to the language, see the
. The
gives a moreformal definition of the language.
The
documents theexisting object types, functions and modules (both built-in andwritten in Python) that give the language its wide application range.For a detailed description of the whole Python/C API, see the separate
.
Distributing Python Modules
About this document ...
|
|
u
|
w
add_include_dir() (CCompiler method)
add_library() (CCompiler method)
add_library_dir() (CCompiler method)
add_link_object() (CCompiler method)
add_runtime_library_dir() (CCompiler method)
announce() (CCompiler method)
C
change_root() (in module distutils.util)
check_environ() (in module distutils.util)
close() (TextFile method)
Command (class in distutils.cmd) Command (class in distutils.core)
compile() (CCompiler method)
convert_path() (in module distutils.util)
copy_file() (in module distutils.file_util)
copy_tree() (in module distutils.dir_util)
create_static_lib() (CCompiler method)
create_tree() (in module distutils.dir_util)
customize_compiler() (in module distutils.sysconfig)
debug_print() (CCompiler method)
define_macro() (CCompiler method)
detect_language() (CCompiler method)
Distribution (class in distutils.core)
distutils.archive_util (standard module)
distutils.bcppcompiler (standard module)
distutils.ccompiler (standard module)
distutils.cmd (standard module)
distutils.command (standard module)
distutils.command.bdist (standard module)
distutils.command.bdist_dumb (standard module)
distutils.command.bdist_packager (standard module)
distutils.command.bdist_rpm (standard module)
distutils.command.bdist_wininst (standard module)
distutils.command.build (standard module)
distutils.command.build_clib (standard module)
distutils.command.build_ext (standard module)
distutils.command.build_py (standard module)
distutils.command.build_scripts (standard module)
distutils.command.clean (standard module)
distutils.command.config (standard module)
distutils.command.install (standard module)
distutils.command.install_data (standard module)
distutils.command.install_headers (standard module)
distutils.command.install_lib (standard module)
distutils.command.install_scripts (standard module)
distutils.command.register (standard module)
distutils.command.sdist (standard module)
distutils.core (standard module)
distutils.cygwinccompiler (standard module)
distutils.debug (standard module)
distutils.dep_util (standard module)
distutils.dir_util (standard module)
distutils.dist (standard module)
distutils.emxccompiler (standard module)
distutils.errors (standard module)
distutils.extension (standard module)
distutils.fancy_getopt (standard module)
distutils.file_util (standard module)
distutils.filelist (standard module)
distutils.log (standard module)
distutils.msvccompiler (standard module)
distutils.mwerkscompiler (standard module)
distutils.spawn (standard module)
distutils.sysconfig (standard module)
distutils.text_file (standard module)
distutils.unixccompiler (standard module)
distutils.util (standard module)
distutils.version (standard module)
EXEC_PREFIX (in module distutils.sysconfig)
executable_filename() (CCompiler method)
execute() (CCompiler method)
execute() (in module distutils.util)
Extension (class in distutils.core)
fancy_getopt() (in module distutils.fancy_getopt)
finalize_options() (Command method)
find_library_file() (CCompiler method)
gen_lib_options() (in module distutils.ccompiler)
gen_preprocess_options() (in module distutils.ccompiler)
generate_help() (FancyGetopt method)
get_config_h_filename() (in module distutils.sysconfig)
get_config_var() (in module distutils.sysconfig)
get_config_vars() (in module distutils.sysconfig)
get_default_compiler() (in module distutils.ccompiler)
get_makefile_filename() (in module distutils.sysconfig)
get_option_order() (FancyGetopt method)
get_platform() (in module distutils.util)
get_python_inc() (in module distutils.sysconfig)
get_python_lib() (in module distutils.sysconfig)
getopt() (FancyGetopt method)
grok_environment_error() (in module distutils.util)
has_function() (CCompiler method)
HOME (environment variable)
initialize_options()() (Command method)
library_dir_option() (CCompiler method)
library_filename() (CCompiler method)
library_option() (CCompiler method)
link() (CCompiler method)
link_executable() (CCompiler method)
link_shared_lib() (CCompiler method)
link_shared_object() (CCompiler method)
make_archive() (in module distutils.archive_util)
make_tarball() (in module distutils.archive_util)
make_zipfile() (in module distutils.archive_util)
mkpath() (CCompiler method)
mkpath() (in module distutils.dir_util)
move_file() (CCompiler method)
move_file() (in module distutils.file_util)
new_compiler() (in module distutils.ccompiler)
newer() (in module distutils.dep_util)
newer_group() (in module distutils.dep_util)
newer_pairwise() (in module distutils.dep_util)
object_filenames() (CCompiler method)
open() (TextFile method)
PLAT (environment variable)
PREFIX (in module distutils.sysconfig)
preprocess() (CCompiler method)
readline() (TextFile method)
readlines() (TextFile method)
remove_tree() (in module distutils.dir_util)
rfc822_escape() (in module distutils.util)
run() (Command method)
run_setup() (in module distutils.core)
runtime_library_dir_option() (CCompiler method)
set_executables() (CCompiler method)
set_include_dirs() (CCompiler method)
set_libraries() (CCompiler method)
set_library_dirs() (CCompiler method)
set_link_objects() (CCompiler method)
set_python_build() (in module distutils.sysconfig)
set_runtime_library_dirs() (CCompiler method)
setup() (in module distutils.core)
shared_object_filename() (CCompiler method)
show_compilers() (in module distutils.ccompiler)
spawn() (CCompiler method)
split_quoted() (in module distutils.util)
strtobool() (in module distutils.util)
subst_vars() (in module distutils.util)
undefine_macro() (CCompiler method)
unreadline() (TextFile method)
warn() (CCompiler method)
warn() (TextFile method)
wrap_text() (in module distutils.fancy_getopt)
Distributing Python Modules
1. An Introduction to
This document describes the Python Distribution Utilities(``Distutils'') from the module developer's point of view, describinghow to use the Distutils to make Python modules and extensions easilyavailable to a wider audience with very little overhead forbuild/release/install mechanics.
1. An Introduction to Distutils
1.1 Concepts Terminology
1.2 A Simple Example
1.3 General Python terminology
1.4 Distutils-specific terminology
2. Writing the Setup Script
2.1 Listing whole packages
2.2 Listing individual modules
2.3 Describing extension modules
2.3.1 Extension names and packages
2.3.2 Extension source files
2.3.3 Preprocessor options
2.3.4 Library options
2.3.5 Other options
2.4 Installing Scripts
2.5 Installing Package Data
2.6 Installing Additional Files
2.7 Additional meta-data
2.8 Debugging the setup script
3. Writing the Setup Configuration File
4. Creating a Source Distribution
4.1 Specifying the files to distribute
4.2 Manifest-related options
5.
Creating Built Distributions 5.1 Creating dumb built distributions
5.2 Creating RPM packages
5.3 Creating Windows Installers
5.3.1 The Postinstallation script
6. Registering with the Package Index
7. Examples
7.1 Pure Python distribution (by module)
7.2 Pure Python distribution (by package)
7.3 Single extension module
8. Extending Distutils
8.1 Integrating new commands
9. Command Reference
9.1 Installing modules: the install command family
9.2 Creating a source distribution: thesdist command
10. API Reference
10.1 distutils.core -- Core Distutils functionality
10.2 distutils.ccompiler -- CCompiler base class
10.3 distutils.unixccompiler -- Unix C Compiler
10.4 distutils.msvccompiler -- Microsoft Compiler
10.5 distutils.bcppcompiler -- Borland Compiler
10.6 distutils.cygwincompiler -- Cygwin Compiler
10.7 distutils.emxccompiler -- OS/2 EMX Compiler
10.8 distutils.mwerkscompiler -- Metrowerks CodeWarrior support
10.9 distutils.archive_util -- Archiving utilities
10.10 distutils.dep_util -- Dependency checking
10.11 distutils.dir_util -- Directory tree operations
10.12 distutils.file_util -- Single file operations
10.13 distutils.util -- Miscellaneous other utility functions
10.14 distutils.dist -- The Distribution class
10.15 distutils.extension -- The Extension class
10.16 distutils.debug -- Distutils debug mode
10.17 distutils.errors -- Distutils exceptions
10.18 distutils.fancy_getopt-- Wrapper around the standard getopt module
10.19 distutils.filelist -- The FileList class
10.20 distutils.log -- Simple PEP 282-style logging
10.21 distutils.spawn -- Spawn a sub-process
10.22 distutils.sysconfig --System configuration information
10.23 distutils.text_file -- The TextFile class
10.24 distutils.version -- Version number classes
10.25 distutils.cmd -- Abstract base class for Distutils commands
10.26 distutils.command -- Individual Distutils commands
10.27 distutils.command.bdist -- Build a binary installer
10.28 distutils.command.bdist_packager -- Abstract base class for packagers
10.29 distutils.command.bdist_dumb -- Build a ``dumb'' installer
10.30 distutils.command.bdist_rpm -- Build a binary distribution as a Redhat RPM and SRPM
10.31 distutils.command.bdist_wininst -- Build a Windows installer
10.32 distutils.command.sdist -- Build a source distribution
10.33 distutils.command.build -- Build all files of a package
10.34 distutils.command.build_clib -- Build any C libraries in a package
10.35 distutils.command.build_ext -- Build any extensions in a package
10.36 distutils.command.build_py -- Build the .py/.pyc files of a package
10.37 distutils.command.build_scripts -- Build the scripts of a package
10.38 distutils.command.clean -- Clean a package build area
10.39 distutils.command.config -- Perform package configuration
10.40 distutils.command.install -- Install a package
10.41 distutils.command.install_data-- Install data files from a package
10.42 distutils.command.install_headers-- Install C/C++ header files from a package
10.43 distutils.command.install_lib-- Install library files from a package
10.44 distutils.command.install_scripts-- Install script files from a package
10.45 distutils.command.register-- Register a module with the Python Package Index
10.46 Creating a new Distutils command
This document covers using the Distutils to distribute your Pythonmodules, concentrating on the role of developer/distributor: ifyou're looking for information on installing Python modules, youshould refer to the
manual.
Subsections 1.1 Concepts Terminology
C.3.10 XML Remote Procedure
3.1 Objects, values and types
3. Data model
3.2 The standard type
Objects are Python's abstraction for data.
An object'sidentity never changes once it has been created; you may thinkof it as the object's address in memory.
The `is' operatorcompares the identity of two objects; theid()
function returns an integerrepresenting its identity (currently implemented as its address).An object's type isalso unchangeable.
An object's type determines the operations that the objectsupports (e.g., ``does it have a length?'') and also defines thepossible values for objects of that type.
function returns an object's type(which is an object itself).
The value of someobjects can change.
Objects whose value can change are said to bemutable; objects whose value is unchangeable once they arecreated are called immutable.(The value of an immutable container object that contains a referenceto a mutable object can change when the latter's value is changed;however the container is still considered immutable, because thecollection of objects it contains cannot be changed.
An implementation isallowed to postpone garbage collection or omit it altogether -- it isa matter of implementation quality how garbage collection isimplemented, as long as no objects are collected that are stillreachable.
(Implementation note: the current implementation uses areference-counting scheme with (optional) delayed detection ofcyclically linked garbage, which collects most objects as soon as theybecome unreachable, but is not guaranteed to collect garbagecontaining circular references.
See the
It is understood that these resources are freedwhen the object is garbage-collected, but since garbage collection isnot guaranteed to happen, such objects also provide an explicit way torelease the external resource, usually a close() method.Programs are strongly recommended to explicitly close suchobjects.
The `try...finally' statement providesa convenient way to do this.Some objects contain references to other objects; these are calledcontainers.
Examples of containers are tuples, lists anddictionaries.
The references are part of a container's value.
Inmost cases, when we talk about the value of a container, we imply thevalues, not the identities of the contained objects; however, when wetalk about the mutability of a container, only the identities ofthe immediately contained objects are implied.
So, if an immutablecontainer (like a tuple)contains a reference to a mutable object, its value changesif that mutable object is changed.Types affect almost all aspects of object behavior.
Even the importanceof object identity is affected in some sense: for immutable types,operations that compute new values may actually return a reference toany existing object with the same type and value, while for mutableobjects this is not allowed.
Footnotes
... unchangeable.
Since Python 2.2, a gradual merging oftypes and classes has been started that makes this and a few otherassertions made in this manual not 100% accurate and complete:for example, it is now possible in some cases to change anobject's type, under certain controlled conditions.
Until this manualundergoes extensive revision, it must now be taken as authoritativeonly regarding ``classic classes'', that are still the default, forcompatibility purposes, in Python 2.2 and 2.3.
1.10 Reference Counts
1.9 Building Arbitrary Values
1. Extending Python with
1.10.1 Reference Counting in
In languages like C or C++, the programmer is responsible fordynamic allocation and deallocation of memory on the heap.
In C,this is done using the functions malloc() andfree().
It is important to callfree() at the right time.
If a block's address isforgotten but free() is not called for it, the memory itoccupies cannot be reused until the program terminates.
This iscalled a memory leak.
On the other hand, if a program callsfree() for a block and then continues to use the block, itcreates a conflict with re-use of the block through anothermalloc() call.
Forinstance, a function may allocate a block of memory, do somecalculation, and then free the block again.
Now a change in therequirements for the function may add a test to the calculation thatdetects an error condition and can return prematurely from thefunction.
It's easy to forget to free the allocated memory block whentaking this premature exit, especially when it is added later to thecode.
Such leaks, once introduced, often go undetected for a longtime: the error exit is taken only in a small fraction of all calls,and most modern machines have plenty of virtual memory, so the leakonly becomes apparent in a long-running process that uses the leakingfunction frequently.
Therefore, it's important to prevent leaks fromhappening by having a coding convention or strategy that minimizesthis kind of errors.Since Python makes heavy use of malloc() andfree(), it needs a strategy to avoid memory leaks as wellas the use of freed memory.
The chosen method is calledreference counting.
The principle is simple: every objectcontains a counter, which is incremented when a reference to theobject is stored somewhere, and which is decremented when a referenceto it is deleted.
The big advantage of automatic garbage collection is that theuser doesn't need to call free() explicitly.
(Another claimedadvantage is an improvement in speed or memory usage -- this is nohard fact however.)
This allows applications to not worry about creating director indirect circular references; these are the weakness of garbagecollection implemented using only reference counting.
Referencecycles consist of objects which contain (possibly indirect) referencesto themselves, so that each object in the cycle has a reference countwhich is non-zero.
Typical reference counting implementations are notable to reclaim the memory belonging to any objects in a referencecycle, or referenced from the objects in the cycle, even though thereare no further references to the cycle itself.The cycle detector is able to detect garbage cycles and can reclaimthem so long as there are no finalizers implemented in Python(__del__() methods).
When there are such finalizers, thedetector exposes the cycles through the
gcmodule (specifically, the garbagevariable in that module).
The gc module also exposes a wayto run the detector (the collect() function), as well asconfiguration interfaces and the ability to disable the detector atruntime.
The cycle detector is considered an optional component;though it is included by default, it can be disabled at build timeusing the --without-cycle-gc option to theconfigure script on Unix platforms (including Mac OS X)or by removing the definition of WITH_CYCLE_GC in thepyconfig.h header on other platforms.
If the cycle detector isdisabled in this way, the gc module will not be available. Subsections
1.10.1 Reference Counting in Python
1.10.2 Ownership Rules
1.10.3 Thin Ice
1.10.4 NULL Pointers
A. Reporting Bugs
B. History and License
1.2.5.2 Adding modules to the Module Search Path
Macintosh Library Modules
1.2.5 Configuration
1.2.5.3 Default startup options
When executing an import statement, Python looks for modulesin places defined by the sys.
path To edit thesys.path on a Mac, launch EditPythonPrefs, andenter them into the largish field at the top (one per line).Since MacPython defines a main Python directory, the easiest thing isto add folders to search within the main Python directory.
To add afolder of scripts that you created called ``My Folder'' located in themain Python Folder, enter "$(PYTHON):My Folder" onto a new line.To add the Desktop under OS 9 or below, add"StartupDriveName:Desktop Folder" on a new line.
2.4.1 String literals
2.4 Literals
2.4.2 String literal concatenation
String literals are described by the following lexical definitions:
One syntactic restriction not indicated by these productions is thatwhitespace is not allowed between the stringprefix andthe rest of the string literal.
The source character set is definedby the encoding declaration; it is ASCII if no encoding declarationis given in the source file; see section2.1.4.In plain English: String literals can be enclosed in matching singlequotes (') or double quotes (").
They can also beenclosed in matching groups of three single or double quotes (theseare generally referred to as triple-quoted strings).
Thebackslash () character is used to escape characters thatotherwise have a special meaning, such as newline, backslash itself,or the quote character.
String literals may optionally be prefixedwith a letter "r" or "R"; such strings are calledraw strings and use different rules for interpretingbackslash escape sequences.
A prefix of "u" or "U"makes the string a Unicode string.
Unicode strings use the Unicode characterset as defined by the Unicode Consortium and ISO10646.
(A``quote'' is the character used to open the string, i.e. either' or ".)Unless an "r" or "R" prefix is present, escapesequences in strings are interpreted according to rules similarto those used by Standard C. The recognized escape sequences are:
Escape Sequence
Meaning
Notes
Ignored
Backslash ()
Single quote (')
Double quote (")
ASCII Bell (BEL)
ASCII Backspace (BS)
ASCII Formfeed (FF)
ASCII Linefeed (LF)
Character named name in the Unicode database (Unicode only)
ASCII Carriage Return (CR)
ASCII Horizontal Tab (TAB)
Character with 16-bit hex value xxxx (Unicode only)
Character with 32-bit hex value xxxxxxxx (Unicode only)
ASCII Vertical Tab (VT)
Character with octal value ooo
Character with hex value hh
Notes:
Individual code units which form parts of a surrogate pair can beencoded using this escape sequence.
Any Unicode character can be encoded this way, but charactersoutside the Basic Multilingual Plane (BMP) will be encoded using asurrogate pair if Python is compiled to use 16-bit code units (thedefault).
Individual code units which form parts of a surrogatepair can be encoded using this escape sequence.
As in Standard C, up to three octal digits are accepted.
Unlike in Standard C, at most two hex digits are accepted.
In a string literal, hexadecimal and octal escapes denote thebyte with the given value; it is not necessary that the byteencodes a character in the source character set.
C,all unrecognized escape sequences are left in the string unchanged,i.e., the backslash is left in the string.
(This behavior isuseful when debugging: if an escape sequence is mistyped, theresulting output is more easily recognized as broken.)
It is alsoimportant to note that the escape sequences marked as ``(Unicodeonly)'' in the table above fall into the category of unrecognizedescapes for non-Unicode string literals.When an "r" or "R" prefix is present, a characterfollowing a backslash is included in the string without change, and allbackslashes are left in the string.
For example, the string literalr"n" consists of two characters: a backslash and a lowercase"n".
String quotes can be escaped with a backslash, but thebackslash remains in the string; for example, r""" is a valid stringliteral consisting of two characters: a backslash and a double quote;r"" is not a valid string literal (even a raw string cannotend in an odd number of backslashes).
Specifically, a rawstring cannot end in a single backslash (since the backslash wouldescape the following quote character).
Note also that a singlebackslash followed by a newline is interpreted as those two charactersas part of the string, not as a line continuation.When an "r" or "R" prefix is used in conjunctionwith a "u" or "U" prefix, then the uXXXXescape sequence is processed while all other backslashes areleft in the string.
For example, the string literalur"u0062n" consists of three Unicode characters: `LATINSMALL LETTER B', `REVERSE SOLIDUS', and `LATIN SMALL LETTER N'.Backslashes can be escaped with a preceding backslash; however, bothremain in the string.
As a result, uXXXX escape sequencesare only recognized when there are an odd number of backslashes.
2.3 Built-in Types
2.2 Non-essential Built-in Functions
2. Built-In Objects
2.3.1 Truth Value Testing
The following sections describe the standard types that are built intothe interpreter.
Historically, Python's built-in types have differedfrom user-defined types because it was not possible to use the built-intypes as the basis for object-oriented inheritance.
With the 2.2release this situation has started to change, although the intendedunification of user-defined and built-in types is as yet far fromcomplete.The principal built-in types are numerics, sequences, mappings, filesclasses, instances and exceptions.
Some operations are supported by several object types; in particular,practically all objects can be compared, tested for truth value,and converted to a string (with the ` ...` notation,the equivalent repr() function, or the slightly differentstr() function).
The latterfunction is implicitly used when an object is written by theprint
statement.(Information on
print statementand other language statements can be found in the
and the
.)
2.3.2 Boolean Operations
2.3.3 Comparisons
2.3.4 Numeric Types
2.3.4.1 Bit-string Operations on Integer Types
2.3.5 Iterator Types
2.3.6 Sequence Types
2.3.6.1 String Methods
2.3.6.2 String Formatting Operations
2.3.6.3 XRange Type
2.3.6.4 Mutable Sequence Types
2.3.7 Set Types
2.3.8 Mapping Types
2.3.9 File Objects
2.3.10 Other Built-in Types
2.3.10.1 Modules
2.3.10.2 Classes and Class Instances
2.3.10.3 Functions
2.3.10.4 Methods
2.3.10.5 Code Objects
2.3.10.6 Type Objects
2.3.10.7 The Null Object
2.3.10.8 The Ellipsis Object
2.3.10.9 Boolean Values
2.3.10.10 Internal Objects
2.3.11 Special Attributes
3.3.1 Weak Reference Objects
3.3.2 Example
Weak reference objects have no attributes or methods, but do allow thereferent to be obtained, if it still exists, by calling it:
import weakref class Object:... pass... o = Object() r = weakref.ref(o) o2 = r() o is o2True
If the referent no longer exists, calling the reference object returnsNone:
Testing that a weak reference object is still live should be doneusing the expression
ref() is not None.
Normally,application code that needs to use a reference object should followthis pattern:
# r is a weak reference objecto = r()if o is None:# referent has been garbage collectedprint "Object has been allocated; can't frobnicate."else:print "Object is still live!"o.do_something_useful()
This is used in the implementation of theWeakValueDictionary to reduce the memory overhead for eachentry in the mapping.
This may be most useful to associate additionalinformation with a reference, but could also be used to insertadditional processing on calls to retrieve the referent.This example shows how a subclass of ref can be used to storeadditional information about an object and affect the value that'sreturned when the referent is accessed:
Index
1.1 A Simple Example
1.2 Intermezzo: Errors and Exceptions
1.3 Back to the Example
1.4 The Module's Method Table and Initialization Function
1.5 Compilation and Linkage
1.6 Calling Python Functions from C
1.7 Extracting Parameters in Extension Functions
1.8 Keyword Parameters for Extension Functions
1.11 Writing Extensions in C++
1.12 Providing a C API for an Extension Module
2. Defining New Types
2.1 The Basics
2.1.1 Adding data and methods to the Basic example
2.1.2 Providing finer control over data attributes
2.1.3 Supporting cyclic garbage collection
2.2 Type Methods
2.2.1 Finalization and De-allocation
2.2.3 Attribute Management
2.2.4 Object Comparison
2.2.5 Abstract Protocol Support
2.2.6 More Suggestions
3. Building C and C++ Extensions with distutils
3.1 Distributing your extension modules
4. Building C and C++ Extensions on Windows
4.1 A Cookbook Approach
4.2 Differences Between Unix and Windows
4.3 Using DLLs in Practice
5.6 Linking Requirements A.
Reporting Bugs B.
History and License
B.1 History of the software
1.
Extending Python with
Release 2.4, documentation updated on 30 November 2004.
Python is an extensible, interpreted, object-oriented programminglanguage.
It supports a wide range of applications, from simple textprocessing scripts to interactive Web browsers.While the
Python Reference Manual
describes the exact syntax and semantics of the language, it does notdescribe the standard library that is distributed with the language,and which greatly enhances its immediate usability.
This librarycontains built-in modules (written in C) that provide access to systemfunctionality such as file I/O that would otherwise be inaccessible toPython programmers, as well as modules written in Python that providestandardized solutions for many problems that occur in everydayprogramming.
Some of these modules are explicitly designed toencourage and enhance the portability of Python programs.This library reference manual documents Python's standard library, aswell as many optional library modules (which may or may not beavailable, depending on whether the underlying platform supports themand on the configuration choices made at compile time).
It alsodocuments the standard types of the language and its built-infunctions and exceptions, many of which are not or incompletelydocumented in the Reference Manual.This manual assumes basic knowledge about the Python language.
For aninformal introduction to Python, see the
Python Tutorial
; the
remains thehighest authority on syntactic and semantic questions.
Finally, themanual entitled
Extending and Embeddingthe Python Interpreter
describes how to add new extensions to Pythonand how to embed it in other applications.
__add__() (in module operator)
__bases__ (class attribute)
__builtin__ (built-in module)
__call__() (Generator method)
__class__ (instance attribute)
__concat__() (in module operator)
__delslice__() (in module operator)
__dict__ (object attribute)
__displayhook__ (in module sys)
__div__() (in module operator)
__eq__() (Charset method)
__eq__() (Header method)
__eq__() (in module operator)
__excepthook__ (in module sys)
__floordiv__() (in module operator)
__future__ (standard module)
__ge__() (in module operator)
__getslice__() (in module operator)
__gt__() (in module operator)
__iadd__() (AddressList method)
__init__() (in module difflib)
__init__() (NullTranslations method)
__init__() (Textbox method)
__inv__() (in module operator)
__invert__() (in module operator)
__isub__() (AddressList method)
__iter__() (container method)
__iter__() (iterator method)
__le__() (in module operator)
__len__() (AddressList method)
__len__() (Message method)
__lshift__() (in module operator)
__lt__() (in module operator)
__main__ (built-in module)
__members__ (object attribute)
__methods__ (object attribute)
__mod__() (in module operator)
__mul__() (in module operator)
__name__ (class attribute) __ne__() (Header method),[Link]
__ne__() (in module operator)
__neg__() (in module operator)
__not__() (in module operator)
__or__() (in module operator)
__pos__() (in module operator)
__pow__() (in module operator)
__repeat__() (in module operator)
__repr__() (netrc method)
__rshift__() (in module operator)
__setslice__() (in module operator)
__stderr__ (in module sys)
__stdin__ (in module sys)
__stdout__ (in module sys)
__str__() (AddressList method)
__str__() (Charset method)
__str__() (date method)
__str__() (datetime method)
__str__() (Header method)
__str__() (Message method)
__str__() (time method)
__sub__() (AddressList method)
__sub__() (in module operator)
__truediv__() (in module operator)
__unicode__() (Header method)
__xor__() (in module operator)
_exit() (in module os)
_getframe() (in module sys)
_locale (built-in module)
_parse() (NullTranslations method)
_structure() (in module email.Iterators)
_urlopener (in module urllib)
_winreg (extension module)
a2b_base64() (in module binascii)
a2b_hex() (in module binascii)
a2b_hqx() (in module binascii)
a2b_qp() (in module binascii)
a2b_uu() (in module binascii)
ABMON_12 (in module locale)
abort() (FTP method)
abort() (in module os)
above() (Textbox method)
abs() (Context method)
abs() (in module operator)
abspath() (in module os. path)
ac_out_buffer_size (in module asyncore)
accept() (dispatcher method)
accept() (socket method)
accept2dyear (in module time)
access() (in module os)
acos() (in module cmath)
acos() (in module math)
acosh() (in module cmath)
acquire() (Condition method)
acquire() (lock method)
acquire() (Semaphore method)
acquire() (Textbox method)
acquire() (Timer method),[Link]
acquire_lock() (in module imp)
activate_form() (form method)
activeCount() (in module threading)
add() (in module operator)
add() (Stats method)
add() (TarFile method)
add_alias() (in module email.Charset)
add_box() (form method)
add_browser() (form method)
add_button() (form method)
add_charset() (in module email.Charset)
add_choice() (form method)
add_clock() (form method)
add_codec() (in module email.Charset)
add_cookie_header() (CookieJar method)
add_counter() (form method)
add_data() (Request method)
add_dial() (form method)
add_fallback() (NullTranslations method)
add_flowing_data() (formatter method)
add_handler() (OpenerDirector method)
add_header() (Message method)
add_header() (Request method)
add_history() (in module readline)
add_hor_rule() (formatter method)
add_input() (form method)
add_label_data() (formatter method)
add_lightbutton() (form method)
add_line_break() (formatter method)
add_literal_data() (formatter method)
add_menu() (form method)
add_parent() (BaseHandler method)
add_password() (HTTPPasswordMgr method)
add_positioner() (form method)
add_roundbutton() (form method)
add_section() (SafeConfigParser method)
add_slider() (form method)
add_text() (form method)
add_timer() (form method)
add_type() (in module mimetypes)
add_unredirected_header() (Request method)
add_valslider() (form method)
addcallback() (CD parser method)
addch() (window method)
addError() (TestResult method)
addFailure() (TestResult method)
addfile() (TarFile method)
addFilter() (Textbox method),[Link]
addHandler() (Textbox method)
addheader() (MimeWriter method)
addinfo() (Profile method)
addLevelName() (in module logging)
addnstr() (window method)
address_string() (BaseHTTPRequestHandler method)
addresslist (AddressList attribute) AddressList (class in rfc822)
addstr() (window method)
addSuccess() (TestResult method)
addTest() (TestSuite method)
addTests() (TestSuite method)
adjusted() (Decimal method)
adler32() (in module zlib)
adpcm2lin() (in module audioop)
adpcm32lin() (in module audioop)
AF_INET (in module socket)
AF_INET6 (in module socket)
AF_UNIX (in module socket)
AI_* (in module socket)
aifc() (aifc method)
aifc (standard module)
aiff() (aifc method)
AIFF-C,[Link]
al (built-in module)
AL (standard module),[Link]
alarm() (in module signal)
all_errors (in module ftplib)
all_features (in module xml.sax.handler)
all_properties (in module xml.sax.handler)
allocate_lock() (in module thread)
allowed_domains() (DefaultCookiePolicy method)
allowremoval() (CD player method)
alt() (in module curses. ascii)
ALT_DIGITS (in module locale)
altsep (in module os)
altzone (in module time)
anchor_bgn() (HTMLParser method)
anchor_end() (HTMLParser method)
and_() (in module operator)
annotate() (in module dircache)
anydbm (standard module)
api_version (in module sys)
apop() (POP3_SSL method)
append() (array method)
append() (Header method)
append() (IMAP4_stream method)
append() (SystemRandom method)
append() (Template method)
appendChild() (Node method)
appendleft() (SystemRandom method)
architecture() (in module platform)
aRepr (in module repr)
argv (in module sys)
array (built-in module)
array() (in module array)
ArrayType (in module array)
article() (NNTPDataError method)
AS_IS (in module formatter)
as_string() (Message method)
as_tuple() (Decimal method)
ascii() (in module curses.
ascii) ascii_letters (in module string)
ascii_lowercase (in module string)
ascii_uppercase (in module string)
asctime() (in module time)
asin() (in module cmath)
asin() (in module math)
asinh() (in module cmath)
assert_() (TestCase method)
assert_line_data() (formatter method)
assertAlmostEqual() (TestCase method)
assertEqual() (TestCase method)
assertNotAlmostEqual() (TestCase method)
assertNotEqual() (TestCase method)
assertRaises() (TestCase method)
ast2list() (in module parser)
ast2tuple() (in module parser)
astimezone() (datetime method)
ASTType (in module parser)
asyncore (built-in module)
atan() (in module cmath)
atan() (in module math)
atan2() (in module math)
atanh() (in module cmath)
atexit (standard module)
atime (in module cd)
atof() (in module locale)
atof() (in module string)
atoi() (in module locale)
atoi() (in module string)
atol() (in module string)
attach() (Message method)
AttlistDeclHandler() (xmlparser method)
attrgetter() (in module operator)
attributes (Node attribute)
attributes (XMLParser attribute)
attron() (window method)
attrset() (window method)
audio (in module cd)
AUDIO_FILE_ENCODING_ADPCM_G721 (in module sunau)
AUDIO_FILE_ENCODING_ADPCM_G722 (in module sunau)
AUDIO_FILE_ENCODING_ADPCM_G723_3 (in module sunau)
AUDIO_FILE_ENCODING_ADPCM_G723_5 (in module sunau)
AUDIO_FILE_ENCODING_ALAW_8 (in module sunau)
AUDIO_FILE_ENCODING_DOUBLE (in module sunau)
AUDIO_FILE_ENCODING_FLOAT (in module sunau)
AUDIO_FILE_ENCODING_LINEAR_16 (in module sunau)
AUDIO_FILE_ENCODING_LINEAR_24 (in module sunau)
AUDIO_FILE_ENCODING_LINEAR_32 (in module sunau)
AUDIO_FILE_ENCODING_LINEAR_8 (in module sunau)
AUDIO_FILE_ENCODING_MULAW_8 (in module sunau)
AUDIO_FILE_MAGIC (in module sunau)
AUDIODEV (environment variable)
audioop (built-in module)
authenticate() (IMAP4_stream method)
authenticators() (netrc method)
avg() (in module audioop)
avgpp() (in module audioop)
b16decode() (in module base64)
b16encode() (in module base64)
b2a_base64() (in module binascii)
b2a_hex() (in module binascii)
b2a_hqx() (in module binascii)
b2a_qp() (in module binascii)
b2a_uu() (in module binascii)
b32decode() (in module base64)
b32encode() (in module base64)
b64decode() (in module base64)
b64encode() (in module base64) BabylMailbox (class in mailbox)
backslashreplace_errors_errors() (in module codecs)
backward() (in module turtle)
backward_compatible (in module imageop)
BaseHTTPServer (standard module)
basename() (in module os. path)
basicConfig() (in module logging)
BasicContext (class in decimal)
Bastion() (in module Bastion)
Bastion (standard module)
BastionClass (class in Bastion) baudrate() (in module curses)
bdb (standard module)
beep() (in module curses)
Beep() (in module winsound)
below() (Textbox method)
bestreadsize() (CD player method)
betavariate() (in module random)
bgn_group() (form method)
bias() (in module audioop)
bidirectional() (in module unicodedata)
binary() (in module xmlrpclib)
binascii (built-in module)
bind() (dispatcher method)
bind() (socket method)
bind_textdomain_codeset() (in module gettext)
bindtextdomain() (in module gettext)
binhex() (in module binhex)
binhex (standard module),[Link]
bisect() (in module bisect)
bisect (standard module)
bisect_left() (in module bisect)
bisect_right() (in module bisect)
bkgd() (window method)
bkgdset() (window method)
blocked_domains() (DefaultCookiePolicy method)
BLOCKSIZE (in module cd)
blocksize (in module sha)
body() (NNTPDataError method)
body_encode() (Charset method)
body_encoding (in module email.Charset)
body_line_iterator() (in module email.Iterators)
BOM (in module codecs)
BOM_BE (in module codecs)
BOM_LE (in module codecs)
BOM_UTF16 (in module codecs)
BOM_UTF16_BE (in module codecs)
BOM_UTF16_LE (in module codecs)
BOM_UTF32 (in module codecs)
BOM_UTF32_BE (in module codecs)
BOM_UTF32_LE (in module codecs)
BOM_UTF8 (in module codecs)
boolean() (in module xmlrpclib)
BooleanType (in module types)
border() (window method)
bottom() (Textbox method)
BoundedSemaphore() (in module threading)
box() (window method)
break_long_words (TextWrapper attribute)
BROWSER (environment variable),[Link]
bsddb (built-in module),[Link],[Link]
bsddb (extension module) BsdDbShelf (class in shelve)
btopen() (in module bsddb)
buffer() (non-essential built-in functions)
buffer_info() (array method)
buffer_size (xmlparser attribute)
buffer_text (xmlparser attribute)
buffer_used (xmlparser attribute) BufferingHandler (class in logging)
BufferType (in module types)
bufsize() (audio device method)
build_opener() (in module urllib2)
builtin_module_names (in module sys)
BuiltinFunctionType (in module types)
BuiltinMethodType (in module types)
byteorder (in module sys)
byteswap() (array method)
bz2 (built-in module)
C_BUILTIN (in module imp)
C_EXTENSION (in module imp) CacheFTPHandler (class in urllib2)
calcsize() (in module struct)
calendar() (in module calendar)
calendar (standard module)
call() (in module subprocess)
call() (TarInfo method)
CallableProxyType (in module weakref)
can_change_color() (in module curses)
can_fetch() (RobotFileParser method)
cancel() (scheduler method)
cancel() (Timer method)
capitalize() (in module string)
capitalize() (string method)
capwords() (in module string)
cat() (in module nis)
catalog (in module cd)
category() (in module unicodedata)
cbreak() (in module curses)
cd (built-in module)
CDROM (in module cd)
center() (in module string)
center() (string method)
cgi (standard module)
cgi_directories (CGIHTTPRequestHandler attribute)
CGIHTTPRequestHandler (class in CGIHTTPServer)
CGIHTTPServer (standard module),[Link]
cgitb (standard module)
CGIXMLRPCRequestHandler (class in SimpleXMLRPCServer) chain() (in module itertools)
channels() (audio device method)
CHAR_MAX (in module locale)
CharacterDataHandler() (xmlparser method)
characters() (ContentHandler method) Charset (class in email.Charset)
CHARSET (in module mimify)
charset() (NullTranslations method)
chdir() (in module os)
check() (IMAP4_stream method)
check() (in module tabnanny)
check_forms() (in module fl)
check_output() (OutputChecker method)
checkcache() (in module linecache) CheckList (class in Tix)
childerr (Popen4 attribute)
childNodes (Node attribute)
chmod() (in module os)
choice() (in module random)
choice() (in module whrandom)
choose_boundary() (in module mimetools)
chown() (in module os)
chroot() (in module os) Chunk (class in chunk)
chunk (standard module)
circle() (in module turtle)
Clamped (class in decimal)
classobj() (in module new)
ClassType (in module types)
clear() (CookieJar method)
clear() (Event method)
clear() (window method)
clear_flags() (Context method)
clear_history() (in module readline)
clear_memo() (Pickler method)
clear_session_cookies() (CookieJar method)
clearcache() (in module linecache)
clearok() (window method)
client_address (BaseHTTPRequestHandler attribute)
clock() (in module time)
clone() (Generator method)
clone() (Template method)
cloneNode() (Node method),[Link]
close() (aifc method),[Link]
Close() (ASTVisitor method)
close() (AU_read method)
close() (AU_write method)
close() (audio device method),[Link]
close() (BaseHandler method)
close() (BZ2File method)
close() (CD player method)
close() (Chunk method)
close() (dispatcher method)
close() (FeedParser method)
close() (file method)
close() (FileHandler method)
close() (FTP method)
close() (HTMLParser method)
close() (HTTPResponse method)
close() (IncrementalParser method)
close() (MemoryHandler method)
close() (mixer device method)
close() (NTEventLogHandler method)
close() (Profile method)
close() (Queue method),[Link]
close() (SGMLParser method)
close() (socket method)
close() (SocketHandler method)
close() (StringIO method)
close() (SysLogHandler method)
close() (TarFile method)
close() (TarInfo method)
close() (Telnet method)
close() (Textbox method)
close() (Wave_read method)
close() (Wave_write method)
close() (XMLParser method)
close() (ZipFile method)
close_when_done() (async_chat method)
closed (file attribute)
CloseKey() (in module _winreg)
closelog() (in module syslog)
closeport() (audio port method)
clrtobot() (window method)
clrtoeol() (window method)
cmath (built-in module)
Cmd (class in cmd)
cmd (standard module),[Link]
cmdloop() (Cmd method)
cmp() (in module filecmp)
cmp_op (in module dis)
cmpfiles() (in module filecmp)
code (ExpatError attribute)
code() (in module new)
code (standard module)
codecs (standard module)
coded_value (Morsel attribute)
codeop (standard module)
codepoint2name (in module htmlentitydefs)
CODESET (in module locale)
CodeType (in module types)
collapse_rfc2231_value() (in module email.Utils)
collect() (in module gc)
collect_incoming_data() (async_chat method)
collections (standard module)
color() (in module fl)
color() (in module turtle)
color_content() (in module curses)
color_pair() (in module curses)
colorsys (standard module)
COLUMNS (environment variable),[Link]
combine() (datetime method)
combining() (in module unicodedata) ComboBox (class in Tix)
command (BaseHTTPRequestHandler attribute)
CommandCompiler (class in codeop) commands (standard module)
comment (Cookie attribute)
COMMENT (in module tokenize)
comment (ZipInfo attribute)
comment_url (Cookie attribute)
commenters (shlex attribute)
CommentHandler() (xmlparser method)
common (dircmp attribute)
common_dirs (dircmp attribute)
common_files (dircmp attribute)
common_funny (dircmp attribute)
common_types (in module mimetypes),[Link]
commonprefix() (in module os. path)
communicate() (Popen method)
compare() (Context method)
compare() (Decimal method)
compare() (Differ method)
COMPARISON_FLAGS (in module doctest)
compile() (AST method)
compile() (in module compiler)
compile() (in module py_compile)
compile() (in module re)
compile_command() (in module code)
compile_command() (in module codeop)
compile_dir() (in module compileall)
compile_path() (in module compileall)
compileall (standard module)
compileast() (in module parser)
compileFile() (in module compiler)
compiler (module)
compiler.ast (module)
compiler.visitor (module)
complete() (Completer method)
completedefault() (Cmd method)
complex() (built-in function),[Link]
ComplexType (in module types)
compress() (BZ2Compressor method)
compress() (Compress method)
compress() (in module bz2)
compress() (in module jpeg)
compress() (in module zlib)
compress_size (ZipInfo attribute)
compress_type (ZipInfo attribute)
compressobj() (in module zlib)
COMSPEC (environment variable)
concat() (in module operator)
ConfigParser (standard module)
confstr() (in module os)
confstr_names (in module os)
connect() (dispatcher method)
connect() (FTP method)
connect() (HTTPResponse method)
connect() (SMTP method)
connect() (socket method)
connect_ex() (socket method)
ConnectRegistry() (in module _winreg)
constructor() (in module copy_reg)
contains() (in module operator)
ContentHandler (class in xml.sax.handler)
control (in module cd)
controlnames (in module curses. ascii)
controls() (mixer device method)
convert() (Charset method) Cookie (class in cookielib)
Cookie (standard module)
CookieJar (class in cookielib) cookiejar (UnknownHandler attribute)
cookielib (standard module)
copy() (Context method)
copy() (hmac method)
copy() (IMAP4_stream method)
copy() (in module shutil)
copy() (md5 method)
copy() (sha method)
copy (standard module),[Link]
copy() (Template method)
copy2() (in module shutil)
copy_reg (standard module)
copybinary() (in module mimetools)
copyfile() (in module shutil)
copyfileobj() (in module shutil)
copyliteral() (in module mimetools)
copymessage() (Folder method)
copymode() (in module shutil)
copyright (in module sys)
copystat() (in module shutil)
copytree() (in module shutil)
cos() (in module cmath)
cos() (in module math)
cosh() (in module cmath)
cosh() (in module math)
count() (array method)
count() (in module itertools)
count() (list method)
count() (string method)
countOf() (in module operator)
countTestCases() (TestCase method)
cPickle (built-in module),[Link]
CRC (ZipInfo attribute)
crc32() (in module binascii)
crc32() (in module zlib)
crc_hqx() (in module binascii)
create() (IMAP4_stream method)
create_decimal() (Context method)
create_socket() (dispatcher method)
create_system (ZipInfo attribute)
create_version (ZipInfo attribute)
createAttribute() (Document method)
createAttributeNS() (Document method)
createComment() (Document method)
createElement() (Document method)
createElementNS() (Document method)
CreateKey() (in module _winreg)
createLock() (Textbox method)
createparser() (in module cd)
createProcessingInstruction() (Document method)
createTextNode() (Document method)
critical() (in module logging)
critical() (Textbox method)
CRNCYSTR (in module locale)
crop() (in module imageop)
cross() (in module audioop)
crypt (built-in module),[Link]
crypt() (in module crypt)
cStringIO (built-in module)
csv (standard module)
ctermid() (in module os)
ctime() (date method)
ctime() (datetime method)
ctime() (in module time)
ctrl() (in module curses. ascii)
curdir (in module os)
CurrentByteIndex (xmlparser attribute)
CurrentColumnNumber (xmlparser attribute)
currentframe() (in module inspect)
CurrentLineNumber (xmlparser attribute)
currentThread() (in module threading)
curs_set() (in module curses)
curses (standard module)
curses. ascii (standard module)
curses. panel (standard module)
curses. textpad (standard module)
curses. wrapper (standard module)
cursyncup() (window method)
cwd() (FTP method)
cycle() (in module itertools)
D_FMT (in module locale)
D_T_FMT (in module locale)
data (Binary attribute)
data (Comment attribute)
data (MutableString attribute)
data (ProcessingInstruction attribute)
data (Text attribute)
data (UserDict attribute)
data (UserList attribute)
DatagramHandler (class in logging) DATASIZE (in module cd)
date (class in datetime),[Link]
date() (datetime method)
date() (NNTPDataError method)
date_time (ZipInfo attribute)
date_time_string() (BaseHTTPRequestHandler method)
datetime (built-in module)
datetime (class in datetime),[Link]
day (date attribute)
day (datetime attribute)
DAY_1 ... DAY_7 (in module locale)
daylight (in module time)
DbfilenameShelf (class in shelve) dbhash (standard module),[Link]
dbm (built-in module),[Link],[Link],[Link]
deactivate_form() (form method)
debug (IMAP4_stream attribute)
debug() (in module doctest)
debug() (in module logging)
debug (shlex attribute)
debug() (Template method)
debug() (TestCase method)
debug() (Textbox method)
debug (ZipFile attribute)
debug=0 (TarFile attribute)
DEBUG_COLLECTABLE (in module gc)
DEBUG_INSTANCES (in module gc)
DEBUG_LEAK (in module gc)
DEBUG_OBJECTS (in module gc)
DEBUG_SAVEALL (in module gc)
debug_src() (in module doctest)
DEBUG_STATS (in module gc)
DEBUG_UNCOLLECTABLE (in module gc)
decimal() (in module unicodedata) decimal (standard module)
DecimalException (class in decimal)
decode() (Binary method)
decode() (in module base64)
decode() (in module mimetools)
decode() (in module quopri) decode() (in module uu)
decode() (ServerProxy method)
decode() (string method)
decode() (TextWrapper method)
decode_header() (in module email.Header)
decode_params() (in module email.Utils)
decode_rfc2231() (in module email.Utils)
DecodedGenerator (class in email.Generator)
decodestring() (in module base64)
decodestring() (in module quopri)
decomposition() (in module unicodedata)
decompress() (BZ2Decompressor method)
decompress() (Decompress method)
decompress() (in module bz2)
decompress() (in module jpeg)
decompress() (in module zlib)
decompressobj() (in module zlib)
dedent() (in module textwrap)
def_prog_mode() (in module curses)
def_shell_mode() (in module curses)
default() (ASTVisitor method)
default() (Cmd method)
default_bufsize (in module xml.dom.pulldom)
default_open() (BaseHandler method)
DefaultContext (class in decimal)
DefaultCookiePolicy (class in cookielib) DefaultHandler() (xmlparser method)
DefaultHandlerExpand() (xmlparser method)
defaults() (SafeConfigParser method)
defaultTestLoader (in module unittest)
defaultTestResult() (TestCase method)
defects (in module email.Message)
defpath (in module os)
degrees() (in module math)
del_param() (Message method)
delay_output() (in module curses)
delayload (Cookie attribute)
delch() (window method)
dele() (POP3_SSL method)
delete() (FTP method)
delete() (IMAP4_stream method)
delete_object() (FORMS object method)
deleteacl() (IMAP4_stream method)
deletefolder() (MH method)
DeleteKey() (in module _winreg)
deleteln() (window method)
deleteparser() (CD parser method)
DeleteValue() (in module _winreg)
delimiter (Dialect attribute)
delitem() (in module operator)
delslice() (in module operator)
demo() (in module turtle)
deque() (in module collections)
dereference (TarFile attribute)
derwin() (window method)
description() (NNTPDataError method)
descriptions() (NNTPDataError method)
Detach() (ASTVisitor method)
DEVICE (standard module)
devnull (in module os)
dgettext() (in module gettext)
Dialect (class in csv)
DictionaryType (in module types)
diff_files (dircmp attribute)
Differ (class in difflib),[Link]
difflib (standard module)
digest() (hmac method)
digest() (md5 method)
digest() (sha method)
digest_size (in module md5)
digest_size (in module sha)
digit() (in module unicodedata)
digits (in module string)
dir() (FTP method)
dircache (standard module) dircmp (class in filecmp)
dis() (in module pickletools) dis (standard module)
disable() (in module gc)
disable() (in module logging)
disassemble() (in module dis)
discard (Cookie attribute)
discard_buffers() (async_chat method)
disco() (in module dis)
dispatch() (ASTVisitor method) dispatcher (class in asyncore)
displayhook() (in module sys)
dist() (in module platform)
distb() (in module dis)
distutils (standard module)
dither2grey2() (in module imageop)
dither2mono() (in module imageop)
div() (in module operator)
divide() (Context method)
DivisionByZero (class in decimal)
divmod() (Context method)
dl (extension module)
dllhandle (in module sys)
dngettext() (in module gettext)
do_command() (Textbox method)
do_forms() (in module fl)
do_GET() (SimpleHTTPRequestHandler method)
do_HEAD() (SimpleHTTPRequestHandler method)
do_POST() (CGIHTTPRequestHandler method)
doc_header (Cmd attribute) DocCGIXMLRPCRequestHandler (class in DocXMLRPCServer)
DocFileSuite() (in module doctest)
docmd() (SMTP method)
docstring (DocTest attribute)
DocTest (class in doctest) doctest (standard module)
documentElement (Document attribute)
domain_initial_dot (Cookie attribute)
domain_return_ok() (CookiePolicy method)
domain_specified (Cookie attribute)
DomainLiberal (LWPCookieJar attribute)
DomainRFC2965Match (LWPCookieJar attribute)
DomainStrict (LWPCookieJar attribute)
DomainStrictNoDots (LWPCookieJar attribute)
DomainStrictNonDomain (LWPCookieJar attribute) DOMEventStream (class in xml.dom.pulldom)
done() (Unpacker method)
DONT_ACCEPT_BLANKLINE (in module doctest)
DONT_ACCEPT_TRUE_FOR_1 (in module doctest)
doRollover() (RotatingFileHandler method)
doRollover() (TimedRotatingFileHandler method)
DOTALL (in module re)
doublequote (Dialect attribute)
doupdate() (in module curses)
down() (in module turtle)
drain() (audio device method)
dropwhile() (in module itertools)
dst() (datetime method)
dst() (time method),[Link]
DTDHandler (class in xml.sax.handler)
dumbdbm (standard module),[Link]
DumbWriter (class in formatter)
dummy_thread (standard module)
dummy_threading (standard module)
dump() (in module marshal)
dump() (in module pickle)
dump() (Pickler method)
dump_address_pair() (in module rfc822)
dump_stats() (Stats method)
dumps() (in module marshal)
dumps() (in module pickle)
dumps() (in module xmlrpclib)
dup() (in module os)
dup2() (in module os)
e (in module cmath)
e (in module math)
E2BIG (in module errno)
EACCES (in module errno)
EADDRINUSE (in module errno)
EADDRNOTAVAIL (in module errno)
EADV (in module errno)
EAFNOSUPPORT (in module errno)
EAGAIN (in module errno)
EAI_* (in module socket)
EALREADY (in module errno)
east_asian_width() (in module unicodedata)
EBADE (in module errno)
EBADF (in module errno)
EBADFD (in module errno)
EBADMSG (in module errno)
EBADR (in module errno)
EBADRQC (in module errno)
EBADSLT (in module errno)
EBFONT (in module errno)
EBUSY (in module errno)
ECHILD (in module errno)
echo() (in module curses)
echochar() (window method)
ECHRNG (in module errno)
ECOMM (in module errno)
ECONNABORTED (in module errno)
ECONNREFUSED (in module errno)
ECONNRESET (in module errno)
EDEADLK (in module errno)
EDEADLOCK (in module errno)
EDESTADDRREQ (in module errno)
edit() (Textbox method)
EDOM (in module errno)
EDOTDOT (in module errno)
EDQUOT (in module errno)
EEXIST (in module errno)
EFAULT (in module errno)
EFBIG (in module errno)
ehlo() (SMTP method)
EHOSTDOWN (in module errno)
EHOSTUNREACH (in module errno)
EIDRM (in module errno)
EILSEQ (in module errno)
EINPROGRESS (in module errno)
EINTR (in module errno)
EINVAL (in module errno)
EIO (in module errno)
EISCONN (in module errno)
EISDIR (in module errno)
EISNAM (in module errno)
eject() (CD player method)
EL2HLT (in module errno)
EL2NSYNC (in module errno)
EL3HLT (in module errno)
EL3RST (in module errno)
ElementDeclHandler() (xmlparser method)
elements (XMLParser attribute)
ELIBACC (in module errno)
ELIBBAD (in module errno)
ELIBEXEC (in module errno)
ELIBMAX (in module errno)
ELIBSCN (in module errno)
ELLIPSIS (in module doctest)
EllipsisType (in module types)
ELNRNG (in module errno)
ELOOP (in module errno)
email (standard module)
email.Charset (standard module)
email.Encoders (standard module)
email.Errors (standard module)
email.Generator (standard module)
email.Header (standard module)
email.Iterators (standard module)
email.Message (standard module)
email.Parser (standard module)
email.Utils (standard module)
EMFILE (in module errno)
emit() (BufferingHandler method)
emit() (DatagramHandler method)
emit() (FileHandler method)
emit() (HTTPHandler method)
emit() (NTEventLogHandler method)
emit() (RotatingFileHandler method)
emit() (SMTPHandler method)
emit() (SocketHandler method)
emit() (StreamHandler method)
emit() (SysLogHandler method)
emit() (Textbox method)
emit() (TimedRotatingFileHandler method)
EMLINK (in module errno)
empty() (Queue method)
empty() (scheduler method)
EMPTY_NAMESPACE (in module xml.dom)
emptyline() (Cmd method)
EMSGSIZE (in module errno)
EMULTIHOP (in module errno)
enable() (in module cgitb)
enable() (in module gc)
ENAMETOOLONG (in module errno)
ENAVAIL (in module errno)
enclose() (window method)
encode() (Binary method)
encode() (Header method) encode() (in module base64)
encode() (in module mimetools)
encode() (in module quopri)
encode() (in module uu) encode() (ServerProxy method),[Link]
encode() (string method)
encode() (TextWrapper method)
encode_7or8bit() (in module email.Encoders)
encode_base64() (in module email.Encoders)
encode_noop() (in module email.Encoders)
encode_quopri() (in module email.Encoders)
encode_rfc2231() (in module email.Utils)
encoded_header_len() (Charset method)
EncodedFile() (in module codecs)
encodePriority() (SysLogHandler method)
encodestring() (in module base64)
encodestring() (in module quopri)
encoding (file attribute)
encodings. idna (standard module)
encodings_map (in module mimetypes),[Link]
end() (Template method)
end_group() (form method)
end_headers() (BaseHTTPRequestHandler method)
end_marker() (MultiFile method)
end_paragraph() (formatter method)
EndCdataSectionHandler() (xmlparser method)
EndDoctypeDeclHandler() (xmlparser method)
endDocument() (ContentHandler method)
endElement() (ContentHandler method)
EndElementHandler() (xmlparser method)
endElementNS() (ContentHandler method)
endheaders() (HTTPResponse method)
EndNamespaceDeclHandler() (xmlparser method)
endpick() (in module gl)
endpos (MatchObject attribute)
endPrefixMapping() (ContentHandler method)
endselect() (in module gl)
endswith() (string method)
endwin() (in module curses)
ENETDOWN (in module errno)
ENETRESET (in module errno)
ENETUNREACH (in module errno)
ENFILE (in module errno)
ENOANO (in module errno)
ENOBUFS (in module errno)
ENOCSI (in module errno)
ENODATA (in module errno)
ENODEV (in module errno)
ENOENT (in module errno)
ENOEXEC (in module errno)
ENOLCK (in module errno)
ENOLINK (in module errno)
ENOMEM (in module errno)
ENOMSG (in module errno)
ENONET (in module errno)
ENOPKG (in module errno)
ENOPROTOOPT (in module errno)
ENOSPC (in module errno)
ENOSR (in module errno)
ENOSTR (in module errno)
ENOSYS (in module errno)
ENOTBLK (in module errno)
ENOTCONN (in module errno)
ENOTDIR (in module errno)
ENOTEMPTY (in module errno)
ENOTNAM (in module errno)
ENOTSOCK (in module errno)
ENOTTY (in module errno)
ENOTUNIQ (in module errno)
enter() (scheduler method)
enterabs() (scheduler method)
entities (DocumentType attribute)
EntityDeclHandler() (xmlparser method)
entitydefs (in module htmlentitydefs)
entitydefs (XMLParser attribute)
EntityResolver (class in xml.sax.handler)
eof (shlex attribute)
EOPNOTSUPP (in module errno)
EOVERFLOW (in module errno)
EPERM (in module errno)
EPFNOSUPPORT (in module errno)
epilogue (in module email.Message)
EPIPE (in module errno)
EPROTO (in module errno)
EPROTONOSUPPORT (in module errno)
EPROTOTYPE (in module errno)
eq() (in module operator)
ERA (in module locale)
ERA_D_FMT (in module locale)
ERA_D_T_FMT (in module locale)
ERA_YEAR (in module locale)
ERANGE (in module errno)
erase() (window method)
erasechar() (in module curses)
EREMCHG (in module errno)
EREMOTE (in module errno)
EREMOTEIO (in module errno)
ERESTART (in module errno)
EROFS (in module errno)
ERR (in module curses)
errcode (ServerProxy attribute)
errmsg (ServerProxy attribute)
errno (built-in module),[Link]
errno (standard module)
error,[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link]
error() (ErrorHandler method)
error() (in module logging)
error() (MH method)
error() (OpenerDirector method)
error() (Textbox method)
error_leader() (shlex method)
error_message_format (BaseHTTPRequestHandler attribute)
ErrorByteIndex (xmlparser attribute)
errorcode (in module errno)
ErrorCode (xmlparser attribute)
ErrorColumnNumber (xmlparser attribute)
ErrorHandler (class in xml.sax.handler)
errorlevel (TarFile attribute)
ErrorLineNumber (xmlparser attribute)
errors (TestResult attribute)
ErrorString() (in module xml.parsers.expat)
escape() (in module cgi)
escape() (in module re)
escape() (in module xml.sax.saxutils)
escape (shlex attribute)
escapechar (Dialect attribute)
escapedquotes (shlex attribute)
ESHUTDOWN (in module errno)
ESOCKTNOSUPPORT (in module errno)
ESPIPE (in module errno)
ESRCH (in module errno)
ESRMNT (in module errno)
ESTALE (in module errno)
ESTRPIPE (in module errno)
ETIME (in module errno)
ETIMEDOUT (in module errno)
Etiny() (Context method)
ETOOMANYREFS (in module errno)
Etop() (Context method)
ETXTBSY (in module errno)
EUCLEAN (in module errno)
EUNATCH (in module errno)
EUSERS (in module errno)
Event (class in threading)
Event() (in module threading)
EWOULDBLOCK (in module errno)
EX_CANTCREAT (in module os)
EX_CONFIG (in module os)
EX_DATAERR (in module os)
EX_IOERR (in module os)
EX_NOHOST (in module os)
EX_NOINPUT (in module os)
EX_NOPERM (in module os)
EX_NOTFOUND (in module os)
EX_NOUSER (in module os)
EX_OK (in module os)
EX_OSERR (in module os)
EX_OSFILE (in module os)
EX_PROTOCOL (in module os)
EX_SOFTWARE (in module os)
EX_TEMPFAIL (in module os)
EX_UNAVAILABLE (in module os)
EX_USAGE (in module os) Example (class in doctest)
example (DocTestFailure attribute)
example (UnexpectedException attribute)
examples (DocTest attribute)
exc_clear() (in module sys)
exc_info() (in module sys)
exc_info (UnexpectedException attribute)
exc_msg (Example attribute)
exc_traceback (in module sys)
exc_type (in module sys)
exc_value (in module sys)
excepthook() (in module sys),[Link]
exception() (in module logging)
exception() (Textbox method)
exceptions (standard module)
EXDEV (in module errno)
exec_prefix (in module sys)
execfile() (built-in function),[Link]
execl() (in module os)
execle() (in module os)
execlp() (in module os)
execlpe() (in module os)
executable (in module sys)
execv() (in module os)
execve() (in module os)
execvp() (in module os)
execvpe() (in module os) ExFileSelectBox (class in Tix)
EXFULL (in module errno)
exists() (in module os. path)
exit() (in module sys)
exit() (in module thread)
exitfunc (in sys)
exp() (in module cmath)
exp() (in module math)
expand() (MatchObject method)
expand_tabs (TextWrapper attribute)
expandNode() (DOMEventStream method)
expandtabs() (in module string)
expandtabs() (string method)
expanduser() (in module os. path)
expandvars() (in module os. path)
expect() (Telnet method)
expires (Cookie attribute)
expovariate() (in module random)
expr() (in module parser)
expunge() (IMAP4_stream method)
extend() (array method)
extend() (SystemRandom method)
extend_path() (in module pkgutil)
ExtendedContext (class in decimal)
extendleft() (SystemRandom method)
extensions_map (SimpleHTTPRequestHandler attribute)
external_attr (ZipInfo attribute)
ExternalEntityParserCreate() (xmlparser method)
ExternalEntityRefHandler() (xmlparser method)
extra (ZipInfo attribute)
extract() (TarFile method)
extract_cookies() (CookieJar method)
extract_stack() (in module traceback)
extract_tb() (in module traceback)
extract_version (ZipInfo attribute)
extractfile() (TarFile method)
extsep (in module os)
F_BAVAIL (in module statvfs)
F_BFREE (in module statvfs)
F_BLOCKS (in module statvfs)
F_BSIZE (in module statvfs)
F_FAVAIL (in module statvfs)
F_FFREE (in module statvfs)
F_FILES (in module statvfs)
F_FLAG (in module statvfs)
F_FRSIZE (in module statvfs)
F_NAMEMAX (in module statvfs)
F_OK (in module os)
fabs() (in module math)
fail() (TestCase method)
failIf() (TestCase method)
failIfAlmostEqual() (TextTestRunner method)
failIfEqual() (TextTestRunner method)
failUnless() (TextTestRunner method)
failUnlessAlmostEqual() (TextTestRunner method)
failUnlessEqual() (TextTestRunner method)
failUnlessRaises() (TextTestRunner method)
failureException (TestCase attribute)
failures (TestResult attribute)
fatalError() (ErrorHandler method)
faultCode (ServerProxy attribute)
faultString (ServerProxy attribute)
fchdir() (in module os)
fcntl() (in module fcntl),[Link]
fdatasync() (in module os)
fdopen() (in module os)
feature_external_ges (in module xml.sax.handler)
feature_external_pes (in module xml.sax.handler)
feature_namespace_prefixes (in module xml.sax.handler)
feature_namespaces (in module xml.sax.handler)
feature_string_interning (in module xml.sax.handler)
feature_validation (in module xml.sax.handler)
feed() (FeedParser method)
feed() (HTMLParser method)
feed() (IncrementalParser method)
feed() (SGMLParser method)
feed() (XMLParser method)
file (class descriptor attribute)
file (function descriptor attribute)
file() (posixfile method)
file_offset (ZipInfo attribute)
file_open() (FileHandler method)
file_size (ZipInfo attribute)
filecmp (standard module) fileConfig() (in module logging)
fileinput (standard module)
filelineno() (in module fileinput)
filename (Cookie attribute)
filename (DocTest attribute)
filename() (in module fileinput)
filename (ZipInfo attribute)
filename_only (in module tabnanny)
fileno() (audio device method),[Link]
fileno() (file method)
fileno() (mixer device method)
fileno() (Profile method)
fileno() (socket method)
fileno() (Telnet method)
fileopen() (in module posixfile) FileSelectBox (class in Tix)
FileType (in module types)
fill() (in module textwrap)
Filter (class in logging)
filter() (Filter method) filter() (in module curses)
filter() (in module fnmatch)
filter() (Textbox method),[Link]
filterwarnings() (in module warnings)
find() (DocTestFinder method)
find() (in module gettext)
find() (in module string)
find() (Queue method)
find() (string method)
find_first() (form method)
find_last() (form method)
find_longest_match() (SequenceMatcher method)
find_module() (in module imp)
find_prefix_at_end() (in module asynchat)
find_user_password() (HTTPPasswordMgr method)
findall() (in module re)
findall() (RegexObject method)
findCaller() (Textbox method)
findfactor() (in module audioop)
findfile() (in module test.test_support)
findfit() (in module audioop)
findfont() (in module fm)
finditer() (in module re)
finditer() (RegexObject method)
findmatch() (in module mailcap)
findmax() (in module audioop)
first() (dbhash method)
first() (fifo method)
first() (Queue method)
firstChild (Node attribute)
firstkey() (in module gdbm)
firstweekday() (in module calendar)
fix() (in module fpformat)
fix_sentence_endings (TextWrapper attribute)
fl (built-in module)
FL (standard module)
flag_bits (ZipInfo attribute)
flags (RegexObject attribute)
flash() (in module curses)
flatten() (Generator method)
float() (built-in function),[Link],[Link]
FloatType (in module types)
flock() (in module fcntl)
floor() (in module math),[Link]
floordiv() (in module operator)
flp (standard module)
flush() (audio device method)
flush() (BufferingHandler method)
flush() (BZ2Compressor method)
flush() (Compress method)
flush() (Decompress method)
flush() (file method)
flush() (MemoryHandler method)
flush() (Queue method)
flush() (StreamHandler method)
flush() (Textbox method)
flush() (writer method)
flush_softspace() (formatter method)
flushheaders() (MimeWriter method)
flushinp() (in module curses)
FlushKey() (in module _winreg)
fm (built-in module)
fmod() (in module math)
fnmatch() (in module fnmatch)
fnmatch (standard module)
fnmatchcase() (in module fnmatch) Folder (class in mhlib)
fontpath() (in module fm)
forget() (in module statcache)
forget() (in module test.test_support)
forget_dir() (in module statcache)
forget_except_prefix() (in module statcache)
forget_prefix() (in module statcache)
fork() (in module os)
fork() (in module pty)
forkpty() (in module os) Form (class in Tix)
format() (Formatter method)
format() (in module locale)
format() (PrettyPrinter method)
format() (Textbox method)
format_exc() (in module traceback)
format_exception() (in module traceback)
format_exception_only() (in module traceback)
format_list() (in module traceback)
format_stack() (in module traceback)
format_tb() (in module traceback)
formataddr() (in module email.Utils)
formatargspec() (in module inspect)
formatargvalues() (in module inspect)
formatdate() (in module email.Utils)
formatException() (Formatter method) Formatter (class in logging)
formatter (HTMLParser attribute)
formatter (standard module),[Link]
formatTime() (Formatter method)
formatwarning() (in module warnings)
forward() (in module turtle)
found_terminator() (async_chat method)
fp (AddressList attribute)
fpathconf() (in module os)
fpectl (extension module)
fpformat (standard module)
frame (ScrolledText attribute)
FrameType (in module types)
freeze_form() (form method)
freeze_object() (FORMS object method)
frexp() (in module math)
from_splittable() (Charset method)
frombuf() (TarInfo method)
fromchild (Popen4 attribute)
fromfd() (in module socket)
fromfile() (array method)
fromlist() (array method)
fromordinal() (date method)
fromordinal() (datetime method)
fromstring() (array method)
fromtimestamp() (date method)
fromtimestamp() (datetime method)
fromunicode() (array method)
fromutc() (time method)
fstat() (in module os)
fstatvfs() (in module os)
fsync() (in module os)
FTP (class in ftplib) ftp_open() (FTPHandler method)
ftp_proxy (environment variable) FTPHandler (class in urllib2)
ftplib (standard module)
ftruncate() (in module os)
full() (Queue method)
function() (in module new)
FunctionType (in module types)
funny_files (dircmp attribute)
gammavariate() (in module random)
garbage (in module gc)
gather() (Textbox method)
gauss() (in module random)
gc (extension module)
gdbm (built-in module),[Link],[Link]
ge() (in module operator)
generate_tokens() (in module tokenize) Generator (class in email.Generator)
GeneratorType (in module types)
genops() (in module pickletools) get() (AddressList method)
get() (Message method)
get() (mixer device method)
get() (Queue method)
get() (SafeConfigParser method),[Link]
get_all() (Message method)
get_begidx() (in module readline)
get_body_encoding() (Charset method)
get_boundary() (Message method)
get_buffer() (Packer method)
get_buffer() (Unpacker method)
get_charset() (Message method)
get_charsets() (Message method)
get_close_matches() (in module difflib)
get_completer() (in module readline)
get_completer_delims() (in module readline)
get_content_charset() (Message method)
get_content_maintype() (Message method)
get_content_subtype() (Message method)
get_content_type() (Message method)
get_current_history_length() (in module readline)
get_data() (Request method)
get_debug() (in module gc)
get_default_type() (Message method)
get_dialect() (in module csv)
get_directory() (in module fl)
get_doctest() (DocTestParser method)
get_endidx() (in module readline)
get_examples() (DocTestParser method)
get_filename() (in module fl)
get_filename() (Message method)
get_full_url() (Request method)
get_grouped_opcodes() (SequenceMatcher method)
get_history_item() (in module readline)
get_history_length() (in module readline)
get_host() (Request method)
get_ident() (in module thread)
get_line_buffer() (in module readline)
get_magic() (in module imp)
get_main_type() (Message method)
get_matching_blocks() (SequenceMatcher method)
get_method() (Request method)
get_mouse() (in module fl)
get_nonstandard_attr() (Cookie method)
get_nowait() (Queue method)
get_objects() (in module gc)
get_opcodes() (SequenceMatcher method)
get_origin_req_host() (Request method)
get_osfhandle() (in module msvcrt)
get_output_charset() (Charset method)
get_param() (Message method)
get_params() (Message method)
get_pattern() (in module fl)
get_payload() (Message method)
get_position() (Unpacker method)
get_recsrc() (mixer device method)
get_referents() (in module gc)
get_referrers() (in module gc)
get_rgbmode() (in module fl)
get_selector() (Request method)
get_socket() (Telnet method)
get_starttag_text() (HTMLParser method)
get_starttag_text() (SGMLParser method)
get_subtype() (Message method)
get_suffixes() (in module imp)
get_terminator() (async_chat method)
get_threshold() (in module gc)
get_token() (shlex method)
get_type() (Message method)
get_type() (Request method)
get_unixfrom() (Message method)
getacl() (IMAP4_stream method)
getaddr() (AddressList method)
getaddresses() (in module email.Utils)
getaddrinfo() (in module socket)
getaddrlist() (AddressList method)
getallmatchingheaders() (AddressList method)
getargspec() (in module inspect)
getargvalues() (in module inspect)
getatime() (in module os. path)
getAttribute() (Element method)
getAttributeNode() (Element method)
getAttributeNodeNS() (Element method)
getAttributeNS() (Element method)
GetBase() (xmlparser method)
getbegyx() (window method)
getboolean() (SafeConfigParser method)
getByteStream() (InputSource method)
getcaps() (in module mailcap)
getch() (in module msvcrt)
getch() (window method)
getchannels() (audio configuration method)
getCharacterStream() (InputSource method)
getche() (in module msvcrt)
getcheckinterval() (in module sys)
getChildNodes() (Node method)
getChildren() (Node method)
getclasstree() (in module inspect)
getColumnNumber() (Locator method) getcomment() (font handle method)
getcomments() (in module inspect)
getcompname() (aifc method)
getcompname() (AU_read method)
getcompname() (Wave_read method)
getcomptype() (aifc method)
getcomptype() (AU_read method)
getcomptype() (Wave_read method)
getconfig() (audio port method)
getContentHandler() (XMLReader method)
getcontext() (in module decimal)
getcontext() (MH method)
getctime() (in module os. path)
getcurrent() (Folder method)
getcwd() (in module os) getcwdu() (in module os)
getdate() (AddressList method)
getdate_tz() (AddressList method)
getdecoder() (in module codecs)
getdefaultencoding() (in module sys)
getdefaultlocale() (in module locale)
getdefaulttimeout() (in module socket)
getdlopenflags() (in module sys)
getdoc() (in module inspect)
getDOMImplementation() (in module xml.dom)
getDTDHandler() (XMLReader method)
getEffectiveLevel() (Textbox method)
getegid() (in module os)
getElementsByTagName() (Document method)
getElementsByTagName() (Element method)
getElementsByTagNameNS() (Document method)
getElementsByTagNameNS() (Element method)
getencoder() (in module codecs)
getEncoding() (InputSource method)
getencoding() (Message method)
getEntityResolver() (XMLReader method)
getenv() (in module os)
getErrorHandler() (XMLReader method)
geteuid() (in module os)
getEvent() (DOMEventStream method)
getEventCategory() (NTEventLogHandler method)
getEventType() (NTEventLogHandler method)
getException() (SAXException method)
getfd() (audio port method)
getFeature() (XMLReader method)
getfile() (in module inspect)
getfilesystemencoding() (in module sys)
getfillable() (audio port method)
getfilled() (audio port method)
getfillpoint() (audio port method)
getfirst() (FieldStorage method)
getfirstmatchingheader() (AddressList method)
getfloat() (SafeConfigParser method)
getfloatmax() (audio configuration method)
getfqdn() (in module socket)
getframeinfo() (in module inspect)
getframerate() (aifc method)
getframerate() (AU_read method)
getframerate() (Wave_read method)
getfullname() (Folder method)
getgid() (in module os)
getgrall() (in module grp)
getgrgid() (in module grp)
getgrnam() (in module grp)
getgroups() (in module os)
getheader() (AddressList method)
getheader() (HTTPResponse method)
getheaders() (HTTPResponse method)
gethostbyaddr() (in module socket),[Link]
gethostbyname() (in module socket)
gethostbyname_ex() (in module socket)
gethostname() (in module socket),[Link]
getinfo() (audio device method)
getinfo() (ZipFile method)
getinnerframes() (in module inspect)
GetInputContext() (xmlparser method)
getint() (SafeConfigParser method)
getitem() (in module operator)
getkey() (window method)
getlast() (Folder method)
getLength() (Attributes method)
getLevelName() (in module logging)
getline() (in module linecache)
getLineNumber() (Locator method)
getlist() (FieldStorage method)
getloadavg() (in module os)
getlocale() (in module locale)
getLogger() (in module logging)
getLoggerClass() (in module logging)
getlogin() (in module os)
getmaintype() (Message method)
getmark() (aifc method)
getmark() (AU_read method)
getmark() (Wave_read method)
getmarkers() (aifc method)
getmarkers() (AU_read method)
getmarkers() (Wave_read method)
getmaxyx() (window method)
getmcolor() (in module fl)
getmember() (TarFile method)
getmembers() (in module inspect)
getmembers() (TarFile method)
getMessage() (SAXException method)
getmessagefilename() (Folder method)
getMessageID() (NTEventLogHandler method)
getmodule() (in module inspect)
getmoduleinfo() (in module inspect)
getmodulename() (in module inspect)
getmouse() (in module curses)
getmro() (in module inspect)
getmtime() (in module os. path)
getname() (Chunk method)
getName() (Thread method)
getNameByQName() (AttributesNS method)
getnameinfo() (in module socket)
getNames() (Attributes method)
getnames() (TarFile method)
getnamespace() (XMLParser method)
getnchannels() (aifc method)
getnchannels() (AU_read method)
getnchannels() (Wave_read method)
getnframes() (aifc method)
getnframes() (AU_read method)
getnframes() (Wave_read method)
getopt() (in module getopt)
getopt (standard module)
getouterframes() (in module inspect)
getoutput() (in module commands)
getpagesize() (in module resource)
getparam() (Message method)
getparams() (aifc method)
getparams() (AU_read method)
getparams() (in module al)
getparams() (Wave_read method)
getparyx() (window method)
getpass() (in module getpass)
getpass (standard module)
getpath() (MH method)
getpeername() (socket method) getpgid() (in module os)
getpgrp() (in module os)
getpid() (in module os)
getplist() (Message method)
getpos() (HTMLParser method)
getppid() (in module os)
getpreferredencoding() (in module locale)
getprofile() (MH method)
getProperty() (XMLReader method)
getprotobyname() (in module socket)
getPublicId() (InputSource method)
getPublicId() (Locator method)
getpwall() (in module pwd)
getpwnam() (in module pwd)
getpwuid() (in module pwd)
getQNameByName() (AttributesNS method)
getQNames() (AttributesNS method)
getqueuesize() (audio configuration method)
getquota() (IMAP4_stream method)
getquotaroot() (IMAP4_stream method)
getrandbits() (in module random)
getrawheader() (AddressList method)
getreader() (in module codecs)
getrecursionlimit() (in module sys)
getrefcount() (in module sys)
getresponse() (HTTPResponse method)
getrlimit() (in module resource)
getrusage() (in module resource)
getsampfmt() (audio configuration method)
getsample() (in module audioop)
getsampwidth() (aifc method)
getsampwidth() (AU_read method)
getsampwidth() (Wave_read method)
getsequences() (Folder method)
getsequencesfilename() (Folder method)
getservbyname() (in module socket)
getservbyport() (in module socket)
getsid() (in module os)
getsignal() (in module signal)
getsize() (Chunk method)
getsize() (in module os. path)
getsizes() (in module imgfile)
getslice() (in module operator)
getsockname() (socket method)
getsockopt() (socket method)
getsource() (in module inspect)
getsourcefile() (in module inspect)
getsourcelines() (in module inspect)
getstate() (in module random)
getstatus() (audio port method)
getstatus() (CD player method)
getstatus() (in module commands)
getstatusoutput() (in module commands)
getstr() (window method) getstrwidth() (font handle method)
getSubject() (SMTPHandler method)
getsubtype() (Message method)
getSystemId() (InputSource method)
getSystemId() (Locator method)
getsyx() (in module curses)
gettarinfo() (TarFile method)
gettempdir() (in module tempfile)
gettempprefix() (in module tempfile)
getTestCaseNames() (TestLoader method)
gettext() (GNUTranslations method)
gettext() (in module gettext)
gettext() (NullTranslations method)
gettext (standard module)
gettimeout() (socket method)
gettrackinfo() (CD player method)
getType() (Attributes method)
gettype() (Message method)
getuid() (in module os)
getuser() (in module getpass)
getValue() (Attributes method)
getvalue() (StringIO method)
getValueByQName() (AttributesNS method)
getweakrefcount() (in module weakref)
getweakrefs() (in module weakref)
getwelcome() (FTP method)
getwelcome() (NNTPDataError method)
getwelcome() (POP3_SSL method)
getwidth() (audio configuration method)
getwin() (in module curses)
getwindowsversion() (in module sys)
getwriter() (in module codecs)
getyx() (window method)
gid (TarInfo attribute)
gl (built-in module)
GL (standard module)
glob() (in module glob)
glob (standard module),[Link]
globals() (built-in function)
globs (DocTest attribute)
gmtime() (in module time)
gname (TarInfo attribute)
gnu_getopt() (in module getopt)
gopher_open() (GopherHandler method)
gopher_proxy (environment variable)
GopherHandler (class in urllib2) gopherlib (standard module)
got (DocTestFailure attribute)
goto() (in module turtle)
grey22grey() (in module imageop)
grey2grey2() (in module imageop)
grey2grey4() (in module imageop)
grey2mono() (in module imageop)
grey42grey() (in module imageop)
group() (MatchObject method)
group() (NNTPDataError method)
groupby() (in module itertools)
groupdict() (MatchObject method)
groupindex (RegexObject attribute)
groups() (MatchObject method)
grp (built-in module)
gt() (in module operator)
guess_all_extensions() (in module mimetypes)
guess_extension() (in module mimetypes)
guess_extension() (MimeTypes method)
guess_type() (in module mimetypes) guess_type() (MimeTypes method)
gzip (standard module)
halfdelay() (in module curses)
handle() (BaseHTTPRequestHandler method)
handle() (Textbox method),[Link]
handle_accept() (dispatcher method)
handle_authentication_request() (AbstractBasicAuthHandler method)
handle_authentication_request() (AbstractDigestAuthHandler method)
handle_cdata() (XMLParser method)
handle_charref() (HTMLParser method)
handle_charref() (SGMLParser method)
handle_charref() (XMLParser method)
handle_close() (async_chat method)
handle_close() (dispatcher method)
handle_comment() (HTMLParser method)
handle_comment() (SGMLParser method)
handle_comment() (XMLParser method)
handle_connect() (dispatcher method)
handle_data() (HTMLParser method)
handle_data() (SGMLParser method)
handle_data() (XMLParser method)
handle_decl() (HTMLParser method)
handle_decl() (SGMLParser method)
handle_doctype() (XMLParser method)
handle_endtag() (HTMLParser method)
handle_endtag() (SGMLParser method)
handle_endtag() (XMLParser method)
handle_entityref() (HTMLParser method)
handle_entityref() (SGMLParser method)
handle_error() (dispatcher method)
handle_expt() (dispatcher method)
handle_image() (HTMLParser method)
handle_one_request() (BaseHTTPRequestHandler method)
handle_pi() (HTMLParser method)
handle_proc() (XMLParser method)
handle_read() (async_chat method)
handle_read() (dispatcher method)
handle_request() (SimpleXMLRPCRequestHandler method)
handle_special() (XMLParser method)
handle_startendtag() (HTMLParser method)
handle_starttag() (HTMLParser method)
handle_starttag() (SGMLParser method)
handle_starttag() (XMLParser method)
handle_write() (async_chat method)
handle_write() (dispatcher method)
handle_xml() (XMLParser method)
handleError() (SocketHandler method),[Link]
handleError() (Textbox method)
handler() (in module cgitb)
has_colors() (in module curses)
has_data() (Request method)
has_extn() (SMTP method)
has_header() (Request method)
has_header() (Sniffer method)
has_ic() (in module curses)
has_il() (in module curses)
has_ipv6 (in module socket)
has_key() (Message method)
has_key() (Queue method)
has_nonstandard_attr() (Cookie method)
has_option() (SafeConfigParser method)
has_section() (SafeConfigParser method)
hasAttributes() (Node method)
hasChildNodes() (Node method)
hascompare (in module dis)
hasconst (in module dis)
hasFeature() (DOMImplementation method)
hasfree (in module dis)
hashopen() (in module bsddb)
hasjabs (in module dis)
hasjrel (in module dis)
haslocal (in module dis)
hasname (in module dis)
have_unicode (in module test.test_support)
head() (NNTPDataError method)
Header (class in email.Header) header_encode() (Charset method)
header_encoding (in module email.Charset)
header_offset (ZipInfo attribute) HeaderParseError (exception in email.Errors)
headers (AddressList attribute)
headers (BaseHTTPRequestHandler attribute)
headers (ServerProxy attribute)
heapify() (in module heapq)
heapmin() (in module msvcrt)
heappop() (in module heapq)
heappush() (in module heapq)
heapq (standard module)
heapreplace() (in module heapq)
helo() (SMTP method)
help() (NNTPDataError method)
hexbin() (in module binhex)
hexdigest() (hmac method)
hexdigest() (md5 method)
hexdigest() (sha method)
hexdigits (in module string)
hexlify() (in module binascii)
hexversion (in module sys)
hidden() (Textbox method)
hide() (Textbox method)
hide_cookie2 (LWPCookieJar attribute)
hide_form() (form method)
hide_object() (FORMS object method)
HIGHEST_PROTOCOL (in module pickle)
hline() (window method)
HList (class in Tix) hls_to_rgb() (in module colorsys)
hmac (standard module)
HOME (environment variable),[Link]
hosts (netrc attribute)
hotshot (standard module)
hotshot.stats (standard module)
hour (datetime attribute)
hour (time attribute)
hsv_to_rgb() (in module colorsys)
HtmlDiff (class in difflib)
htmlentitydefs (standard module)
htmllib (standard module),[Link]
HTMLParser (standard module)
htonl() (in module socket)
htons() (in module socket)
http_error_301() (HTTPRedirectHandler method)
http_error_302() (HTTPRedirectHandler method)
http_error_303() (HTTPRedirectHandler method)
http_error_307() (HTTPRedirectHandler method)
http_error_401() (HTTPBasicAuthHandler method)
http_error_401() (HTTPDigestAuthHandler method)
http_error_407() (ProxyBasicAuthHandler method)
http_error_407() (ProxyDigestAuthHandler method)
http_error_\varnnn() (BaseHandler method)
http_error_default() (BaseHandler method)
http_open() (HTTPHandler method)
HTTP_PORT (in module httplib)
hypot() (in module math)
I (in module re)
ibufcount() (audio device method)
id() (TestCase method)
idcok() (window method)
ident (in module cd)
identchars (Cmd attribute)
idlok() (window method)
ifilter() (in module itertools)
ifilterfalse() (in module itertools)
ignorableWhitespace() (ContentHandler method)
ignore() (Stats method)
ignore_errors() (in module codecs)
IGNORE_EXCEPTION_DETAIL (in module doctest)
ignore_zeros (TarFile attribute)
IGNORECASE (in module re)
ihave() (NNTPDataError method)
ihooks (standard module)
imageop (built-in module)
imap() (in module itertools)
IMAP4_stream (class in imaplib) imaplib (standard module)
imgfile (built-in module)
imghdr (standard module)
immedok() (window method)
ImmutableSet (class in sets) imp (built-in module),[Link]
in_table_a1() (in module stringprep)
in_table_b1() (in module stringprep)
in_table_c11() (in module stringprep)
in_table_c11_c12() (in module stringprep)
in_table_c12() (in module stringprep)
in_table_c21() (in module stringprep)
in_table_c21_c22() (in module stringprep)
in_table_c22() (in module stringprep)
in_table_c3() (in module stringprep)
in_table_c4() (in module stringprep)
in_table_c5() (in module stringprep)
in_table_c6() (in module stringprep)
in_table_c7() (in module stringprep)
in_table_c8() (in module stringprep)
in_table_c9() (in module stringprep)
in_table_d1() (in module stringprep)
in_table_d2() (in module stringprep)
INADDR_* (in module socket)
inch() (window method)
IncrementalParser (class in xml.sax.xmlreader) indent (Example attribute)
index() (array method)
index (in module cd)
index() (list method)
index() (string method)
indexOf() (in module operator)
inet_aton() (in module socket)
inet_ntoa() (in module socket)
inet_ntop() (in module socket)
inet_pton() (in module socket)
Inexact (class in decimal)
infile (shlex attribute)
info() (in module logging)
info() (NullTranslations method)
info() (Textbox method)
infolist() (ZipFile method)
init() (in module fm)
init() (in module mimetypes)
init_builtin() (in module imp)
init_color() (in module curses)
init_frozen() (in module imp)
init_pair() (in module curses)
inited (in module mimetypes)
initial_indent (TextWrapper attribute)
initscr() (in module curses)
input() (in module fileinput)
input_charset (in module email.Charset)
InputType (in module cStringIO)
insch() (window method)
insdelln() (window method)
insert() (array method)
insert_text() (in module readline)
insertBefore() (Node method)
insertln() (window method)
insnstr() (window method)
insort() (in module bisect)
insort_left() (in module bisect)
insort_right() (in module bisect)
inspect (standard module)
insstr() (window method)
install() (in module gettext)
install() (NullTranslations method)
install_opener() (in module urllib2)
instance() (in module new)
instancemethod() (in module new)
InstanceType (in module types)
instr() (window method)
instream (shlex attribute)
int() (built-in function),[Link]
Int2AP() (in module imaplib)
interact() (in module code)
interact() (InteractiveConsole method)
interact() (Telnet method)
internal_attr (ZipInfo attribute)
Internaldate2tuple() (in module imaplib)
internalSubset (DocumentType attribute)
interrupt_main() (in module thread)
intro (Cmd attribute)
IntType (in module types)
inv() (in module operator)
InvalidOperation (class in decimal)
invert() (in module operator)
ioctl() (in module fcntl)
IP_* (in module socket)
IPPORT_* (in module socket)
IPPROTO_* (in module socket)
IPV6_* (in module socket)
is_() (in module operator)
is_blocked() (DefaultCookiePolicy method)
is_builtin() (in module imp)
IS_CHARACTER_JUNK() (in module difflib)
is_data() (MultiFile method)
is_empty() (fifo method)
is_expired() (Cookie method)
is_frozen() (in module imp)
is_jython (in module test.test_support)
IS_LINE_JUNK() (in module difflib)
is_linetouched() (window method)
is_multipart() (Message method)
is_not() (in module operator)
is_not_allowed() (DefaultCookiePolicy method)
is_resource_enabled() (in module test.test_support)
is_tarfile() (in module tarfile)
is_unverifiable() (Request method)
is_wintouched() (window method)
is_zipfile() (in module zipfile)
isabs() (in module os. path)
isAlive() (Thread method)
isalnum() (in module curses. ascii)
isalnum() (string method)
isalpha() (in module curses. ascii)
isalpha() (string method)
isascii() (in module curses. ascii)
isatty() (Chunk method)
isatty() (file method)
isatty() (in module os)
isblank() (in module curses. ascii)
isblk() (TarInfo method)
isbuiltin() (in module inspect)
isCallable() (in module operator)
ischr() (TarInfo method)
isclass() (in module inspect)
iscntrl() (in module curses. ascii)
iscode() (in module inspect)
iscomment() (AddressList method)
isctrl() (in module curses. ascii)
isDaemon() (Thread method)
isdatadescriptor() (in module inspect)
isdev() (TarInfo method)
isdigit() (in module curses. ascii)
isdigit() (string method)
isdir() (in module os. path)
isdir() (TarInfo method)
isenabled() (in module gc)
isEnabledFor() (Textbox method)
isendwin() (in module curses)
ISEOF() (in module token)
isexpr() (AST method)
isexpr() (in module parser)
isfifo() (TarInfo method)
isfile() (in module os. path)
isfile() (TarInfo method)
isfirstline() (in module fileinput)
isframe() (in module inspect)
isfunction() (in module inspect)
isgraph() (in module curses. ascii)
isheader() (AddressList method)
iskeyword() (in module keyword)
islast() (AddressList method)
isleap() (in module calendar)
islice() (in module itertools)
islink() (in module os. path)
islnk() (TarInfo method)
islower() (in module curses. ascii)
islower() (string method)
isMappingType() (in module operator)
ismeta() (in module curses. ascii)
ismethod() (in module inspect)
ismethoddescriptor() (in module inspect)
ismodule() (in module inspect)
ismount() (in module os. path)
ISNONTERMINAL() (in module token)
isNumberType() (in module operator)
isocalendar() (date method)
isocalendar() (datetime method)
isoformat() (date method)
isoformat() (datetime method)
isoformat() (time method)
isoweekday() (date method)
isoweekday() (datetime method)
isprint() (in module curses. ascii)
ispunct() (in module curses. ascii)
isqueued() (in module fl)
isreadable() (in module pprint)
isreadable() (PrettyPrinter method)
isrecursive() (in module pprint)
isrecursive() (PrettyPrinter method)
isreg() (TarInfo method)
isReservedKey() (Morsel method)
isroutine() (in module inspect)
isSameNode() (Node method)
isSequenceType() (in module operator)
isSet() (Event method)
isspace() (in module curses. ascii)
isspace() (string method)
isstdin() (in module fileinput)
issuite() (AST method)
issuite() (in module parser)
issym() (TarInfo method)
ISTERMINAL() (in module token)
istitle() (string method)
istraceback() (in module inspect)
isupper() (in module curses. ascii)
isupper() (string method)
isxdigit() (in module curses. ascii)
item() (NamedNodeMap method)
item() (NodeList method)
itemgetter() (in module operator)
items() (Message method)
items() (SafeConfigParser method),[Link]
itemsize (array attribute)
itertools (standard module)
izip() (in module itertools)
java_ver() (in module platform)
join() (in module os. path)
join() (in module string)
join() (string method)
join() (Thread method)
joinfields() (in module string)
jpeg (built-in module)
js_output() (BaseCookie method)
js_output() (Morsel method)
jumpahead() (in module random)
kbhit() (in module msvcrt)
KDEDIR (environment variable)
key (Morsel attribute)
keyname() (in module curses)
keypad() (window method)
keys() (Message method)
keys() (Queue method)
keyword (standard module)
kill() (in module os)
killchar() (in module curses)
killpg() (in module os)
knee (module)
knownfiles (in module mimetypes)
kwlist (in module keyword)
LambdaType (in module types)
LANG (environment variable),[Link],[Link],[Link],[Link]
LANGUAGE (environment variable),[Link]
last() (dbhash method)
last (MultiFile attribute)
last() (NNTPDataError method)
last() (Queue method)
last_traceback (in module sys)
last_type (in module sys)
last_value (in module sys)
lastChild (Node attribute)
lastcmd (Cmd attribute)
lastgroup (MatchObject attribute)
lastindex (MatchObject attribute)
lastpart() (MimeWriter method)
LC_ALL (environment variable),[Link]
LC_ALL (in module locale)
LC_COLLATE (in module locale)
LC_CTYPE (in module locale)
LC_MESSAGES (environment variable),[Link]
LC_MESSAGES (in module locale)
LC_MONETARY (in module locale)
ldexp() (in module math)
ldgettext() (in module gettext)
ldngettext() (in module gettext)
le() (in module operator)
leapdays() (in module calendar)
leaveok() (window method)
left() (in module turtle)
left_list (dircmp attribute)
left_only (dircmp attribute)
len() (built-in function),[Link],[Link]
length (NamedNodeMap attribute)
length (NodeList attribute)
letters (in module string)
level (MultiFile attribute)
lgettext() (in module gettext)
lgettext() (NullTranslations method)
libc_ver() (in module platform)
library (in module dbm)
lin2adpcm() (in module audioop)
lin2adpcm3() (in module audioop)
lin2lin() (in module audioop)
lin2ulaw() (in module audioop)
linecache (standard module)
lineno (class descriptor attribute)
lineno (DocTest attribute)
lineno (Example attribute)
lineno (ExpatError attribute)
lineno (shlex attribute)
LINES (environment variable),[Link]
linesep (in module os)
lineterminator (Dialect attribute)
link() (in module os)
linkname (TarInfo attribute)
list() (IMAP4_stream method)
list() (NNTPDataError method)
list() (POP3_SSL method)
list() (TarFile method)
list_dialects() (in module csv)
listallfolders() (MH method)
listallsubfolders() (MH method)
listdir() (in module dircache)
listdir() (in module os)
listen() (dispatcher method)
listen() (in module logging)
listen() (socket method)
listfolders() (MH method)
listmessages() (Folder method) ListNoteBook (class in Tix)
listsubfolders() (MH method)
ListType (in module types)
ljust() (in module string)
ljust() (string method)
LK_LOCK (in module msvcrt)
LK_NBLCK (in module msvcrt)
LK_NBRLCK (in module msvcrt)
LK_RLCK (in module msvcrt)
LK_UNLCK (in module msvcrt)
LNAME (environment variable)
lngettext() (GNUTranslations method) lngettext() (in module gettext)
lngettext() (NullTranslations method)
load() (BaseCookie method)
load() (FileCookieJar method)
load() (in module hotshot.stats)
load() (in module marshal)
load() (in module pickle)
load() (Unpickler method)
load_compiled() (in module imp)
load_dynamic() (in module imp)
load_module() (in module imp)
load_source() (in module imp)
loads() (in module marshal)
loads() (in module pickle)
loads() (in module xmlrpclib)
loadTestsFromModule() (TestLoader method)
loadTestsFromName() (TestLoader method)
loadTestsFromNames() (TestLoader method)
loadTestsFromTestCase() (TestLoader method)
local (class in threading)
LOCALE (in module re)
locale (standard module)
localeconv() (in module locale)
localName (Attr attribute)
localName (Node attribute)
lock() (mutex method)
lock_held() (in module imp)
locked() (lock method)
lockf() (in module fcntl),[Link]
locking() (in module msvcrt)
LockType (in module thread)
log() (in module cmath) log() (in module logging)
log() (in module math)
log() (Textbox method)
log10() (in module cmath)
log10() (in module math)
log_data_time_string() (BaseHTTPRequestHandler method)
log_error() (BaseHTTPRequestHandler method)
log_message() (BaseHTTPRequestHandler method)
log_request() (BaseHTTPRequestHandler method)
logging (standard module)
login() (FTP method)
login() (IMAP4_stream method)
login() (SMTP method)
login_cram_md5() (IMAP4_stream method)
LOGNAME (environment variable),[Link]
lognormvariate() (in module random)
logout() (IMAP4_stream method) LogRecord (class in logging)
long() (built-in function),[Link],[Link]
longimagedata() (in module rgbimg)
longname() (in module curses)
longstoimage() (in module rgbimg)
LongType (in module types)
lookup() (in module codecs)
lookup() (in module unicodedata)
lookup_error() (in module codecs)
loop() (in module asyncore)
lower() (in module string)
lower() (string method)
lowercase (in module string)
lseek() (in module os)
lshift() (in module operator)
lstat() (in module os)
lstrip() (in module string)
lstrip() (string method)
lsub() (IMAP4_stream method)
lt() (in module operator)
M (in module re)
mac_ver() (in module platform)
machine() (in module platform)
macros (netrc attribute)
mailbox (standard module),[Link]
MailmanProxy (class in smtpd) main() (in module py_compile)
main() (in module unittest)
major() (in module os)
make_cookies() (CookieJar method)
make_file() (in module difflib)
make_form() (in module fl)
make_header() (in module email.Header)
make_msgid() (in module email.Utils)
make_parser() (in module xml.sax)
make_table() (in module difflib)
makedev() (in module os)
makedirs() (in module os)
makefile() (socket method)
makefolder() (MH method)
makeLogRecord() (in module logging)
makePickle() (SocketHandler method)
makeRecord() (Textbox method)
makeSocket() (DatagramHandler method)
makeSocket() (SocketHandler method)
maketrans() (in module string)
map_table_b2() (in module stringprep)
map_table_b3() (in module stringprep)
mapcolor() (in module fl)
maps() (in module nis)
marshal (built-in module)
match() (in module nis)
match() (in module re)
match() (RegexObject method)
math (built-in module),[Link],[Link]
max() (Context method)
max (date attribute)
max (datetime attribute)
max() (Decimal method) max() (in module audioop)
max (time attribute)
max (timedelta attribute)
MAX_INTERPOLATION_DEPTH (in module ConfigParser)
maxarray (Repr attribute)
maxdeque (Repr attribute)
maxdict (Repr attribute)
maxfrozenset (Repr attribute)
maxint (in module sys)
MAXLEN (in module mimify)
maxlevel (Repr attribute)
maxlist (Repr attribute)
maxlong (Repr attribute)
maxother (Repr attribute)
maxpp() (in module audioop)
maxset (Repr attribute)
maxstring (Repr attribute)
maxtuple (Repr attribute)
maxunicode (in module sys)
MAXYEAR (in module datetime)
MB_ICONASTERISK (in module winsound)
MB_ICONEXCLAMATION (in module winsound)
MB_ICONHAND (in module winsound)
MB_ICONQUESTION (in module winsound)
MB_OK (in module winsound)
md5 (built-in module)
md5() (in module md5)
Message (in module mimetools)
MessageBeep() (in module winsound)
MessageClass (BaseHTTPRequestHandler attribute)
methods (class descriptor attribute)
MethodType (in module types)
microsecond (datetime attribute)
microsecond (time attribute)
mime_decode_header() (in module mimify)
mime_encode_header() (in module mimify)
mimetypes (standard module) MimeWriter (class in MimeWriter)
MimeWriter (standard module)
mimify() (in module mimify)
mimify (standard module)
min() (Context method)
min (date attribute)
min (datetime attribute)
min() (Decimal method)
min (time attribute)
min (timedelta attribute)
minmax() (in module audioop)
minor() (in module os)
minus() (Context method)
minute (datetime attribute)
minute (time attribute)
MINYEAR (in module datetime)
mirrored() (in module unicodedata)
misc_header (Cmd attribute)
MIXERDEV (environment variable) mkd() (FTP method)
mkdir() (in module os)
mkdtemp() (in module tempfile)
mkfifo() (in module os)
mknod() (in module os)
mkstemp() (in module tempfile) mktemp() (in module tempfile)
mktime() (in module time)
mktime_tz() (in module email.Utils)
mktime_tz() (in module rfc822)
mmap (built-in module)
mmap() (in module mmap) MmdfMailbox (class in mailbox)
mod() (in module operator)
mode (file attribute)
mode (TarInfo attribute)
modf() (in module math)
modified() (RobotFileParser method)
module (class descriptor attribute)
module (function descriptor attribute)
module() (in module new)
modules (in module sys)
ModuleType (in module types)
MON_1 ... MON_12 (in module locale)
mono2grey() (in module imageop)
month (date attribute)
month (datetime attribute)
month() (in module calendar) monthcalendar() (in module calendar)
monthrange() (in module calendar)
more() (simple_producer method) Morsel (class in Cookie)
mouseinterval() (in module curses)
mousemask() (in module curses)
move() (Textbox method)
move() (window method)
movemessage() (Folder method)
MozillaCookieJar (class in cookielib) msftoblock() (CD player method)
msftoframe() (in module cd)
msg (in module httplib)
msg() (Telnet method)
MSG_* (in module socket)
msvcrt (built-in module)
mt_interact() (Telnet method)
mtime() (RobotFileParser method)
mtime (TarInfo attribute)
mul() (in module audioop)
multifile (standard module)
MULTILINE (in module re)
MultipartConversionError (exception in email.Errors) multiply() (Context method)
mvderwin() (window method)
mvwin() (window method)
myrights() (IMAP4_stream method)
name (Attr attribute)
name (class descriptor attribute)
name (Cookie attribute)
name (DocTest attribute)
name (DocumentType attribute)
name (file attribute)
name (function descriptor attribute)
name (in module os)
name2codepoint (in module htmlentitydefs)
NamedTemporaryFile() (in module tempfile)
namelist() (ZipFile method)
nameprep() (in module encodings. idna)
namespace() (IMAP4_stream method)
namespaceURI (Node attribute)
napms() (in module curses)
ndiff() (in module difflib)
ne() (in module operator)
neg() (in module operator) netrc (class in netrc)
netrc (standard module)
netscape (LWPCookieJar attribute)
new (built-in module)
new() (in module hmac)
new() (in module md5)
new() (in module sha)
new_alignment() (writer method)
new_font() (writer method)
new_margin() (writer method)
new_module() (in module imp)
new_panel() (in module curses. panel)
new_spacing() (writer method)
new_styles() (writer method)
newconfig() (in module al)
newgroups() (NNTPDataError method)
newlines (file attribute)
newnews() (NNTPDataError method)
newpad() (in module curses)
newwin() (in module curses)
next() (csv reader method)
next() (dbhash method)
next() (file method)
next() (iterator method)
next() (mailbox method)
next() (MultiFile method)
next() (NNTPDataError method)
next() (Queue method)
next() (TarFile method)
nextfile() (in module fileinput)
nextkey() (in module gdbm)
nextpart() (MimeWriter method)
nextSibling (Node attribute)
ngettext() (NullTranslations method)
NI_* (in module socket)
nice() (in module os)
nis (extension module)
nl() (in module curses)
NL (in module tokenize)
nl_langinfo() (in module locale)
nlargest() (in module heapq)
nlst() (FTP method)
Node (class in compiler.ast) node() (in module platform)
nodelay() (window method)
nodeName (Node attribute)
nodeType (Node attribute)
nodeValue (Node attribute)
NODISC (in module cd)
noecho() (in module curses)
NOEXPR (in module locale)
nofill (HTMLParser attribute)
nok_builtin_names (RExec attribute)
noload() (Unpickler method)
nonblock() (audio device method)
NoneType (in module types)
nonl() (in module curses)
noop() (IMAP4_stream method)
noop() (POP3_SSL method)
noqiflush() (in module curses)
noraw() (in module curses)
normalize() (Context method)
normalize() (Decimal method)
normalize() (in module locale)
NORMALIZE_WHITESPACE (in module doctest)
normalvariate() (in module random)
normcase() (in module os. path)
normpath() (in module os. path)
not_() (in module operator)
notationDecl() (DTDHandler method)
NotationDeclHandler() (xmlparser method)
notations (DocumentType attribute)
notify() (Condition method)
notifyAll() (Condition method)
notimeout() (window method)
NotStandaloneHandler() (xmlparser method)
noutrefresh() (window method)
now() (datetime method)
NSIG (in module signal)
nsmallest() (in module heapq) NTEventLogHandler (class in logging)
ntohl() (in module socket)
ntohs() (in module socket)
numeric() (in module unicodedata)
nurbscurve() (in module gl)
nurbssurface() (in module gl)
nvarray() (in module gl) O
O_NDELAY (in module os) O_NOCTTY (in module os)
O_NOINHERIT (in module os)
O_NONBLOCK (in module os)
O_RANDOM (in module os)
O_RDONLY (in module os)
O_RDWR (in module os)
O_RSYNC (in module os)
O_SEQUENTIAL (in module os)
O_SHORT_LIVED (in module os)
O_SYNC (in module os)
O_TEMPORARY (in module os)
O_TEXT (in module os)
O_TRUNC (in module os)
O_WRONLY (in module os)
obufcount() (audio device method),[Link]
obuffree() (audio device method)
octdigits (in module string)
offset (ExpatError attribute)
OK (in module curses)
ok_builtin_modules (RExec attribute)
ok_file_types (RExec attribute)
ok_path (RExec attribute)
ok_posix_names (RExec attribute)
ok_sys_names (RExec attribute)
onecmd() (Cmd method)
open() (built-in function) open() (IMAP4_stream method)
open() (in module aifc)
open() (in module cd)
open() (in module codecs)
open() (in module dbhash)
open() (in module dbm)
open() (in module dl)
open() (in module dumbdbm)
open() (in module gdbm)
open() (in module os)
open() (in module ossaudiodev)
open() (in module posixfile)
open() (in module shelve)
open() (in module sunau)
open() (in module sunaudiodev)
open() (TarFile method)
open() (Telnet method)
open() (Template method)
open() (URLopener method)
open_osfhandle() (in module msvcrt)
open_unknown() (URLopener method)
opendir() (in module dircache) OpenerDirector (class in urllib2)
openfolder() (MH method)
openfp() (in module sunau)
openfp() (in module wave)
OpenKey() (in module _winreg)
OpenKeyEx() (in module _winreg)
openlog() (in module syslog)
openmessage() (Message method)
openmixer() (in module ossaudiodev)
openport() (in module al)
openpty() (in module os)
openpty() (in module pty)
operator (built-in module)
opname (in module dis) OptionMenu (class in Tix)
options (Example attribute)
options() (SafeConfigParser method)
optionxform() (SafeConfigParser method)
optparse (standard module)
or_() (in module operator)
ordered_attributes (xmlparser attribute)
os (standard module),[Link],[Link]
os.path (standard module)
ossaudiodev (built-in module)
OSSAudioError output() (BaseCookie method)
output() (Morsel method)
output_charset (in module email.Charset)
output_charset() (NullTranslations method)
output_codec (in module email.Charset)
output_difference() (OutputChecker method) OutputChecker (class in doctest)
OutputString() (Morsel method)
OutputType (in module cStringIO)
Overflow (class in decimal)
overlay() (window method)
overwrite() (window method)
P_DETACH (in module os)
P_NOWAIT (in module os)
P_NOWAITO (in module os)
P_OVERLAY (in module os)
P_WAIT (in module os)
pack() (in module struct)
pack_array() (Packer method)
pack_bytes() (Packer method)
pack_double() (Packer method)
pack_farray() (Packer method)
pack_float() (Packer method)
pack_fopaque() (Packer method)
pack_fstring() (Packer method)
pack_list() (Packer method)
pack_opaque() (Packer method)
pack_string() (Packer method)
PAGER (environment variable)
pair_content() (in module curses)
pair_number() (in module curses) PanedWindow (class in Tix)
pardir (in module os)
parent (BaseHandler attribute)
parentNode (Node attribute)
paretovariate() (in module random) parse() (DocTestParser method)
parse() (in module cgi)
parse() (in module compiler)
parse() (in module xml.dom.minidom)
parse() (in module xml.dom.pulldom)
parse() (in module xml.sax)
parse() (Parser method)
parse() (RobotFileParser method)
Parse() (xmlparser method)
parse() (XMLReader method)
parse_and_bind() (in module readline)
parse_header() (in module cgi)
parse_multipart() (in module cgi)
parse_qs() (in module cgi)
parse_qsl() (in module cgi)
parseaddr() (in module email.Utils)
parseaddr() (in module rfc822)
parsedate() (in module email.Utils)
parsedate() (in module rfc822)
parsedate_tz() (in module email.Utils)
parsedate_tz() (in module rfc822)
parseFile() (in module compiler)
ParseFile() (xmlparser method)
ParseFlags() (in module imaplib)
parseframe() (CD parser method)
parser (built-in module)
Parser (class in email.Parser) ParserCreate() (in module xml.parsers.expat)
parsesequence() (Folder method)
parsestr() (Parser method)
parseString() (in module xml.dom.minidom)
parseString() (in module xml.dom.pulldom)
parseString() (in module xml.sax)
partial() (IMAP4_stream method)
pass_() (POP3_SSL method)
path (BaseHTTPRequestHandler attribute)
path (Cookie attribute)
PATH (environment variable),[Link],[Link],[Link],[Link],[Link],[Link],[Link],[Link]
path (in module os)
path (in module sys)
path_return_ok() (CookiePolicy method)
pathconf() (in module os)
pathconf_names (in module os)
pathname2url() (in module urllib)
pathsep (in module os)
pattern (RegexObject attribute)
pause() (in module signal)
PAUSED (in module cd)
pdb (standard module) Pen (class in turtle)
pformat() (in module pprint)
pformat() (PrettyPrinter method)
pi (in module cmath)
pi (in module math)
pick() (in module gl)
pickle() (in module copy_reg)
pickle (standard module),[Link],[Link],[Link],[Link],[Link]
pid (Popen attribute)
pid (Popen4 attribute)
pipe() (in module os)
pipes (standard module)
PKG_DIRECTORY (in module imp)
pkgutil (standard module)
platform() (in module platform)
platform (in module sys)
platform (standard module)
play() (CD player method)
playabs() (CD player method)
PLAYING (in module cd)
PlaySound() (in module winsound)
playtrack() (CD player method)
playtrackabs() (CD player method)
plock() (in module os)
plus() (Context method)
pm() (in module pdb)
pnum (in module cd)
poll() (in module select)
poll() (LogRecord method)
poll() (Popen method)
poll() (Popen4 method)
pop() (array method)
pop() (fifo method)
pop() (MultiFile method)
pop() (SystemRandom method)
pop_font() (formatter method)
pop_margin() (formatter method)
pop_source() (shlex method)
pop_style() (formatter method)
popen() (in module os),[Link]
popen() (in module platform)
popen2() (in module os)
popen2() (in module popen2)
popen2 (standard module) Popen3 (class in popen2)
popen3() (in module os)
popen3() (in module popen2) Popen4 (class in popen2)
popen4() (in module os)
popen4() (in module popen2)
popleft() (SystemRandom method)
poplib (standard module) PopupMenu (class in Tix)
port (Cookie attribute)
port_specified (Cookie attribute) PortableUnixMailbox (class in mailbox)
posix (built-in module)
posix (TarFile attribute)
posixfile (built-in module)
post() (audio device method)
post() (NNTPDataError method)
post_mortem() (in module pdb)
postcmd() (Cmd method)
postloop() (Cmd method)
pow() (in module math)
pow() (in module operator)
power() (Context method)
pprint() (in module pprint)
pprint() (PrettyPrinter method)
pprint (standard module)
prcal() (in module calendar)
preamble (in module email.Message)
precmd() (Cmd method)
prefix (Attr attribute)
preloop() (Cmd method)
preorder() (ASTVisitor method)
prepare_input_source() (in module xml.sax.saxutils)
prepend() (Template method)
PrettyPrinter (class in pprint) preventremoval() (CD player method)
previous() (dbhash method)
previous() (Queue method)
previousSibling (Node attribute)
print_callees() (Stats method)
print_callers() (Stats method)
print_directory() (in module cgi)
print_environ() (in module cgi)
print_environ_usage() (in module cgi)
print_exception() (in module traceback)
print_form() (in module cgi)
print_last() (in module traceback)
print_stack() (in module traceback)
print_stats() (Stats method)
print_tb() (in module traceback)
printable (in module string)
printdir() (ZipFile method)
prmonth() (in module calendar)
process_message() (SMTPServer method)
processingInstruction() (ContentHandler method)
ProcessingInstructionHandler() (xmlparser method)
processor() (in module platform)
Profile (class in hotshot) profile (standard module)
prompt (Cmd attribute)
prompt_user_passwd() (FancyURLopener method)
propagate (in module logging)
property_declaration_handler (in module xml.sax.handler)
property_dom_node (in module xml.sax.handler)
property_lexical_handler (in module xml.sax.handler)
property_xml_string (in module xml.sax.handler)
protocol_version (BaseHTTPRequestHandler attribute)
PROTOCOL_VERSION (IMAP4_stream attribute)
proxy() (in module weakref)
ProxyType (in module weakref)
ProxyTypes (in module weakref)
prstr() (in module fm)
ps1 (in module sys)
ps2 (in module sys)
pstats (standard module)
ptime (in module cd)
pty (standard module),[Link]
punctuation (in module string)
PureProxy (class in smtpd) push() (async_chat method)
push() (fifo method)
push() (InteractiveConsole method)
push() (MultiFile method)
push_alignment() (formatter method)
push_font() (formatter method)
push_margin() (formatter method)
push_source() (shlex method)
push_style() (formatter method)
push_token() (shlex method)
push_with_producer() (async_chat method)
put() (Queue method)
put_nowait() (Queue method)
putch() (in module msvcrt)
putenv() (in module os)
putheader() (HTTPResponse method)
putp() (in module curses)
putrequest() (HTTPResponse method)
putsequences() (Folder method)
putwin() (window method)
pwlcurve() (in module gl)
py_compile (standard module)
PY_COMPILED (in module imp)
PY_FROZEN (in module imp)
PY_RESOURCE (in module imp)
PY_SOURCE (in module imp)
pyclbr (standard module)
pydoc (standard module)
pyexpat (built-in module)
python_build() (in module platform)
python_compiler() (in module platform)
PYTHON_DOM (environment variable)
python_version() (in module platform)
python_version_tuple() (in module platform)
PYTHONDOCS (environment variable)
PYTHONPATH (environment variable),[Link],[Link],[Link]
PYTHONSTARTUP (environment variable),[Link],[Link]
PYTHONY2K (environment variable),[Link],[Link]
PyZipFile (class in zipfile)
qdevice() (in module fl)
qenter() (in module fl)
qiflush() (in module curses)
qread() (in module fl)
qreset() (in module fl)
qsize() (Queue method)
qtest() (in module fl)
quantize() (Context method)
quantize() (Decimal method)
QueryInfoKey() (in module _winreg)
queryparams() (in module al)
QueryValue() (in module _winreg)
QueryValueEx() (in module _winreg) Queue (class in Queue)
Queue (standard module)
quick_ratio() (SequenceMatcher method)
quit() (FTP method)
quit() (NNTPDataError method)
quit() (POP3_SSL method)
quit() (SMTP method)
quopri (standard module)
quote() (in module email.Utils)
quote() (in module rfc822)
quote() (in module urllib)
QUOTE_ALL (in module csv)
QUOTE_MINIMAL (in module csv)
QUOTE_NONE (in module csv)
QUOTE_NONNUMERIC (in module csv)
quote_plus() (in module urllib)
quoteattr() (in module xml.sax.saxutils)
quotechar (Dialect attribute)
quotes (shlex attribute)
quoting (Dialect attribute)
r_eval() (RExec method)
r_exec() (RExec method)
r_execfile() (RExec method)
r_import() (RExec method)
R_OK (in module os)
r_open() (RExec method)
r_reload() (RExec method)
r_unload() (RExec method)
radians() (in module math)
radians() (in module turtle)
RADIXCHAR (in module locale)
randint() (in module random)
randint() (in module whrandom)
random() (in module random)
random() (in module whrandom)
random (standard module)
randrange() (in module random)
ratecv() (in module audioop)
ratio() (SequenceMatcher method)
raw() (in module curses)
raw_input() (InteractiveConsole method)
RawConfigParser (class in ConfigParser) RawPen (class in turtle)
re (MatchObject attribute)
re (standard module),[Link],[Link],[Link]
read() (array method)
read() (audio device method),[Link]
read() (BZ2File method)
read() (Chunk method)
read() (file method)
read() (HTTPResponse method)
read() (IMAP4_stream method)
read() (in module imgfile) read() (in module os)
read() (LogRecord method)
read() (MimeTypes method)
read() (MultiFile method)
read() (Queue method)
read() (RobotFileParser method)
read() (SafeConfigParser method)
read() (StreamReader method)
read() (ZipFile method)
read_all() (Telnet method)
read_byte() (Queue method)
read_eager() (Telnet method)
read_history_file() (in module readline)
read_init_file() (in module readline)
read_lazy() (Telnet method)
read_mime_types() (in module mimetypes)
read_sb_data() (Telnet method)
read_some() (Telnet method)
read_token() (shlex method)
read_until() (Telnet method)
read_very_eager() (Telnet method)
read_very_lazy() (Telnet method)
readable() (async_chat method)
readable() (dispatcher method)
readda() (CD player method)
reader() (in module csv)
readfp() (MimeTypes method)
readfp() (SafeConfigParser method)
readframes() (aifc method)
readframes() (AU_read method)
readframes() (Wave_read method) readline (built-in module)
readline() (BZ2File method)
readline() (file method)
readline() (IMAP4_stream method)
readline() (MultiFile method)
readline() (Queue method)
readline() (StreamReader method)
readlines() (BZ2File method)
readlines() (file method)
readlines() (MultiFile method)
readlines() (StreamReader method)
readlink() (in module os)
readmodule() (in module pyclbr)
readmodule_ex() (in module pyclbr)
readsamps() (audio port method)
readscaled() (in module imgfile)
READY (in module cd)
real_quick_ratio() (SequenceMatcher method)
realpath() (in module os. path)
reason (in module httplib)
reccontrols() (mixer device method)
recent() (IMAP4_stream method)
rectangle() (in module curses. textpad)
recv() (dispatcher method)
recv() (socket method)
recvfrom() (socket method)
redirect_request() (HTTPRedirectHandler method)
redisplay() (in module readline)
redraw_form() (form method)
redraw_object() (FORMS object method)
redrawln() (window method)
redrawwin() (window method)
ReferenceType (in module weakref)
refilemessages() (Folder method)
refill_buffer() (async_chat method)
refresh() (window method)
register() (in module atexit)
register() (in module codecs)
register_dialect() (in module csv)
register_error() (in module codecs)
register_function() (SimpleXMLRPCRequestHandler method)
register_function() (SimpleXMLRPCServer method)
register_instance() (SimpleXMLRPCRequestHandler method)
register_instance() (SimpleXMLRPCServer method)
register_introspection_functions() (SimpleXMLRPCRequestHandler method),[Link]
register_multicall_functions() (SimpleXMLRPCRequestHandler method),[Link]
register_optionflag() (in module doctest)
registerDOMImplementation() (in module xml.dom)
RegLoadKey() (in module _winreg)
release() (Condition method)
release() (Semaphore method)
release() (Textbox method)
release() (Timer method),[Link]
release_lock() (in module imp)
reload() (built-in function),[Link],[Link],[Link]
remainder() (Context method)
remainder_near() (Context method)
remainder_near() (Decimal method)
remove() (array method)
remove_history_item() (in module readline)
remove_option() (SafeConfigParser method)
remove_section() (SafeConfigParser method)
removeAttribute() (Element method)
removeAttributeNode() (Element method)
removeAttributeNS() (Element method)
removecallback() (CD parser method)
removeChild() (Node method)
removedirs() (in module os)
removeFilter() (Textbox method),[Link]
removeHandler() (Textbox method)
removemessages() (Folder method)
rename() (FTP method)
rename() (IMAP4_stream method)
rename() (in module os)
renames() (in module os)
reorganize() (in module gdbm)
repeat() (in module itertools)
repeat() (in module operator)
repeat() (Timer method)
replace() (date method)
replace() (datetime method)
replace() (in module string)
replace() (string method)
replace() (Textbox method)
replace() (time method)
replace_errors() (in module codecs)
replace_header() (Message method)
replace_history_item() (in module readline)
replace_whitespace (TextWrapper attribute)
replaceChild() (Node method)
report() (dircmp method)
REPORT_CDIFF (in module doctest)
report_failure() (DocTestRunner method)
report_full_closure() (dircmp method)
REPORT_NDIFF (in module doctest)
REPORT_ONLY_FIRST_FAILURE (in module doctest)
report_partial_closure() (dircmp method)
report_start() (DocTestRunner method)
report_success() (DocTestRunner method)
REPORT_UDIFF (in module doctest)
report_unbalanced() (SGMLParser method)
report_unexpected_exception() (DocTestRunner method)
REPORTING_FLAGS (in module doctest)
Repr (class in repr)
repr() (in module repr) repr() (Repr method)
repr (standard module)
repr1() (Repr method) Request (class in urllib2)
request() (HTTPResponse method)
request_version (BaseHTTPRequestHandler attribute)
requires() (in module test.test_support)
reserved (ZipInfo attribute)
reset() (audio device method)
reset() (DOMEventStream method)
reset() (IncrementalParser method)
reset() (Packer method)
reset() (SGMLParser method)
reset() (StreamReader method)
reset() (StreamWriter method)
reset() (Template method)
reset() (Unpacker method)
reset() (XMLParser method)
reset_prog_mode() (in module curses)
reset_shell_mode() (in module curses)
resetbuffer() (InteractiveConsole method)
resetlocale() (in module locale)
resetparser() (CD parser method)
resetwarnings() (in module warnings)
resize() (Queue method)
resolution (date attribute)
resolution (datetime attribute)
resolution (time attribute)
resolution (timedelta attribute)
resolveEntity() (EntityResolver method)
resource (built-in module)
response() (IMAP4_stream method)
responses (BaseHTTPRequestHandler attribute)
restore() (in module difflib)
retr() (POP3_SSL method)
retrbinary() (FTP method)
retrieve() (URLopener method)
retrlines() (FTP method)
return_ok() (CookiePolicy method)
returncode (Popen attribute)
returns_unicode (xmlparser attribute)
reverse() (array method)
reverse() (in module audioop)
reverse_order() (Stats method)
revert() (FileCookieJar method)
rewind() (aifc method)
rewind() (AU_read method)
rewind() (Wave_read method)
rewindbody() (AddressList method)
RExec (class in rexec)
rexec (standard module),[Link]
rfc2965 (LWPCookieJar attribute)
rfc822 (standard module),[Link]
rfile (BaseHTTPRequestHandler attribute)
rfind() (in module string)
rfind() (string method)
rgb_to_hls() (in module colorsys)
rgb_to_hsv() (in module colorsys)
rgb_to_yiq() (in module colorsys)
rgbimg (built-in module)
right() (in module turtle)
right_list (dircmp attribute)
right_only (dircmp attribute)
rindex() (in module string)
rindex() (string method)
rjust() (in module string)
rjust() (string method)
rlcompleter (standard module)
rlecode_hqx() (in module binascii)
rledecode_hqx() (in module binascii)
RLIMIT_AS (in module resource)
RLIMIT_CORE (in module resource)
RLIMIT_CPU (in module resource)
RLIMIT_DATA (in module resource)
RLIMIT_FSIZE (in module resource)
RLIMIT_MEMLOCK (in module resource)
RLIMIT_NOFILE (in module resource)
RLIMIT_NPROC (in module resource)
RLIMIT_OFILE (in module resource)
RLIMIT_RSS (in module resource)
RLIMIT_STACK (in module resource)
RLIMIT_VMEM (in module resource)
RLock() (in module threading)
rmd() (FTP method)
rmdir() (in module os)
rms() (in module audioop)
rmtree() (in module shutil)
rnopen() (in module bsddb) RobotFileParser (class in robotparser)
robotparser (standard module)
rotate() (SystemRandom method)
Rounded (class in decimal)
rpop() (POP3_SSL method)
rset() (POP3_SSL method)
rshift() (in module operator)
rsplit() (in module string)
rsplit() (string method)
rstrip() (in module string)
rstrip() (string method)
RTLD_LAZY (in module dl)
RTLD_NOW (in module dl)
ruler (Cmd attribute)
run() (DocTestRunner method)
run() (in module pdb)
run() (in module profile)
run() (Profile method)
run() (scheduler method)
run() (TestCase method)
run() (TestSuite method)
run() (Thread method)
run_docstring_examples() (in module doctest)
run_suite() (in module test.test_support)
run_unittest() (in module test.test_support)
runcall() (in module pdb)
runcall() (Profile method)
runcode() (InteractiveConsole method)
runctx() (in module profile)
runctx() (Profile method)
runeval() (in module pdb)
runsource() (InteractiveConsole method)
RUSAGE_BOTH (in module resource)
RUSAGE_CHILDREN (in module resource)
RUSAGE_SELF (in module resource)
S (in module re)
s_eval() (RExec method)
s_exec() (RExec method)
s_execfile() (RExec method)
S_IFMT() (in module stat)
S_IMODE() (in module stat)
s_import() (RExec method)
S_ISBLK() (in module stat)
S_ISCHR() (in module stat)
S_ISDIR() (in module stat)
S_ISFIFO() (in module stat)
S_ISLNK() (in module stat)
S_ISREG() (in module stat)
S_ISSOCK() (in module stat)
s_reload() (RExec method)
s_unload() (RExec method)
safe_substitute() (Template method) SafeConfigParser (class in ConfigParser)
saferepr() (in module pprint)
same_files (dircmp attribute)
same_quantum() (Context method)
same_quantum() (Decimal method)
samefile() (in module os. path)
sameopenfile() (in module os. path)
samestat() (in module os. path)
sample() (in module random)
save() (FileCookieJar method)
save_bgn() (HTMLParser method)
save_end() (HTMLParser method)
scanf() (in module re)
sched (standard module)
scheduler (class in sched) sci() (in module fpformat)
script_from_examples() (in module doctest)
scroll() (window method)
ScrolledText (standard module)
scrollok() (window method)
search() (IMAP4_stream method)
search() (in module re)
search() (RegexObject method)
SEARCH_ERROR (in module imp)
second (datetime attribute)
second (time attribute)
section_divider() (MultiFile method)
sections() (SafeConfigParser method)
secure (Cookie attribute)
seed() (in module random)
seed() (in module whrandom)
seed() (whrandom method)
seek() (BZ2File method)
seek() (CD player method)
seek() (Chunk method)
seek() (file method)
seek() (MultiFile method)
seek() (Queue method)
SEEK_CUR (in module posixfile)
SEEK_END (in module posixfile)
SEEK_SET (in module posixfile)
seekblock() (CD player method)
seektrack() (CD player method)
select (built-in module)
Select (class in Tix) select() (IMAP4_stream method)
select() (in module gl)
select() (in module select) Semaphore (class in threading)
Semaphore() (in module threading)
send() (DatagramHandler method)
send() (dispatcher method)
send() (HTTPResponse method)
send() (IMAP4_stream method)
send() (socket method)
send() (SocketHandler method)
send_error() (BaseHTTPRequestHandler method)
send_flowing_data() (writer method)
send_header() (BaseHTTPRequestHandler method)
send_hor_rule() (writer method)
send_label_data() (writer method)
send_line_break() (writer method)
send_literal_data() (writer method)
send_paragraph() (writer method)
send_query() (in module gopherlib)
send_response() (BaseHTTPRequestHandler method)
send_selector() (in module gopherlib)
sendall() (socket method)
sendcmd() (FTP method)
sendmail() (SMTP method)
sendto() (socket method)
sep (in module os)
sequence2ast() (in module parser)
sequenceIncludes() (in module operator)
SequenceMatcher (class in difflib),[Link] SerialCookie (class in Cookie)
server_version (BaseHTTPRequestHandler attribute)
server_version (SimpleHTTPRequestHandler attribute)
set() (Event method)
set() (mixer device method)
set() (Morsel method)
set() (SafeConfigParser method),[Link]
set_allowed_domains() (DefaultCookiePolicy method)
set_blocked_domains() (DefaultCookiePolicy method)
set_boundary() (Message method)
set_call_back() (FORMS object method)
set_charset() (Message method)
set_completer() (in module readline)
set_completer_delims() (in module readline)
set_cookie() (CookieJar method)
set_cookie_if_ok() (CookieJar method)
set_debug() (in module gc)
set_debuglevel() (FTP method)
set_debuglevel() (HTTPResponse method)
set_debuglevel() (NNTPDataError method)
set_debuglevel() (POP3_SSL method)
set_debuglevel() (SMTP method)
set_debuglevel() (Telnet method)
set_default_type() (Message method)
set_event_call_back() (in module fl)
set_form_position() (form method)
set_graphics_mode() (in module fl)
set_history_length() (in module readline)
set_location() (Queue method)
set_nonstandard_attr() (Cookie method)
set_ok() (CookiePolicy method)
set_option_negotiation_callback() (Telnet method)
set_output_charset() (NullTranslations method)
set_param() (Message method)
set_pasv() (FTP method)
set_payload() (Message method)
set_policy() (CookieJar method)
set_position() (Unpacker method)
set_pre_input_hook() (in module readline)
set_proxy() (Request method)
set_recsrc() (mixer device method)
set_seq1() (SequenceMatcher method)
set_seq2() (SequenceMatcher method)
set_seqs() (SequenceMatcher method)
set_server_documentation() (DocXMLRPCRequestHandler method),[Link]
set_server_name() (DocXMLRPCRequestHandler method),[Link]
set_server_title() (DocXMLRPCRequestHandler method),[Link]
set_spacing() (formatter method)
set_startup_hook() (in module readline)
set_terminator() (async_chat method)
set_threshold() (in module gc)
set_trace() (in module pdb)
set_type() (Message method)
set_unittest_reportflags() (in module doctest)
set_unixfrom() (Message method)
set_url() (RobotFileParser method)
set_userptr() (Textbox method)
setacl() (IMAP4_stream method)
setAttribute() (Element method)
setAttributeNode() (Element method)
setAttributeNodeNS() (Element method)
setAttributeNS() (Element method)
SetBase() (xmlparser method)
setblocking() (socket method)
setByteStream() (InputSource method)
setcbreak() (in module tty)
setchannels() (audio configuration method)
setCharacterStream() (InputSource method)
setcheckinterval() (in module sys)
setcomptype() (aifc method)
setcomptype() (AU_write method)
setcomptype() (Wave_write method)
setconfig() (audio port method)
setContentHandler() (XMLReader method)
setcontext() (in module decimal)
setcontext() (MH method)
setcurrent() (Folder method)
setDaemon() (Thread method)
setdefaultencoding() (in module sys)
setdefaulttimeout() (in module socket)
setdlopenflags() (in module sys)
setDocumentLocator() (ContentHandler method)
setDTDHandler() (XMLReader method)
setegid() (in module os)
setEncoding() (InputSource method)
setEntityResolver() (XMLReader method)
setErrorHandler() (XMLReader method)
seteuid() (in module os)
setFeature() (XMLReader method)
setfillpoint() (audio port method)
setfirstweekday() (in module calendar)
setfloatmax() (audio configuration method)
setfmt() (audio device method) setfont() (font handle method)
setFormatter() (Textbox method)
setframerate() (aifc method)
setframerate() (AU_write method)
setframerate() (Wave_write method)
setgid() (in module os)
setgroups() (in module os)
setinfo() (audio device method)
setitem() (in module operator)
setlast() (Folder method)
setLevel() (Textbox method),[Link]
setliteral() (SGMLParser method)
setliteral() (XMLParser method)
setlocale() (in module locale)
setLocale() (XMLReader method)
setLoggerClass() (in module logging)
setlogmask() (in module syslog)
setmark() (aifc method)
setMaxConns() (CacheFTPHandler method)
setmode() (in module msvcrt)
setName() (Thread method)
setnchannels() (aifc method)
setnchannels() (AU_write method)
setnchannels() (Wave_write method)
setnframes() (aifc method)
setnframes() (AU_write method)
setnframes() (Wave_write method)
setnomoretags() (SGMLParser method)
setnomoretags() (XMLParser method)
setoption() (in module jpeg)
setparameters() (audio device method)
setparams() (aifc method)
setparams() (AU_write method)
setparams() (in module al)
setparams() (Wave_write method)
setpath() (in module fm)
setpgid() (in module os)
setpgrp() (in module os)
setpos() (aifc method)
setpos() (AU_read method)
setpos() (Wave_read method)
setprofile() (in module sys)
setprofile() (in module threading)
setProperty() (XMLReader method)
setPublicId() (InputSource method)
setqueuesize() (audio configuration method)
setquota() (IMAP4_stream method)
setraw() (in module tty)
setrecursionlimit() (in module sys)
setregid() (in module os)
setreuid() (in module os)
setrlimit() (in module resource)
sets (standard module)
setsampfmt() (audio configuration method)
setsampwidth() (aifc method)
setsampwidth() (AU_write method)
setsampwidth() (Wave_write method)
setscrreg() (window method)
setsid() (in module os)
setslice() (in module operator)
setsockopt() (socket method)
setstate() (in module random)
setSystemId() (InputSource method)
setsyx() (in module curses)
setTarget() (MemoryHandler method)
setTimeout() (CacheFTPHandler method)
settimeout() (socket method)
settrace() (in module sys)
settrace() (in module threading)
settscdump() (in module sys)
setuid() (in module os)
setUp() (TestCase method)
setupterm() (in module curses)
SetValue() (in module _winreg)
SetValueEx() (in module _winreg)
setwidth() (audio configuration method)
sgmllib (standard module),[Link]
sha (built-in module)
Shelf (class in shelve)
shelve (standard module),[Link]
shlex (class in shlex) shlex (standard module)
shortDescription() (TestCase method)
shouldFlush() (BufferingHandler method)
shouldFlush() (MemoryHandler method)
show() (Textbox method)
show_choice() (in module fl)
show_file_selector() (in module fl)
show_form() (form method)
show_input() (in module fl)
show_message() (in module fl)
show_object() (FORMS object method)
show_question() (in module fl)
showsyntaxerror() (InteractiveConsole method)
showtraceback() (InteractiveConsole method)
showwarning() (in module warnings)
shuffle() (in module random)
shutdown() (IMAP4_stream method)
shutdown() (in module logging)
shutdown() (socket method)
shutil (standard module)
SIG* (in module signal)
SIG_DFL (in module signal)
SIG_IGN (in module signal)
signal (built-in module),[Link]
signal() (in module signal)
SimpleXMLRPCServer (standard module)
sin() (in module cmath)
sin() (in module math)
sinh() (in module cmath)
sinh() (in module math)
site (standard module)
sitecustomize (module),[Link]
size() (FTP method)
size() (Queue method)
size (TarInfo attribute)
sizeofimage() (in module rgbimg)
skip() (Chunk method)
skipinitialspace (Dialect attribute)
skippedEntity() (ContentHandler method)
slave() (NNTPDataError method)
sleep() (in module time)
slice() (built-in function),[Link],[Link]
SliceType (in module types) SmartCookie (class in Cookie)
smtpd (standard module)
smtplib (standard module)
SND_ALIAS (in module winsound)
SND_ASYNC (in module winsound)
SND_FILENAME (in module winsound)
SND_LOOP (in module winsound)
SND_MEMORY (in module winsound)
SND_NODEFAULT (in module winsound)
SND_NOSTOP (in module winsound)
SND_NOWAIT (in module winsound)
SND_PURGE (in module winsound)
sndhdr (standard module)
sniff() (Sniffer method)
Sniffer (class in csv) SO_* (in module socket)
SOCK_DGRAM (in module socket)
SOCK_RAW (in module socket)
SOCK_RDM (in module socket)
SOCK_SEQPACKET (in module socket)
SOCK_STREAM (in module socket)
socket (built-in module),[Link],[Link]
socket() (in module socket),[Link]
socket (SocketServer protocol)
socketpair() (in module socket)
SocketServer (standard module)
SocketType (in module socket)
softspace (file attribute)
SOL_* (in module socket)
SOMAXCONN (in module socket)
sort() (IMAP4_stream method)
sort_stats() (Stats method)
sortTestMethodsUsing (TestLoader attribute)
source (Example attribute)
source (shlex attribute)
sourcehook() (shlex method)
span() (MatchObject method)
spawn() (in module pty)
spawnl() (in module os)
spawnle() (in module os)
spawnlp() (in module os)
spawnlpe() (in module os)
spawnv() (in module os)
spawnve() (in module os)
spawnvp() (in module os)
spawnvpe() (in module os)
specified_attributes (xmlparser attribute)
speed() (audio device method)
split() (in module os. path)
split() (in module re)
split() (in module shlex)
split() (in module string)
split() (RegexObject method)
split() (string method)
splitdrive() (in module os. path)
splitext() (in module os. path)
splitfields() (in module string)
splitlines() (string method)
sprintf-style formatting
sqrt() (Context method)
sqrt() (Decimal method) sqrt() (in module cmath)
sqrt() (in module math)
ssl() (IMAP4_stream method)
ssl() (in module socket)
ST_ATIME (in module stat)
ST_CTIME (in module stat)
ST_DEV (in module stat)
ST_GID (in module stat)
ST_INO (in module stat)
ST_MODE (in module stat)
ST_MTIME (in module stat)
ST_NLINK (in module stat)
ST_SIZE (in module stat)
ST_UID (in module stat)
stack() (in module inspect)
standard_b64decode() (in module base64)
standard_b64encode() (in module base64)
standend() (window method)
standout() (window method)
starmap() (in module itertools)
start() (MatchObject method)
start() (Profile method)
start() (Thread method)
start_color() (in module curses)
start_new_thread() (in module thread)
startbody() (MimeWriter method)
StartCdataSectionHandler() (xmlparser method)
StartDoctypeDeclHandler() (xmlparser method)
startDocument() (ContentHandler method)
startElement() (ContentHandler method)
StartElementHandler() (xmlparser method)
startElementNS() (ContentHandler method)
startfile() (in module os)
startmultipartbody() (MimeWriter method)
StartNamespaceDeclHandler() (xmlparser method)
startPrefixMapping() (ContentHandler method)
startswith() (string method)
startTest() (TestResult method)
starttls() (SMTP method)
stat() (in module os)
stat() (in module statcache)
stat() (NNTPDataError method)
stat() (POP3_SSL method)
stat (standard module),[Link]
stat_float_times() (in module os)
statcache (standard module)
Stats (class in profile) status() (IMAP4_stream method)
status (in module httplib)
statvfs() (in module os)
statvfs (standard module),[Link]
StdButtonBox (class in Tix) stderr (in module sys)
stderr (Popen attribute)
stdin (in module sys)
stdin (Popen attribute)
stdout (in module sys)
stdout (Popen attribute)
stereocontrols() (mixer device method)
STILL (in module cd)
stop() (CD player method)
stop() (Profile method)
stop() (TestResult method)
stopListening() (in module logging)
stopTest() (TestResult method)
storbinary() (FTP method)
store() (IMAP4_stream method)
storlines() (FTP method)
str() (in module locale)
strcoll() (in module locale)
StreamWriter (class in codecs) strerror() (in module os)
strftime() (date method)
strftime() (datetime method)
strftime() (in module time)
strftime() (time method)
strict_domain (LWPCookieJar attribute)
strict_errors() (in module codecs)
strict_ns_domain (LWPCookieJar attribute)
strict_ns_set_initial_dollar (LWPCookieJar attribute)
strict_ns_set_path (LWPCookieJar attribute)
strict_ns_unverifiable (LWPCookieJar attribute)
strict_rfc2965_unverifiable (LWPCookieJar attribute)
string (MatchObject attribute)
string (standard module),[Link],[Link],[Link]
StringIO (class in StringIO) StringIO (standard module)
stringprep (standard module)
StringType (in module types)
StringTypes (in module types)
strip() (in module string)
strip() (string method)
strip_dirs() (Stats method)
stripspaces (Textbox attribute)
strptime() (in module time)
struct (built-in module),[Link]
struct_time (in module time)
strxfrm() (in module locale)
sub() (in module operator)
sub() (in module re)
sub() (RegexObject method)
subdirs (dircmp attribute)
subn() (in module re)
subn() (RegexObject method)
Subnormal (class in decimal)
subpad() (window method)
subprocess (standard module)
subscribe() (IMAP4_stream method)
subsequent_indent (TextWrapper attribute)
substitute() (Template method)
substract() (Context method)
subwin() (window method)
suffix_map (in module mimetypes),[Link]
suite() (in module parser)
suiteClass (TestLoader attribute)
summarize() (DocTestRunner method)
sunau (standard module)
sunaudiodev (built-in module),[Link]
SUNAUDIODEV (standard module),[Link]
super (class descriptor attribute)
supports_unicode_filenames (in module os. path)
swapcase() (in module string)
swapcase() (string method)
sym() (TarInfo method)
sym_name (in module symbol)
symbol (standard module)
symlink() (in module os)
sync() (audio device method)
sync() (dbhash method)
sync() (in module gdbm)
sync() (Queue method),[Link]
syncdown() (window method)
syncok() (window method)
syncup() (window method)
syntax_error() (XMLParser method)
sys (built-in module)
sys_version (BaseHTTPRequestHandler attribute)
sysconf() (in module os)
sysconf_names (in module os)
syslog (built-in module)
syslog() (in module syslog) SysLogHandler (class in logging)
system() (in module os)
system() (in module platform)
system. listMethods() (ServerProxy method)
system. methodHelp() (ServerProxy method)
system. methodSignature() (ServerProxy method)
system_alias() (in module platform)
systemId (DocumentType attribute)
T_FMT (in module locale)
T_FMT_AMPM (in module locale)
tabnanny (standard module)
tagName (Element attribute)
takewhile() (in module itertools)
tan() (in module cmath)
tan() (in module math)
tanh() (in module cmath)
tanh() (in module math)
TAR_GZIPPED (in module tarfile)
TAR_PLAIN (in module tarfile)
TarFile (class in tarfile),[Link] tarfile (standard module)
TarFileCompat (class in tarfile)
target (ProcessingInstruction attribute)
TarInfo (class in tarfile) tb_lineno() (in module traceback)
tcdrain() (in module termios)
tcflow() (in module termios)
tcflush() (in module termios)
tcgetattr() (in module termios)
tcgetpgrp() (in module os)
Tcl() (in module Tkinter)
TCP_* (in module socket)
tcsendbreak() (in module termios)
tcsetattr() (in module termios)
tcsetpgrp() (in module os)
tearDown() (TestCase method)
tee() (in module itertools)
tell() (aifc method),[Link]
tell() (AU_read method)
tell() (AU_write method)
tell() (BZ2File method)
tell() (Chunk method)
tell() (file method)
tell() (MultiFile method)
tell() (Queue method)
tell() (Wave_read method)
tell() (Wave_write method) Telnet (class in telnetlib)
telnetlib (standard module)
TEMP (environment variable)
tempdir (in module tempfile)
tempfile (standard module)
Template (class in pipes) Template (class in string)
template (in module tempfile)
template (string attribute) tempnam() (in module os)
TemporaryFile() (in module tempfile)
termattrs() (in module curses)
termios (built-in module)
termname() (in module curses)
test() (mutex method)
test (standard module)
test (UnexpectedException attribute)
test.test_support (standard module)
testandset() (mutex method) TestCase (class in unittest)
testfile() (in module doctest)
TESTFN (in module test.test_support) TestLoader (class in unittest)
testMethodPrefix (TestLoader attribute)
testmod() (in module doctest)
tests (in module imghdr)
testsource() (in module doctest)
testsRun (TestResult attribute)
textdomain() (in module gettext)
THOUSEP (in module locale)
thread (built-in module)
Thread (class in threading),[Link]
thread() (IMAP4_stream method)
threading (standard module)
tie() (in module fl)
tigetflag() (in module curses)
tigetnum() (in module curses)
tigetstr() (in module curses) time (built-in module)
time (class in datetime),[Link]
time() (datetime method)
time() (in module time)
Time2Internaldate() (in module imaplib)
timedelta (class in datetime),[Link]
TimedRotatingFileHandler (class in logging) timegm() (in module calendar)
timeit (standard module)
timeit() (Timer method)
timeout() (window method)
Timer (class in threading),[Link]
Timer (class in timeit) times() (in module os)
timetuple() (date method)
timetuple() (datetime method)
timetz() (datetime method)
timezone (in module time)
title() (string method)
Tix (class in Tix) Tix (standard module)
tix_addbitmapdir() (tixCommand method)
tix_cget() (tixCommand method)
tix_configure() (tixCommand method)
tix_filedialog() (tixCommand method)
tix_getbitmap() (tixCommand method)
tix_getimage() (tixCommand method)
TIX_LIBRARY (environment variable)
tix_option_get() (tixCommand method)
tix_resetoptions() (tixCommand method) tixCommand (class in Tix)
Tkinter (standard module)
TList (class in Tix) TMP (environment variable),[Link]
TMP_MAX (in module os)
TMPDIR (environment variable),[Link]
tmpfile() (in module os)
tmpnam() (in module os)
to_eng_string() (Context method)
to_eng_string() (Decimal method)
to_integral() (Context method)
to_integral() (Decimal method)
to_sci_string() (Context method)
to_splittable() (Charset method)
ToASCII() (in module encodings. idna)
tobuf() (TarInfo method)
tochild (Popen4 attribute)
today() (date method)
today() (datetime method)
tofile() (array method)
togglepause() (CD player method)
tok_name (in module token)
token (shlex attribute)
token (standard module)
tokeneater() (in module tabnanny)
tokenize() (in module tokenize)
tokenize (standard module)
tolist() (array method)
tolist() (AST method)
tomono() (in module audioop)
toordinal() (date method)
toordinal() (datetime method)
top() (POP3_SSL method)
top() (Textbox method)
top_panel() (in module curses. panel)
toprettyxml() (Node method)
tostereo() (in module audioop)
tostring() (array method)
totuple() (AST method)
touchline() (window method)
touchwin() (window method)
tounicode() (array method)
ToUnicode() (in module encodings. idna)
tovideo() (in module imageop)
toxml() (Node method)
tparm() (in module curses)
trace() (in module inspect)
traceback (standard module)
tracebacklimit (in module sys)
TracebackType (in module types)
tracer() (in module turtle)
transfercmd() (FTP method)
translate() (in module string)
translate() (string method)
translate_references() (XMLParser method)
translation() (in module gettext) Tree (class in Tix)
truediv() (in module operator)
truncate() (file method)
truth() (in module operator)
ttob() (in module imgfile)
ttob() (in module rgbimg)
tty (standard module)
ttyname() (in module os)
tuple2ast() (in module parser)
TupleType (in module types)
turnoff_sigfpe() (in module fpectl)
turnon_sigfpe() (in module fpectl)
turtle (standard module)
type (TarInfo attribute)
typeahead() (in module curses)
typecode (array attribute)
typed_subpart_iterator() (in module email.Iterators)
types (standard module),[Link],[Link]
types_map (in module mimetypes),[Link]
TypeType (in module types)
TZ (environment variable),[Link],[Link],[Link],[Link],[Link]
tzinfo (class in datetime)
tzinfo (datetime attribute)
tzinfo (time attribute)
tzname() (datetime method)
tzname (in module time)
tzname() (time method),[Link]
tzset() (in module time)
U (in module re)
ugettext() (GNUTranslations method)
ugettext() (NullTranslations method)
uid() (IMAP4_stream method)
uid (TarInfo attribute)
uidl() (POP3_SSL method)
ulaw2lin() (in module audioop)
umask() (in module os)
uname() (in module os)
uname() (in module platform)
uname (TarInfo attribute)
UnboundMethodType (in module types)
unconsumed_tail (Queue attribute)
unctrl() (in module curses)
unctrl() (in module curses. ascii)
Underflow (class in decimal)
undoc_header (Cmd attribute)
unescape() (in module xml.sax.saxutils) UnexpectedException (exception in doctest)
unfreeze_form() (form method)
unfreeze_object() (FORMS object method)
ungetch() (in module curses)
ungetch() (in module msvcrt)
ungetmouse() (in module curses)
ungettext() (GNUTranslations method)
ungettext() (NullTranslations method)
unhexlify() (in module binascii)
UNICODE (in module re)
unicodedata (standard module)
UnicodeType (in module types)
unidata_version (in module unicodedata)
unified_diff() (in module difflib)
uniform() (in module random)
uniform() (in module whrandom)
unittest (standard module)
unixfrom (AddressList attribute)
UnixMailbox (class in mailbox) unknown_charref() (SGMLParser method)
unknown_charref() (XMLParser method)
unknown_endtag() (SGMLParser method)
unknown_endtag() (XMLParser method)
unknown_entityref() (SGMLParser method)
unknown_entityref() (XMLParser method)
unknown_open() (BaseHandler method)
unknown_open() (HTTPErrorProcessor method)
unknown_open() (UnknownHandler method)
unknown_starttag() (SGMLParser method)
unknown_starttag() (XMLParser method) UnknownHandler (class in urllib2)
unlock() (mutex method)
unmimify() (in module mimify)
unpack() (in module struct)
unpack_array() (Unpacker method)
unpack_bytes() (Unpacker method)
unpack_double() (Unpacker method)
unpack_farray() (Unpacker method)
unpack_float() (Unpacker method)
unpack_fopaque() (Unpacker method)
unpack_fstring() (Unpacker method)
unpack_list() (Unpacker method)
unpack_opaque() (Unpacker method)
unpack_string() (Unpacker method) Unpacker (class in xdrlib)
unparsedEntityDecl() (DTDHandler method)
UnparsedEntityDeclHandler() (xmlparser method) Unpickler (class in pickle)
unqdevice() (in module fl)
unquote() (in module email.Utils)
unquote() (in module rfc822)
unquote() (in module urllib)
unquote_plus() (in module urllib)
unregister() (LogRecord method)
unregister_dialect() (in module csv)
unsubscribe() (IMAP4_stream method)
untouchwin() (window method)
unused_data (Queue attribute)
up() (in module turtle)
update() (hmac method)
update() (md5 method)
update() (sha method)
update_panels() (in module curses. panel)
upper() (in module string)
upper() (string method)
uppercase (in module string)
urandom() (in module os)
url (ServerProxy attribute)
url2pathname() (in module urllib)
urlcleanup() (in module urllib)
urldefrag() (in module urlparse)
urlencode() (in module urllib)
urljoin() (in module urlparse)
urllib (standard module),[Link]
urllib2 (standard module)
urlopen() (in module urllib)
urlopen() (in module urllib2) URLopener (class in urllib)
urlparse() (in module urlparse)
urlparse (standard module),[Link]
urlretrieve() (in module urllib)
urlsafe_b64decode() (in module base64)
urlsafe_b64encode() (in module base64)
urlsplit() (in module urlparse)
urlunparse() (in module urlparse)
urlunsplit() (in module urlparse)
use_default_colors() (in module curses)
use_env() (in module curses)
use_rawinput (Cmd attribute)
UseForeignDTD() (xmlparser method)
USER (environment variable) user() (POP3_SSL method)
user (standard module)
UserDict (class in UserDict)
UserDict (standard module) UserList (class in UserList)
UserList (standard module)
USERNAME (environment variable)
userptr() (Textbox method) UserString (class in UserString)
UserString (standard module)
utcfromtimestamp() (datetime method)
utcnow() (datetime method)
utcoffset() (datetime method)
utcoffset() (time method),[Link]
utctimetuple() (datetime method)
utime() (in module os)
uu (standard module),[Link]
V
value (Cookie attribute)
value (Morsel attribute)
value_decode() (BaseCookie method)
value_encode() (BaseCookie method)
values() (Message method)
varray() (in module gl)
vbar (ScrolledText attribute)
VERBOSE (in module re)
verbose (in module tabnanny)
verbose (in module test.test_support)
verify() (SMTP method)
version (Cookie attribute)
version (in module curses)
version (in module httplib)
version (in module marshal)
version() (in module platform)
version (in module sys)
version (URLopener attribute)
version_info (in module sys)
version_string() (BaseHTTPRequestHandler method)
vline() (window method)
vnarray() (in module gl)
voidcmd() (FTP method)
volume (ZipInfo attribute)
vonmisesvariate() (in module random)
W_OK (in module os)
wait() (Condition method)
wait() (Event method)
wait() (in module os)
wait() (Popen method)
wait() (Popen4 method)
waitpid() (in module os)
walk() (in module compiler)
walk() (in module compiler.visitor)
walk() (in module os)
walk() (in module os.
path) walk() (Message method)
want (Example attribute)
warn() (in module warnings)
warn_explicit() (in module warnings)
warning() (ErrorHandler method)
warning() (in module logging)
warning() (Textbox method)
warnings (standard module)
warnoptions (in module sys)
wasSuccessful() (TestResult method)
wave (standard module) WCONTINUED (in module os)
WCOREDUMP() (in module os) WeakKeyDictionary (class in weakref)
weakref (extension module)
WeakValueDictionary (class in weakref) webbrowser (standard module)
weekday() (date method)
weekday() (datetime method) weekday() (in module calendar)
weibullvariate() (in module random)
WEXITSTATUS() (in module os)
wfile (BaseHTTPRequestHandler attribute)
what() (in module imghdr)
what() (in module sndhdr)
whathdr() (in module sndhdr)
whichdb() (in module whichdb)
whichdb (standard module)
whitespace_split (shlex attribute)
whrandom (standard module)
width (TextWrapper attribute)
WIFCONTINUED() (in module os)
WIFEXITED() (in module os)
WIFSIGNALED() (in module os)
WIFSTOPPED() (in module os)
Wimp$ScrapDir (environment variable)
win32_ver() (in module platform)
window() (Textbox method)
winsound (built-in module)
winver (in module sys)
WNOHANG (in module os)
wordchars (shlex attribute)
wrap() (in module textwrap)
wrap() (TextWrapper method)
wrapper() (in module curses.
wrapper) writable() (async_chat method)
writable() (dispatcher method)
write() (array method)
write() (audio device method),[Link]
write() (BZ2File method)
write() (file method)
write() (Generator method)
write() (in module imgfile)
write() (in module os) write() (in module turtle)
write() (InteractiveConsole method)
write() (LogRecord method)
write() (Queue method)
write() (SafeConfigParser method)
write() (StreamWriter method)
write() (Telnet method)
write() (ZipFile method)
write_byte() (Queue method)
write_history_file() (in module readline)
writeall() (audio device method)
writeframes() (aifc method)
writeframes() (AU_write method)
writeframes() (Wave_write method)
writeframesraw() (aifc method)
writeframesraw() (AU_write method)
writeframesraw() (Wave_write method)
writelines() (BZ2File method)
writelines() (file method)
writelines() (StreamWriter method)
writepy() (PyZipFile method)
writerow() (csv writer method)
writerows() (csv writer method)
writesamps() (audio port method)
writestr() (ZipFile method)
writexml() (Node method)
WSTOPSIG() (in module os)
WTERMSIG() (in module os)
X (in module re)
X_OK (in module os)
xatom() (IMAP4_stream method)
xdrlib (standard module)
xgtitle() (NNTPDataError method)
xhdr() (NNTPDataError method)
XHTML_NAMESPACE (in module xml.dom)
xml.dom (standard module)
xml.dom.minidom (standard module)
xml.dom.pulldom (standard module)
xml.parsers.expat (standard module)
xml.sax (standard module)
xml.sax.handler (standard module)
xml.sax.saxutils (standard module)
xml.sax.xmlreader (standard module)
XML_NAMESPACE (in module xml.dom)
xmlcharrefreplace_errors_errors() (in module codecs)
xmllib (standard module)
XMLNS_NAMESPACE (in module xml.dom) XMLParser (class in xmllib)
XMLParserType (in module xml.parsers.expat) XMLReader (class in xml.sax.xmlreader)
xmlrpclib (standard module)
xor() (in module operator)
xover() (NNTPDataError method)
xpath() (NNTPDataError method)
xrange() (built-in function),[Link],[Link]
XRangeType (in module types)
xreadlines() (BZ2File method)
xreadlines() (file method)
year (date attribute)
year (datetime attribute)
YESEXPR (in module locale)
yiq_to_rgb() (in module colorsys)
zfill() (in module string)
Release 2.4 30 November 2004
The Python language has a substantial body ofdocumentation, much of it contributed by various authors.
Authors may use this guide, inconjunction with the template files provided with thedistribution, to create or maintain whole documents or sections.If you're interested in contributing to Python's documentation,there's no need to learn LaTeX if you're not so inclined; plaintext contributions are more than welcome as well.
1 Introduction Python's documentation has long been considered to be good for afree programming language.
There are a number of reasons for this,the most important being the early commitment of Python's creator,Guido van Rossum, to providing documentation on the language and itslibraries, and the continuing involvement of the user community inproviding assistance for creating and maintaining documentation.The involvement of the community takes many forms, from authoring tobug reports to just plain complaining when the documentation couldbe more complete or easier to use.
All of these forms of input fromthe community have proved useful during the time I've been involvedin maintaining the documentation.This document is aimed at authors and potential authors ofdocumentation for Python.
More specifically, it is for peoplecontributing to the standard documentation and developing additionaldocuments using the same tools as the standard documents.
Thisguide will be less useful for authors using the Python documentationtools for topics other than Python, and less useful still forauthors not using the tools at all.The material in this guide is intended to assist authors using thePython documentation tools.
It includes information on the sourcedistribution of the standard documentation, a discussion of thedocument types, reference material on the markup defined in thedocument classes, a list of the external tools needed for processingdocuments, and reference material on the tools provided with thedocumentation resources.
At the end, there is also a sectiondiscussing future directions for the Python documentation and whereto turn for more information.If your interest is in contributing to the Python documentation, butyou don't have the time or inclination to learn LaTeX and themarkup structures documented here, there's a welcoming place for youamong the Python contributors as well.
Any time you feel that youcan clarify existing documentation or provide documentation that'smissing, the existing documentation team will gladly work with youto integrate your text, dealing with the markup for you.
Pleasedon't let the material in this document stand between thedocumentation and your desire to help out!
A.3.10 XML Remote Procedure
B. Reporting Bugs
A.6 SGI-specific Extension modules
C. History and License
3.2 The standard type hierarchy
3.1 Objects, values and
3.3 Special method names
Below is a list of the types that are built into Python.
Extensionmodules (written in C, Java, or other languages, depending onthe implementation) can define additional types.
Future versions ofPython may add types to the type hierarchy (e.g., rationalnumbers, efficiently stored arrays of integers, etc.).
Some of the type descriptions below contain a paragraph listing`special attributes.'
These are attributes that provide access to theimplementation and are not intended for general use.
Their definitionmay change in the future.
This type has a single value.
(Theinterpreter will then try the reflected operation, or some otherfallback, depending on the operator.)
Its truth value is true.
Its truth value is true.
These are created by numeric literals and returned as results byarithmetic operators and arithmetic built-in functions.
Numericobjects are immutable; once created their value never changes.
Pythonnumbers are of course strongly related to mathematical numbers, butsubject to the limitations of numerical representation in computers.
Python distinguishes between integers, floating point numbers, andcomplex numbers:
Integers
These represent elements from the mathematical set of whole numbers.
There are three types of integers:
Plain integers
Long integers
These represent numbers in an unlimited range, subject to available(virtual) memory only.
For the purpose of shift and mask operations,a binary representation is assumed, and negative numbers arerepresented in a variant of 2's complement which gives the illusion ofan infinite string of sign bits extending to the left.
Booleans
These represent the truth values False and True.
The rules for integer representation are intended to give the mostmeaningful interpretation of shift and mask operations involvingnegative integers and the least surprises when switching between theplain and long integer domains.
Any operation except left shift,if it yields a result in the plain integer domain without causingoverflow, will yield the same result in the long integer domain orwhen using mixed operands.
Floating point numbers
These represent machine-level double precision floating point numbers.
Complex numbers
These represent complex numbers as a pair of machine-level doubleprecision floating point numbers.
The same caveats apply as forfloating point numbers.
The real and imaginary parts of a complexnumber z can be retrieved through the read-only attributesz.real and z.imag.
Sequences
returns thenumber of items of a sequence.When the length of a sequence is n, theindex set contains the numbers 0, 1, ..., n-1.
Sequences also support slicing:
a[i:j]selects all items with index k such that i = k j.
When used as an expression, a slice is asequence of the same type.
x j.Sequences are distinguished according to their mutability:
Immutable sequences
An object of an immutable sequence type cannot change once it iscreated.
(If the object contains references to other objects,these other objects may be mutable and may be changed; however,the collection of objects directly referenced by an immutable objectcannot change.)
The following types are immutable sequences:
Strings
The items of a string are characters.
There is no separatecharacter type; a character is represented by a string of one item.Characters represent (at least) 8-bit bytes.
The built-infunctions chr()
andord()
convert between characters andnonnegative integers representing the byte values.
Bytes with thevalues 0-127 usually represent the corresponding ASCII values, butthe interpretation of values is up to the program.
The stringdata type is also used to represent arrays of bytes, e.g., to hold dataread from a file.
(On systems whose native character set is not ASCII, strings may useEBCDIC in their internal representation, provided the functionschr() and ord() implement a mapping between ASCII andEBCDIC, and string comparison preserves the ASCII order.Or perhaps someone can propose a better rule?)
Unicode
The items of a Unicode object are Unicode code units.
A Unicode codeunit is represented by a Unicode object of one item and can holdeither a 16-bit or 32-bit value representing a Unicode ordinal (themaximum value for the ordinal is given in sys.maxunicode, anddepends on how Python is configured at compile time).
Surrogate pairsmay be present in the Unicode object, and will be reported as twoseparate items.
The built-in functionsunichr()
convert between code units andnonnegative integers representing the Unicode ordinals as defined inthe Unicode Standard 3.0.
Conversion from and to other encodings arepossible through the Unicode method encode and the built-infunction unicode().
Tuples
The items of a tuple are arbitrary Python objects.Tuples of two or more items are formed by comma-separated listsof expressions.
A tuple of one item (a `singleton') can be formedby affixing a comma to an expression (an expression by itself doesnot create a tuple, since parentheses must be usable for grouping ofexpressions).
An empty tuple can be formed by an empty pair ofparentheses.
Mutable sequences
Mutable sequences can be changed after they are created.
Thesubscription and slicing notations can be used as the target ofassignment and del (delete) statements.
There is currently a single intrinsic mutable sequence type:
Lists
The items of a list are arbitrary Python objects.
The extension module array
provides anadditional example of a mutable sequence type.
Mappings
There is currently a single intrinsic mapping type:
Dictionaries
These represent finite sets of objects indexed bynearly arbitrary values.
,gdbm
, bsddb
provide additional examples of mapping types.
Callable types
These are the types to which the function calloperation (see section5.3.4, ``Calls'') can be applied:
User-defined functions
A user-defined function object is created by a function definition(see section7.5, ``Function definitions'').
It should becalled with an argumentlist containing the same number of items as the function's formalparameter list.
Special attributes:
The function's documentation string, orNone if unavailable
Writable
Another way of spellingfunc_doc
The function's name
Another way of spellingfunc_name
__module__
The name of the module the function was definedin, or None if unavailable.
Atuple containing default argument valuesfor those arguments that have defaults, or None if noarguments have a default value
The code object representing the compiledfunction body.
A reference to the dictionary that holds thefunction's global variables -- the global namespace of the modulein which the function was defined.
Read-only
The namespace supporting arbitrary functionattributes.
None or a tuple of cells that containbindings for the function's free variables.
Most of the attributes labelled ``Writable'' check the type of theassigned value.
Changed in version 2.4:func_name is now writable.
Function objects also support getting and setting arbitraryattributes, which can be used, for example, to attach metadata tofunctions.
Regular attribute dot-notation is used to get and set suchattributes.
Note that the current implementation only supportsfunction attributes on user-defined functions.
Function attributes onbuilt-in functions may be supported in the future.
Additional information about a function's definition can be retrievedfrom its code object; see the description of internal types below.
User-defined methods
A user-defined method object combines a class, a class instance (orNone) and any callable object (normally a user-definedfunction).
When a user-defined method object is created by retrieving anothermethod object from a class or instance, the behaviour is the sameas for a function object, except that the im_func attributeof the new instance is not the original method object but itsim_func attribute.
When a user-defined method object is created by retrieving aclass method object from a class or instance, its im_selfattribute is the class itself (the same as the im_classattribute), and its im_func attribute is the functionobject underlying the class method.
In some cases, a fruitful optimization is toassign the attribute to a local variable and call that local variable.Also notice that this transformation only happens for user-definedfunctions; other callable objects (and all non-callable objects) areretrieved without transformation.
It is also important to note thatuser-defined functions which are attributes of a class instance arenot converted to bound methods; this only happens when thefunction is an attribute of the class.
Generator functions
A function or method which uses the yield statement (seesection6.8, ``The yield statement'') is called agenerator function.
Such a function, when called, alwaysreturns an iterator object which can be used to execute the body ofthe function: calling the iterator's next() method willcause the function to execute until it provides a value using theyield statement.
When the function executes areturn statement or falls off the end, aStopIteration exception is raised and the iterator willhave reached the end of the set of values to be returned.
Built-in functions
A built-in function object is a wrapper around a C function.
Built-in methods
This is really a different disguise of a built-in function, this timecontaining an object passed to the C function as an implicit extraargument.
An example of a built-in method is
alist.append(), assumingalist is a list object.In this case, the special read-only attribute __self__ is setto the object denoted by list.
Class Types
Class types, or ``new-style classes,'' are callable.
These objectsnormally act as factories for new instances of themselves, butvariations are possible for class types that override__new__().
The arguments of the call are passed to__new__() and, in the typical case, to __init__() toinitialize the new instance.
Classic Classes
Class objects are described below.
When a class object is called,a new class instance (also described below) is created andreturned.
This implies a call to the class's __init__() methodif it has one.
Any arguments are passed on to the __init__()method.
If there is no __init__() method, the class must be calledwithout arguments.
Class instances
Class instances are described below.
Class instances are callableonly when the class has a __call__() method; x(arguments)is a shorthand for x.__call__(arguments).
Modules
Modules are imported by the import statement (seesection6.12, ``The import statement'').
A module object has a namespace implemented by a dictionary object(this is the dictionary referenced by the func_globals attribute offunctions defined in the module).
Classes
When it would yielda static method object, it is transformed into the object wrappedby the static method object.
See section3.3.2 for anotherway in which attributes retrieved from a class may differ from thoseactually contained in its __dict__.
Class attribute assignments update the class's dictionary, never thedictionary of a base class.
A class object can be called (see above) to yield a class instance (seebelow).
Special attributes: __name__ is the class name;__module__ is the module name in which the class was defined;__dict__ is the dictionary containing the class's namespace;__bases__ is a tuple (possibly empty or a singleton)containing the base classes, in the order of their occurrence in thebase class list; __doc__ is the class's documentation string,or None if undefined.
Class instances
A class instance is created by calling a class object (see above).A class instance has a namespace implemented as a dictionary whichis the first place in whichattribute references are searched.
When an attribute is not foundthere, and the instance's class has an attribute by that name,the search continues with the class attributes.
If a class attributeis found that is a user-defined function object or an unbounduser-defined method object whose associated class is the class(call itC) of the instance for which the attribute referencewas initiated or one of its bases,it is transformed into a bound user-defined method object whoseim_class attribute isC whose im_self attributeis the instance.
Static method and class method objects are alsotransformed, as if they had been retrieved from classC;see above under ``Classes''.
See section3.3.2 foranother way in which attributes of a class retrieved via itsinstances may differ from the objects actually stored in theclass's __dict__.If no class attribute is found, and the object's class has a__getattr__() method, that is called to satisfy the lookup.
Attribute assignments and deletions update the instance's dictionary,never a class's dictionary.
If the class has a __setattr__() or__delattr__() method, this is called instead of updating theinstance dictionary directly.
Class instances can pretend to be numbers, sequences, or mappings ifthey have methods with certain special names.
Seesection3.3, ``Special method names.''
Special attributes: __dict__ is the attributedictionary; __class__ is the instance's class.
Files
A file object represents an open file.
File objects arecreated by the open() built-in function,and also by
os.popen(),os.fdopen(), and themakefile()
method of socket objects (and perhaps by other functions or methodsprovided by extension modules).
The objectssys.stdin,sys.stdout andsys.stderr are initialized to file objectscorresponding to the interpreter's standard
for complete documentation of file objects.
A few types used internally by the interpreter are exposed to the user.Their definitions may change with future versions of the interpreter,but they are mentioned here for completeness.
Code objects
Code objects represent byte-compiled executable Python code, or bytecode.The difference between a codeobject and a function object is that the function object contains anexplicit reference to the function's globals (the module in which itwas defined), while a code object contains no context; also the default argument values are stored in the function object,not in the code object (because they represent values calculated atrun-time).
Unlike function objects, code objects are immutable andcontain no references (directly or indirectly) to mutable objects.
Special read-only attributes: co_name gives the functionname; co_argcount is the number of positional arguments(including arguments with default values); co_nlocals is thenumber of local variables used by the function (including arguments);co_varnames is a tuple containing the names of the localvariables (starting with the argument names); co_cellvars isa tuple containing the names of local variables that are referenced bynested functions; co_freevars is a tuple containing the namesof free variables; co_code is a string representing thesequence of bytecode instructions;co_consts is a tuple containing the literals used by thebytecode; co_names is a tuple containing the names used bythe bytecode; co_filename is the filename from which the codewas compiled; co_firstlineno is the first line number of thefunction; co_lnotab is a string encoding the mapping frombyte code offsets to line numbers (for details see the source code ofthe interpreter); co_stacksize is the required stack size(including local variables); co_flags is an integer encodinga number of flags for the interpreter.
The following flag bits are defined for co_flags: bit0x04 is set if the function uses the "*arguments" syntaxto accept an arbitrary number of positional arguments; bit0x08 is set if the function uses the "**keywords" syntaxto accept arbitrary keyword arguments; bit 0x20 is set if thefunction is a generator.
Future feature declarations ("from __future__ import division")also use bits in co_flags to indicate whether a code objectwas compiled with a particular feature enabled: bit 0x2000 isset if the function was compiled with future division enabled; bits0x10 and 0x1000 were used in earlier versions of Python.Other bits in co_flags are reserved for internal use.If
Frame objects
Frame objects represent execution frames.
They may occur in tracebackobjects (see below).
Special read-only attributes: f_back is to the previousstack frame (towards the caller), or None if this is the bottomstack frame; f_code is the code object being executed in thisframe; f_locals is the dictionary used to look up localvariables; f_globals is used for global variables;f_builtins is used for built-in (intrinsic) names;f_restricted is a flag indicating whether the function isexecuting in restricted execution mode; f_lasti gives theprecise instruction (this is an index into the bytecode string ofthe code object).
Special writable attributes: f_trace, if not None, is afunction called at the start of each source code line (this is used bythe debugger); f_exc_type, f_exc_value,f_exc_traceback represent the most recent exception caught inthis frame; f_lineno is the current line number of the frame-- writing to this from within a trace function jumps to the given line(only for the bottom-most frame).
A debugger can implement a Jumpcommand (aka Set Next Statement) by writing to f_lineno.
Traceback objects
Traceback objects represent a stack trace of an exception.
Atraceback object is created when an exception occurs.
When the searchfor an exception handler unwinds the execution stack, at each unwoundlevel a traceback object is inserted in front of the currenttraceback.
When an exception handler is entered, the stack trace ismade available to the program.(See section7.4, ``The try statement.'')It is accessible as sys.exc_traceback, and also as the thirditem of the tuple returned by sys.exc_info().
The latter isthe preferred interface, since it works correctly when the program isusing multiple threads.When the program contains no suitable handler, the stack trace is written(nicely formatted) to the standard error stream; if the interpreter isinteractive, it is also made available to the user assys.last_traceback.
Special read-only attributes: tb_next is the next level in thestack trace (towards the frame where the exception occurred), orNone if there is no next level; tb_frame points to theexecution frame of the current level; tb_lineno gives the linenumber where the exception occurred; tb_lasti indicates theprecise instruction.
The line number and last instruction in thetraceback may differ from the line number of its frame object if theexception occurred in a try statement with no matchingexcept clause or with a finally clause.
Slice objects
Slice objects are used to represent slices when extended slicesyntax is used.
This is a slice using two colons, or multiple slicesor ellipses separated by commas, e.g., a[i:j:step], a[i:j,k:l], or a[..., i:j].
They are also created by the built-inslice()
function.Special read-only attributes: start is the lower bound;stop is the upper bound; step is the step value; each isNone if omitted.
These attributes can have any type.
Slice objects support one method:
This method takes a single integer argument length and computesinformation about the extended slice that the slice object woulddescribe if applied to a sequence of length items.
Static method objects
Static method objects provide a way of defeating the transformationof function objects to method objects described above.
A static methodobject is a wrapper around any other object, usually a user-definedmethod object.
When a static method object is retrieved from a classor a class instance, the object actually returned is the wrapped object,which is not subject to any further transformation.
Static methodobjects are not themselves callable, although the objects theywrap usually are.
Static method objects are created by the built-instaticmethod() constructor.
Class method objects
A class method object, like a static method object, is a wrapperaround another object that alters the way in which that objectis retrieved from classes and class instances.
The behaviour ofclass method objects upon such retrieval is described above,under ``User-defined methods''.
Class method objects are createdby the built-in classmethod() constructor.
Up:
About this document ...
Documenting Python,30 November 2004, Release 2.4 This document was generated using the
9.2 Discussion Forums
1. Introduction
Front Matter 1.
2.1 Built-in Functions
2.2 Non-essential Built-in Functions
2.4 Built-in Exceptions
2.5 Built-in Constants
3. Python Runtime Services
3.1 sys -- System-specific parameters and functions
3.2 gc -- Garbage Collector interface
3.3 weakref -- Weak references
3.3.3 Weak References in Extension Types
3.4 fpectl -- Floating point exception control
3.4.1 Example
3.4.2 Limitations and other considerations
3.5 atexit -- Exit handlers
3.5.1 atexit Example
3.6 types -- Names for built-in types
3.7 UserDict -- Class wrapper for dictionary objects
3.8 UserList -- Class wrapper for list objects
3.9 UserString -- Class wrapper for string objects
3.10 operator -- Standard operators as functions.
3.10.1 Mapping Operators to Functions
3.11 inspect -- Inspect live objects
3.11.1 Types and members
3.11.2 Retrieving source code
3.11.3 Classes and functions
3.11.4 The interpreter stack
3.12 traceback -- Print or retrieve a stack traceback
3.12.1 Traceback Example
3.13 linecache -- Random access to text lines
3.14 pickle -- Python object serialization
3.14.1 Relationship to other Python modules
3.14.2 Data stream format
3.14.3 Usage
3.14.4 What can be pickled and unpickled?
3.14.5 The pickle protocol
3.14.6 Subclassing Unpicklers
3.14.7 Example
3.15 cPickle -- A faster pickle
3.16 copy_reg -- Register pickle support functions
3.17 shelve -- Python object persistence
3.17.1 Restrictions
3.17.2 Example
3.18 copy -- Shallow and deep copy operations
3.19 marshal -- Internal Python object serialization
3.20 warnings -- Warning control
3.20.1 Warning Categories
3.20.2 The Warnings Filter
3.20.3 Available Functions
3.21 imp -- Access the import internals
3.21.1 Examples
3.22 pkgutil -- Package extension utility
3.23 code -- Interpreter base classes
3.23.1 Interactive Interpreter Objects
3.23.2 Interactive Console Objects
3.24 codeop -- Compile Python code
3.25 pprint -- Data pretty printer
3.25.1 PrettyPrinter Objects
3.26 repr -- Alternate repr() implementation
3.26.1 Repr Objects
3.26.2 Subclassing Repr Objects
3.27 new -- Creation of runtime internal objects
3.28 site -- Site-specific configuration hook
3.29 user -- User-specific configuration hook
3.30 __builtin__ -- Built-in functions
3.31 __main__ -- Top-level script environment
3.32 __future__ -- Future statement definitions
4. String Services
4.1 string -- Common string operations
4.1.2 Template strings
4.1.3 String functions
4.1.4 Deprecated string functions
4.2 re -- Regular expression operations
4.2.1 Regular Expression Syntax
4.2.2 Matching vs Searching
4.2.3 Module Contents
4.2.4 Regular Expression Objects
4.2.5 Match Objects
4.2.6 Examples
4.3 struct -- Interpret strings as packed binary data
4.4 difflib -- Helpers for computing deltas
4.4.1 SequenceMatcher Objects
4.4.2 SequenceMatcher Examples
4.4.3 Differ Objects
4.4.4 Differ Example
4.5 fpformat -- Floating point conversions
4.6 StringIO -- Read and write strings as files
4.7 cStringIO -- Faster version of StringIO
4.8 textwrap -- Text wrapping and filling
4.9 codecs -- Codec registry and base classes
4.9.1 Codec Base Classes
4.9.2 Standard Encodings
4.9.3 encodings. idna -- Internationalized Domain Names in Applications
4.10 unicodedata -- Unicode Database
4.11 stringprep -- Internet String Preparation
5. Miscellaneous Services
5.1 pydoc -- Documentation generator and online help system
5.2 doctest -- Test interactive Python examples
5.2.1 Simple Usage: Checking Examples in Docstrings
5.2.2 Simple Usage: Checking Examples in a Text File
5.2.4 Basic API
5.2.5 Unittest API
5.2.6 Advanced API
5.2.7 Debugging
5.2.8 Soapbox
5.3 unittest -- Unit testing framework
5.3.1 Basic example
5.3.2 Organizing test code
5.3.3 Re-using old test code
5.3.4 Classes and functions
5.3.5 TestCase Objects
5.3.6 TestSuite Objects
5.3.7 TestResult Objects
5.3.8 TestLoader Objects
5.4 test -- Regression tests package for Python
5.4.1 Writing Unit Tests for the test package
5.4.2 Running tests using test.regrtest
5.5 test.test_support -- Utility functions for tests
5.6 decimal -- Decimal floating point arithmetic
5.6.2 Decimal objects
5.6.3 Context objects
5.6.4 Signals
5.6.5 Floating Point Notes
5.6.6 Working with threads
5.6.7 Recipes
5.7 math -- Mathematical functions
5.8 cmath -- Mathematical functions for complex numbers
5.9 random -- Generate pseudo-random numbers
5.10 whrandom -- Pseudo-random number generator
5.11 bisect -- Array bisection algorithm
5.11.1 Examples
5.12 collections -- High-performance container datatypes
5.12.1 Recipes
5.13 heapq -- Heap queue algorithm
5.13.1 Theory
5.14 array -- Efficient arrays of numeric values
5.15 sets -- Unordered collections of unique elements
5.15.1 Set Objects
5.15.2 Example
5.15.3 Protocol for automatic conversion to immutable
5.16 itertools -- Functions creating iterators for efficient looping
5.16.1 Itertool functions
5.16.2 Examples
5.16.3 Recipes
5.17 ConfigParser -- Configuration file parser
5.17.1 RawConfigParser Objects
5.17.2 ConfigParser Objects
5.17.3 SafeConfigParser Objects
5.18 fileinput -- Iterate over lines from multiple input streams
5.19 calendar -- General calendar-related functions
5.20 cmd -- Support for line-oriented command interpreters
5.20.1 Cmd Objects
5.21 shlex -- Simple lexical analysis
5.21.1 shlex Objects
5.21.2 Parsing Rules
6. Generic Operating System Services
6.1 os -- Miscellaneous operating system interfaces
6.1.1 Process Parameters
6.1.2 File Object Creation
6.1.3 File Descriptor Operations
6.1.4 Files and Directories
6.1.5 Process Management
6.1.6 Miscellaneous System Information
6.1.7 Miscellaneous Functions
6.2 os.path -- Common pathname manipulations
6.3 dircache -- Cached directory listings
6.4 stat -- Interpreting stat() results
6.5 statcache -- An optimization of os. stat()
6.6 statvfs -- Constants used with os. statvfs()
6.7 filecmp -- File and Directory Comparisons
6.7.1 The dircmp class
6.8 subprocess -- Subprocess management
6.8.1 Using the subprocess Module
6.8.2 Popen Objects
6.8.3 Replacing Older Functions with the subprocess Module
6.9 popen2 -- Subprocesses with accessible I/O streams
6.9.1 Popen3 and Popen4 Objects
6.9.2 Flow Control Issues
6.10 datetime -- Basic date and time types
6.10.1 Available Types
6.10.2 timedelta Objects
6.10.3 date Objects
6.10.4 datetime Objects
6.10.5 time Objects
6.10.6 tzinfo Objects
6.10.7 strftime() Behavior
6.11 time -- Time access and conversions
6.12 sched -- Event scheduler
6.12.1 Scheduler Objects
6.13 mutex -- Mutual exclusion support
6.13.1 Mutex Objects
6.14 getpass -- Portable password input
6.15 curses -- Terminal handling for character-cell displays
6.15.1 Functions
6.15.2 Window Objects
6.15.3 Constants 6.16 curses.
textpad -- Text input widget for curses programs
6.16.1 Textbox objects 6.17 curses.
wrapper -- Terminal handler for curses programs
panel -- A panel stack extension for curses.
6.19.1 Functions
6.19.2 Panel Objects
6.20 getopt -- Parser for command line options
6.21 optparse -- More powerful command line option parser
6.21.3 Reference Guide
6.21.4 Option Callbacks
6.22 tempfile -- Generate temporary files and directories
6.23 errno -- Standard errno system symbols
6.24 glob -- Unix style pathname pattern expansion
6.25 fnmatch -- Unix filename pattern matching
6.26 shutil -- High-level file operations
6.26.1 Example
6.27 locale -- Internationalization services
6.27.1 Background, details, hints, tips and caveats
6.27.2 For extension writers and programs that embed Python
6.27.3 Access to message catalogs
6.28 gettext -- Multilingual internationalization services
6.28.2 Class-based API
6.28.3 Internationalizing your programs and modules
6.28.4 Acknowledgements
6.29 logging -- Logging facility for Python
6.29.1 Logger Objects
6.29.2 Basic example
6.29.3 Logging to multiple destinations
6.29.4 Sending and receiving logging events across a network
6.29.5 Handler Objects
6.29.6 Formatter Objects
6.29.7 Filter Objects
6.29.8 LogRecord Objects
6.29.9 Thread Safety
6.29.10 Configuration
6.30 platform -- Access to underlying platform's identifying data.
6.30.1 Cross Platform
6.30.2 Java Platform
6.30.3 Windows Platform
6.30.4 Mac OS Platform
6.30.5 Unix Platforms
7. Optional Operating System Services
7.1 signal -- Set handlers for asynchronous events
7.1.1 Example
7.2 socket -- Low-level networking interface
7.2.1 Socket Objects
7.2.2 SSL Objects
7.2.3 Example
7.3 select -- Waiting for I/O completion
7.3.1 Polling Objects
7.4 thread -- Multiple threads of control
7.5 threading -- Higher-level threading interface
7.5.1 Lock Objects
7.5.2 RLock Objects
7.5.3 Condition Objects
7.5.4 Semaphore Objects
7.5.5 Event Objects
7.5.6 Thread Objects
7.5.7 Timer Objects
7.6 dummy_thread -- Drop-in replacement for the thread module
7.7 dummy_threading -- Drop-in replacement for the threading module
7.8 Queue -- A synchronized queue class
7.8.1 Queue Objects
7.9 mmap --Memory-mapped file support
7.10 anydbm -- Generic access to DBM-style databases
7.11 dbhash -- DBM-style interface to the BSD database library
7.11.1 Database Objects
7.12 whichdb -- Guess which DBM module created a database
7.13 bsddb -- Interface to Berkeley DB library
7.13.1 Hash, BTree and Record Objects
7.14 dumbdbm -- Portable DBM implementation
7.14.1 Dumbdbm Objects
7.15 zlib -- Compression compatible with gzip
7.16 gzip -- Support for gzip files
7.17 bz2 -- Compression compatible with bzip2
7.17.1 (De)compression of files
7.17.2 Sequential (de)compression
7.17.3 One-shot (de)compression
7.18 zipfile -- Work with ZIP archives
7.18.1 ZipFile Objects
7.18.2 PyZipFile Objects
7.18.3 ZipInfo Objects
7.19 tarfile -- Read and write tar archive files
7.19.1 TarFile Objects
7.19.2 TarInfo Objects
7.19.3 Examples
7.20 readline -- GNU readline interface
7.20.1 Example
7.21 rlcompleter -- Completion function for GNU readline
7.21.1 Completer Objects
8. Unix Specific Services
8.1 posix -- The most common POSIX system calls
8.1.1 Large File Support
8.1.2 Module Contents
8.2 pwd -- The password database
8.3 grp -- The group database
8.4 crypt -- Function to check Unix passwords
8.5 dl -- Call C functions in shared objects
8.5.1 Dl Objects
8.6 dbm -- Simple ``database'' interface
8.7 gdbm -- GNU's reinterpretation of dbm
8.8 termios -- POSIX style tty control
8.8.1 Example
8.9 tty -- Terminal control functions
8.10 pty -- Pseudo-terminal utilities
8.11 fcntl -- The fcntl() and ioctl() system calls
8.12 pipes -- Interface to shell pipelines
8.12.1 Template Objects
8.13 posixfile -- File-like objects with locking support
8.14 resource -- Resource usage information
8.14.1 Resource Limits
8.14.2 Resource Usage
8.15 nis -- Interface to Sun's NIS (Yellow Pages)
8.16 syslog -- Unix syslog library routines
8.17 commands -- Utilities for running commands
9. The Python Debugger
9.1 Debugger Commands
9.2 How It Works
10. The Python Profiler
10.1 Introduction to the profiler
10.2 How Is This Profiler Different From The Old Profiler?
10.3 Instant Users Manual
10.4 What Is Deterministic Profiling?
10.5 Reference Manual
10.5.1 The Stats Class
10.6 Limitations
10.7 Calibration
10.8 Extensions -- Deriving Better Profilers
10.9 hotshot -- High performance logging profiler
10.9.1 Profile Objects
10.9.2 Using hotshot data
10.9.3 Example Usage
10.10 timeit -- Measure execution time of small code snippets
10.10.1 Command Line Interface
10.10.2 Examples
11. Internet Protocols and Support
11.1 webbrowser -- Convenient Web-browser controller
11.1.1 Browser Controller Objects
11.2 cgi -- Common Gateway Interface support.
11.2.1 Introduction
11.2.2 Using the cgi module
11.2.3 Higher Level Interface
11.2.4 Old classes
11.2.5 Functions
11.2.6 Caring about security
11.2.7 Installing your CGI script on a Unix system
11.2.8 Testing your CGI script
11.2.9 Debugging CGI scripts
11.2.10 Common problems and solutions
11.3 cgitb -- Traceback manager for CGI scripts
11.4 urllib -- Open arbitrary resources by URL
11.4.1 URLopener Objects
11.4.2 Examples
11.5 urllib2 -- extensible library for opening URLs
11.5.1 Request Objects
11.5.2 OpenerDirector Objects
11.5.3 BaseHandler Objects
11.5.4 HTTPRedirectHandler Objects
11.5.5 HTTPCookieProcessor Objects
11.5.6 ProxyHandler Objects
11.5.7 HTTPPasswordMgr Objects
11.5.8 AbstractBasicAuthHandler Objects
11.5.9 HTTPBasicAuthHandler Objects
11.5.10 ProxyBasicAuthHandler Objects
11.5.11 AbstractDigestAuthHandler Objects
11.5.12 HTTPDigestAuthHandler Objects
11.5.13 ProxyDigestAuthHandler Objects
11.5.14 HTTPHandler Objects
11.5.15 HTTPSHandler Objects
11.5.16 FileHandler Objects
11.5.17 FTPHandler Objects
11.5.18 CacheFTPHandler Objects
11.5.19 GopherHandler Objects
11.5.20 UnknownHandler Objects
11.5.21 HTTPErrorProcessor Objects
11.5.22 Examples
11.6 httplib -- HTTP protocol client
11.6.1 HTTPConnection Objects
11.6.2 HTTPResponse Objects
11.6.3 Examples
11.7 ftplib -- FTP protocol client
11.7.1 FTP Objects
11.8 gopherlib -- Gopher protocol client
11.9 poplib -- POP3 protocol client
11.9.1 POP3 Objects
11.9.2 POP3 Example
11.10 imaplib -- IMAP4 protocol client
11.10.1 IMAP4 Objects
11.10.2 IMAP4 Example
11.11 nntplib -- NNTP protocol client
11.11.1 NNTP Objects
11.12 smtplib -- SMTP protocol client
11.12.1 SMTP Objects
11.12.2 SMTP Example
11.13 smtpd -- SMTP Server
11.13.1 SMTPServer Objects
11.13.2 DebuggingServer Objects
11.13.3 PureProxy Objects
11.14 telnetlib -- Telnet client
11.14.1 Telnet Objects
11.15 urlparse -- Parse URLs into components
11.16 SocketServer -- A framework for network servers
11.17 BaseHTTPServer -- Basic HTTP server
11.18 SimpleHTTPServer -- Simple HTTP request handler
11.19 CGIHTTPServer -- CGI-capable HTTP request handler
11.20 cookielib -- Cookie handling for HTTP clients
11.20.1 CookieJar and FileCookieJar Objects
11.20.2 FileCookieJar subclasses and co-operation with web browsers
11.20.3 CookiePolicy Objects
11.20.4 DefaultCookiePolicy Objects
11.20.5 Cookie Objects
11.20.6 Examples
11.21 Cookie -- HTTP state management
11.21.1 Cookie Objects
11.21.2 Morsel Objects
11.21.3 Example
11.22 xmlrpclib -- XML-RPC client access
11.22.1 ServerProxy Objects
11.22.5 Fault Objects
11.22.6 ProtocolError Objects
11.22.7 MultiCall Objects
11.22.8 Convenience Functions
11.22.9 Example of Client Usage
11.23 SimpleXMLRPCServer -- Basic XML-RPC server
11.23.1 SimpleXMLRPCServer Objects
11.24 DocXMLRPCServer -- Self-documenting XML-RPC server
11.24.1 DocXMLRPCServer Objects
11.25 asyncore -- Asynchronous socket handler
11.25.1 asyncore Example basic HTTP client
11.26 asynchat -- Asynchronous socket command/response handler
11.26.1 asynchat - Auxiliary Classes and Functions
11.26.2 asynchat Example
12. Internet Data Handling
12.1 formatter -- Generic output formatting
12.1.1 The Formatter Interface
12.1.2 Formatter Implementations
12.1.3 The Writer Interface
12.1.4 Writer Implementations
12.2 email -- An email and MIME handling package
12.2.1 Representing an email message
12.2.2 Parsing email messages
12.2.3 Generating MIME documents
12.2.4 Creating email and MIME objects from scratch
12.2.5 Internationalized headers
12.2.6 Representing character sets
12.2.7 Encoders
12.2.8 Exception and Defect classes
12.2.9 Miscellaneous utilities
12.2.10 Iterators
12.2.11 Package History
12.2.12 Differences from mimelib
12.2.13 Examples
12.3 mailcap -- Mailcap file handling.
12.4 mailbox -- Read various mailbox formats
12.4.1 Mailbox Objects
12.5 mhlib -- Access to MH mailboxes
12.5.1 MH Objects
12.5.2 Folder Objects
12.5.3 Message Objects
12.6 mimetools -- Tools for parsing MIME messages
12.6.1 Additional Methods of Message Objects
12.7 mimetypes -- Map filenames to MIME types
12.7.1 MimeTypes Objects
12.8 MimeWriter -- Generic MIME file writer
12.8.1 MimeWriter Objects
12.9 mimify -- MIME processing of mail messages
12.10 multifile -- Support for files containing distinct parts
12.10.1 MultiFile Objects
12.10.2 MultiFile Example
12.11 rfc822 -- Parse RFC 2822 mail headers
12.11.1 Message Objects
12.11.2 AddressList Objects
12.12 base64 -- RFC 3548: Base16, Base32, Base64 Data Encodings
12.13 binascii -- Convert between binary and ASCII
12.14 binhex -- Encode and decode binhex4 files
12.14.1 Notes
12.15 quopri -- Encode and decode MIME quoted-printable data
12.16 uu -- Encode and decode uuencode files
12.17 xdrlib -- Encode and decode XDR data
12.17.1 Packer Objects
12.17.2 Unpacker Objects
12.17.3 Exceptions
12.18 netrc -- netrc file processing
12.18.1 netrc Objects
12.19 robotparser -- Parser for robots. txt
12.20 csv -- CSV File Reading and Writing
12.20.1 Module Contents
12.20.2 Dialects and Formatting Parameters
12.20.3 Reader Objects
12.20.4 Writer Objects
12.20.5 Examples
13. Structured Markup Processing Tools
13.1 HTMLParser -- Simple HTML and XHTML parser
13.1.1 Example HTML Parser Application
13.2 sgmllib -- Simple SGML parser
13.3 htmllib -- A parser for HTML documents
13.3.1 HTMLParser Objects
13.4 htmlentitydefs -- Definitions of HTML general entities
13.5 xml.parsers.expat -- Fast XML parsing using Expat
13.5.2 ExpatError Exceptions
13.5.3 Example
13.5.4 Content Model Descriptions
13.5.5 Expat error constants
13.6 xml.dom -- The Document Object Model API
13.6.1 Module Contents
13.6.2 Objects in the DOM
13.6.3 Conformance
13.7 xml.dom.minidom -- Lightweight DOM implementation
13.7.1 DOM Objects
13.7.2 DOM Example
13.7.3 minidom and the DOM standard
13.8 xml.dom.pulldom -- Support for building partial DOM trees
13.8.1 DOMEventStream Objects
13.9 xml.sax -- Support for SAX2 parsers
13.9.1 SAXException Objects
13.10 xml.sax.handler -- Base classes for SAX handlers
13.10.1 ContentHandler Objects
13.10.2 DTDHandler Objects
13.10.3 EntityResolver Objects
13.10.4 ErrorHandler Objects
13.11 xml.sax.saxutils -- SAX Utilities
13.12 xml.sax.xmlreader -- Interface for XML parsers
13.12.1 XMLReader Objects
13.12.2 IncrementalParser Objects
13.12.3 Locator Objects
13.12.4 InputSource Objects
13.12.5 The Attributes Interface
13.12.6 The AttributesNS Interface
13.13 xmllib -- A parser for XML documents
13.13.1 XML Namespaces
14. Multimedia Services
14.1 audioop -- Manipulate raw audio data
14.2 imageop -- Manipulate raw image data
14.3 aifc -- Read and write AIFF and AIFC files
14.4 sunau -- Read and write Sun AU files
14.4.1 AU_read Objects
14.4.2 AU_write Objects
14.5 wave -- Read and write WAV files
14.5.1 Wave_read Objects
14.5.2 Wave_write Objects
14.6 chunk -- Read IFF chunked data
14.7 colorsys -- Conversions between color systems
14.8 rgbimg -- Read and write ``SGI RGB'' files
14.9 imghdr -- Determine the type of an image
14.10 sndhdr -- Determine type of sound file
14.11 ossaudiodev -- Access to OSS-compatible audio devices
14.11.1 Audio Device Objects
14.11.2 Mixer Device Objects
15. Cryptographic Services
15.1 hmac -- Keyed-Hashing for Message Authentication
15.2 md5 -- MD5 message digest algorithm
15.3 sha -- SHA-1 message digest algorithm
16. Graphical User Interfaces with Tk
16.1 Tkinter -- Python interface to Tcl/Tk
16.1.1 Tkinter Modules
16.1.2 Tkinter Life Preserver 16.1.3 A (Very)
Quick Look at Tcl/Tk
16.1.4 Mapping Basic Tk into Tkinter
16.1.5 How Tk and Tkinter are Related
16.1.6 Handy Reference
16.2 Tix -- Extension widgets for Tk
16.2.1 Using Tix
16.2.2 Tix Widgets
16.2.3 Tix Commands
16.3 ScrolledText -- Scrolled Text Widget
16.4 turtle -- Turtle graphics for Tk
16.4.1 Pen and RawPen Objects
16.5.1 Menus
16.5.2 Basic editing and navigation
16.5.3 Syntax colors
16.6 Other Graphical User Interface Packages
17. Restricted Execution
17.1 rexec -- Restricted execution framework
17.1.1 RExec Objects
17.1.2 Defining restricted environments
17.1.3 An example
17.2 Bastion -- Restricting access to objects
18. Python Language Services
18.1 parser -- Access Python parse trees
18.1.1 Creating AST Objects
18.1.2 Converting AST Objects
18.1.3 Queries on AST Objects
18.1.4 Exceptions and Error Handling
18.1.5 AST Objects
18.1.6 Examples
18.2 symbol -- Constants used with Python parse trees
18.3 token -- Constants used with Python parse trees
18.4 keyword -- Testing for Python keywords
18.5 tokenize -- Tokenizer for Python source
18.6 tabnanny -- Detection of ambiguous indentation
18.7 pyclbr -- Python class browser support
18.7.1 Class Descriptor Objects
18.7.2 Function Descriptor Objects
18.8 py_compile -- Compile Python source files
18.9 compileall -- Byte-compile Python libraries
18.10 dis -- Disassembler for Python byte code
18.10.1 Python Byte Code Instructions 18.11 pickletools -- Tools for pickle developers.
18.12 distutils -- Building and installing Python modules
19. Python compiler package
19.1 The basic interface
19.2 Limitations
19.3 Python Abstract Syntax
19.3.1 AST Nodes
19.3.2 Assignment nodes
19.3.3 Examples
19.4 Using Visitors to Walk ASTs
19.5 Bytecode Generation
20. SGI IRIX Specific Services
20.1 al -- Audio functions on the SGI
20.1.1 Configuration Objects
20.1.2 Port Objects
20.2 AL -- Constants used with the al module
20.3 cd -- CD-ROM access on SGI systems
20.3.1 Player Objects
20.3.2 Parser Objects
20.4 fl -- FORMS library for graphical user interfaces
20.4.1 Functions Defined in Module fl
20.4.2 Form Objects
20.4.3 FORMS Objects
20.5 FL -- Constants used with the fl module
20.6 flp -- Functions for loading stored FORMS designs
20.7 fm -- Font Manager interface
20.8 gl -- Graphics Library interface
20.9 DEVICE -- Constants used with the gl module
20.10 GL -- Constants used with the gl module
20.11 imgfile -- Support for SGI imglib files
20.12 jpeg -- Read and write JPEG files
21. SunOS Specific Services
21.1 sunaudiodev -- Access to Sun audio hardware
21.1.1 Audio Device Objects
21.2 SUNAUDIODEV -- Constants used with sunaudiodev
22. MS Windows Specific Services
22.1 msvcrt - Useful routines from the MS VC++ runtime
22.1.1 File Operations
22.1.2 Console I/O
22.1.3 Other Functions
22.2 _winreg - Windows registry access
22.2.1 Registry Handle Objects
22.3 winsound -- Sound-playing interface for Windows A.
Undocumented Modules
A.1 Frameworks
A.2 Miscellaneous useful utilities
A.3 Platform specific modules
A.4 Multimedia
A.5 Obsolete
A.6 SGI-specific Extension modules B.
Reporting Bugs C.
About this document ... Python Library Reference
1.
Introduction
This library reference manual documents Python's extensions for theMacintosh. It should be used in conjunction with the
For aninformal introduction to Python, see the
; the
remains thehighest authority on syntactic and semantic questions.
Finally, themanual entitled
Extending and Embeddingthe Python Interpreter
describes how to add new extensions to Pythonand how to embed it in other applications.
|
l
|
m
|
n
|
o
|
p
|
q
|
r
|
s
|
t
|
u
|
v
|
w
_quit() (Application method)
_start() (TalkTo method)
aetools (standard module)
aetypes (standard module)
applesingle (standard module)
Application() (in module FrameWork)
as_pathname() (FSSpec method)
as_tuple() (FSSpec method)
AskFileForOpen() (in module EasyDialogs)
AskFileForSave() (in module EasyDialogs)
AskFolder() (in module EasyDialogs)
AskPassword() (in module EasyDialogs)
AskString() (in module EasyDialogs)
AskYesNoCancel() (in module EasyDialogs)
asyncevents() (Application method)
autoGIL (extension module)
BUFSIZ (in module macostools)
buildtools (standard module)
callback() (AEServer method)
Carbon.AE (standard module)
Carbon.AH (standard module)
Carbon.App (standard module)
Carbon.CaronEvt (standard module)
Carbon.CF (standard module)
Carbon.CG (standard module)
Carbon.Cm (standard module)
Carbon.Ctl (standard module)
Carbon.Dlg (standard module)
Carbon.Evt (standard module)
Carbon.Fm (standard module)
Carbon.Folder (standard module)
Carbon.Help (standard module)
Carbon.List (standard module)
Carbon.Menu (standard module)
Carbon.Mlte (standard module)
Carbon.Qd (built-in module)
Carbon.Qdoffs (built-in module)
Carbon.Qt (standard module)
Carbon.Res (standard module)
Carbon.Scrap (standard module)
Carbon.Snd (standard module)
Carbon.TE (standard module)
Carbon.Win (standard module)
cfmfile (standard module)
close() (Window method)
ColorPicker (extension module)
copy() (in module macostools)
copytree() (in module macostools)
Creator (FInfo attribute)
curval (ProgressBar attribute)
data (Alias attribute)
data (FSSpec attribute)
DebugStr() (in module MacOS)
DialogWindow() (in module FrameWork)
distutils (module)
do_activate() (IC method)
do_activate() (ScrolledWindow method)
do_char() (Application method)
do_contentclick() (Window method)
do_controlhit() (ControlsWindow method)
do_controlhit() (ScrolledWindow method)
do_dialogevent() (Application method)
do_itemhit() (DialogWindow method)
do_postresize() (ScrolledWindow method)
do_postresize() (Window method)
do_update() (Window method)
EasyDialogs (standard module)
FindApplication() (in module macfs)
findertools (standard module)
FindFolder() (in module macfs)
FInfo() (in module macfs)
Flags (FInfo attribute)
Fldr (FInfo attribute)
FrameWork (standard module),[Link]
FSSpec() (in module macfs)
gensuitemodule (standard module)
getabouttext() (Application method)
GetArgv() (in module EasyDialogs)
GetColor() (in module ColorPicker)
GetCreatorAndType() (in module MacOS)
GetCreatorType() (FSSpec method)
GetDates() (FSSpec method)
GetDirectory() (in module macfs)
GetErrorString() (in module MacOS)
GetFInfo() (FSSpec method)
GetInfo() (Alias method)
getscrollbarvalues() (ScrolledWindow method)
GetTicks() (in module MacOS)
HandleEvent() (in module MacOS)
ic (built-in module) IC (class in ic)
icglue (built-in module)
icopen (standard module)
idle() (Application method)
inc() (ProgressBar method) InsertionLoc (class in aetypes)
installaehandler() (AEServer method)
installAutoGIL() (in module autoGIL)
keysubst() (in module aetools)
label() (ProgressBar method)
launch() (in module findertools)
launchurl() (IC method)
launchurl() (in module ic)
linkmodel (in module MacOS)
Location (FInfo attribute)
mac (built-in module)
macerrors (standard module),[Link]
macfs (standard module)
MacOS (built-in module)
macostools (standard module)
macpath (standard module)
macresource (standard module)
mainloop() (Application method)
makeusermenus() (Application method)
mapfile() (IC method)
mapfile() (in module ic)
maptypecreator() (IC method)
maptypecreator() (in module ic)
maxval (ProgressBar attribute)
Menu() (in module FrameWork)
MenuBar() (in module FrameWork)
MenuItem() (in module FrameWork)
Message() (in module EasyDialogs)
MiniAEFrame (standard module)
MiniApplication (class in MiniAEFrame) mkalias() (in module macostools)
mkcwproject (standard module)
move() (in module findertools)
Nav (standard module)
NewAlias() (FSSpec method)
NewAliasMinimal() (FSSpec method)
NewAliasMinimalFromFullPath() (in module macfs) NProperty (class in aetypes)
nsremote (standard module)
open() (DialogWindow method)
open() (Window method)
openrf() (in module MacOS)
Ordinal (class in aetypes)
os (standard module)
pack() (in module aepack)
packevent() (in module aetools)
parseurl() (IC method)
parseurl() (in module ic)
PixMapWrapper (standard module)
preferences (standard module)
Print() (in module findertools)
processfile() (in module gensuitemodule)
processfile_fromresource() (in module gensuitemodule)
ProgressBar() (in module EasyDialogs)
PromptGetFile() (in module macfs)
py_resource (standard module)
PYTHONPATH (environment variable)
pythonprefs (standard module)
quietconsole (standard module)
RawAlias() (in module macfs)
RawFSSpec() (in module macfs)
Resolve() (Alias method)
ResolveAliasFile() (in module macfs)
restart() (in module findertools) RGBColor (class in aetypes)
runtimemodel (in module MacOS)
scalebarvalues() (ScrolledWindow method)
SchedParams() (in module MacOS)
scrollbar_callback() (ScrolledWindow method)
scrollbars() (ScrolledWindow method)
send() (TalkTo method)
Separator() (in module FrameWork)
set() (ProgressBar method)
setarrowcursor() (in module FrameWork)
SetCreatorAndType() (in module MacOS)
SetCreatorType() (FSSpec method)
SetDates() (FSSpec method)
SetEventHandler() (in module MacOS)
SetFInfo() (FSSpec method)
SetFolder() (in module macfs)
settypecreator() (IC method)
settypecreator() (in module ic)
setwatchcursor() (in module FrameWork)
shutdown() (in module findertools)
sleep() (in module findertools)
splash() (in module MacOS)
StandardGetFile() (in module macfs)
StandardPutFile() (in module macfs) StyledText (class in aetypes)
SubMenu() (in module FrameWork)
SysBeep() (in module MacOS)
title() (ProgressBar method)
touched() (in module macostools) Type (class in aetypes)
Type (FInfo attribute)
unpack() (in module aepack)
unpackevent() (in module aetools)
Update() (Alias method)
updatescrollbars() (ScrolledWindow method)
videoreader (standard module)
W (standard module)
waste (standard module)
Window() (in module FrameWork)
windowbounds() (in module FrameWork)
1. Extending Python with C or C++
1.1 A Simple Example 1.
Extending Python with C or C++
Global Module Index
Some module names are followed by an annotation indicating whatplatform they are available on.
See About this document..
B.3.10 XML Remote Procedure
1. Using Python on
1.1 Getting and Installing MacPython-OSX
1.1.1 How to run a Python script
1.1.2 Running scripts with a GUI
1.1.3 configuration
1.2 Getting and Installing MacPython-OS9
1.2.1 Entering the interactive Interpreter
1.2.2 How to run a Python script
1.2.3 Simulating command line arguments
1.2.4 Creating a Python script
1.3 The IDE
1.3.1 Using the ``Python Interactive'' window
1.3.2 Writing a Python Script
1.3.3 Executing a script from within the IDE
1.3.4 ``Save as'' versus ``Save as Applet''
2. MacPython Modules
2.1 mac -- Implementations for the os module
2.2 macpath -- MacOS path manipulation functions
2.3 macfs -- Various file system services
2.3.1 FSSpec Objects
2.3.2 Alias Objects
2.3.3 FInfo Objects
2.4 ic -- Access to Internet Config
2.4.1 IC Objects
2.5 MacOS -- Access to Mac OS interpreter features
2.6 macostools -- Convenience routines for file manipulation
2.7 findertools -- The finder's Apple Events interface
2.8 EasyDialogs -- Basic Macintosh dialogs
2.8.1 ProgressBar Objects
2.9 FrameWork -- Interactive application framework
2.9.1 Application Objects
2.9.2 Window Objects
2.9.3 ControlsWindow Object
2.9.4 ScrolledWindow Object
2.9.5 DialogWindow Objects
2.10 autoGIL -- Global Interpreter Lock handling in event loops
3. MacPython OSA Modules
3.1 gensuitemodule -- Generate OSA stub packages
3.2 aetools -- OSA client support
3.3 aepack -- Conversion between Python variables and AppleEvent data containers
3.4 aetypes -- AppleEvent objects
3.5 MiniAEFrame -- Open Scripting Architecture server support
3.5.1 AEServer Objects
4. MacOS Toolbox Modules
4.2 Carbon.AH -- Apple Help
4.3 Carbon.App -- Appearance Manager
4.25 ColorPicker -- Color selection dialog
5. Undocumented Modules
5.1 applesingle -- AppleSingle decoder
5.2 buildtools -- Helper module for BuildApplet and Friends
5.3 py_resource -- Resources from Python code
5.4 cfmfile -- Code Fragment Resource module
5.5 icopen -- Internet Config replacement for open()
5.6 macerrors -- Mac OS Errors
5.7 macresource -- Locate script resources
5.8 Nav -- NavServices calls
5.9 mkcwproject -- Create CodeWarrior projects
5.10 nsremote -- Wrapper around Netscape OSA modules
5.11 PixMapWrapper -- Wrapper for PixMap objects
5.12 preferences -- Application preferences manager
5.13 pythonprefs -- Preferences manager for Python
5.14 quietconsole -- Non-visible standard output
5.15 videoreader -- Read QuickTime movies
5.16 W -- Widgets built on FrameWork
5.17 waste -- non-Apple TextEdit replacement A.
History and License
A.1 History of the software
About this document ... Macintosh Library Modules
Python is an interpreted, object-oriented, high-level programminglanguage with dynamic semantics.
Its high-level built in datastructures, combined with dynamic typing and dynamic binding, make itvery attractive for rapid application development, as well as for useas a scripting or glue language to connect existing componentstogether.
Python's simple, easy to learn syntax emphasizesreadability and therefore reduces the cost of programmaintenance.
Python supports modules and packages, which encouragesprogram modularity and code reuse.
The Python interpreter and theextensive standard library are available in source or binary formwithout charge for all major platforms, and can be freely distributed.This reference manual describes the syntax and ``core semantics'' ofthe language.
It is terse, but attempts to be exact and complete.The semantics of non-essential built-in object types and of thebuilt-in functions and modules are described in the
.
For aninformal introduction to the language, see the
For C orC++ programmers, two additional manuals exist:
Extending and Embedding the PythonInterpreter
describes the high-level picture of how to write a Pythonextension module, and the
Python/C APIReference Manual
describes the interfaces available toC/C++ programmers in detail.
|
__abs__() (numeric object method)
__add__() (numeric object method)
__and__() (numeric object method)
__builtin__ (built-in module),[Link]
__call__() (object method),[Link]
__coerce__() (numeric object method),[Link]
__complex__() (numeric object method)
__contains__() (container object method)
__del__() (object method)
__delattr__() (object method)
__delete__() (object method)
__delitem__() (container object method)
__delslice__() (sequence object method)
__div__() (numeric object method)
__divmod__() (numeric object method)
__eq__() (object method)
__float__() (numeric object method)
__floordiv__() (numeric object method)
__ge__() (object method)
__get__() (object method)
__getattr__() (object method)
__getattribute__() (object method)
__getitem__() (container object method)
__getslice__() (sequence object method)
__gt__() (object method)
__hash__() (object method)
__hex__() (numeric object method)
__iadd__() (numeric object method)
__iand__() (numeric object method)
__idiv__() (numeric object method)
__ifloordiv__() (numeric object method)
__ilshift__() (numeric object method)
__imod__() (numeric object method)
__import__() (built-in function)
__imul__() (numeric object method)
__init__.py
__int__() (numeric object method)
__invert__() (numeric object method)
__ior__() (numeric object method)
__ipow__() (numeric object method)
__irshift__() (numeric object method)
__isub__() (numeric object method)
__iter__() (container object method)
__itruediv__() (numeric object method)
__ixor__() (numeric object method)
__le__() (object method)
__len__() (container object method)
__long__() (numeric object method)
__lshift__() (numeric object method)
__lt__() (object method)
__main__ (built-in module),[Link],[Link]
__mod__() (numeric object method)
__mul__() (numeric object method)
__ne__() (object method)
__neg__() (numeric object method)
__oct__() (numeric object method)
__or__() (numeric object method)
__pos__() (numeric object method)
__pow__() (numeric object method)
__radd__() (numeric object method)
__rand__() (numeric object method)
__rcmp__() (object method)
__rdiv__() (numeric object method)
__rdivmod__() (numeric object method)
__repr__() (object method)
__rfloordiv__() (numeric object method)
__rlshift__() (numeric object method)
__rmod__() (numeric object method)
__rmul__() (numeric object method)
__ror__() (numeric object method)
__rpow__() (numeric object method)
__rrshift__() (numeric object method)
__rshift__() (numeric object method)
__rsub__() (numeric object method)
__rtruediv__() (numeric object method)
__rxor__() (numeric object method)
__set__() (object method)
__setattr__() (object method),[Link]
__setitem__() (container object method)
__setslice__() (sequence object method)
__str__() (object method)
__sub__() (numeric object method)
__truediv__() (numeric object method)
__unicode__() (object method)
__xor__() (numeric object method)
abs() (built-in function)
array (standard module)
bsddb (standard module)
chr() (built-in function),[Link]
cmp() (built-in function)
compile() (built-in function)
complex() (built-in function)
divmod() (built-in function),[Link]
keyword
keyword,[Link],[Link],[Link],[Link]
eval() (built-in function),[Link],[Link]
execfile() (built-in function)
keyword,[Link],[Link],[Link]
float() (built-in function)
keyword,[Link]
gdbm (standard module)
globals() (built-in function)
hex() (built-in function)
id() (built-in function)
indices() (slice method)
input() (built-in function)
int() (built-in function)
len() (built-in function),[Link],[Link]
locals() (built-in function)
long() (built-in function)
oct() (built-in function)
open() (built-in function)
ord() (built-in function),[Link],[Link]
pow() (built-in function),[Link],[Link],[Link]
range() (built-in function)
raw string raw_input() (built-in function)
repr() (built-in function),[Link],[Link]
slice() (built-in function)
str() (built-in function),[Link]
sys (built-in module),[Link],[Link],[Link]
type() (built-in function)
unichr() (built-in function)
unicode() (built-in function),[Link]
Previous:
Python 2.4 Documentation - November 30, 2004
Python Documentation
Tutorial
(start here)
What's New in Python
(changes since the last major release)
(for quick access to all documentation) Library Reference
(keep this under your pillow) Macintosh ModuleReference
(this too, if you use a Macintosh) InstallingPython Modules
(for administrators) DistributingPython Modules
(for developers and packagers)
Language Reference
(for language lawyers) Extending andEmbedding
(tutorial for C/C++ programmers) Python/C API
(reference for C/C++ programmers) Documenting Python
(information for documentation authors)
Documentation Central
(for everyone)
Python How-To Guides
(special topics)
Introduction Python Library Reference
For these types,the Python language core defines the form of literals and places someconstraints on their semantics, but does not fully define thesemantics.
(On the other hand, the language core does definesyntactic properties like the spelling and priorities of operators.)The library also contains built-in functions and exceptions --objects that can be used by all Python code without the need of animport statement.
Some modules arewritten in C and built in to the Python interpreter; others arewritten in Python and imported in source form.
Theordering of the chapters as well as the ordering of the modules withineach chapter is roughly from most relevant to least important.This means that if you start reading this manual from the start, andskip to the next chapter when you get bored, you will get a reasonableoverview of the available modules and application areas that aresupported by the Python library.
Of course, you don't have toread it like a novel -- you can also browse the table of contents (infront of the manual), or look for a specific function, module or termin the index (in the back).
And finally, if you enjoy learning aboutrandom subjects, you choose a random page number (see module
) and read a section or two.
Installing Python Modules
6 Building Extensions: Tips
1. Introduction
1.1 Notation
2. Lexical analysis
2.1 Line structure
2.1.1 Logical lines
2.1.2 Physical lines
2.1.3 Comments
2.1.4 Encoding declarations
2.1.5 Explicit line joining
2.1.6 Implicit line joining
2.1.7 Blank lines
2.1.8 Indentation
2.1.9 Whitespace between tokens
2.2 Other tokens
2.3 Identifiers and keywords
2.3.1 Keywords
2.3.2 Reserved classes of identifiers
2.4.3 Numeric literals
2.4.4 Integer and long integer literals
2.4.5 Floating point literals
2.4.6 Imaginary literals
2.5 Operators
2.6 Delimiters
3.3.1 Basic customization
3.3.2 Customizing attribute access
3.3.3 Customizing class creation
3.3.4 Emulating callable objects
3.3.5 Emulating container types
3.3.6 Additional methods for emulation of sequence types
3.3.7 Emulating numeric types
3.3.8 Coercion rules
4.1 Naming and binding
4.1.1 Interaction with dynamic features
5.1 Arithmetic conversions
5.2 Atoms
5.2.1 Identifiers (Names)
5.2.2 Literals
5.2.3 Parenthesized forms
5.2.4 List displays
5.2.5 Generator expressions
5.2.6 Dictionary displays
5.2.7 String conversions
5.3 Primaries
5.3.1 Attribute references
5.3.2 Subscriptions
5.3.3 Slicings
5.3.4 Calls
5.4 The power operator
5.5 Unary arithmetic operations
5.6 Binary arithmetic operations
5.7 Shifting operations
5.8 Binary bit-wise operations
5.11 Lambdas
5.12 Expression lists
5.13 Evaluation order
5.14 Summary
6. Simple statements
6.1 Expression statements
6.2 Assert statements
6.3 Assignment statements
6.3.1 Augmented assignment statements
6.4 The pass statement
6.5 The del statement
6.6 The print statement
6.7 The return statement
6.8 The yield statement
6.9 The raise statement
6.10 The break statement
6.11 The continue statement
6.12 The import statement
6.12.1 Future statements
6.13 The global statement
6.14 The exec statement
7. Compound statements
7.1 The if statement
7.2 The while statement
7.3 The for statement
7.4 The try statement
7.5 Function definitions
7.6 Class definitions
8. Top-level components
8.1 Complete Python programs
8.2 File input
8.3 Interactive input
8.4 Expression input A.
About this document ... Python Reference Manual
1 Introduction
Email: distutils-sig@python.org
30 November 2004
This document describes the Python Distribution Utilities(``Distutils'') from the end-user's point-of-view, describing how toextend the capabilities of a standard Python installation by buildingand installing third-party Python modules and extensions.
1.1 Best case: trivial installation
1.2 The new standard: Distutils
2 Standard Build and Install
2.1 Platform variations
2.2 Splitting the job up
2.3 How building works
2.4 How installation works
3 Alternate Installation
3.1 Alternate installation: the home scheme
3.2 Alternate installation: Unix (the prefix scheme)
3.3 Alternate installation: Windows (the prefix scheme)
4 Custom Installation
4.1 Modifying Python's Search Path
5 Distutils Configuration Files
5.1 Location and names of config files
5.2 Syntax of config files
6 Building Extensions: Tips and Tricks
6.1 Tweaking compiler/linker flags
6.2 Using non-Microsoft compilers on Windows
3.1 sys --System-specific parameters and functions
3.2 gc --Garbage Collector interface
3.3 weakref --Weak references
3.4 fpectl --Floating point exception control
3.5 atexit --Exit handlers
3.6 types --Names for built-in types
3.7 UserDict --Class wrapper for dictionary objects
3.8 UserList --Class wrapper for list objects
3.9 UserString --Class wrapper for string objects
3.10 operator --Standard operators as functions.
3.11 inspect --Inspect live objects
3.12 traceback --Print or retrieve a stack traceback
3.13 linecache --Random access to text lines
3.16 copy_reg --Register pickle support functions
3.17 shelve --Python object persistence
3.18 copy --Shallow and deep copy operations
3.19 marshal --Internal Python object serialization
3.20 warnings --Warning control
3.21 imp --Access the import internals
3.22 pkgutil --Package extension utility
3.23 code --Interpreter base classes
3.24 codeop --Compile Python code
3.25 pprint --Data pretty printer
3.26 repr --Alternate repr() implementation
3.27 new --Creation of runtime internal objects
3.28 site --Site-specific configuration hook
3.29 user --User-specific configuration hook
3.30 __builtin__ --Built-in functions
3.31 __main__ --Top-level script environment
3.32 __future__ --Future statement definitions
4.1 string --Common string operations
4.2 re --Regular expression operations
4.3 struct --Interpret strings as packed binary data
4.4 difflib --Helpers for computing deltas
4.5 fpformat --Floating point conversions
4.6 StringIO --Read and write strings as files
4.7 cStringIO --Faster version of StringIO
4.8 textwrap --Text wrapping and filling
4.9 codecs --Codec registry and base classes
4.9.3 encodings. idna --Internationalized Domain Names in Applications
4.10 unicodedata --Unicode Database
4.11 stringprep --Internet String Preparation
5.1 pydoc --Documentation generator and online help system
5.2 doctest --Test interactive Python examples
5.2.1 Simple Usage: Checking Examples inDocstrings
5.2.2 Simple Usage: Checking Examples in a TextFile
5.3 unittest --Unit testing framework
5.4 test --Regression tests package for Python
5.5 test.test_support --Utility functions for tests
5.6 decimal --Decimal floating point arithmetic
5.7 math --Mathematical functions
5.8 cmath --Mathematical functions for complex numbers
5.9 random --Generate pseudo-random numbers
5.10 whrandom --Pseudo-random number generator
5.11 bisect --Array bisection algorithm
5.12 collections --High-performance container datatypes
5.13 heapq --Heap queue algorithm
5.14 array --Efficient arrays of numeric values
5.15 sets --Unordered collections of unique elements
5.16 itertools --Functions creating iterators for efficient looping
5.17 ConfigParser --Configuration file parser
5.18 fileinput --Iterate over lines from multiple input streams
5.19 calendar --General calendar-related functions
5.20 cmd --Support for line-oriented command interpreters
5.21 shlex --Simple lexical analysis
6.1 os --Miscellaneous operating system interfaces
6.2 os.path --Common pathname manipulations
6.3 dircache --Cached directory listings
6.4 stat --Interpreting stat() results
6.5 statcache --An optimization of os. stat()
6.6 statvfs --Constants used with os. statvfs()
6.7 filecmp --File and Directory Comparisons
6.9 popen2 --Subprocesses with accessible I/O streams
6.10 datetime --Basic date and time types
6.11 time --Time access and conversions
6.12 sched --Event scheduler
6.13 mutex --Mutual exclusion support
6.14 getpass-- Portable password input
6.15 curses --Terminal handling for character-cell displays
textpad --Text input widget for curses programs
wrapper --Terminal handler for curses programs
panel --A panel stack extension for curses.
6.20 getopt --Parser for command line options
6.21 optparse -- More powerful command line option parser
6.22 tempfile --Generate temporary files and directories
6.23 errno --Standard errno system symbols
6.24 glob --Unix style pathname pattern expansion
6.25 fnmatch --Unix filename pattern matching
6.26 shutil --High-level file operations
6.27 locale --Internationalization services
6.28 gettext --Multilingual internationalization services
6.29 logging --Logging facility for Python
7.1 signal --Set handlers for asynchronous events
7.2 socket --Low-level networking interface
7.3 select --Waiting for I/O completion
7.4 thread --Multiple threads of control
7.5 threading --Higher-level threading interface
7.6 dummy_thread --Drop-in replacement for the thread module
7.7 dummy_threading --Drop-in replacement for the threading module
7.8 Queue --A synchronized queue class
7.10 anydbm --Generic access to DBM-style databases
7.11 dbhash --DBM-style interface to the BSD database library
7.12 whichdb --Guess which DBM module created a database
7.13 bsddb --Interface to Berkeley DB library
7.14 dumbdbm --Portable DBM implementation
7.15 zlib --Compression compatible with gzip
7.16 gzip --Support for gzip files
7.17 bz2 --Compression compatible with bzip2
7.18 zipfile --Work with ZIP archives
7.20 readline --GNU readline interface
7.21 rlcompleter --Completion function for GNU readline
8.1 posix --The most common POSIX system calls
8.2 pwd --The password database
8.3 grp --The group database
8.4 crypt --Function to check Unix passwords
8.5 dl --Call C functions in shared objects
8.6 dbm --Simple ``database'' interface
8.7 gdbm --GNU's reinterpretation of dbm
8.8 termios --POSIX style tty control
8.9 tty --Terminal control functions
8.10 pty --Pseudo-terminal utilities
8.11 fcntl --The fcntl() and ioctl() system calls
8.12 pipes --Interface to shell pipelines
8.13 posixfile --File-like objects with locking support
8.14 resource --Resource usage information
8.15 nis --Interface to Sun's NIS (Yellow Pages)
8.16 syslog --Unix syslog library routines
8.17 commands --Utilities for running commands
10.9 hotshot --High performance logging profiler
10.10 timeit --Measure execution time of small code snippets
11.1 webbrowser --Convenient Web-browser controller
11.2 cgi --Common Gateway Interface support.
11.3 cgitb --Traceback manager for CGI scripts
11.4 urllib --Open arbitrary resources by URL
11.5 urllib2 --extensible library for opening URLs
11.6 httplib --HTTP protocol client
11.7 ftplib --FTP protocol client
11.8 gopherlib --Gopher protocol client
11.9 poplib --POP3 protocol client
11.10 imaplib --IMAP4 protocol client
11.11 nntplib --NNTP protocol client
11.12 smtplib --SMTP protocol client
11.13 smtpd --SMTP Server
11.14 telnetlib --Telnet client
11.15 urlparse --Parse URLs into components
11.16 SocketServer --A framework for network servers
11.17 BaseHTTPServer --Basic HTTP server
11.18 SimpleHTTPServer --Simple HTTP request handler
11.19 CGIHTTPServer --CGI-capable HTTP request handler
11.20 cookielib --Cookie handling for HTTP clients
11.21 Cookie --HTTP state management
11.23 SimpleXMLRPCServer --Basic XML-RPC server
11.24 DocXMLRPCServer --Self-documenting XML-RPC server
11.25 asyncore --Asynchronous socket handler
11.26 asynchat --Asynchronous socket command/response handler
12.1 formatter --Generic output formatting
12.2 email --An email and MIME handling package
12.3 mailcap --Mailcap file handling.
12.4 mailbox --Read various mailbox formats
12.5 mhlib --Access to MH mailboxes
12.6 mimetools --Tools for parsing MIME messages
12.7 mimetypes --Map filenames to MIME types
12.8 MimeWriter --Generic MIME file writer
12.9 mimify --MIME processing of mail messages
12.10 multifile --Support for files containing distinct parts
12.11 rfc822 --Parse RFC 2822 mail headers
12.12 base64 --RFC 3548: Base16, Base32, Base64 Data Encodings
12.13 binascii --Convert between binary and ASCII
12.14 binhex --Encode and decode binhex4 files
12.15 quopri --Encode and decode MIME quoted-printable data
12.16 uu --Encode and decode uuencode files
12.17 xdrlib --Encode and decode XDR data
12.18 netrc --netrc file processing
13.1 HTMLParser --Simple HTML and XHTML parser
13.2 sgmllib --Simple SGML parser
13.3 htmllib --A parser for HTML documents
13.4 htmlentitydefs --Definitions of HTML general entities
13.5 xml.parsers.expat --Fast XML parsing using Expat
13.6 xml.dom --The Document Object Model API
13.7 xml.dom.minidom --Lightweight DOM implementation
13.8 xml.dom.pulldom --Support for building partial DOM trees
13.9 xml.sax --Support for SAX2 parsers
13.10 xml.sax.handler --Base classes for SAX handlers
13.11 xml.sax.saxutils --SAX Utilities
13.12 xml.sax.xmlreader --Interface for XML parsers
13.13 xmllib --A parser for XML documents
14.1 audioop --Manipulate raw audio data
14.2 imageop --Manipulate raw image data
14.3 aifc --Read and write AIFF and AIFC files
14.4 sunau --Read and write Sun AU files
14.5 wave --Read and write WAV files
14.6 chunk --Read IFF chunked data
14.7 colorsys --Conversions between color systems
14.8 rgbimg --Read and write ``SGI RGB'' files
14.9 imghdr --Determine the type of an image
14.10 sndhdr --Determine type of sound file
14.11 ossaudiodev --Access to OSS-compatible audio devices
15.1 hmac --Keyed-Hashing for Message Authentication
15.2 md5 --MD5 message digest algorithm
15.3 sha --SHA-1 message digest algorithm
16.1 Tkinter --Python interface to Tcl/Tk
16.2 Tix --Extension widgets for Tk
16.3 ScrolledText --Scrolled Text Widget
16.4 turtle --Turtle graphics for Tk
17.1 rexec --Restricted execution framework
17.2 Bastion --Restricting access to objects
18.1 parser --Access Python parse trees
18.2 symbol --Constants used with Python parse trees
18.3 token --Constants used with Python parse trees
18.4 keyword --Testing for Python keywords
18.5 tokenize --Tokenizer for Python source
18.6 tabnanny --Detection of ambiguous indentation
18.7 pyclbr --Python class browser support
18.8 py_compile --Compile Python source files
18.9 compileall --Byte-compile Python libraries
18.10 dis --Disassembler for Python byte code
18.12 distutils --Building and installing Python modules
20.1 al --Audio functions on the SGI
20.2 AL --Constants used with the al module
20.3 cd --CD-ROM access on SGI systems
20.4 fl --FORMS library for graphical user interfaces
20.5 FL --Constants used with the fl module
20.6 flp --Functions for loading stored FORMS designs
20.7 fm --Font Manager interface
20.8 gl --Graphics Library interface
20.9 DEVICE --Constants used with the gl module
20.10 GL --Constants used with the gl module
20.11 imgfile --Support for SGI imglib files
20.12 jpeg --Read and write JPEG files
21.1 sunaudiodev --Access to Sun audio hardware
21.2 SUNAUDIODEV --Constants used with sunaudiodev
22.1 msvcrt -Useful routines from the MS VC++ runtime
22.2 _winreg -Windows registry access
22.3 winsound --Sound-playing interface for Windows A.
1. Using Python on a Mac OS 9 Macintosh
2.1 mac --Implementations for the os module
2.2 macpath --MacOS path manipulation functions
2.3 macfs --Various file system services
2.4 ic --Access to Internet Config
2.5 MacOS --Access to Mac OS interpreter features
2.6 macostools --Convenience routines for file manipulation
2.7 findertools --The finder's Apple Events interface
2.8 EasyDialogs --Basic Macintosh dialogs
2.9 FrameWork --Interactive application framework
2.10 autoGIL --Global Interpreter Lock handling in event loops
3.1 gensuitemodule --Generate OSA stub packages
3.2 aetools --OSA client support
3.3 aepack --Conversion between Python variables and AppleEvent data containers
3.4 aetypes --AppleEvent objects
3.5 MiniAEFrame --Open Scripting Architecture server support
4.25 ColorPicker --Color selection dialog
Boolean operations have the lowest priority of all Python operations:
In the context of Boolean operations, and also when expressions areused by control flow statements, the following values are interpretedas false: None, numeric zero of all types, empty sequences(strings, tuples and lists), and empty mappings (dictionaries).
Allother values are interpreted as true.The operator not yields True if its argument is false,False otherwise.
The expression
first evaluates x; ifx is false, its value is returned; otherwise, y isevaluated and the resulting value is returned.
first evaluates x; ifx is true, its value is returned; otherwise, y isevaluated and the resulting value is returned.
(Note that neither and nor or restrict the valueand type they return to False and True, but rather return thelast evaluated argument.This is sometimes useful, e.g., if s is a string that should bereplaced by a default value if it is empty, the expressions or 'foo' yields the desired value.
Because not has toinvent a value anyway, it does not bother to return a value of thesame type as its argument, so e.g., not 'foo' yields False,not ''.)
A Cmd instance has the following methods:
Repeatedly issue a prompt, accept input, parse an initial prefix offthe received input, and dispatch to action methods, passing them theremainder of the line as argument.The optional argument is a banner or intro string to be issued before thefirst prompt (this overrides the intro class member).If the
module is loaded, input will automaticallyinherit bash-like history-list editing (e.g.
Control-Pscrolls back to the last command, Control-N forward to the nextone, Control-F moves the cursor to the right non-destructively,Control-B moves the cursor to the left non-destructively, etc.).An end-of-file on input is passed back as the string 'EOF'.An interpreter instance will recognize a command name "foo" ifand only if it has a method do_foo().
As a special case,a line beginning with the character "?" is dispatched tothe method do_help().
Interpret the argument as though it had been typed in response to theprompt.
This may be overridden, but should not normally need to be;see the precmd() and postcmd() methods for usefulexecution hooks.
The return value is a flag indicating whetherinterpretation of commands by the interpreter should stop.
If thereis a do_*() method for the command str, the returnvalue of that method is returned, otherwise the return value from thedefault() method is returned.
)
Method called when an empty line is entered in response to the prompt.If this method is not overridden, it repeats the last nonempty commandentered.
Method called on an input line when the command prefix is notrecognized.
If this method is not overridden, it prints anerror message and returns.
Method called to complete an input line when no command-specificcomplete_*() method is available.
By default, it returns anempty list.
Hook method executed just before the command line line isinterpreted, but after the input prompt is generated and issued.
Thismethod is a stub in Cmd; it exists to be overridden bysubclasses.
The return value is used as the command which will beexecuted by the onecmd() method; the precmd()implementation may re-write the command or simply return lineunchanged.
Hook method executed just after a command dispatch is finished.
The return value ofthis method will be used as the new value for the internal flag whichcorresponds to stop; returning false will cause interpretationto continue.
Hook method executed once when cmdloop() is called.
Hook method executed once when cmdloop() is about to return.This method is a stub in Cmd; it exists to be overridden bysubclasses.
Instances of Cmd subclasses have some public instance variables:
The prompt issued to solicit input.
The string of characters accepted for the command prefix.
The last nonempty command prefix seen.
A string to issue as an intro or banner.
May be overridden by givingthe cmdloop() method an argument.
The header to issue if the help output has a section for documentedcommands.
The header to issue if the help output has a section for miscellaneous help topics (that is, there are help_*() methods withoutcorresponding do_*() methods).
The header to issue if the help output has a section for undocumented commands (that is, there are do_*() methods withoutcorresponding help_*() methods).
The character used to draw separator lines under the help-messageheaders.
If empty, no ruler line is drawn.
It defaults to"=".
A flag, defaulting to true.
If true, cmdloop() usesraw_input() to display a prompt and read the next command;if false, sys.stdout.write() andsys.stdin.readline() are used.
(This means that byimporting
, on systems that support it, theinterpreter will automatically support Emacs-like line editing and command-history keystrokes.)
The ConfigParser class extends some methods of theRawConfigParser interface, adding some optional arguments.
Get an option value for the named section.
All the"%" interpolations are expanded in the return values, basedon the defaults passed into the constructor, as well as the optionsvars provided, unless the raw argument is true.
Return a list of (name, value) pairs for eachoption in the given section.
Optional arguments have thesame meaning as for the get() method.New in version 2.3.
1.2.5.2 Adding modules to
EditPythonPrefs gives you the capability to configure Pythonto behave the way you want it to.
There are two ways to useEditPythonPrefs, you can use it to set the preferences ingeneral, or you can drop a particular Python engine onto it tocustomize only that version.
The latter can be handy if, for example,you want to have a second copy of the PythonInterpreter thatkeeps the output window open on a normal exit even though you preferto normally not work that way.To change the default preferences, simply double-click onEditPythonPrefs.
To change the preferences only for one copyof the Interpreter, drop the icon for that copy ontoEditPythonPrefs.
You can also use EditPythonPrefsin this fashion to set the preferences of the Python IDE andany applets you create - see section 1.3.4.
1.3.1 Using the ``Python
The Python IDE (Integrated Development Environment) is aseparate application that acts as a text editor for your Python code,a class browser, a graphical debugger, and more. Subsections
1.3.3 Executing a script
1.3.4 ``Save as'' versus ``Save as Applet'' When you are done writing your Python script you have the option ofsaving it as an ``applet'' (by selecting ``Save as applet'' from the``File'' menu).
This has a significant advantage in that you can dropfiles or folders onto it, to pass them to the applet the waycommand-line users would type them onto the command-line to pass themas arguments to the script.
See the generaldocumentation for moreNote that saving a script as an applet will not make it runnable on asystem without a Python installation.
1.3.2 Writing a Python
1.3.4 ``Save as'' versus
You can run the script in the frontmost window of the PythonIDE by hitting the run all button.
You should be aware, however thatif you use the Python convention "if __name__ == "__main__":" thescript will not be ``__main__'' by default.
To get thatbehaviour you must select the ``Run as __main__'' option from thesmall black triangle on the top right of the document window.
Notethat this option is associated with the file not theapplication.
It will stay active after a save, however; to shutthis feature off simply select it again.
In addition to using the Python IDE interactively, you canalso type out a complete Python program, saving it incrementally, andexecute it or smaller selections of it.You can create a new script, open a previously saved script, and saveyour currently open script by selecting the appropriate item in the``File'' menu.
The default is to save the file with the PythonIDE as the creator, this means that you can open the file for editingby simply double-clicking on its icon.
You might want to change thisbehaviour so that it will be opened by thePythonInterpreter, and run.
To do this simply choose``Python Interpreter'' from the ``save options''.
Note that theseoptions are associated with the file not the application.
MimeWriter instances have the following methods:
Add a header line to the MIME message.
The key is the name ofthe header, where the value obviously provides the value of theheader.
The optional argument prefix determines where the header is inserted; "0" means append at the end, "1" is insert atthe start.
The default is to append.
Causes all headers accumulated so far to be written out (andforgotten).
This is useful if you don't need a body part at all,e.g. for a subpart of type message/rfc822 that's (mis)usedto store some header-like information.
Returns a file-like object which can be used to write to thebody of the message.
The content-type is set to the providedctype, and the optional parameter plist providesadditional parameters for the content-type declaration. prefixfunctions as in addheader() except that the default is toinsert at the start.
Returns a file-like object which can be used to write to thebody of the message.
Subparts should becreated using nextpart().
Returns a new instance of MimeWriter which represents anindividual part in a multipart message.
This may be used to write the part as well as used for creating recursively complex multipartmessages.
The message must first be initialized withstartmultipartbody() before using nextpart().
This is used to designate the last part of a multipart message, andshould always be used when writing multipart messages.
A MultiFile instance has the following methods:
Read a line.
If the line is data (not a section-divider or end-markeror real EOF) return it.
If the line matches the most-recently-stackedboundary, return '' and set self. last to 1 or 0 according asthe match is or is not an end-marker.
If the line matches any otherstacked boundary, raise an error.
On encountering end-of-file on theunderlying stream object, the method raises Error unlessall boundaries have been popped.
Return all lines remaining in this part as a list of strings.
Read all lines, up to the next section.
Return them as a single(multiline) string.
Note that this doesn't take a size argument!
Seek.
Seek indices are relative to the start of the current section.The pos and whence arguments are interpreted as for a fileseek.
Return the file position relative to the start of the current section.
Skip lines to the next section (that is, read lines until asection-divider or end-marker has been consumed).
Return true ifthere is such a section, false if an end-marker is seen.
Re-enablethe most-recently-pushed boundary.
Return true if str is data and false if it might be a sectionboundary.
As written, it tests for a prefix other than '-
-' atstart of line (which all MIME boundaries have) but it is declared soit can be overridden in derived classes.Note that this test is used intended as a fast guard for the realboundary tests; if it always returns false it will merely slowprocessing, not cause it to fail.
Push a boundary string.
When an appropriately decorated version ofthis boundary is found as an input line, it will be interpreted as asection-divider or end-marker.
All subsequentreads will return the empty string to indicate end-of-file, until acall to pop() removes the boundary a or next() callreenables it.It is possible to push more than one boundary.
Encountering themost-recently-pushed boundary will return EOF; encountering any otherboundary will raise an error.
Pop a section boundary.
This boundary will no longer be interpretedas EOF.
Turn a boundary into a section-divider line.
By default, thismethod prepends '-
-' (which MIME section boundaries have) butit is declared so it can be overridden in derived classes.
Thismethod need not append LF or CR-LF, as comparison with the resultignores trailing whitespace.
Turn a boundary string into an end-marker line.
By default, thismethod prepends '-
-' and appends '-
-' (like aMIME-multipart end-of-message marker) but it is declared so it can beoverridden in derived classes.
This method need not append LF orCR-LF, as comparison with the result ignores trailing whitespace.
Finally, MultiFile instances have two public instance variables:
Nesting depth of the current part.
True if the last end-of-file was for an end-of-message marker.
Class Queue implements queue objects and has the methodsdescribed below.
This class can be derived from in order to implementother queue organizations (e.g. stack) but the inheritable interfaceis not described here.
See the source code for details.
The publicmethods are:
Return the approximate size of the queue.
Because of multithreadingsemantics, this number is not reliable.
Return True if the queue is empty, False otherwise.Because of multithreading semantics, this is not reliable.
Return True if the queue is full, False otherwise.Because of multithreading semantics, this is not reliable.
Put item into the queue.
If optional args block is trueand timeout is None (the default), block if necessary until afree slot is available.
New in version 2.3:the timeout parameter.
Equivalent to put(item, False).
Remove and return an item from the queue.
If optional argsblock is true and timeout is None (the default),block if necessary until an item is available.
If timeout isa positive number, it blocks at most timeout seconds and raisesthe Empty exception if no item was available within thattime.
Otherwise (block is false), return an item if one isimmediately available, else raise the Empty exception(timeout is ignored in that case).
Equivalent to get(False).
RawConfigParser instances have the following methods:
Return a dictionary containing the instance-wide defaults.
Return a list of the sections available; DEFAULT is notincluded in the list.
Add a section named section to the instance.
If a section bythe given name already exists, DuplicateSectionError israised.
Indicates whether the named section is present in theconfiguration.
The DEFAULT section is not acknowledged.
Returns a list of options available in the specified section.
If the given section exists, and contains the given option,return True; otherwise return False.New in version 1.6.
Attempt to read and parse a list of filenames, returning a list of filenameswhich were successfully parsed.
If filenames is a string orUnicode string, it is treated as a single filename.If a file named in filenames cannot be opened, that file will beignored.
This is designed so that you can specify a list of potentialconfiguration file locations (for example, the current directory, theuser's home directory, and some system-wide directory), and allexisting configuration files in the list will be read.
If none of thenamed files exist, the ConfigParser instance will contain anempty dataset.
An application which requires initial values to beloaded from a file should load the required file or files usingreadfp() before calling read() for any optionalfiles:
Changed in version 2.4:Returns list of successfully parsed filenames.
Read and parse configuration data from the file or file-like object infp (only the readline() method is used).
Iffilename is omitted and fp has a name attribute,that is used for filename; the default is "???".
get
A convenience method which coerces the option in the specifiedsection to an integer.
A convenience method which coerces the option in the specifiedsection to a floating point number.
A convenience method which coerces the option in the specifiedsection to a Boolean value.
Note that the accepted valuesfor the option are "1", "yes", "true", and "on",which cause this method to return True, and "0", "no","false", and "off", which cause it to return False.
Thesestring values are checked in a case-insensitive manner.
Any other value willcause it to raise ValueError.
Return a list of (name, value) pairs for eachoption in the given section.
If the given section exists, set the given option to the specifiedvalue; otherwise raise NoSectionError.
While it ispossible to use RawConfigParser (or ConfigParser withraw parameters set to true) for internal storage ofnon-string values, full functionality (including interpolation andoutput to files) can only be achieved using string values.New in version 1.6.
Write a representation of the configuration to the specified fileobject.
This representation can be parsed by a future read()call.New in version 1.6.
Remove the specified option from the specified section.If the section does not exist, raise NoSectionError.
If the option existed to be removed, return True;otherwise return False.New in version 1.6.
remove_section
Remove the specified section from the configuration.If the section in fact existed, return True.Otherwise return False.
Transforms the option name option as found in an input file oras passed in by client code to the form that should be used in theinternal structures.
The default implementation returns a lower-caseversion of option; subclasses may override this or client codecan set an attribute of this name on instances to affect thisbehavior.
Setting this to str(), for example, would makeoption names case sensitive.
Repr instances provide several members which can be used toprovide size limits for the representations of different object types, and methods which format specific object types.
Depth limit on the creation of recursive representations.
Thedefault is 6.
Limits on the number of entries represented for the named objecttype.
Maximum number of characters in the representation for a longinteger.
Digits are dropped from the middle.
The default is40.
Limit on the number of characters in the representation of thestring.
Note that the ``normal'' representation of the string isused as the character source: if escape sequences are needed in therepresentation, these may be mangled when the representation isshortened.
The default is 30.
This limit is used to control the size of object types for which nospecific formatting method is available on the Repr object.It is applied in a similar manner as maxstring.
Thedefault is 20.
The equivalent to the built-in repr() that uses theformatting imposed by the instance.
Recursive implementation used by repr().
This uses thetype of obj to determine which formatting method to call,passing it obj and level.
The type-specific methodsshould call repr1() to perform recursive formatting, with
level - 1 for the value of level in the recursive call.
Formatting methods for specific types are implemented as methodswith a name based on the type name.
In the method name, typeis replaced bystring.join(string.split(type(obj).__name__, '_')).Dispatch to these methods is handled by repr1().Type-specific methods which need to recursively format a valueshould call "self.
repr1(subobj, level - 1)".
This example prompts the user for addresses needed in the messageenvelope (`To' and `From' addresses), and the message to bedelivered.
Note that the headers to be included with the message mustbe included in the message as entered; this example doesn't do anyprocessing of the RFC 822 headers.
In particular, the `To' and`From' addresses must be included in the message headers explicitly.
An SMTP instance has the following methods:
Set the debug output level.
A true value for level results indebug messages for connection and for all messages sent to andreceived from the server.
Connect to a host on a given port.
Send a command cmd to the server.
It is used to implement other methods and may be usefulfor testing private extensions.If the connection to the server is lost while waiting for the reply,SMTPServerDisconnected will be raised.
Identify yourself to the SMTP server using "HELO".
The hostnameargument defaults to the fully qualified domain name of the localhost.In normal operation it should not be necessary to call this methodexplicitly.
It will be implicitly called by the sendmail()when necessary.
Identify yourself to an ESMTP server using "EHLO".
The hostnameargument defaults to the fully qualified domain name of the localhost.
Examine the response for ESMTP option and store them for use byhas_extn().Unless you wish to use has_extn() before sendingmail, it should not be necessary to call this method explicitly.
Itwill be implicitly called by sendmail() when necessary.
has_extn
Return True if name is in the set of SMTP serviceextensions returned by the server, False otherwise.Case is ignored.
Check the validity of an address on this server using SMTP "VRFY".Returns a tuple consisting of code 250 and a full RFC 822 address(including human name) if the user address is valid.
Otherwise returnsan SMTP error code of 400 or greater and an error string.
Note:Many sites disable SMTP "VRFY" in order to foil spammers.
The server didn't reply properly to the "HELO" greeting.
The server didn't accept the username/password combination.
No suitable authentication method was found.
Put the SMTP connection in TLS (Transport Layer Security) mode.
AllSMTP commands that follow will be encrypted.
You should then callehlo() again.If keyfile and certfile are provided, these are passed tothe
module's ssl() function.
Send mail.
The required arguments are an RFC 822 from-addressstring, a list of RFC 822 to-address strings, and a message string.The caller may pass a list of ESMTP options (such as "8bitmime")to be used in "MAIL FROM" commands as mail_options.
ESMTPoptions (such as "DSN" commands) that should be used with all"RCPT" commands can be passed as rcpt_options.
(If youneed to use different ESMTP options to different recipients you haveto use the low-level methods such as mail, rcpt anddata to send the message.)
Note:The from_addr and to_addrs parameters areused to construct the message envelope used by the transport agents.The SMTP does not modify the message headers in any way.
If there has been no previous "EHLO" or "HELO" command thissession, this method tries ESMTP "EHLO" first.
If the server doesESMTP, message size and each of the specified options will be passedto it (if the option is in the feature set the server advertises).
If"EHLO" fails, "HELO" will be tried and ESMTP optionssuppressed.This method will return normally if the mail is accepted for at leastone recipient.
Otherwise it will throw an exception.
That is, if thismethod does not throw an exception, then someone should get your mail.If this method does not throw an exception, it returns a dictionary,with one entry for each recipient that was refused.
Each entrycontains a tuple of the SMTP error code and the accompanying errormessage sent by the server.This method may raise the following exceptions:
All recipients were refused. Nobody got the mail.
Therecipients attribute of the exception object is a dictionarywith information about the refused recipients (like the one returnedwhen at least one recipient was accepted).
The server didn't reply properly to the "HELO" greeting.
The server didn't accept the from_addr.
The server replied with an unexpected error code (other than a refusalof a recipient).
Unless otherwise noted, the connection will be open even afteran exception is raised.
Terminate the SMTP session and close the connection.
Low-level methods corresponding to the standard SMTP/ESMTP commands"HELP", "RSET", "NOOP", "MAIL", "RCPT", and"DATA" are also supported.
Normally these do not need to becalled directly, so they are not documented here.
For details,consult the module code.
The SafeConfigParser class implements the same extendedinterface as ConfigParser, with the following addition:
Wave_read objects, as returned by open(), have thefollowing methods:
Close the stream, and make the instance unusable.
This iscalled automatically on object collection.
Returns number of audio channels (1 for mono, 2 forstereo).
Returns sample width in bytes.
Returns sampling frequency.
Returns number of audio frames.
Returns compression type ('NONE' is the only supported type).
Human-readable version of getcomptype().Usually 'not compressed' parallels 'NONE'.
Returns a tuple(nchannels, sampwidth, framerate,nframes, comptype, compname), equivalent to outputof the get*() methods.
Reads and returns at most n frames of audio, as a string of bytes.
Rewind the file pointer to the beginning of the audio stream.
The following two methods are defined for compatibility with the
module, and don't do anything interesting.
Returns None.
Raise an error.
The following two methods define a term ``position'' which is compatiblebetween them, and is otherwise implementation dependent.
Set the file pointer to the specified position.
Return current file pointer position.
Wave_write objects, as returned by open(), have thefollowing methods:
Make sure nframes is correct, and close the file.This method is called upon deletion.
Set the number of channels.
Set the sample width to n bytes.
Set the frame rate to n.
Set the number of frames to n.
This will be changed later ifmore frames are written.
Set the compression type and description.
The tuple should be (nchannels, sampwidth,framerate, nframes, comptype, compname), withvalues valid for the set*() methods.
Sets all parameters.
Return current position in the file, with the same disclaimer forthe Wave_read.tell() and Wave_read.setpos()methods.
Write audio frames, without correcting nframes.
Write audio frames and make sure nframes is correct.
Note that it is invalid to set any parameters after callingwriteframes() or writeframesraw(), and any attemptto do so will raise wave.Error.
About the Python Documentation
The Python documentation was originally written by Guido vanRossum, but has increasingly become a community effort over thepast several years.
General comments and questions regarding this document shouldbe sent by email to docs@python.org.
Questions regarding how to use the information in thisdocument should be sent to the Python news group, comp.lang.python, or the Python mailing list (which is gated to the newsgroup andcarries the same content).
For any of these channels, please be sure not to send HTML email.Thanks.
Handle an authentication request by getting a user/password pair, andre-trying the request. authreq should be the name of the headerwhere the information about the realm is included in the request,host is the host to authenticate to, req should be the(failed)
Request object, and headers should be the errorheaders.
6.6 Buffer Protocol
6.5 Iterator Protocol
6. Abstract Objects Layer
7. Concrete Objects Layer
Returns a pointer to a read-only memory location useable as character-based input.
The obj argument must support the single-segmentcharacter buffer interface.
On success, returns 0, setsbuffer to the memory location and buffer_len to the bufferlength.
Returns -1 and sets a TypeError on error.New in version 1.6.
Returns a pointer to a read-only memory location containingarbitrary data.
The obj argument must support thesingle-segment readable buffer interface.
On success, returns0, sets buffer to the memory location and buffer_lento the buffer length.
Returns -1 and sets aTypeError on error.New in version 1.6.
Returns 1 if o supports the single-segment readablebuffer interface.
Otherwise returns 0.New in version 2.2.
Returns a pointer to a writeable memory location.
The objargument must support the single-segment, character bufferinterface.
On success, returns 0, sets buffer to thememory location and buffer_len to the buffer length.
Returns-1 and sets a TypeError on error.New in version 1.6.
authreq should be the name of the header where the information aboutthe realm is included in the request, host should be the host toauthenticate to, req should be the (failed) Requestobject, and headers should be the error headers.
6. Abstract Objects Layer
5.5 Parsing arguments and
6.1 Object Protocol 6.
Abstract Objects Layer
The functions in this chapter interact with Python objects regardlessof their type, or with wide classes of object types (e.g. allnumerical types, or all sequence types).
When used on object typesfor which they do not apply, they will raise a Python exception.
Subsections 6.1 Object Protocol
6.2 Number Protocol
6.3 Sequence Protocol
6.4 Mapping Protocol
6.1 Object Protocol
Jes俍 Cea Avi
Gerhard H舐ing
Fran輟is Pinard
Hern疣 Mart匤ez Foffani
See About this document..
An AddressList instance has the following methods:
Return the number of addresses in the address list.
)
Return a canonicalized string representation of the address list.Addresses are rendered in "name" host@domain form, comma-separated.
Return a new AddressList instance that contains all addressesin both AddressList operands, with duplicates removed (setunion).
In-place version of __add__(); turns this AddressListinstance into the union of itself and the right-hand instance,alist.
Return a new AddressList instance that contains every addressin the left-hand AddressList operand that is not present inthe right-hand address operand (set difference).
In-place version of __sub__(), removing addresses in thislist which are also in alist.
Finally, AddressList instances have one public instance variable:
A list of tuple string pairs, one per address.
In each member, thefirst is the canonicalized name part, the second is theactual route-address ("@"-separated username-host.domainpair).
8.3 Advanced Debugger Support
8.2 Profiling and Tracing
8. Initialization, Finalization, and
9. Memory Management
These functions are only intended to be used by advanced debuggingtools.
Return the a pointer to the first PyThreadState object inthe list of threads associated with the interpreter interp.New in version 2.2.
Installs an AppleEvent handler. classe and type are thefour-character OSA Class and Type designators, '****' wildcardsare allowed.
When a matching AppleEvent is received the parameters aredecoded and your callback is invoked.
Your callback is called with the OSA Direct Object as first positionalparameter.
The other parameters are passed as keyword arguments, withthe 4-character designator as name.
Three extra keyword parameters arepassed: _class and _type are the Class and Typedesignators and _attributes is a dictionary with the AppleEventattributes.The return value of your method is packed withaetools.
packevent() and sent as reply.
Note that there are some serious problems with the currentdesign.
AppleEvents which have non-identifier 4-character designatorsfor arguments are not implementable, and it is not possible to returnan error to the originator.
This will be addressed in a futurerelease.
Configuration objects returned by newconfig() have thefollowing methods:
Return the queue size.
Set the queue size.
Get the sample width.
Set the sample width.
Get the channel count.
Set the channel count.
Get the sample format.
Set the sample format.
Get the maximum value for floating sample formats.
Set the maximum value for floating sample formats.
Port objects, as returned by openport(), have the followingmethods:
Close the port.
Return the file descriptor as an int.
Return the number of filled samples.
Return the number of fillable samples.
Read a number of samples from the queue, blocking if necessary.Return the data as a string containing the raw data, (e.g., 2 bytes persample in big-endian byte order (high byte, low byte) if you have setthe sample width to 2 bytes).
Write samples into the queue, blocking if necessary.
The samples areencoded as described for the readsamps() return value.
Return the `fill point'.
Set the `fill point'.
Return a configuration object containing the current configuration ofthe port.
Set the configuration from the argument, a configuration object.
Get status information on last error.
The raw data for the Alias record, suitable for storing in a resourceor transmitting to other programs.
Resolve the alias.
If the alias was created as a relative alias youshould pass the file relative to which it is.
Return the FSSpec forthe file pointed to and a flag indicating whether the Alias objectitself was modified during the search process.
If the file doesnot exist but the path leading up to it does exist a valid fsspecis returned.
An interface to the C routine GetAliasInfo().
Update the alias to point to the file given.
If file2 ispresent a relative alias will be created.
Note that it is currently not possible to directly manipulate aresource as an Alias object.
Hence, after callingUpdate() or after Resolve() indicates that the aliashas changed the Python program is responsible for getting thedata value from the Alias object and modifying theresource.
10.1 Allocating Objects on the Heap
10. Object Implementation Support
10.2 Common Object Structures
Return value:
New reference.
Borrowed reference.
Initialize a newly-allocated object op with its type andinitial reference.
Returns the initialized object.
If typeindicates that the object participates in the cyclic garbagedetector, it is added to the detector's set of observed objects.Other fields of the object are not affected.
This does everything PyObject_Init() does, and alsoinitializes the length information for a variable-size object.
Allocate a new Python object using the C structure type TYPEand the Python type object type.
Fields not defined by thePython object header are not initialized; the object's referencecount will be one.
The size of the memoryallocation is determined from the tp_basicsize field of thetype object.
Fields not defined by thePython object header are not initialized.
The allocated memoryallows for the TYPE structure plus size fields of thesize given by the tp_itemsize field of type.
This isuseful for implementing objects like tuples, which are able todetermine their size at construction time.
Embedding the array offields into the same allocation decreases the number of allocations,improving the memory management efficiency.
Releases memory allocated to an object usingPyObject_New() or PyObject_NewVar().
Thisis normally called from the tp_dealloc handler specified inthe object's type.
The fields of the object should not be accessedafter this call as the memory is no longer a valid Python object.
Macro version of PyObject_New(), to gain performance atthe expense of safety.
This does not check type for a NULLvalue.
Macro version of PyObject_NewVar(), to gain performanceat the expense of safety.
This does not check type for aNULL value.
Macro version of PyObject_Del().
Create a new module object based on a name and table of functions,returning the new module object.
Changed in version 2.3:Older versions of Python did not support NULL asthe value for the methods argument.
If doc is non-NULL, it willbe used to define the docstring for the module.
If self isnon-NULL, it will passed to the functions of the module as their(otherwise NULL) first parameter.
(This was added as anexperimental feature, and there are no known uses in the currentversion of Python.)
For apiver, the only value which shouldbe passed is defined by the constant PYTHON_API_VERSION.
Note:Most uses of this function should probably be usingthe Py_InitModule3() instead; only use this if you aresure you need it.
Object which is visible in Python as None.
This should onlybe accessed using the Py_None macro, which evaluates to apointer to this object.
Generic Operating System Services
The modules described in this chapter provide interfaces to operatingsystem features that are available on (almost) all operating systems,such as files and a clock.
The interfaces are generally modeledafter the Unix or C interfaces, but they are available on mostother systems as well.
Here's an overview:
Miscellaneous operating system interfaces.
Common pathname manipulations.
Return directory listing, with cache mechanism.
Stat files, and remember results.
Constants for interpreting the result ofos. statvfs().
Compare files efficiently.
Subprocess management.
Subprocesses with accessible standard I/O streams.
Basic date and time types.
Time access and conversions.
General purpose event scheduler.
Lock and queue for mutual exclusion.
Portable reading of passwords and retrieval of the userid.
An interface to the curses library, providing portableterminal handling.
Emacs-like input editing in a curses window.
Terminal configuration wrapper for curses programs.
Constants and set-membership functions forASCII characters.
A panel stack extension that adds depth to curses windows.
Portable parser for command line options; support bothshort and long option names.
More convenient, flexible, and powerful command-line parsing library.
Generate temporary files and directories.
Standard errno system symbols.
Unix shell style pathname pattern expansion.
Unix shell style filename pattern matching.
High-level file operations, including copying.
Internationalization services.
Multilingual internationalization services.
Logging module for Python based on PEP 282.
Retrieves as much platform identifying data as possible.
2 Standard Build and
Subsections 3.1 Alternate installation: the home scheme
Often, it is necessary or desirable to install modules to a locationother than the standard location for third-party Python modules.
Forexample, on a Unix system you might not have permission to write to thestandard third-party module directory.
Or you might wish to try out amodule before making it a standard part of your local Pythoninstallation.
This is especially true when upgrading a distributionalready present: you want to make sure your existing base of scriptsstill works with the new version before actually upgrading.The Distutils install command is designed to make installingmodule distributions to an alternate location simple and painless.
Thebasic idea is that you supply a base directory for the installation, andthe install command picks a set of directories (called aninstallation scheme) under this base directory in which toinstall files.
The details differ across platforms, so read whicheverof the following sections applies to you.
The idea behind the ``home scheme'' is that you build and maintain apersonal stash of Python modules.
This scheme's name is derived fromthe idea of a ``home'' directory on Unix, since it's not unusual fora Unix user to make their home directory have a layout similar to/usr/ or /usr/local/.
This scheme can be used byanyone, regardless of the operating system their installing for.Installing a new module distribution is as simple as
python setup.py install --home=dir
where you can supply any directory you like for the--home option.
On Unix, lazy typists can just type atilde (~); the install command willexpand this to your home directory:
The --home option defines the installation basedirectory.
Files are installed to the following directories under theinstallation base as follows:
Type of file
Installation Directory
Override option
pure module distribution
non-pure module distribution
scripts
data
Changed in version 2.4:The --home option used to be supportedonly on Unix.
The ``prefix scheme'' is useful when you wish to use one Pythoninstallation to perform the build/install (i.e., to run the setupscript), but install modules into the third-party module directory of adifferent Python installation (or something that looks like a differentPython installation).
If this sounds a trifle unusual, it is--that'swhy the ``home scheme'' comes first.
However, there are at least twoknown cases where the prefix scheme will be useful.First, consider that many Linux distributions put Python in /usr,rather than the more traditional /usr/local.
This is entirelyappropriate, since in those cases Python is part of ``the system''rather than a local add-on.
However, if you are installing Pythonmodules from source, you probably want them to go in/usr/local/lib/python2.X
rather than/usr/lib/python2.X
.
This can be done with
,but those modules would have to be installed to, say,/mnt/@server/export/lib/python2.X
.
Thiscould be done with
In either case, the --prefix option defines theinstallation base, and the --exec-prefix option definesthe platform-specific installation base, which is used forplatform-specific files.
(Currently, this just means non-pure moduledistributions, but could be expanded to C libraries, binary executables,etc.)
If --exec-prefix is not supplied, it defaults to--prefix.
Files are installed as follows:
There is no requirement that --prefix or--exec-prefix actually point to an alternate Pythoninstallation; if the directories listed above do not already exist, theyare created at installation time.Incidentally, the real reason the prefix scheme is important is simplythat a standard Unix installation uses the prefix scheme, but with--prefix and --exec-prefix supplied byPython itself as sys.
prefix and sys.exec_prefix.
Thus,you might think you'll never use the prefix scheme, but every time yourun python setup.py install without any other options, you'reusing it.Note that installing extensions to an alternate Python installation hasno effect on how those extensions are built: in particular, the Pythonheader files (Python.h and friends) installed with the Pythoninterpreter used to run the setup script will be used in compilingextensions.
It is your responsibility to ensure that the interpreterused to run extensions installed in this way is compatible with theinterpreter used to build them.
The best way to do this is to ensurethat the two interpreters are the same version of Python (possiblydifferent builds, or possibly copies of the same build).
(Of course, ifyour --prefix and --exec-prefix don't evenpoint to an alternate Python installation, this is immaterial.)
Windows has no concept of a user's home directory, and since thestandard Python installation under Windows is simpler than underUnix, the --prefix option has traditionally been usedto install additional packages in separate locations on Windows.
to install modules to theTempPython directory on thecurrent drive.The installation base is defined by the --prefix option;the --exec-prefix option is not supported under Windows.Files are installed as follows:
9.2 Creating a source
Subsections 10.1 distutils.core -- Core Distutils functionality
Introduction 1.1 Include Files
1.2 Objects, Types and Reference Counts
1.2.1 Reference Counts
1.2.2 Types
1.3 Exceptions
1.4 Embedding Python
2. The Very High Level Layer
3. Reference Counting
4. Exception Handling
4.1 Standard Exceptions
4.2 Deprecation of String Exceptions
5. Utilities
5.1 Operating System Utilities
5.2 Process Control
5.3 Importing Modules
5.4 Data marshalling support
5.5 Parsing arguments and building values
7. Concrete Objects Layer
7.1 Fundamental Objects
7.1.1 Type Objects
7.1.2 The None Object
7.2 Numeric Objects
7.2.1 Plain Integer Objects
7.2.2 Boolean Objects
7.2.3 Long Integer Objects
7.2.4 Floating Point Objects
7.2.5 Complex Number Objects
7.3 Sequence Objects
7.3.1 String Objects
7.3.2 Unicode Objects
7.3.4 Tuple Objects
7.4 Mapping Objects
7.4.1 Dictionary Objects
7.5 Other Objects
7.5.1 File Objects
7.5.2 Instance Objects
7.5.3 Method Objects
7.5.4 Module Objects
7.5.5 Iterator Objects
7.5.6 Descriptor Objects
7.5.7 Slice Objects
7.5.8 Weak Reference Objects
7.5.9 CObjects
7.5.10 Cell Objects
7.5.11 Generator Objects
7.5.12 DateTime Objects
8. Initialization, Finalization, and Threads
8.1 Thread State and the Global Interpreter Lock
8.2 Profiling and Tracing
9.1 Overview
9.2 Memory Interface
9.3 Examples
10. Object Implementation Support
10.2 Common Object Structures
10.3 Type Objects
10.4 Mapping Object Structures
10.5 Number Object Structures
10.6 Sequence Object Structures
10.7 Buffer Object Structures
10.8 Supporting the Iterator Protocol
10.9 Supporting Cyclic Garbage Collection A.
2.9.1 Application Objects Application objects have the following methods, among others:
Override this method if you need menus in your application.
Append themenus to the attribute menubar.
Override this method to return a text string describing yourapplication.
Alternatively, override the do_about() methodfor more elaborate ``about'' messages.
This routine is the main event loop, call it to set your applicationrolling.
While raising self to exit the mainloop is stillsupported it is not recommended: call self._quit() instead.The event loop is split into many small parts, each of which can beoverridden.
The default methods take care of dispatching events towindows and dialogs, handling drags and resizes, Apple Events, eventsfor non-FrameWork windows, etc.In general, all event handlers should return 1 if the event is fullyhandled and 0 otherwise (because the front window was not a FrameWorkwindow, for instance).
Call this method with a nonzero parameter to enableasynchronous event handling.
This will tell the inner interpreter loopto call the application event handler async_dispatch whenever eventsare available.
This will cause FrameWork window updates and the userinterface to remain working during long computations, but will slow theinterpreter down and may cause surprising results in non-reentrant code(such as FrameWork itself).
By default async_dispatch will immedeatelycall our_dispatch but you may override this to handle only certainevents asynchronously.
Events you do not handle will be passed to Siouxand such.The old on/off value is returned.
Terminate the running mainloop() call at the next convenientmoment.
The user typed character c.
The complete details of the eventcan be found in the event structure.
This method can also beprovided in a Window object, which overrides theapplication-wide handler if the window is frontmost.
do_dialogevent
Called early in the event loop to handle modeless dialog events.
Thedefault method simply dispatches the event to the relevant dialog (notthrough the DialogWindow object involved).
Override if youneed special handling of dialog events (keyboard shortcuts, etc).
Called by the main event loop when no events are available.
Thenull-event is passed (so you can look at mouse position, etc).
5.4 Data marshalling support
These functions are useful when creating your own extensions functionsand methods.
Additional information and examples are available in
With a few exceptions, aformat unit that is not a parenthesized sequence normally correspondsto a single address argument to these functions.
In the followingdescription, the quoted form is the format unit; the entry in (round)parentheses is the Python object type that matches the format unit;and the entry in [square] brackets is the type of the C variable(s)whose address should be passed.
"s" (string or Unicode object) [const char *]
Convert a Python string or Unicode object to a C pointer to acharacter string.
You must not provide storage for the stringitself; a pointer to an existing string is stored into the characterpointer variable whose address you pass.
The C string isNUL-terminated.
The Python string must not contain embedded NULbytes; if it does, a TypeError exception is raised.Unicode objects are converted to C strings using the defaultencoding.
If this conversion fails, a UnicodeError israised.
"s#" (string, Unicode or any read buffer compatible object)[const char *, int]
This variant on "s" stores into two C variables, the first onea pointer to a character string, the second one its length.
In thiscase the Python string may contain embedded null bytes.
Unicodeobjects pass back a pointer to the default encoded string version ofthe object if such a conversion is possible.
All other read-buffercompatible objects pass back a reference to the raw internal datarepresentation.
"z" (string or None) [const char *]
Like "s", but the Python object may also be None, inwhich case the C pointer is set to NULL.
"z#" (string or None or any read buffercompatible object) [const char *, int]
This is to "s#" as "z" is to "s".
"u" (Unicode object) [Py_UNICODE *]
Convert a Python Unicode object to a C pointer to a NUL-terminatedbuffer of 16-bit Unicode (UTF-16) data.
As with "s", there isno need to provide storage for the Unicode data buffer; a pointer tothe existing Unicode data is stored into the Py_UNICODEpointer variable whose address you pass.
"u#" (Unicode object) [Py_UNICODE *, int]
"es" (string, Unicode object or character buffercompatible object) [const char *encoding, char **buffer]
This variant on "s" is used for encoding Unicode and objectsconvertible to Unicode into a character buffer.
It only works forencoded data without embedded NUL bytes.This format requires two arguments.
The first is only used asinput, and must be a const char* which points to the name of anencoding as a NUL-terminated string, or NULL, in which case thedefault encoding is used.
An exception is raised if the namedencoding is not known to Python.
The second argument must be achar**; the value of the pointer it references will be setto a buffer with the contents of the argument text.
The text willbe encoded in the encoding specified by the first argument.
PyArg_ParseTuple() will allocate a buffer of the neededsize, copy the encoded data into this buffer and adjust*buffer to reference the newly allocated storage.
The calleris responsible for calling PyMem_Free() to free theallocated buffer after use.
"et" (string, Unicode object or character buffercompatible object) [const char *encoding, char **buffer]
Same as "es" except that 8-bit string objects are passedthrough without recoding them.
Instead, the implementation assumesthat the string object uses the encoding passed in as parameter.
"es#" (string, Unicode object or character buffer compatibleobject) [const char *encoding, char **buffer, int *buffer_length]
This variant on "s#" is used for encoding Unicode and objectsconvertible to Unicode into a character buffer.
Unlike the"es" format, this variant allows input data which contains NULcharacters.It requires three arguments.
The first is only used as input, andmust be a const char* which points to the name of an encoding as aNUL-terminated string, or NULL, in which case the default encodingis used.
An exception is raised if the named encoding is not knownto Python.
The second argument must be a char**; the valueof the pointer it references will be set to a buffer with thecontents of the argument text.
The text will be encoded in theencoding specified by the first argument.
The caller is responsible for callingPyMem_Free() to free the allocated buffer after usage.If *buffer points to a non-NULL pointer (an alreadyallocated buffer), PyArg_ParseTuple() will use thislocation as the buffer and interpret the initial value of*buffer_length as the buffer size.
It will then copy theencoded data into the buffer and NUL-terminate it.
If the bufferis not large enough, a ValueError will be set.In both cases, *buffer_length is set to the length of theencoded data without the trailing NUL byte.
"et#" (string, Unicode object or character buffer compatibleobject) [const char *encoding, char **buffer]
Same as "es#" except that string objects are passed throughwithout recoding them.
Instead, the implementation assumes that thestring object uses the encoding passed in as parameter.
"b" (integer) [char]
Convert a Python integer to a tiny int, stored in a C char.
"B" (integer) [unsigned char]
Convert a Python integer to a tiny int without overflow checking,stored in a C unsigned char.
New in version 2.3.
"h" (integer) [short int]
Convert a Python integer to a C short int.
"H" (integer) [unsigned short int]
Convert a Python integer to a C unsigned short int, withoutoverflow checking.
"i" (integer) [int]
Convert a Python integer to a plain C int.
"I" (integer) [unsigned int]
Convert a Python integer to a C unsigned int, withoutoverflow checking.
"l" (integer) [long int]
Convert a Python integer to a C long int.
"k" (integer) [unsigned long]
Convert a Python integer to a C unsigned long withoutoverflow checking.
"L" (integer) [PY_LONG_LONG]
Convert a Python integer to a C long long.
This format isonly available on platforms that support long long (or_int64 on Windows).
"K" (integer) [unsigned PY_LONG_LONG]
Convert a Python integer to a C unsigned long longwithout overflow checking.
This format is only available onplatforms that support unsigned long long (orunsigned _int64 on Windows).
"c" (string of length 1) [char]
Convert a Python character, represented as a string of length 1, toa C char.
"f" (float) [float]
Convert a Python floating point number to a C float.
"d" (float) [double]
Convert a Python floating point number to a C double.
"D" (complex) [Py_complex]
Convert a Python complex number to a C Py_complex structure.
"O" (object) [PyObject *]
Store a Python object (without any conversion) in a C objectpointer.
The C program thus receives the actual object that waspassed.
The object's reference count is not increased.
The pointerstored is not NULL.
"O!" (object) [typeobject, PyObject *]
Store a Python object in a C object pointer.
This is similar to"O", but takes two C arguments: the first is the address of aPython type object, the second is the address of the C variable (oftype PyObject*) into which the object pointer is stored.
Ifthe Python object does not have the required type,TypeError is raised.
"O" (object) [converter, anything]
Convert a Python object to a C variable through a converterfunction.
This takes two arguments: the first is a function, thesecond is the address of a C variable (of arbitrary type), convertedto void *.
The converter function in turn is calledas follows:
where object is the Python object to be converted andaddress is the void* argument that was passed to thePyArg_Parse*() function.
The returned statusshould be 1 for a successful conversion and 0 if theconversion has failed.
When the conversion fails, theconverter function should raise an exception.
"S" (string) [PyStringObject *]
Like "O" but requires that the Python object is a stringobject.
Raises TypeError if the object is not a stringobject.
The C variable may also be declared as PyObject*.
"U" (Unicode string) [PyUnicodeObject *]
Like "O" but requires that the Python object is a Unicodeobject.
Raises TypeError if the object is not a Unicodeobject.
"t#" (read-only character buffer) [char *, int]
Like "s#", but accepts any object which implements theread-only buffer interface.
The char* variable is set topoint to the first byte of the buffer, and the int is set tothe length of the buffer.
Only single-segment buffer objects areaccepted; TypeError is raised for all others.
"w" (read-write character buffer) [char *]
Similar to "s", but accepts any object which implements theread-write buffer interface.
The caller must determine the lengthof the buffer by other means, or use "w#" instead.
Onlysingle-segment buffer objects are accepted; TypeError israised for all others.
"w#" (read-write character buffer) [char *, int]
Like "s#", but accepts any object which implements theread-write buffer interface.
The char * variable is set topoint to the first byte of the buffer, and the int is set tothe length of the buffer.
"(items)" (tuple) [matching-items]
The object must be a Python sequence whose length is the number offormat units in items.
The C arguments must correspond to theindividual format units in items.
Format units for sequencesmay be nested.
Note:Prior to Python version 1.5.2, this format specifier onlyaccepted a tuple containing the individual parameters, not anarbitrary sequence.
Code which previously causedTypeError to be raised here may now proceed without anexception.
This is not expected to be a problem for existing code.
It is possible to pass Python long integers where integers arerequested; however no proper range checking is done -- the mostsignificant bits are silently truncated when the receiving field istoo small to receive the value (actually, the semantics are inheritedfrom downcasts in C -- your mileage may vary).A few other characters have a meaning in a format string.
These maynot occur inside nested parentheses.
They are:
Indicates that the remaining arguments in the Python argument listare optional.
The C variables corresponding to optional argumentsshould be initialized to their default value -- when an optionalargument is not specified, PyArg_ParseTuple() does nottouch the contents of the corresponding C variable(s).
The list of format units ends here; the string after the colon isused as the function name in error messages (the ``associatedvalue'' of the exception that PyArg_ParseTuple()raises).
The list of format units ends here; the string after the semicolonis used as the error message instead of the default errormessage.
Clearly, ":" and ";" mutually exclude eachother.
Note that any Python object references which are provided to thecaller are borrowed references; do not decrement theirreference count!Additional arguments passed to these functions must be addresses ofvariables whose type is determined by the format string; these areused to store values from the input tuple.
There are a few cases, asdescribed in the list of format units above, where these parametersare used as input values; they should match what is specified for thecorresponding format unit in that case.For the conversion to succeed, the arg object must match theformat and the format must be exhausted.
On success, thePyArg_Parse*() functions return true, otherwise theyreturn false and raise an appropriate exception.
Parse the parameters of a function that takes only positionalparameters into local variables.
Returns true on success; onfailure, it returns false and raises the appropriate exception.
Identical to PyArg_ParseTuple(), except that it accepts ava_list rather than a variable number of arguments.
Parse the parameters of a function that takes both positional andkeyword parameters into local variables.
Returns true on success;on failure, it returns false and raises the appropriate exception.
Identical to PyArg_ParseTupleAndKeywords(), except that itaccepts a va_list rather than a variable number of arguments.
Function used to deconstruct the argument lists of ``old-style''functions -- these are functions which use theMETH_OLDARGS parameter parsing method.
This is notrecommended for use in parameter parsing in new code, and most codein the standard interpreter has been modified to no longer use thisfor that purpose.
It does remain a convenient way to decomposeother tuples, however, and may continue to be used for thatpurpose.
A simpler form of parameter retrieval which does not use a formatstring to specify the types of the arguments.
Functions which usethis method to retrieve their parameters should be declared asMETH_VARARGS in function or method tables.
The tuplecontaining the actual parameters should be passed as args; itmust actually be a tuple.
The length of the tuple must be at leastmin and no more than max; min and max may beequal.
Additional arguments must be passed to the function, each ofwhich should be a pointer to a PyObject* variable; thesewill be filled in with the values from args; they will containborrowed references.
The call to PyArg_UnpackTuple() in this example isentirely equivalent to this call to PyArg_ParseTuple():
PyArg_ParseTuple(args, "O|O:ref", object, callback)
New in version 2.2.
Create a new value based on a format string similar to thoseaccepted by the PyArg_Parse*() family of functions and asequence of values.
Returns the value or NULL in the case of anerror; an exception will be raised if NULL is returned.
Py_BuildValue() does not always build a tuple.
Itbuilds a tuple only if its format string contains two or more formatunits.
If the format string is empty, it returns None; if itcontains exactly one format unit, it returns whatever object isdescribed by that format unit.
To force it to return a tuple ofsize 0 or one, parenthesize the format string.When memory buffers are passed as parameters to supply data to buildobjects, as for the "s" and "s#" formats, the requireddata is copied.
Buffers provided by the caller are never referencedby the objects created by Py_BuildValue().
This canbe used to make long format strings a tad more readable.
"s" (string) [char *]
Convert a null-terminated C string to a Python object.
If the Cstring pointer is NULL, None is used.
"s#" (string) [char *, int]
Convert a C string and its length to a Python object.
If the Cstring pointer is NULL, the length is ignored and None isreturned.
Same as "s".
Same as "s#".
Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)data to a Python Unicode object.
If the Unicode buffer pointeris NULL, None is returned.
Convert a Unicode (UCS-2 or UCS-4) data buffer and its lengthto a Python Unicode object.
If the Unicode buffer pointeris NULL, the length is ignored and None is returned.
Convert a plain C int to a Python integer object.
Same as "i".
Convert a C long int to a Python integer object.
Convert a C int representing a character to a Pythonstring of length 1.
Convert a C double to a Python floating point number.
Same as "d".
"D" (complex) [Py_complex *]
Convert a C Py_complex structure to a Python complexnumber.
Pass a Python object untouched (except for its reference count,which is incremented by one).
If the object passed in is aNULL pointer, it is assumed that this was caused because thecall producing the argument found an error and set an exception.Therefore, Py_BuildValue() will return NULL butwon't raise an exception.
If no exception has been raised yet,SystemError is set.
"S" (object) [PyObject *]
Same as "O".
"N" (object) [PyObject *]
Same as "O", except it doesn't increment the reference counton the object.
Useful when the object is created by a call to anobject constructor in the argument list.
Convert anything to a Python object through aconverter function.
The function is called withanything (which should be compatible with void *) asits argument and should return a ``new'' Python object, or NULLif an error occurred.
"(items)" (tuple) [matching-items]
Convert a sequence of C values to a Python tuple with the samenumber of items.
"[items]" (list) [matching-items]
Convert a sequence of C values to a Python list with the samenumber of items.
"{items}" (dictionary) [matching-items]
Convert a sequence of C values to a Python dictionary.
Each pairof consecutive C values adds one item to the dictionary, servingas key and value, respectively.
If there is an error in the format string, theSystemError exception is set and NULL returned.
1.2.2.2 Set Creator and
1.2 Getting and Installing
1.2.4 Creating a Python
1.2.3 Simulating command line arguments There are two ways to simulate command-line arguments with MacPython-OS9.
via Interpreter options
Hold the option-key down when launching your script.
This willbring up a dialog box of Python Interpreter options.
Click ``Set Unix-style command line..'' button.
Type the arguments into the ``Argument'' field.
Click ``OK''
Click ``Run''.
via drag and dropIf you save the script as an applet (see Section 1.3.4), youcan also simulate some command-line arguments via``Drag-and-Drop''.
In this case, the names of the files that weredropped onto the applet will be appended to sys. argv, so thatit will appear to the script as though they had been typed on acommand line.
As on Unix systems, the first item in sys.srgv isthe path to the applet, and the rest are the files dropped on theapplet.
Assert statements
are a convenient way to insertdebugging assertions into a program:
The simple form, "assert expression", is equivalent to
The extended form, "assert expression1, expression2", isequivalent to
These equivalences assume that __debug__
andAssertionError
refer to the built-invariables with those names.
In the current implementation, thebuilt-in variable __debug__ is 1 under normal circumstances, 0when optimization is requested (command line option -O).
The currentcode generator emits no code for an assert statement when optimizationis requested at compile time.
Note that it is unnecessary to includethe source code for the expression that failed in the error message;it will be displayed as part of the stack trace.Assignments to __debug__ are illegal.
The value for thebuilt-in variable is determined when the interpreter starts.
6.2 Assert statements
6.3.1 Augmented assignment statements
Assignment statements
are used to(re)bind names to values and to modify attributes or items of mutableobjects:
(See section5.3 for the syntax definitions for the lastthree symbols.)An assignment statement evaluates the expression list (remember thatthis can be a single expression or a comma-separated list, the latteryielding a tuple) and assigns the single resulting object to each ofthe target lists, from left to right.
Assignment is defined recursively depending on the form of the target(list).
When a target is part of a mutable object (an attributereference, subscription or slicing), the mutable object mustultimately perform the assignment and decide about its validity, andmay raise an exception if the assignment is unacceptable.
The rulesobserved by various types and the exceptions raised are given with thedefinition of the object types (see section3.2).
Assignment of an object to a target list is recursively defined asfollows.
If the target list is a single target: The object is assigned to thattarget.
If the target list is a comma-separated list of targets: The objectmust be a sequence with the same number of items as there aretargets in the target list, and the items are assigned, from left toright, to the corresponding targets.
(This rule is relaxed as ofPython 1.5; in earlier versions, the object had to be a tuple.
Sincestrings are sequences, an assignment like "a, b = "xy"" isnow legal as long as the string has the right length.)
Assignment of an object to a single target is recursively defined asfollows.
If the target is an identifier (name):
If the name does not occur in a global statement in the currentcode block: the name is bound to the object in the current localnamespace.
Otherwise: the name is bound to the object in the current globalnamespace.
The name is rebound if it was already bound.
This may cause thereference count for the object previously bound to the name to reachzero, causing the object to be deallocated and itsdestructor
(if it has one) to be called.
If the target is a target list enclosed in parentheses or in squarebrackets: The object must be a sequence with the same number of itemsas there are targets in the target list, and its items are assigned,from left to right, to the corresponding targets.
If the target is an attribute reference: The primary expression in thereference is evaluated.
It should yield an object with assignableattributes; if this is not the case, TypeError is raised.
Thatobject is then asked to assign the assigned object to the givenattribute; if it cannot perform the assignment, it raises an exception(usually but not necessarily AttributeError).
If the target is a subscription: The primary expression in thereference is evaluated.
It should yield either a mutable sequenceobject (e.g., a list) or a mapping object (e.g., a dictionary).
Next,the subscript expression is evaluated.
If the primary is a mutable sequence object (e.g., a list), the subscriptmust yield a plain integer.
If it is negative, the sequence's lengthis added to it.
The resulting value must be a nonnegative integerless than the sequence's length, and the sequence is asked to assignthe assigned object to its item with that index.
If the index is outof range, IndexError is raised (assignment to a subscriptedsequence cannot add new items to a list).
If the primary is a mapping object (e.g., a dictionary), the subscript musthave a type compatible with the mapping's key type, and the mapping isthen asked to create a key/datum pair which maps the subscript tothe assigned object.
This can either replace an existing key/valuepair with the same key value, or insert a new key/value pair (if nokey with the same value existed).
If the target is a slicing: The primary expression in the reference isevaluated.
It should yield a mutable sequence object (e.g., a list).
Theassigned object should be a sequence object of the same type.
Next,the lower and upper bound expressions are evaluated, insofar they arepresent; defaults are zero and the sequence's length.
The boundsshould evaluate to (small) integers.
If either bound is negative, thesequence's length is added to it.
The resulting bounds are clipped tolie between zero and the sequence's length, inclusive.
Finally, thesequence object is asked to replace the slice with the items of theassigned sequence.
The length of the slice may be different from thelength of the assigned sequence, thus changing the length of thetarget sequence, if the object allows it.
(In the current implementation, the syntax for targets is takento be the same as for expressions, and invalid syntax is rejectedduring the code generation phase, causing less detailed errormessages.)WARNING: Although the definition of assignment implies that overlapsbetween the left-hand side and the right-hand side are `safe' (e.g.,"a, b = b, a" swaps two variables), overlaps within thecollection of assigned-to variables are not safe!
For instance, thefollowing program prints "[0, 2]":
11.26.1 asynchat - Auxiliary
The following partial example shows how HTTP requests can be read withasync_chat.
A web server might create an http_request_handler object foreach incoming client connection.
The following simple example demonstrates how a module can initializea counter from a file when it is imported and save the counter'supdated value automatically when the program terminates withoutrelying on the application making an explicit call into this module attermination.
Positional and keyword arguments may also be passed toregister() to be passed along to the registered functionwhen it is called:
An identifier occurring as an atom is a name.
Seesection4.1 for documentation of naming and binding.When the name is bound to an object, evaluation of the atom yieldsthat object.
When a name is not bound, an attempt to evaluate itraises a NameError exception.
Private name mangling:
When an identifier that textually occurs in a class definition beginswith two or more underscore characters and does not end in two or moreunderscores, it is considered a private name of that class.Private names are transformed to a longer form before code isgenerated for them.
The transformation inserts the class name infront of the name, with leading underscores removed, and a singleunderscore inserted in front of the class name.
For example, theidentifier __spam occurring in a class named Ham will betransformed to _Ham__spam.
This transformation is independentof the syntactical context in which the identifier is used.
If thetransformed name is extremely long (longer than 255 characters),implementation defined truncation may happen.
If the class nameconsists only of underscores, no transformation is done.
Python supports string literals and various numeric literals:
Evaluation of a literal yields an object of the given type (string,integer, long integer, floating point number, complex number) with thegiven value.
The value may be approximated in the case of floatingpoint and imaginary (complex) literals.
Multipleevaluations of literals with the same value (either the sameoccurrence in the program text or a different occurrence) may obtainthe same object or a different object with the same value.
Atoms are the most basic elements of expressions.
The simplest atomsare identifiers or literals.
Forms enclosed inreverse quotes or in parentheses, brackets or braces are alsocategorized syntactically as atoms.
The syntax for atoms is:
Subsections 5.2.1 Identifiers (Names)
3.3.2.1 More attribute access
The following methods can be defined to customize the meaning ofattribute access (use of, assignment to, or deletion of x.name)for class instances.
Called when an attribute lookup has not found the attribute in theusual places (i.e. it is not an instance attribute nor is it found inthe class tree for self). name is the attribute name.This method should return the (computed) attribute value or raise anAttributeError exception.Note that if the attribute is found through the normal mechanism,__getattr__() is not called.
Note that at least for instance variables, you can faketotal control by not inserting any values in the instance attributedictionary (but instead inserting them in another object).
See the__getattribute__() method below for a way to actually gettotal control in new-style classes.
Called when an attribute assignment is attempted.
This is calledinstead of the normal mechanism (i.e. store the value in the instancedictionary). name is the attribute name, value is thevalue to be assigned to it.If __setattr__() wants to assign to an instance attribute, it should not simply execute "self.
name = value"
-- thiswould cause a recursive call to itself.
Instead, it should insert thevalue in the dictionary of instance attributes, e.g.,"self.__dict__[name] = value".
For new-style classes,rather than accessing the instance dictionary, it should call the baseclass method with the same name, for example,"object.__setattr__(self, name, value)".
__delattr__
Like __setattr__() but for attribute deletion instead ofassignment.
This should only be implemented if "delobj.name
" is meaningful for the object.
Subsections 3.3.2.1 More attribute access for new-style classes
3.3.2.2 Implementing Descriptors
3.3.2.3 Invoking Descriptors
An attribute reference is a primary followed by a period and a name:
The primary must evaluate to an object of a type that supportsattribute references, e.g., a module, list, or an instance.
Thisobject is then asked to produce the attribute whose name is theidentifier.
If this attribute is not available, the exceptionAttributeError
is raised.Otherwise, the type and value of the object produced is determined bythe object.
Multiple evaluations of the same attribute reference mayyield different objects.
This interface is a subtype of the
Attributesinterface (seesection13.12.5).
Return the value for a qualified name.
Return the (namespace, localname) pair for aqualified name.
Return the qualified name for a (namespace,localname) pair.
Return the qualified names of all attributes.
Attributes objects implement a portion of the mappingprotocol, including the methods copy(), get(),has_key(), items(), keys(), andvalues().
The following methods are also provided:
Return the number of attributes.
Return the names of the attributes.
Returns the type of the attribute name, which is normally'CDATA'.
Return the value of attribute name.
AU_read objects, as returned by open() above, have thefollowing methods:
(This is called automatically on deletion.)
Returns number of audio channels (1 for mone, 2 for stereo).
Returns compression type.Supported compression types are 'ULAW', 'ALAW' and 'NONE'.
Human-readable version of getcomptype().
The supported types have the respective names 'CCITT G.711u-law', 'CCITT G.711 A-law' and 'not compressed'.
Returns a tuple (nchannels, sampwidth,framerate, nframes, comptype, compname),equivalent to output of the get*() methods.
Reads and returns at most n frames of audio, as a string ofbytes.
The data will be returned in linear format.
If the originaldata is in u-LAW format, it will be converted.
Only values returnedfrom tell() should be used for pos.
Note that the returned valuehas nothing to do with the actual position in the file.
The following two functions are defined for compatibility with the
, and don't do anything interesting.
AU_write objects, as returned by open() above, have thefollowing methods:
Set the sample width (in bytes.)
Set the frame rate.
Set the number of frames.
This can be later changed, when and if more frames are written.
Set the compression type and description.Only 'NONE' and 'ULAW' are supported on output.
Set all parameters.
Return current position in the file, with the same disclaimer forthe AU_read.tell() and AU_read.setpos() methods.
Note that it is invalid to set any parameters after calling writeframes() or writeframesraw().
The audio device objects are returned by open() define thefollowing methods (except control objects which only providegetinfo(), setinfo(), fileno(), anddrain()):
This method explicitly closes the device.
It is useful in situationswhere deleting the object does not immediately close it since thereare other references to it.
A closed device should not be used again.
Returns the file descriptor associated with the device.
This can beused to set up SIGPOLL notification, as described below.
This method waits until all pending output is processed and then returns.Calling this method is often not necessary: destroying the object willautomatically close the audio device and this will do an implicit drain.
This method discards all pending output.
It can be used avoid theslow response to a user's stop request (due to buffering of up to onesecond of sound).
This method retrieves status information like input and output volume,etc. and returns it in the form ofan audio status object.
This object has no methods but it contains anumber of attributes describing the current device status.
The namesand meanings of the attributes are described insun/audioio.h and in the
audio(7I)manual page.
Member namesare slightly different from their C counterparts: a status object isonly a single structure.
Members of the play substructure have"o_" prepended to their name and members of the recordstructure have "i_".
So, the C member play. sample_rate isaccessed as o_sample_rate, record.gain as i_gainand monitor_gain plainly as monitor_gain.
)
This method returns the number of samples that are buffered on therecording side, i.e. the program will not block on aread() call of so many samples.
This method returns the number of samples buffered on the playbackside.
Unfortunately, this number cannot be used to determine a numberof samples that can be written without blocking since the kerneloutput queue length seems to be variable.
This method reads size samples from the audio input and returnsthem as a Python string.
The function blocks until enough data is available.
This method sets the audio device status parameters.
The statusparameter is an device status object as returned by getinfo() andpossibly modified by the program.
Write is passed a Python string containing audio samples to be played.If there is enough buffer space free it will immediately return,otherwise it will block.
The audio device supports asynchronous notification of various events,through the SIGPOLL signal.
Here's an example of how you might enablethis in Python:
6.3.1 Augmented assignment statements
(See section5.3 for the syntax definitions for the lastthree symbols.)An augmented assignment evaluates the target (which, unlike normalassignment statements, cannot be an unpacking) and the expressionlist, performs the binary operation specific to the type of assignmenton the two operands, and assigns the result to the originaltarget.
The target is only evaluated once.An augmented assignment expression like x += 1 can be rewritten asx = x + 1 to achieve a similar, but not exactly equal effect.
In theaugmented version, x is only evaluated once.
Similarly, with the exception of thepossible in-place behavior, the binary operation performed byaugmented assignment is the same as the normal binary operations.For targets which are attribute references, the initial value isretrieved with a getattr() and the result is assigned with asetattr().
Notice that the two methods do not necessarilyrefer to the same variable.
When getattr() refers to a classvariable, setattr() still writes to an instance variable.For example:
class A:x = 3 # class variablea = A()a.x += 1 # writes a.x as 4 leaving A.x as 3
1.2 Intermezzo: Errors and
1.4 The Module's Method
Going back to our example function, you should now be able tounderstand this statement:
It returns NULL (the error indicator for functions returningobject pointers) if an error is detected in the argument list, relyingon the exception set by PyArg_ParseTuple().
Otherwise thestring value of the argument has been copied to the local variablecommand.
This is a pointer assignment and you are not supposedto modify the string to which it points (so in Standard C, the variablecommand should properly be declared as "const char*command").The next statement is a call to the Unix functionsystem(), passing it the string we just got fromPyArg_ParseTuple():
Our spam.system() function must return the value ofsts as a Python object.
This is done using the functionPy_BuildValue(), which is something like the inverse ofPyArg_ParseTuple(): it takes a format string and anarbitrary number of C values, and returns a new Python object.More info on Py_BuildValue() is given later.
In this case, it will return an integer object.
(Yes, even integersare objects on the heap in Python!)If you have a C function that returns no useful argument (a functionreturning void), the corresponding Python function must returnNone.
You need this idiom to do so (which is implemented by thePy_RETURN_NONE macro):
Py_None is the C name for the special Python objectNone.
It is a genuine Python object rather than a NULLpointer, which means ``error'' in most contexts, as we have seen.
BaseHandler objects provide a couple of methods that aredirectly useful, and others that are meant to be used by derivedclasses.
These are intended for direct use:
Add a director as parent.
Remove any parents.
The following members and methods should only be used by classesderived from BaseHandler.
Note:The convention has beenadopted that subclasses defining
protocol_request() or
protocol_response() methods are named*Processor; all others are named *Handler.
A valid OpenerDirector, which can be used to open using adifferent protocol, or handle errors.
This method is not defined in BaseHandler, butsubclasses should define it if they want to catch all URLs.This method, if implemented, will be called by the parentOpenerDirector.
It should return a file-like object asdescribed in the return value of the open() ofOpenerDirector, or None.
It should raiseURLError, unless a truly exceptional thing happens (forexample, MemoryError should not be mapped toURLError).This method will be called before any protocol-specific open method.
protocol_open(
Return values should be the same as for default_open().
This method is not defined in BaseHandler, butsubclasses should override it if they intend to provide a catch-allfor otherwise unhandled HTTP errors.
It will be called automaticallyby the OpenerDirector getting the error, and should notnormally be called in other circumstances.
nnn should be a three-digit HTTP error code.
The return value shouldimplement the same interface as the return value ofurlopen().
This class may initialized from string data (which may include NULs).The primary access to the content of a Binary object isprovided by an attribute:
The binary data encapsulated by the Binary instance.
The datais provided as an 8-bit string.
Binary objects have the following methods, supported mainlyfor internal use by the marshalling/unmarshalling code:
Accept a base64 string and decode it as the instance's new data.
Write the XML-RPC base 64 encoding of this binary item to the outstream object.
It also supports certain of Python's built-in operators through a_cmp__() method.
5.5 Unary arithmetic operations
The binary arithmetic operations have the conventional prioritylevels.
Note that some of these operations also apply to certainnon-numeric types.
Apart from the power operator, there are only twolevels, one for multiplicative operators and one for additiveoperators:
The * (multiplication) operator yields the product of itsarguments.
The arguments must either both be numbers, or one argumentmust be an integer (plain or long) and the other must be a sequence.In the former case, the numbers are converted to a common type andthen multiplied together.
In the latter case, sequence repetition isperformed; a negative repetition factor yields an empty sequence.
The / (division) and // (floor division) operators yieldthe quotient of their arguments.
The numeric arguments are firstconverted to a common type.
Plain or long integer division yields aninteger of the same type; the result is that of mathematical divisionwith the `floor' function applied to the result.
Division by zeroraises theZeroDivisionError exception.
The % (modulo) operator yields the remainder from thedivision of the first argument by the second.
The numeric argumentsare first converted to a common type.
A zero right argument raisesthe ZeroDivisionError exception.
The arguments may be floatingpoint numbers, e.g., 3.14%0.7 equals 0.34 (since3.14 equals 4*0.7 + 0.34.)
The modulo operator alwaysyields a result with the same sign as its second operand (or zero);the absolute value of the result is strictly smaller than the absolutevalue of the second operand
The integer division and modulo operators are connected by thefollowing identity: x == (x/y)*y + (x%y).
Integer division andmodulo are also connected with the built-in function divmod():divmod(x, y) == (x/y, x%y).
These identities don't hold forfloating point numbers; there similar identities holdapproximately where x/y is replaced by floor(x/y) orfloor(x/y) - 1
.
Deprecated since release 2.3.The floor division operator, the modulo operator,and the divmod() function are no longer defined for complexnumbers.
Instead, convert to a floating point number using theabs() function if appropriate.
The + (addition) operator yields the sum of its arguments.The arguments must either both be numbers or both sequences of thesame type.
In the former case, the numbers are converted to a commontype and then added together.
In the latter case, the sequences areconcatenated.
The - (subtraction) operator yields the difference of itsarguments.
The numeric arguments are first converted to a commontype.
Footnotes
Forexample, and assuming a platform on which a Python float is anIEEE 754 double-precision number, in order that -1e-100 % 1e100have the same sign as 1e100, the computed result is-1e-100 + 1e100, which is numerically exactly equalto 1e100.
Function fmod() in the mathmodule returns a result whose sign matches the sign of thefirst argument instead, and so returns -1e-100 in this case.Which approach is more appropriate depends on the application.
... 1
If x is very close to an exact integer multiple of y, it'spossible for floor(x/y) to be one larger than(x-x%y)/y due to rounding.
In such cases, Python returnsthe latter result, in order to preserve that divmod(x,y)[0]* y + x % y be very close to x.
The bisect() function is generally useful for categorizingnumeric data.
This example uses bisect() to look up aletter grade for an exam total (say) based on a set of ordered numericbreakpoints: 85 and up is an `A', 75..84 is a `B', etc.
grades = "FEDCBA" breakpoints = [30, 44, 66, 75, 85] from bisect import bisect def grade(total):... return grades[bisect(breakpoints, total)]... grade(66)'C' map(grade, [33, 99, 77, 44, 12, 88])['E', 'A', 'B', 'D', 'F', 'A']
Plain and long integer types support additional operations that makesense only for bit-strings.
Operation
Result
Notes
bitwise exclusive or of x and y
bitwise and of x and y
x shifted left by n bits
x shifted right by n bits
the bits of x inverted
Notes:
Negative shift counts are illegal and cause aValueError to be raised.
A left shift by n bits is equivalent tomultiplication by pow(2, n) without overflow check.
A right shift by n bits is equivalent todivision by pow(2, n) without overflow check.
Each of the three bitwise operations has a different priority level:
The operator yields the bitwise AND of its arguments, whichmust be plain or long integers.
The arguments are converted to acommon type.
The ^ operator yields the bitwise XOR (exclusive OR) of itsarguments, which must be plain or long integers.
The arguments areconverted to a common type.
The | operator yields the bitwise (inclusive)
OR of itsarguments, which must be plain or long integers.
A logical line that contains only spaces, tabs, formfeeds and possiblya comment, is ignored (i.e., no NEWLINE token is generated).
Duringinteractive input of statements, handling of a blank line may differdepending on the implementation of the read-eval-print loop.
In thestandard implementation, an entirely blank logical line (i.e. onecontaining not even whitespace or a comment) terminates a multi-linestatement.
Code objects are used by the implementation to represent``pseudo-compiled'' executable Python code such as a function body.They differ from function objects because they don't contain areference to their global execution environment.
Code objects arereturned by the built-in compile() function and can beextracted from function objects through their func_codeattribute.
for moreinformation.
This object is used by extended slice notation (see the
).
It supports nospecial operations.
There is exactly one ellipsis object, namedEllipsis (a built-in name).It is written as Ellipsis.
File objects
When a file operation fails for an I/O-related reason, the exceptionIOError is raised.
This includes situations where theoperation is not defined for some reason, like seek() on a ttydevice or writing a file opened for reading.Files have the following methods:
Close the file.
A closed file cannot be read or written any more.Any operation which requires that the file be open will raise aValueError after the file has been closed.
Callingclose() more than once is allowed.
Flush the internal buffer, like stdio'sfflush().
This may be a no-op on some file-likeobjects.
Return the integer ``file descriptor'' that is used by theunderlying implementation to request I/O operations from theoperating system.
This can be useful for other, lower levelinterfaces that use file descriptors, such as the
module oros.read() and friends.
Note:File-like objectswhich do not have a real file descriptor should not providethis method!
Return True if the file is connected to a tty(-like) device, elseFalse.
Note:If a file-like object is not associatedwith a real file, this method should not be implemented.
A file object is its own iterator, for example iter(f) returnsf (unless f is closed).
When a file is used as aniterator, typically in a for loop (for example,for line in f: print line), the next() method iscalled repeatedly.
This method returns the next input line, or raisesStopIteration when EOF is hit.
In order to make afor loop the most efficient way of looping over the lines ofa file (a very common operation), the next() method uses ahidden read-ahead buffer.
As a consequence of using a read-aheadbuffer, combining next() with other file methods (likereadline()) does not work right.
However, usingseek() to reposition the file to an absolute position willflush the read-ahead buffer.New in version 2.3.
Read at most size bytes from the file (less if the read hitsEOF before obtaining size bytes). If the sizeargument is negative or omitted, read all data until EOF isreached.
The bytes are returned as a string object.
An emptystring is returned when EOF is encountered immediately.
(Forcertain files, like ttys, it makes sense to continue reading afteran EOF is hit.)
Note that this method may call the underlyingC function fread() more than once in an effort toacquire as close to size bytes as possible.
Also note thatwhen in non-blocking mode, less data than what was requested maybe returned, even if no size parameter was given.
Read one entire line from the file.
A trailing newline character iskept in the string (but may be absent when a file ends with anincomplete line).
Note:Unlike stdio's fgets(), thereturned string contains null characters ('0') if theyoccurred in the input.
Read until EOF using readline() and return a list containingthe lines thus read.
If the optional sizehint argument ispresent, instead of reading up to EOF, whole lines totallingapproximately sizehint bytes (possibly after rounding up to aninternal buffer size) are read.
Objects implementing a file-likeinterface may choose to ignore sizehint if it cannot beimplemented, or cannot be implemented efficiently.
This method returns the same thing as iter(f).New in version 2.1.
Deprecated since release 2.3.Use "for line in file
" instead.
Set the file's current position, like stdio's fseek().The whence argument is optional and defaults to 0(absolute file positioning); other values are 1 (seekrelative to the current position) and 2 (seek relative to thefile's end).
There is no return value.
Note that if the file isopened for appending (mode 'a' or 'a+'), anyseek() operations will be undone at the next write.
If thefile is only opened for writing in append mode (mode 'a'),this method is essentially a no-op, but it remains useful for filesopened in append mode with reading enabled (mode 'a+').
If thefile is opened in text mode (mode 't'), only offsets returnedby tell() are legal.
Use of other offsets causes undefinedbehavior.Note that not all file objects are seekable.
Return the file's current position, like stdio'sftell().
Truncate the file's size.
If the optional size argument ispresent, the file is truncated to (at most) that size.
The sizedefaults to the current position.
The current file position isnot changed.
Note that if a specified size exceeds the file'scurrent size, the result is platform-dependent: possibilitiesinclude that file may remain unchanged, increase to the specifiedsize as if zero-filled, or increase to the specified size withundefined new content.Availability: Windows, many Unix variants.
Write a string to the file.
Due tobuffering, the string may not actually show up in the file untilthe flush() or close() method is called.
Write a sequence of strings to the file.
Files support the iterator protocol.
Each iteration returns the sameresult as
bool indicating the current state of the file object.
This is aread-only attribute; the close() method changes the value.It may not be available on all file-like objects.
The encoding that this file uses.
When Unicode strings are writtento a file, they will be converted to byte strings using this encoding.In addition, when the file is connected to a terminal, the attributegives the encoding that the terminal is likely to use (that information might be incorrect if the user has misconfigured the terminal).
The attribute is read-only and may not be present onall file-like objects.
It may also be None, in which casethe file uses the system default encoding for converting Unicodestrings.
The I/O mode for the file.
If the file was created using theopen() built-in function, this will be the value of themode parameter.
This is a read-only attribute and may not bepresent on all file-like objects.
If the file object was created using open(), the name ofthe file.
Otherwise, some string that indicates the source of thefile object, of the form "...".
This is a read-onlyattribute and may not be present on all file-like objects.
If Python was built with the --with-universal-newlinesoption to configure (the default) this read-only attributeexists, and for files opened inuniversal newline read mode it keeps track of the types of newlinesencountered while reading the file.
The values it can take are'r', 'n', 'rn', None (unknown,no newlines read yet) or a tuple containing all the newlinetypes seen, to indicate that multiplenewline conventions were encountered.
For files not opened in universalnewline read mode the value of this attribute will be None.
Boolean that indicates whether a space character needs to be printedbefore another value when using the print statement.Classes that are trying to simulate a file object should also have awritable softspace attribute, which should be initialized tozero.
This will be automatic for most classes implemented in Python(care may be needed for objects that override attribute access); typesimplemented in C will have to provide a writablesoftspace attribute.
Note:This attribute is not used to control theprint statement, but to allow the implementation ofprint to keep track of its internal state.
file()is new in Python 2.2.
The older built-in open() is analias for file().
... line).
The advantage of leaving the newline on is thatreturning an empty string is then an unambiguous EOFindication.
It is also possible (in cases where it mightmatter, for example, if youwant to make an exact copy of a file while scanning its lines)to tell whether the last line of a file ended in a newlineor not (yes this happens!).
This object is returned by functions that don't explicitly return avalue.
It supports no special operations.
There is exactly one nullobject, named None (a built-in name).It is written as None.
Type objects represent the various object types.
An object's type isaccessed by the built-in function type().
There are no specialoperations on types.
The standard module
defines namesfor all standard built-in types.
Types are written like this: type 'int'.
7.2.1 Plain Integer Objects
7.2.3 Long Integer Objects
7.2.2 Boolean Objects Booleans in Python are implemented as a subclass of integers.
Thereare only two booleans, Py_False and Py_True.
Assuch, the normal creation and deletion functions don't apply tobooleans.
The following macros are available, however.
Returns true if o is of type PyBool_Type.New in version 2.3.
PyObject*
The Python False object.
This object has no methods.
It needs tobe treated just like any other object with respect to reference counts.
The Python True object.
Return Py_False from a function, properly incrementing itsreference count.New in version 2.4.
Py_RETURN_TRUE
Return Py_True from a function, properly incrementing itsreference count.New in version 2.4.
Returns Py_True or Py_False depending on thetruth value of v.New in version 2.3.
This class may be initialized from any Python value; the instancereturned depends only on its truth value.
It supports various Pythonoperators through __cmp__(), __repr__(),__int__(), and __nonzero__() methods, allimplemented in the obvious ways.It also has the following method, supported mainly for internal use bythe unmarshalling code:
Write the XML-RPC encoding of this Boolean item to the out stream object.
if x is false, then y, else x
if x is false, then x, else y
if x is false, then True, else False
These only evaluate their second argument if needed for their outcome.
"not" has a lower priority than non-Boolean operators, sonot a == b
is interpreted as not (a ==b), and
is a syntax error.
break may only occur syntactically nested in a foror while loop, but not nested in a function or class definitionwithin that loop.
It terminates the nearest enclosing loop, skipping the optionalelse clause if the loop has one.
If a for loop is terminated by break, the loop controltarget keeps its current value.
When break passes control out of a try statementwith a finally clause, that finally clause is executedbefore really leaving the loop.
Browser controllers provide two methods which parallel two of themodule-level convenience functions:
Display url using the browser handled by this controller.
Ifnew is true, a new browser window is opened if possible.
Open url in a new window of the browser handled by thiscontroller, if possible, otherwise, open url in the onlybrowser window.
Once instantiated, hash, btree and record objects supportthe same methods as dictionaries.
In addition, they supportthe methods listed below.Changed in version 2.3.1:Added dictionary methods.
Close the underlying file.
The object can no longer be accessed.
Sincethere is no open open method for these objects, to open the fileagain a new bsddb module open function must be called.
Return the list of keys contained in the DB file.
The order of the list isunspecified and should not be relied on.
In particular, the order of thelist returned is different for different file formats.
Return 1 if the DB file contains the argument as a key.
Set the cursor to the item indicated by key and return a tuplecontaining the key and its value.
For binary tree databases (openedusing btopen()), if key does not actually exist inthe database, the cursor will point to the next item in sorted orderand return that key and value.
For other databases,KeyError will be raised if key is not found in thedatabase.
Set the cursor to the first item in the DB file and return it.
The order of keys in the file is unspecified, except in the case of B-Tree databases.This method raises bsddb.error if the database is empty.
Set the cursor to the next item in the DB file and return it.
The order of keys in the file is unspecified, except in the case of B-Tree databases.
Set the cursor to the previous item in the DB file and return it.
Theorder of keys in the file is unspecified, except in the case of B-Treedatabases.
This is not supported on hashtable databases (those openedwith hashopen()).
Set the cursor to the last item in the DB file and return it.
Theorder of keys in the file is unspecified.
This is not supported onhashtable databases (those opened with hashopen()).This method raises bsddb.error if the database is empty.
Synchronize the database on disk.
Example:
10.6 Sequence Object Structures
10.8 Supporting the Iterator
The buffer interface exports a model where an object can expose itsinternal data as a set of chunks of data, where each chunk isspecified as a pointer/length pair.
These chunks are calledsegments and are presumed to be non-contiguous in memory.If an object does not export the buffer interface, then itstp_as_buffer member in the PyTypeObject structureshould be NULL.
Otherwise, the tp_as_buffer will point toa PyBufferProcs structure.
Note:It is very important that your PyTypeObject structureuses Py_TPFLAGS_DEFAULT for the value of thetp_flags member rather than 0.
This tells the Pythonruntime that your PyBufferProcs structure contains thebf_getcharbuffer slot.
Older versions of Python did not havethis member, so a new Python interpreter using an old extension needsto be able to test for its presence before using it.
Structure used to hold the function pointers which define animplementation of the buffer protocol.The first slot is bf_getreadbuffer, of typegetreadbufferproc.
If this slot is NULL, then the objectdoes not support reading from the internal data.
This isnon-sensical, so implementors should fill this in, but callersshould test that the slot contains a non-NULL value.The next slot is bf_getwritebuffer having typegetwritebufferproc.
This slot may be NULL if the objectdoes not allow writing into its returned buffers.The third slot is bf_getsegcount, with typegetsegcountproc.
This slot must not be NULL and is usedto inform the caller how many segments the object contains.
Simpleobjects such as PyString_Type and PyBuffer_Typeobjects contain a single segment.The last slot is bf_getcharbuffer, of typegetcharbufferproc.
For example, if theobject is an array which is configured to hold floating pointvalues, an exception may be raised if a caller attempts to usebf_getcharbuffer to fetch a sequence of 8-bit characters.This notion of exporting the internal buffers as ``text'' is used todistinguish between objects that are binary in nature, and thosewhich have character-based content.
Note:The current policy seems to state that these charactersmay be multi-byte characters.
This implies that a buffer size ofN does not mean there are N characters present.
Flag bit set in the type structure to indicate that thebf_getcharbuffer slot is known.
This being set does notindicate that the object supports the buffer interface or that thebf_getcharbuffer slot is non-NULL.
Return a pointer to a readable segment of the buffer.
This functionis allowed to raise an exception, in which case it must return-1.
The segment which is passed must be zero orpositive, and strictly less than the number of segments returned bythe bf_getsegcount slot function.
On success, it returnsthe length of the buffer memory, and sets *ptrptr
Return a pointer to a writable memory buffer in*ptrptr
, and the length of that segment as the functionreturn value.
The memory buffer must correspond to buffer segmentsegment. Must return -1 and set an exception onerror.
TypeError should be raised if the object onlysupports read-only buffers, and SystemError should beraised when segment specifies a segment that doesn't exist.
Return the number of memory segments which comprise the buffer.
Iflenp is not NULL, the implementation must report the sum ofthe sizes (in bytes) of all segments in *lenp
.The function cannot fail.
Return the size of the memory buffer in ptrptr for segmentsegment.
is set to the memory buffer.
7.3.2.2 Methods and Slot
Python objects implemented in C can export a group of functions calledthe ``buffer
interface.'' These functions canbe used by an object to expose its data in a raw, byte-orientedformat.
Clients of the object can use the buffer interface to accessthe object data directly, without needing to copy it first.Two examples of objects that supportthe buffer interface are strings and arrays.
The string object exposesthe character contents in the buffer interface's byte-orientedform.
An array can also expose its contents, but it should be notedthat array elements may be multi-byte values.An example user of the buffer interface is the file object'swrite() method.
Any object that can export a series of bytesthrough the buffer interface can be written to a file.
.A ``buffer object'' is defined in the bufferobject.h header(included by Python.h).
These objects look very similar tostring objects at the Python programming level: they support slicing,indexing, concatenation, and some other standard stringoperations.
However, their data can come from one of two sources: froma block of memory, or from another object which exports the bufferinterface.Buffer objects are useful as a way to expose the data from anotherobject's buffer interface to the Python programmer.
They can also beused as a zero-copy slicing mechanism.
Using their ability toreference a block of memory, it is possible to expose any data to thePython programmer quite easily.
The memory could be a large, constantarray in a C extension, it could be a raw block of memory formanipulation before passing to an operating system library, or itcould be used to pass around structured data in its native, in-memoryformat.
This subtype of PyObject represents a buffer object.
The instance of PyTypeObject which represents the Pythonbuffer type; it is the same object as types.BufferType in thePython layer.
.
This constant may be passed as the size parameter toPyBuffer_FromObject() orPyBuffer_FromReadWriteObject().
It indicates that thenew PyBufferObject should refer to base object fromthe specified offset to the end of its exported buffer.
Usingthis enables the caller to avoid querying the base object forits length.
Return true if the argument has type PyBuffer_Type.
Return a new read-only buffer object.
This raisesTypeError if base doesn't support the read-onlybuffer protocol or doesn't provide exactly one buffer segment, or itraises ValueError if offset is less than zero.
Thebuffer will hold a reference to the base object, and thebuffer's contents will refer to the base object's bufferinterface, starting as position offset and extending forsize bytes.
If size is Py_END_OF_BUFFER, thenthe new buffer's contents extend to the length of the baseobject's exported buffer data.
Return a new writable buffer object.
Parameters and exceptions aresimilar to those for PyBuffer_FromObject().
If thebase object does not export the writeable buffer protocol,then TypeError is raised.
Return a new read-only buffer object that reads from a specifiedlocation in memory, with a specified size.
The caller isresponsible for ensuring that the memory buffer, passed in asptr, is not deallocated while the returned buffer objectexists.
Raises ValueError if size is less thanzero.
Note that Py_END_OF_BUFFER may not bepassed for the size parameter; ValueError will beraised in that case.
Similar to PyBuffer_FromMemory(), but the returnedbuffer is writable.
Returns a new writable buffer object that maintains its own memorybuffer of size bytes.
ValueError is returned ifsize is not zero or positive.
Note that the memory buffer (asreturned by PyObject_AsWriteBuffer()) is not specificallyaligned.
1.8 Keyword Parameters for
It recognizes a set of format units similar to the ones recognized byPyArg_ParseTuple(), but the arguments (which are input to thefunction, not output) must not be pointers, just values.
It buildsa tuple only if its format string contains two or more format units.If the format string is empty, it returns None; if it containsexactly one format unit, it returns whatever object is described bythat format unit.
To force it to return a tuple of size 0 or one,parenthesize the format string.Examples (to the left the call, to the right the resulting Python value):
3.1 Distributing your extension
4.1 A Cookbook Approach 4.
Building C and C++ Extensions on Windows
This chapter briefly explains how to create a Windows extension modulefor Python using Microsoft Visual C++, and follows with moredetailed background information on how it works.
The explanatorymaterial is useful for both the Windows programmer learning to buildPython extensions and the Unix programmer interested in producingsoftware which can be successfully built on both Unix and Windows.Module authors are encouraged to use the distutils approach forbuilding extension modules, instead of the one described in thissection.
You will still need the C compiler that was used to buildPython; typically Microsoft Visual C++.
Note:This chapter mentions a number of filenames that include an encodedPython version number.
These filenames are represented with theversion number shown as "XY"; in practive, "X" willbe the major version number and "Y" will be the minorversion number of the Python release you're working with.
Forexample, if you are using Python 2.2.1, "XY" will actually be"22". Subsections
3.1 Distributing your extension 3.
Building C and C++ Extensions with distutils
Starting in Python 1.4, Python provides, on Unix, a special makefile for building make files for building dynamically-linkedextensions and custom interpreters.
Starting with Python 2.0, thismechanism (known as related to Makefile.pre.in, and Setup files) is nolonger supported.
Building custom interpreters was rarely used, andextension modules can be built using distutils.Building an extension module using distutils requires that distutilsis installed on the build machine, which is included in Python 2.x andavailable separately for Python 1.5.
Since distutils also supportscreation of binary packages, users don't necessarily need a compilerand distutils to install the extension.A distutils package contains a driver script, setup.py.
This isa plain Python file, which, in the most simple case, could look likethis:
With this setup.py, and a file demo.c, running
will compile demo.c, and produce an extension module named"demo" in the build directory.
Depending on the system,the module file will end up in a subdirectory build/lib.system,and may have a name like demo.so or demo.pyd.In the setup.py, all execution is performed by calling the"setup" function.
This takes a variable number of keyword arguments, of which the example above uses only asubset.
Specifically, the example specifies meta-information to buildpackages, and it specifies the contents of the package.
Normally, apackage will contain of addition modules, like Python source modules,documentation, subpackages, etc.
Please refer to the distutilsdocumentation in
Distributing PythonModules
to learn more about the features of distutils; this sectionexplains building extension modules only.It is common to pre-compute arguments to setup, to betterstructure the driver script.
In the example above,the"ext_modules" argument to setup is a list ofextension modules, each of which is an instance of theExtension.
This is demonstratedin the example below.
In this example, setup is called with additionalmeta-information, which is recommended when distribution packages haveto be built.
For the extension itself, it specifies preprocessordefines, include directories, library directories, and libraries.Depending on the compiler, distutils passes this information indifferent ways to the compiler.
For example, on Unix, this mayresult in the compilation commands
These lines are for demonstration purposes only; distutils usersshould trust that distutils gets the invocations right. Subsections
5. Creating Built Distributions
5.1 Creating dumb built
Creating Built Distributions
A ``built distribution'' is what you're probably used to thinking ofeither as a ``binary package'' or an ``installer'' (depending on yourbackground).
It's not necessarily binary, though, because it mightcontain only Python source code and/or byte-code; and we don't call it apackage, because that word is already spoken for in Python.
(And``installer'' is a term specific to the world of mainstream desktopsystems.)A built distribution is how you make life as easy as possible forinstallers of your module distribution: for users of RPM-based Linuxsystems, it's a binary RPM; for Windows users, it's an executableinstaller; for Debian-based Linux users, it's a Debian package; and soforth.
Regardless of who they are, a packager uses thesetup script and the bdist command family to generate builtdistributions.As a simple example, if I run the following command in the Distutilssource tree:
then the Distutils builds my module distribution (the Distutils itselfin this case), does a ``fake'' installation (also in the builddirectory), and creates the default type of built distribution for myplatform.
The default format for built distributions is a ``dumb'' tarfile on Unix, and a simple executable installer on Windows.
(That tarfile is considered ``dumb'' because it has to be unpacked in a specificlocation to work.)Thus, the above command on a Unix system createsDistutils-1.0.plat.tar.gz; unpacking this tarballfrom the right place installs the Distutils just as though you haddownloaded the source distribution and run python setup.pyinstall.
(The ``right place'' is either the root of the filesystem or Python's prefix directory, depending on the options given tothe bdist_dumb command; the default is to make dumbdistributions relative to prefix.)
Obviously, for pure Python distributions, this isn't any simpler thanjust running python setup.py install--but for non-puredistributions, which include extensions that would need to becompiled, it can mean the difference between someone being able to useyour extensions or not.
would, when run on a Unix system, createDistutils-1.0.plat.zip--again, this archive would beunpacked from the root directory to install the Distutils.The available formats for built distributions are:
Format
Description
Notes
gzipped tar file (.tar.gz)
compressed tar file (.tar.Z)
tar file (.tar)
zip file (.zip)
RPM
Solaris pkgtool
self-extracting ZIP file for Windows
Notes:
default on Unix
The Python interpreter has a number of functions built into it thatare always available.
They are listed here in alphabetical order.
This function is invoked by the import
statement.
It mainly exists so that you can replace it with anotherfunction that has a compatible interface, in order to change thesemantics of the import statement.
For examples of whyand how you would do this, see the standard library modulesihooks
and
, which defines some usefuloperations out of which you can build your own__import__() function.For example, the statement "import spam" results in thefollowing call: __import__('spam', globals(),
locals(), []); the statement "from spam.ham import eggs" results in "__import__('spam.ham', globals(), locals(),['eggs'])".
Note that even though locals() and['eggs'] are passed in as arguments, the__import__() function does not set the local variablenamed eggs; this is done by subsequent code that is generatedfor the import statement.
(In fact, the standard implementationdoes not use its locals argument at all, and uses itsglobals only to determine the package context of theimport statement.)When the name variable is of the form package.module,normally, the top-level package (the name up till the first dot) isreturned, not the module named by name.
However, whena non-empty fromlist argument is given, the module named byname is returned.
This is done for compatibility with thebytecode generated for the different kinds of import statement; whenusing "import spam.ham.eggs", the top-level package spammust be placed in the importing namespace, but when using "fromspam.ham import eggs", the spam.ham subpackage must be usedto find the eggs variable.
As a workaround for thisbehavior, use getattr() to extract the desiredcomponents.
For example, you could define the following helper:
Return the absolute value of a number.
The argument may be a plainor long integer or a floating point number.
If the argument is acomplex number, its magnitude is returned.
Convert a value to a Boolean, using the standard truth testingprocedure.
Its only instancesare False and True.
New in version 2.2.1.
Changed in version 2.3:If no argument is given, this function returnsFalse.
Return true if the object argument appears callable, false ifnot.
If this returns true, it is still possible that a call fails,but if it is false, calling object will never succeed.
Notethat classes are callable (calling a class returns a new instance);class instances are callable if they have a __call__()method.
Return a string of one character whose ASCII code is the integeri.
For example, chr(97) returns the string 'a'.This is the inverse of ord().
The argument must be inthe range [0..255], inclusive; ValueError will be raisedif i is outside that range.
The @classmethod form is a function decorator - see the descriptionof function definitions in chapter 7 of the
Python Reference Manual
for details.It can be called either on the class (such as C.f()) or on aninstance (such as C().f()).
Changed in version 2.4:Function decorator syntax added.
Compare the two objects x and y and return an integeraccording to the outcome.
The return value is negative if
, zero if
Compile the string into a code object.
Code objects can beexecuted by an exec statement or evaluated by a call toeval().
The bitfield required tospecify a given feature can be found as the compiler_flagattribute on the _Feature instance in the__future__ module.
Create a complex number with the value real + imag*j orconvert a string or number to a complex number.
Thesecond parameter can never be a string.Each argument may be any numeric type (including complex).If imag is omitted, it defaults to zero and the functionserves as a numeric conversion function like int(),long() and float().
If both argumentsare omitted, returns 0j.
This is a relative of setattr().
The arguments are anobject and a string.
The string must be the nameof one of the object's attributes.
The function deletesthe named attribute, provided the object allows it.
For example,delattr(x, 'foobar') is equivalent todel x.foobar
.
)
The elements of the argumentmust each also be of one of those kinds, and each must in turn containexactly two objects.
The first is used as a key in the new dictionary,and the second as the key's value.
If a given key is seen more thanonce, the last value associated with it is retained in the newdictionary.If keyword arguments are given, the keywords themselves with theirassociated values are added as items to the dictionary.
If a keyis specified both in the positional argument and as a keyword argument,the value associated with the keyword is retained in the dictionary.For example, these all return a dictionary equal to{"one": 2, "two": 3}:
Changed in version 2.3:Support for building a dictionary from keywordarguments added.
Without arguments, return the list of names in the current localsymbol table.
With an argument, attempts to return a list of validattributes for that object.
This information is gleaned from theobject's __dict__ attribute, if defined, and from the classor type object.
Note:Because dir() is supplied primarily as a conveniencefor use at an interactive prompt,it tries to supply an interesting set of names more than it tries tosupply a rigorously or consistently defined set of names,and its detailed behavior may change across releases.
Take two (non complex) numbers as arguments and return a pair of numbersconsisting of their quotient and remainder when using long division.
Withmixed operand types, the rules for binary arithmetic operators apply.
Forplain and long integers, the result is the same as(a / b, a % b).For floating point numbers the result is (q, a %b), where q is usually math.
floor(a /b) but may be 1 less than that.
In any case
is very close to a, if
is non-zero it has the same sign asb, and 0 = abs(a % b) abs(b).
Changed in version 2.3:Using divmod() with complex numbers isdeprecated.
Return an enumerate object. iterable must be a sequence, aniterator, or some other object which supports iteration.
The arguments are a string and optional globals and locals.
If provided,globals must be a dictionary.
If provided, locals can beany mapping object.
Changed in version 2.4:formerly locals was requiredto be a dictionary.
The expression argument is parsed and evaluated as a Pythonexpression (technically speaking, a condition list) using theglobals and locals dictionaries as global and local namespace.
If the globals dictionary is present and lacks'__builtins__', the current globals are copied into globals beforeexpression is parsed.
This means that expressionnormally has full access to the standard
module and restricted environmentsare propagated.
If the locals dictionary is omitted it defaults tothe globals dictionary.
If both dictionaries are omitted, theexpression is executed in the environment where eval iscalled.
The return value is the result of the evaluated expression.Syntax errors are reported as exceptions.
Example:
This function can also be used to execute arbitrary code objects(such as those created by compile()).
In this case passa code object instead of a string.
The code object must have beencompiled passing 'eval' as the kind argument.Hints: dynamic execution of statements is supported by theexec statement.
Execution of statements from a file issupported by the execfile() function.
Theglobals() and locals() functions returns thecurrent global and local dictionary, respectively, which may beuseful to pass around for use by eval() orexecfile().
This function is similar to theexec statement, but parses a file instead of a string.
Itis different from the import statement in that it does notuse the module administration -- it reads the file unconditionallyand does not create a new module.
The arguments are a file name and two optional dictionaries.
The file isparsed and evaluated as a sequence of Python statements (similarly to amodule) using the globals and locals dictionaries as global andlocal namespace.
If both dictionaries are omitted, the expression is executed inthe environment where execfile() is called.
The return value isNone.
Warning:The default locals act as described for functionlocals() below: modifications to the default localsdictionary should not be attempted.
Pass an explicit localsdictionary if you need to see effects of the code on locals afterfunction execfile() returns. execfile() cannotbe used reliably to modify a function's locals.
)
Return a new file object (described insection2.3.9, ``FileObjects'').The first two arguments are the same as for stdio'sfopen(): filename is the file name to be opened,mode indicates how the file is to be opened: 'r' forreading, 'w' for writing (truncating an existing file), and'a' opens it for appending (which on some Unixsystems means that all writes append to the end of the file,regardless of the current seek position).Modes 'r+', 'w+' and 'a+' open the file forupdating (note that 'w+' truncates the file).
Append'b' to the mode to open the file in binary mode, on systemsthat differentiate between binary and text files (else it isignored).
If the file cannot be opened, IOError israised.In addition to the standard fopen() values modemay be 'U' or 'rU'.
If Python is built with universalnewline support (the default) the file is opened as a text file, butlines may be terminated by any of 'n', the Unix end-of-lineconvention,'r', the Macintosh convention or 'rn', the Windowsconvention.
All of these external representations are seen as'n'by the Python program.
If Python is built without universal newline supportmode 'U' is the same as normal text mode.
Note thatfile objects so opened also have an attribute callednewlines which has a value of None (if no newlineshave yet been seen), 'n', 'r', 'rn',or a tuple containing all the newline types seen.If mode is omitted, it defaults to 'r'.
When opening abinary file, you should append 'b' to the mode valuefor improved portability.
(It's useful even on systems which don'ttreat binary and text files differently, where it serves asdocumentation.)
The optional bufsize argument specifies thefile's desired buffer size: 0 means unbuffered, 1 means linebuffered, any other positive value means use a buffer of(approximately) that size.
A negative bufsize means to usethe system default, which is usually line buffered for ttydevices and fully buffered for other files.
If omitted, the systemdefault is used.
The file() constructor is new in Python 2.2.
The previousspelling, open(), is retained for compatibility, and is analias for file().
Convert a string or a number to floating point.
Otherwise, the argument may be a plainor long integer or a floating point number, and a floating pointnumber with the same value (within Python's floating pointprecision) is returned.
If no argument is given, returns 0.0.
Note:When passing in a string, values for NaN
and Infinity
may be returned, depending on theunderlying C library.
The specific set of strings accepted whichcause these values to be returned depends entirely on the C libraryand is known to vary.
)
Return a frozenset object whose elements are taken from iterable.Frozensets are sets that have no update methods but can be hashed andused as members of other sets or as dictionary keys.
The elements ofa frozenset must be immutable themselves.
To represent sets of sets,the inner sets should also be frozenset objects.
Ifiterable is not specified, returns a new empty set,frozenset([]).New in version 2.4.
Return the value of the named attributed of object. namemust be a string.
If the string is the name of one of the object'sattributes, the result is the value of that attribute.
For example,getattr(x, 'foobar') is equivalent to x.foobar.
If thenamed attribute does not exist, default is returned if provided,otherwise AttributeError is raised.
Return a dictionary representing the current global symbol table.This is always the dictionary of the current module (inside afunction or method, this is the module where it is defined, not themodule from which it is called).
The arguments are an object and a string.
The result is True if thestring is the name of one of the object's attributes, False if not.(This is implemented by calling getattr(object,name) and seeing whether it raises an exception or not.)
Return the hash value of the object (if it has one).
Hash valuesare integers.
They are used to quickly compare dictionarykeys during a dictionary lookup.
Numeric values that compare equalhave the same hash value (even if they are of different types, as isthe case for 1 and 1.0).
Invoke the built-in help system. (This function is intended forinteractive use.)
If no argument is given, the interactive helpsystem starts on the interpreter console.
If the argument is astring, then the string is looked up as the name of a module,function, class, method, keyword, or documentation topic, and ahelp page is printed on the console.
If the argument is any otherkind of object, a help page on the object is generated.New in version 2.2.
Return the ``identity'' of an object.
This is an integer (or longinteger) which is guaranteed to be unique and constant for thisobject during its lifetime.
Two objects with non-overlapping lifetimesmay have the same id() value.
(Implementationnote: this is the address of the object.)
Equivalent to eval(raw_input(prompt)).
Warning:This function is not safe from user errors!
Itexpects a valid Python expression as input; if the input is notsyntactically valid, a SyntaxError will be raised.Other exceptions may be raised if there is an error duringevaluation.
(On the other hand, sometimes this is exactly what youneed when writing a quick script for expert use.) If the
module was loaded, theninput() will use it to provide elaborate line editing andhistory features.Consider using the raw_input() function for general inputfrom users.
Convert a string or number to a plain integer.
Ifradix is zero, the proper radix is guessed based on thecontents of string; the interpretation is the same as for integerliterals.
If radix is specified and x is not a string,TypeError is raised.Otherwise, the argument may be a plain orlong integer or a floating point number.
Conversion of floatingpoint numbers to integers truncates (towards zero).If the argument is outside the integer range a long object willbe returned instead.
If no arguments are given, returns 0.
Return true if the object argument is an instance of theclassinfo argument, or of a (direct or indirect) subclassthereof.
Also return true if classinfo is a type object andobject is an object of that type.
If object is not aclass instance or an object of the given type, the function alwaysreturns false.
If classinfo is neither a class object nor atype object, it may be a tuple of class or type objects, or mayrecursively contain other such tuples (other sequence types are notaccepted).
If classinfo is not a class, type, or tuple ofclasses, types, and such tuples, a TypeError exceptionis raised.Changed in version 2.2:Support for a tuple of type information was added.
Return true if class is a subclass (direct or indirect) ofclassinfo.
A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case everyentry in classinfo will be checked.
In any other case, aTypeError exception is raised.Changed in version 2.3:Support for a tuple of type information was added.
Return an iterator object.
The first argument is interpreted verydifferently depending on the presence of the second argument.Without a second argument, o must be a collection object whichsupports the iteration protocol (the __iter__() method), orit must support the sequence protocol (the __getitem__()method with integer arguments starting at 0).
If it does notsupport either of those protocols, TypeError is raised.If the second argument, sentinel, is given, then o mustbe a callable object.
Return the length (the number of items) of an object.
The argumentmay be a sequence (string, tuple or list) or a mapping (dictionary).
Return a list whose items are the same and in the same order assequence's items. sequence may be either a sequence, acontainer that supports iteration, or an iterator object.
Ifsequence is already a list, a copy is made and returned,similar to
sequence[:].
For instance,list('abc') returns ['a', 'b', 'c'] and list((1, 2, 3) ) returns [1, 2, 3].
If no argument is given,returns a new empty list, [].
Update and return a dictionary representing the current local symbol table.
Warning:The contents of this dictionary should not be modified;changes may not affect the values of local variables used by theinterpreter.
Convert a string or number to a long integer.
Theradix argument is interpreted in the same way as forint(), and may only be given when x is a string.Otherwise, the argument may be a plain orlong integer or a floating point number, and a long integer withthe same value is returned.
Conversion of floatingpoint numbers to integers truncates (towards zero).
If no argumentsare given, returns 0L.
Apply function to every item of list and return a listof the results.
If additional list arguments are passed,function must take that many arguments and is applied to theitems of all lists in parallel; if a list is shorter than another itis assumed to be extended with None items.
If functionis None, the identity function is assumed; if there aremultiple list arguments, map() returns a list consistingof tuples containing the corresponding items from all lists (a kindof transpose operation).
The list arguments may be any kindof sequence; the result is always a list.
With a single argument s, return the largest item of anon-empty sequence (such as a string, tuple or list).
With morethan one argument, return the largest of the arguments.
With a single argument s, return the smallest item of anon-empty sequence (such as a string, tuple or list).
With morethan one argument, return the smallest of the arguments.
)
Return a new featureless object. object() is a basefor all new style classes.
It has the methods that are commonto all instances of new style classes.New in version 2.2.
Changed in version 2.3:This function does not accept any arguments.Formerly, it accepted arguments but ignored them.
Convert an integer number (of any size) to an octal string.
Theresult is a valid Python expression.Changed in version 2.4:Formerly only returned an unsigned literal..
An alias for the file() function above.
Return the ASCII value of a string of one character or a Unicodecharacter.
E.g., ord('a') returns the integer 97,ord(u'u2020') returns 8224.
This is the inverse ofchr() for strings and of unichr() for Unicodecharacters.
Thearguments must have numeric types.
With mixed operand types, thecoercion rules for binary arithmetic operators apply.
For int andlong int operands, the result has the same type as the operands(after coercion) unless the second argument is negative; in thatcase, all arguments are converted to float and a float result isdelivered.
For example, 10**2 returns 100, but10**-2 returns 0.01. (This last feature was added inPython 2.2.
(This restriction was added inPython 2.2.
In Python 2.1 and before, floating 3-argument pow()returned platform-dependent results depending on floating-pointrounding accidents.)
Return a property attribute for new-style classes (classes thatderive from object).
fget is a function for getting an attribute value, likewisefset is a function for setting, and fdel a functionfor del'ing, an attribute.
Typical use is to define a managed attribute x:
This is a versatile function to create lists containing arithmeticprogressions.
It is most often used in for loops.
Thearguments must be plain integers.
If the step argument isomitted, it defaults to 1.
If the start argument isomitted, it defaults to 0.
The full form returns a list ofplain integers [start, start + step,start + 2 * step, ...].
If step is positive,the last element is the largest
less than stop; if step is negative, the lastelement is the largest
greater than stop. step must not be zero (or elseValueError is raised).
If the prompt argument is present, it is written to standard outputwithout a trailing newline.
The function then reads a line from input,converts it to a string (stripping a trailing newline), and returns that.When EOF is read, EOFError is raised.
module was loaded, thenraw_input() will use it to provide elaborateline editing and history features.
Apply function of two arguments cumulatively to the items ofsequence, from left to right, so as to reduce the sequence toa single value.
For example, reduce(lambda x, y: x+y, [1, 2,3, 4, 5]) calculates ((((1+2)+3)+4)+5).
The left argument,x, is the accumulated value and the right argument, y,is the update value from the sequence.
If the optionalinitializer is present, it is placed before the items of thesequence in the calculation, and serves as a default when thesequence is empty.
If initializer is not given andsequence contains only one item, the first item is returned.
Reload a previously imported module.
Theargument must be a module object, so it must have been successfullyimported before.
This is useful if you have edited the modulesource file using an external editor and want to try out the newversion without leaving the Python interpreter.
The return value isthe module object (the same as the module argument).When reload(module) is executed:
Python modules' code is recompiled and the module-level codereexecuted, defining a new set of objects which are bound to names inthe module's dictionary.
The init function of extensionmodules is not called a second time.
As with all other objects in Python the old objects are onlyreclaimed after their reference counts drop to zero.
The names in the module namespace are updated to point toany new or changed objects.
Other references to the old objects (such as names externalto the module) are not rebound to refer to the new objects andmust be updated in each namespace where they occur if that isdesired.
There are a number of other caveats:If a module is syntactically correct but its initialization fails,the first import statement for it does not bind its namelocally, but does store a (partially initialized) module object insys.modules.
To reload the module you must firstimport it again (this will bind the name to the partiallyinitialized module object) before you can reload() it.When a module is reloaded, its dictionary (containing the module'sglobal variables) is retained.
Redefinitions of names will overridethe old definitions, so this is generally not a problem.
If the newversion of a module does not define a name that was defined by theold version, the old definition remains.
This feature can be usedto the module's advantage if it maintains a global table or cache ofobjects -- with a try statement it can test for thetable's presence and skip its initialization if desired:
It is legal though generally not very useful to reload built-in ordynamically loaded modules, except for
,
.
Thesame is true for derived classes.
For many types, this function makes an attemptto return a string that would yield an object with the same valuewhen passed to eval().
Return the floating point value x rounded to n digitsafter the decimal point.
If n is omitted, it defaults to zero.The result is a floating point number.
Values are rounded to theclosest multiple of 10 to the power minus n; if two multiplesare equally close, rounding is done away from 0 (so. for example,round(0.5) is 1.0 and round(-0.5) is -1.0).
Return a set whose elements are taken from iterable.
The elementsmust be immutable.
To represent sets of sets, the inner sets shouldbe frozenset objects.
If iterable is not specified,returns a new empty set, set([]).New in version 2.4.
This is the counterpart of getattr().
The arguments are anobject, a string and an arbitrary value.
The string may name anexisting attribute or a new attribute.
The function assigns thevalue to the attribute, provided the object allows it.
For example,setattr(x, 'foobar', 123) is equivalent to
Return a slice object representing the set of indices specified byrange(start, stop, step).
The startand step arguments default to None.
Slice objects haveread-only data attributes start, stop andstep which merely return the argument values (or theirdefault).
They have no other explicit functionality; however theyare used by Numerical Python
and other thirdparty extensions.
Slice objects are also generated when extendedindexing syntax is used.
For example: "a[start:stop:step]" or"a[start:stop, i]". sorted
function)
Return a static method for function.A static method does not receive an implicit first argument.To declare a static method, use this idiom:
class C:@staticmethoddef f(arg1, arg2, ...): ...
The @staticmethod form is a function decorator - see the descriptionof function definitions in chapter 7 of the
Return a string containing a nicely printable representation of anobject.
For strings, this returns the string itself.
Thedifference with repr(object) is thatstr(object) does not always attempt to return a stringthat is acceptable to eval(); its goal is to return aprintable string.
If no argument is given, returns the emptystring, ''.
The fast, correct way to concatenate sequence ofstrings is by calling ''.join(sequence).Note that sum(range(n), m) is equivalent toreduce(operator.add, range(n), m)
Return the superclass of type.
If the second argument is omittedthe super object returned is unbound.
If the second argument is anobject, isinstance(obj, type) must be true.
Note that super is implemented as part of the binding process forexplicit dotted attribute lookups such as"super(C, self).__getitem__(name)".
Accordingly, super isundefined for implicit lookups using statements or operators such as"super(C, self)[name]".New in version 2.2.
Return a tuple whose items are the same and in the same order assequence's items. sequence may be a sequence, acontainer that supports iteration, or an iterator object.If sequence is already a tuple, itis returned unchanged.
For instance, tuple('abc') returns('a', 'b', 'c') and tuple([1, 2, 3]) returns(1, 2, 3).
If no argument is given, returns a new emptytuple, ().
Return the type of an object.
The return value is atype
object.
The standard moduletypes
defines names for all built-intypes that don't already have built-in names.For instance:
The isinstance() built-in function is recommended fortesting the type of an object.
Return the Unicode string of one character whose Unicode code is theinteger i.
For example, unichr(97) returns the stringu'a'.
This is the inverse of ord() for Unicodestrings.
The argument must be in the range [0..
65535], inclusive.ValueError is raised otherwise.New in version 2.0.
Return the Unicode string version of object using one of thefollowing modes:If encoding and/or errors are given, unicode()will decode the object which can either be an 8-bit string or acharacter buffer using the codec for encoding.
Theencoding parameter is a string giving the name of an encoding;if the encoding is not known, LookupError is raised.Error handling is done according to errors; this specifies thetreatment of characters which are invalid in the input encoding.
More precisely, if object is aUnicode string or subclass it will return that Unicode string withoutany additional decoding applied.For objects which provide a __unicode__() method, it willcall this method without arguments to create a Unicode string.
Forall other objects, the 8-bit string version or representation isrequested and then converted to a Unicode string using the codec forthe default encoding in 'strict' mode.
New in version 2.0.
Changed in version 2.2:Support for __unicode__() added.
Without arguments, return a dictionary corresponding to the currentlocal symbol table.
With a module, class or class instance objectas argument (or anything else that has a __dict__attribute), returns a dictionary corresponding to the object'ssymbol table.
The returned dictionary should not be modified: theeffects on the corresponding symbol table are undefined.
This function is very similar to range(), but returns an``xrange object'' instead of a list.
This is an opaque sequencetype which yields the same values as the corresponding list, withoutactually storing them all simultaneously.
The advantage ofxrange() over range() is minimal (sincexrange() still has to create the values when asked forthem) except when a very large range is used on a memory-starvedmachine or when all of the range's elements are never used (such aswhen the loop is usually terminated with break).
Note:
xrange() is intended to be simple and fast.Implementations may impose restrictions to achieve this.The C implementation of Python restricts all arguments tonative C longs ("short"
Python integers), and also requiresthat the number of elements fit in a native C long.
)
This function returns a list of tuples, where the i-th tuple containsthe i-th element from each of the argument sequences.The returned list is truncated in length to the length ofthe shortest argument sequence.
Changed in version 2.4:Formerly, zip() required at least one argumentand zip() raised a TypeError instead of returningan empty list.. Footnotes
... module.
It is used relativelyrarely so does not warrant being made into a statement.
... used.
Specifying a buffer size currently has no effect on systems thatdon't have setvbuf().
The interface to specify thebuffer size is not done using a method that callssetvbuf(), because that may dump core when calledafter any I/O has been performed, and there's no reliable way todetermine whether this is the case.
... undefined.
In the current implementation, local variable bindings cannotnormally be affected this way, but variables retrieved fromother scopes (such as modules) can be.
This may change.
Names for built-in exceptions and functions and a number of constants arefound in a separate symbol table.
This table is searched last when the interpreter looksup the meaning of a name, so local and globaluser-defined names can override built-in names.
Built-in types aredescribed together here for easy reference.
2.1
The tables in this chapter document the priorities of operators bylisting them in order of ascending priority (within a table) andgrouping operators that have the same priority in the same box.Binary operators of the same priority group from left to right.(Unary operators group from right to left, but there you have no realchoice.)
for the complete picture on operator priorities. Footnotes
... reference.
2.1
Most descriptions sorely lack explanations of the exceptionsthat may be raised -- this will be fixed in a future version ofthis manual.
7.3.2.1 Built-in Codecs
7.3.2 Unicode Objects
Python provides a set of builtin codecs which are written in Cfor speed.
All of these codecs are directly usable via thefollowing functions.Many of the following APIs take two arguments encoding anderrors.
These parameters encoding and errors have the same semanticsas the ones of the builtin unicode()
Unicode object constructor.Setting encoding to NULL causes the default encoding to be usedwhich is ASCII.
The file system calls should usePy_FileSystemDefaultEncoding as the encoding for filenames.
Only deviation from thefollowing generic ones are documented for simplicity.These are the generic codec APIs:
Create a Unicode object by decoding size bytes of the encodedstring s. encoding and errors have the samemeaning as the parameters of the same name in theunicode() builtin function.
The codec to be used islooked up using the Python codec registry.
Returns NULL if anexception was raised by the codec.
Encodes the Py_UNICODE buffer of the given size and returnsa Python string object. encoding and errors have thesame meaning as the parameters of the same name in the Unicodeencode() method.
The codec to be used is looked up usingthe Python codec registry.
Returns NULL if an exception wasraised by the codec.
These are the UTF-8 codec APIs:
Creates a Unicode object by decoding size bytes of the UTF-8encoded string s.
Returns NULL if an exception was raisedby the codec.
If consumed is NULL, behaves like PyUnicode_DecodeUTF8().If consumed is not NULL, trailing incomplete UTF-8 byte sequenceswill not be treated as an error.
Those bytes will not be decoded and thenumber of bytes that have been decoded will be stored in consumed.New in version 2.4.
Encodes the Py_UNICODE buffer of the given size using UTF-8and returns a Python string object.
Returns NULL if an exceptionwas raised by the codec.
Encodes a Unicode objects using UTF-8 and returns the result asPython string object.
Error handling is ``strict''.
ReturnsNULL if an exception was raised by the codec.
These are the UTF-16 codec APIs:
Decodes length bytes from a UTF-16 encoded buffer string andreturns the corresponding Unicode object. errors (ifnon-NULL) defines the error handling.
It defaults to ``strict''.If byteorder is non-NULL, the decoder starts decoding usingthe given byte order:
*byteorder == -1: little endian*byteorder == 0: native order*byteorder == 1: big endian
and then switches according to all byte order marks (BOM) it findsin the input data.
BOMs are not copied into the resulting Unicodestring.
After completion, *byteorder is set to the currentbyte order at the end of input data.If byteorder is NULL, the codec starts in native order mode.Returns NULL if an exception was raised by the codec.
PyObject*
If consumed is NULL, behaves likePyUnicode_DecodeUTF16().
If consumed is not NULL,PyUnicode_DecodeUTF16Stateful() will not treat trailing incompleteUTF-16 byte sequences (i.e. an odd number of bytes or a split surrogate pair)as an error.
Those bytes will not be decoded and the number of bytes thathave been decoded will be stored in consumed.New in version 2.4.
PyObject*
Returns a Python string object holding the UTF-16 encoded value ofthe Unicode data in s.
If byteorder is not 0,output is written according to the following byte order:
byteorder == -1: little endianbyteorder == 0: native byte order (writes a BOM mark)byteorder == 1: big endian
If byteorder is 0, the output string will always start withthe Unicode BOM mark (U+FEFF).
In the other two modes, no BOM markis prepended.If Py_UNICODE_WIDE is defined, a single Py_UNICODEvalue may get represented as a surrogate pair.
If it is notdefined, each Py_UNICODE values is interpreted as anUCS-2 character.Returns NULL if an exception was raised by the codec.
Returns a Python string using the UTF-16 encoding in native byteorder.
The string always starts with a BOM mark.
Error handling is``strict''.
Returns NULL if an exception was raised by thecodec.
These are the ``Unicode Escape'' codec APIs:
Creates a Unicode object by decoding size bytes of theUnicode-Escape encoded string s.
Encodes the Py_UNICODE buffer of the given size usingUnicode-Escape and returns a Python string object.
Returns NULLif an exception was raised by the codec.
Encodes a Unicode objects using Unicode-Escape and returns theresult as Python string object.
Error handling is ``strict''.Returns NULL if an exception was raised by the codec.
These are the ``Raw Unicode Escape'' codec APIs:
Creates a Unicode object by decoding size bytes of theRaw-Unicode-Escape encoded string s.
Encodes the Py_UNICODE buffer of the given size usingRaw-Unicode-Escape and returns a Python string object.
ReturnsNULL if an exception was raised by the codec.
Encodes a Unicode objects using Raw-Unicode-Escape and returns theresult as Python string object.
These are the Latin-1 codec APIs:Latin-1 corresponds to the first 256 Unicode ordinals and only theseare accepted by the codecs during encoding.
Creates a Unicode object by decoding size bytes of the Latin-1encoded string s.
Encodes the Py_UNICODE buffer of the given size usingLatin-1 and returns a Python string object.
Returns NULL if anexception was raised by the codec.
Encodes a Unicode objects using Latin-1 and returns the result asPython string object.
These are the ASCII codec APIs. Only 7-bit ASCII data isaccepted.
All other codes generate errors.
Creates a Unicode object by decoding size bytes of theASCII encoded string s.
Returns NULL if an exceptionwas raised by the codec.
Encodes the Py_UNICODE buffer of the given size usingASCII and returns a Python string object.
Encodes a Unicode objects using ASCII and returns the result asPython string object.
These are the mapping codec APIs:This codec is special in that it can be used to implement manydifferent codecs (and this is in fact what was done to obtain most ofthe standard codecs included in the encodings package).
Because of this, mappings only needto contain those mappings which map characters to different codepoints.
Creates a Unicode object by decoding size bytes of the encodedstring s using the given mapping object.
Encodes the Py_UNICODE buffer of the given size using thegiven mapping object and returns a Python string object.Returns NULL if an exception was raised by the codec.
Encodes a Unicode objects using the given mapping object andreturns the result as Python string object.
The following codec API is special in that maps Unicode to Unicode.
Translates a Py_UNICODE buffer of the given length byapplying a character mapping table to it and returns theresulting Unicode object.
Unmapped characterordinals (ones which cause a LookupError) are leftuntouched and are copied as-is.
These are the MBCS codec APIs.
They are currently only available onWindows and use the Win32 MBCS converters to implement theconversions.
Note that MBCS (or DBCS) is a class of encodings, notjust one.
The target encoding is defined by the user settings on themachine running the codec.
Creates a Unicode object by decoding size bytes of the MBCSencoded string s.
Encodes the Py_UNICODE buffer of the given size using MBCSand returns a Python string object.
Encodes a Unicode objects using MBCS and returns the result asPython string object.
18.10.1 Python Byte Code Instructions
The Python compiler currently generates the following byte codeinstructions.
STOP_CODE
Indicates end-of-code to the compiler, not used by the interpreter.
Removes the top-of-stack (TOS) item.
Swaps the two top-most stack items.
Duplicates the reference on top of the stack.
Implements TOS = +TOS.
Implements TOS = -TOS.
Implements TOS = not TOS.
Implements TOS = `TOS`.
Implements TOS = ~TOS.
Implements TOS = iter(TOS).
Binary operations remove the top of the stack (TOS) and the second top-moststack item (TOS1) from the stack.
They perform the operation, and put theresult back on the stack.
Implements TOS = TOS1 ** TOS.
Implements TOS = TOS1 * TOS.
Implements TOS = TOS1 / TOS whenfrom __future__ import division is not in effect.
Implements TOS = TOS1 // TOS.
Implements TOS = TOS1 / TOS whenfrom __future__ import division is in effect.
Implements TOS = TOS1 % TOS.
Implements TOS = TOS1 + TOS.
Implements TOS = TOS1 - TOS.
Implements TOS = TOS1[TOS].
TOS.
Implements TOS = TOS1 TOS.
Implements TOS = TOS1 ^ TOS.
Implements TOS = TOS1 | TOS.
In-place operations are like binary operations, in that they remove TOS andTOS1, and push the result back on the stack, but the operation is donein-place when TOS1 supports it, and the resulting TOS may be (but does nothave to be) the original TOS1.
Implements in-place TOS = TOS1 ** TOS.
Implements in-place TOS = TOS1 * TOS.
Implements in-place TOS = TOS1 / TOS whenfrom __future__ import division is not in effect.
Implements in-place TOS = TOS1 // TOS.
Implements in-place TOS = TOS1 / TOS whenfrom __future__ import division is in effect.
Implements in-place TOS = TOS1 % TOS.
Implements in-place TOS = TOS1 + TOS.
Implements in-place TOS = TOS1 - TOS.
Implements in-place TOS = TOS1
Implements in-place TOS = TOS1 TOS.
Implements in-place TOS = TOS1 ^ TOS.
Implements in-place TOS = TOS1 | TOS.
The slice opcodes take up to three parameters.
Implements TOS = TOS[:].
Implements TOS = TOS1[TOS:].
Implements TOS = TOS1[:TOS].
Implements TOS = TOS2[TOS1:TOS].
Slice assignment needs even an additional parameter.
As any statement,they put nothing on the stack.
Implements TOS[:] = TOS1.
Implements TOS1[TOS:] = TOS2.
Implements TOS1[:TOS] = TOS2.
Implements TOS2[TOS1:TOS] = TOS3.
Implements del TOS[:].
Implements del TOS1[TOS:].
Implements del TOS1[:TOS].
Implements del TOS2[TOS1:TOS].
Implements TOS1[TOS] = TOS2.
Implements del TOS1[TOS].
Miscellaneous opcodes.
Implements the expression statement for the interactive mode.
TOS isremoved from the stack and printed.
In non-interactive mode, anexpression statement is terminated with POP_STACK.
Prints TOS to the file-like object bound to sys.stdout.
Thereis one such instruction for each item in the print statement.
Like PRINT_ITEM, but prints the item second from TOS to thefile-like object at TOS.
This is used by the extended print statement.
Prints a new line on sys.stdout.
This is generated as thelast operation of a print statement, unless the statementends with a comma.
Like PRINT_NEWLINE, but prints the new line on the file-likeobject on the TOS.
Terminates a loop due to a break statement.
Continues a loop due to a continue statement. targetis the address to jump to (which should be a FOR_ITERinstruction).
LOAD_LOCALS
Pushes a reference to the locals of the current scope on the stack.This is used in the code for a class definition: After the class bodyis evaluated, the locals are passed to the class definition.
Returns with TOS to the caller of the function.
Pops TOS and yields it from a generator.
Loads all symbols not starting with "_" directly from the module TOSto the local namespace.
The module is popped after loading all names.This opcode implements from module import *.
Implements exec TOS2,TOS1,TOS.
The compiler fillsmissing optional parameters with None.
Removes one block from the block stack.
Per frame, there is a stack of blocks, denoting nested loops, try statements, and such.
Terminates a finally clause.
The interpreter recallswhether the exception has to be re-raised, or whether the functionreturns, and continues with the outer-next block.
Creates a new class object.
TOS is the methods dictionary, TOS1the tuple of the names of the base classes, and TOS2 the class name.
All of the following opcodes expect arguments.
An argument is twobytes, with the more significant byte last.
Implements del name, where namei is the index intoco_names attribute of the code object.
Unpacks TOS into count individual values, which are put ontothe stack right-to-left.
Duplicate count items, keeping them in the same order.
Due toimplementation limits, count should be between 1 and 5 inclusive.
Implements TOS.name = TOS1, where namei is the indexof name in co_names.
Implements del TOS.name, using namei as index intoco_names.
Works as STORE_NAME, but stores the name as a global.
Works as DELETE_NAME, but deletes a global name.
Pushes "co_consts[consti]" onto the stack.
Pushes the value associated with "co_names[namei]" onto the stack.
Creates a tuple consuming count items from the stack, and pushesthe resulting tuple onto the stack.
Works as BUILD_TUPLE, but creates a list.
Pushes a new empty dictionary object onto the stack.
The argument isignored and set to zero by the compiler.
Replaces TOS with getattr(TOS, co_names[namei]).
Performs a Boolean operation.
The operation name can be foundin cmp_op[opname].
Imports the module co_names[namei].
The module object ispushed onto the stack.
The current namespace is not affected: for aproper import statement, a subsequent STORE_FAST instructionmodifies the namespace.
Loads the attribute co_names[namei] from the module found inTOS.
The resulting object is pushed onto the stack, to be subsequentlystored by a STORE_FAST instruction.
Increments byte code counter by delta.
If TOS is true, increment the byte code counter by delta.
TOS isleft on the stack.
If TOS is false, increment the byte code counter by delta.
TOSis not changed.
Set byte code counter to target.
TOS is an iterator.
Call its next() method.
If thisyields a new value, push it on the stack (leaving the iterator belowit).
If the iterator indicates it is exhausted TOS ispopped, and the byte code counter is incremented by delta.
Loads the global named co_names[namei] onto the stack.
Pushes a block for a loop onto the block stack.
The block spansfrom the current instruction with a size of delta bytes.
Pushes a try block from a try-except clause onto the block stack.delta points to the first except block.
SETUP_FINALLY
Pushes a try block from a try-except clause onto the block stack.delta points to the finally block.
Pushes a reference to the local co_varnames[var_num] ontothe stack.
Stores TOS into the local co_varnames[var_num].
Deletes local co_varnames[var_num].
Pushes a reference to the cell contained in slot i of thecell and free variable storage.
The name of the variable is co_cellvars[i] if i is less than the length ofco_cellvars.
Otherwise it is co_freevars[i - len(co_cellvars)].
Loads the cell contained in slot i of the cell and free variablestorage.
Pushes a reference to the object the cell contains on thestack.
Stores TOS into the cell contained in slot i of the cell andfree variable storage.
This opcode is obsolete.
Raises an exception. argc indicates the number of parametersto the raise statement, ranging from 0 to 3.
The handler will findthe traceback as TOS2, the parameter as TOS1, and the exceptionas TOS.
Calls a function.
The low byte of argc indicates the number ofpositional parameters, the high byte the number of keyword parameters.On the stack, the opcode finds the keyword parameters first.
For eachkeyword argument, the value is on top of the key.
Below the keywordparameters, the positional parameters are on the stack, with theright-most parameter on top.
Below the parameters, the function objectto call is on the stack.
Pushes a new function object on the stack.
TOS is the code associatedwith the function.
The function object is defined to have argcdefault parameters, which are found below TOS.
Creates a new function object, sets its func_closure slot, andpushes it on the stack.
TOS is the code associated with the function.If the code object has N free variables, the next N items on the stackare the cells for these variables.
The function also has argcdefault parameters, where are found before the cells.
Pushes a slice object on the stack. argc must be 2 or 3.
built-in function for moreinformation.
Prefixes any opcode which has an argument too big to fit into thedefault two bytes. ext holds two additional bytes which, takentogether with the subsequent opcode's argument, comprise a four-byteargument, ext being the two most-significant bytes.
CALL_FUNCTION_VAR
Calls a function. argc is interpreted as inCALL_FUNCTION.
The top element on the stack contains thekeyword arguments dictionary, followed by the variable-argumentstuple, followed by explicit keyword and positional arguments.
7.5.8 Weak Reference Objects
Refer to Extending and Embedding the Python Interpreter,section1.12, ``Providing a C API for an Extension Module,'' for moreinformation on using these objects.
This subtype of PyObject represents an opaque value, usefulfor C extension modules who need to pass an opaque value (as avoid* pointer) through Python code to other C code.
It isoften used to make a C function pointer defined in one moduleavailable to other modules, so the regular import mechanism can beused to access C APIs defined in dynamically loaded modules.
Return true if its argument is a PyCObject.
cobj.
Thedestr function will be called when the object is reclaimed,unless it is NULL.
Thedestr function will be called when the object is reclaimed.The desc argument can be used to pass extra callback data forthe destructor function.
Return the object void * that the PyCObject self was created with.
Return the description void * that the PyCObject self was created with.
CacheFTPHandler objects are FTPHandler objects withthe following additional methods:
Set timeout of connections to t seconds.
Set maximum number of cached connections to m.
Called when the instance is ``called'' as a function; if this methodis defined,
x(arg1, arg2, ...) is a shorthand for
x.__call__(arg1, arg2, ...).
1.7 Extracting Parameters in
So far we have concentrated on making C functions callable fromPython.
The reverse is also useful: calling Python functions from C.This is especially the case for libraries that support so-called``callback'' functions.
If a C interface makes use of callbacks, theequivalent Python often needs to provide a callback mechanism to thePython programmer; the implementation will require calling the Pythoncallback functions from a C callback.
Other uses are also imaginable.Fortunately, the Python interpreter is easily called recursively, andthere is a standard interface to call a Python function.
(I won'tdwell on how to call the Python parser with a particular string asinput -- if you're interested, have a look at the implementation ofthe -c command line option in Python/pythonmain.cfrom the Python source code.)Calling a Python function is easy.
First, the Python program mustsomehow pass you the Python function object.
You should provide afunction (or some other interface) to do this.
When this function iscalled, save a pointer to the Python function object (be careful toPy_INCREF() it!) in a global variable -- or wherever yousee fit.
For example, the following function might be part of a moduledefinition:
static PyObject *my_callback = NULL;static PyObject *my_set_callback(PyObject *dummy, PyObject *args){PyObject *result = NULL;PyObject *temp;if (PyArg_ParseTuple(args, "O:set_callback", temp)) {if (!PyCallable_Check(temp)) {PyErr_SetString(PyExc_TypeError, "parameter must be callable");return NULL;}Py_XINCREF(temp); /* Add a reference to new callback */Py_XDECREF(my_callback); /* Dispose of previous callback */my_callback = temp; /* Remember new callback *//* Boilerplate to return "None"
*/Py_INCREF(Py_None);result = Py_None;}return result;}
This function must be registered with the interpreter using theMETH_VARARGS flag; this is described in section1.4, ``The Module's Method Table and InitializationFunction.'' The PyArg_ParseTuple() function and itsarguments are documented in section1.7, ``ExtractingParameters in Extension Functions.''The macros Py_XINCREF() and Py_XDECREF()increment/decrement the reference count of an object and are safe inthe presence of NULL pointers (but note that temp will not be NULL in this context).
Thisfunction has two arguments, both pointers to arbitrary Python objects:the Python function, and the argument list.
The argument list mustalways be a tuple object, whose length is the number of arguments.
Tocall the Python function with no arguments, pass an empty tuple; tocall it with one argument, pass a singleton tuple.Py_BuildValue() returns a tuple when its format stringconsists of zero or more format codes between parentheses.
Forexample:
int arg;PyObject *arglist;PyObject *result;...arg = 123;.../* Time to call the callback */arglist = Py_BuildValue("(i)", arg);result = PyEval_CallObject(my_callback, arglist);Py_DECREF(arglist);
PyEval_CallObject() returns a Python object pointer: this isthe return value of the Python function.
PyEval_CallObject() is``reference-count-neutral'' with respect to its arguments.
In theexample a new tuple was created to serve as the argument list, whichis Py_DECREF()-ed immediately after the call.The return value of PyEval_CallObject() is ``new'': either itis a brand new object, or it is an existing object whose referencecount has been incremented.
So, unless you want to save it in aglobal variable, you should somehow Py_DECREF() the result,even (especially!) if you are not interested in its value.Before you do this, however, it is important to check that the returnvalue isn't NULL.
If it is, the Python function terminated byraising an exception.
If the C code that calledPyEval_CallObject() is called from Python, it should nowreturn an error indication to its Python caller, so the interpretercan print a stack trace, or the calling Python code can handle theexception.
If this is not possible or desirable, the exception shouldbe cleared by calling PyErr_Clear().
For example:
if (result == NULL)return NULL; /* Pass error back */...use result...Py_DECREF(result);
Depending on the desired interface to the Python callback function,you may also have to provide an argument list toPyEval_CallObject().
In some cases the argument list isalso provided by the Python program, through the same interface thatspecified the callback function. It can then be saved and used in thesame manner as the function object.
In other cases, you may have toconstruct a new tuple to pass as the argument list.
The simplest wayto do this is to call Py_BuildValue().
For example, ifyou want to pass an integral event code, you might use the followingcode:
PyObject *arglist;...arglist = Py_BuildValue("(l)", eventcode);result = PyEval_CallObject(my_callback, arglist);Py_DECREF(arglist);if (result == NULL)return NULL; /* Pass error back *//* Here maybe use the result */Py_DECREF(result);
Note the placement of "Py_DECREF(arglist)" immediately after thecall, before the error check! Also note that strictly spoken thiscode is not complete: Py_BuildValue() may run out ofmemory, and this should be checked.
A call calls a callable object (e.g., a function) with a possibly emptyseries of arguments:
All argument expressions are evaluated before the callis attempted.
Please refer to section 7.5 for the syntaxof formal parameter lists.If keyword arguments are present, they are first converted topositional arguments, as follows.
First, a list of unfilled slots iscreated for the formal parameters.
If there are N positionalarguments, they are placed in the first N slots.
Next, for eachkeyword argument, the identifier is used to determine thecorresponding slot (if the identifier is the same as the first formalparameter name, the first slot is used, and so on).
When allarguments have been processed, the slots that are still unfilled arefilled with the corresponding default value from the functiondefinition.
(Default values are calculated, once, when the functionis defined; thus, a mutable object such as a list or dictionary usedas default value will be shared by all calls that don't specify anargument value for the corresponding slot; this should usually beavoided.)
If there are any unfilled slots for which no default valueis specified, a TypeError exception is raised.
Elements from thissequence are treated as if they were additional positional arguments;if there are postional arguments x1,...,xN , and"expression" evaluates to a sequence y1,...,yM, thisis equivalent to a call with M+N positional argumentsx1,...,xN,y1,...,yM.A consequence of this is that although the "*expression" syntaxappears after any keyword arguments, it is processedbefore the keyword arguments (and the"**expression" argument, if any - see below).
So:
def f(a, b):... print a, b... f(b=1, *(2,))2 1 f(a=1, *(2,))Traceback (most recent call last):File "stdin", line 1, in ?TypeError: f() got multiple values for keyword argument 'a' f(1, *(2,))1 2
In thecase of a keyword appearing in both "expression" and as anexplicit keyword argument, a TypeError exception israised.Formal parameters using the syntax "*identifier" or"**identifier" cannot be used as positional argument slots oras keyword argument names.
a user-defined function:
The code block for the function isexecuted, passing it the argument list.
The first thing the codeblock will do is bind the formal parameters to the arguments; this isdescribed in section 7.5.
When the code block executes areturn statement, this specifies the return value of thefunction call.
a built-in function or method:
The result is up to theinterpreter; see the
PythonLibrary Reference
for the descriptions of built-in functions andmethods.
a class object:
A new instance of that class is returned.
a class instance method:
The corresponding user-definedfunction is called, with an argument list that is one longer than theargument list of the call: the instance becomes the first argument.
a class instance:
The class must define a __call__()method; the effect is then the same as if that method was called.
Parser objects (returned by createparser()) have thefollowing methods:
Adds a callback for the parser.
The parser has callbacks for eightdifferent types of data in the digital audio data stream.
Constantsfor these types are defined at the cd module level (see above).The callback is called as follows:
func(arg, type,data), where arg is the user supplied argument, type isthe particular type of callback, and data is the data returnedfor this type of callback.
The type of the data depends on thetype of callback as follows:
String which can be passed unmodified toal.writesamps().
Integer giving the program (track) number.
Integer giving the index number.
Tuple consisting of the program time in minutes,seconds, and frames.
Tuple consisting of the absolute time in minutes,seconds, and frames.
String of 13 characters, giving the catalog numberof the CD.
String of 12 characters, giving the ISRCidentification number of the recording.
The string consists of twocharacters country code, three characters owner code, two charactersgiving the year, and five characters giving a serial number.
Integer giving the control bits from the CDsubcode data
Deletes the parser and frees the memory it was using.
The objectshould not be used after this call.
This call is done automaticallywhen the last reference to the object is removed.
Parses one or more frames of digital audio data from a CD such asreturned by readda().
It determines which subcodes arepresent in the data.
If these subcodes have changed since the lastframe, then parseframe() executes a callback of theappropriate type passing to it the subcode data found in the frame.Unlike the C function, more than one frame of digital audio datacan be passed to this method.
Removes the callback for the given type.
Resets the fields of the parser used for tracking subcodes to aninitial state. resetparser() should be called after the dischas been changed.
``Cell'' objects are used to implement variables referenced bymultiple scopes.
For each such variable, a cell object is created tostore the value; the local variables of each stack frame thatreferences the value contains a reference to the cells from outerscopes which also use that variable.
When the value is accessed, thevalue contained in the cell is used instead of the cell objectitself.
This de-referencing of the cell object requires support fromthe generated byte-code; these are not automatically de-referencedwhen accessed.
Cell objects are not likely to be useful elsewhere.
The C structure used for cell objects.
The type object corresponding to cell objects
Return true if ob is a cell object; ob must not beNULL.
Create and return a new cell object containing the value ob.The parameter may be NULL.
Return the contents of the cell cell.
Return the contents of the cell cell, but without checkingthat cell is non-NULL and a cell object.
Set the contents of the cell object cell to value.
On success, 0will be returned.
Sets the value of the cell object cell to value.
Noreference counts are adjusted, and no checks are made for safety;cell must be non-NULL and must be a cell object.
11.2.2 Using the cgi
A CGI script is invoked by an HTTP server, usually to process userinput submitted through an HTML FORM or ISINDEX element.Most often, CGI scripts live in the server's special cgi-bindirectory.
This module is intendedto take care of the different cases and provide a simpler interface tothe Python script.
The first section contains a number of headers,telling the client what kind of data is following.
Python code togenerate a minimal header section looks like this:
print "Content-Type: text/html" # HTML is followingprint # blank line, end of headers
The second section is usually HTML, which allows the client softwareto display nicely formatted text with header, in-line images, etc.Here's Python code that prints a simple piece of HTML:
11.2.7 Installing your CGI
This is a well-knownsecurity hole whereby clever hackers anywhere on the Web can exploit agullible CGI script to invoke arbitrary shell commands.
Even parts ofthe URL or field names cannot be trusted, since the request doesn'thave to come from your form!To be on the safe side, if you must pass a string gotten from a formto a shell command, you should make sure the string contains onlyalphanumeric characters, dashes, underscores, and periods.
A class definition defines a class object (see section3.2):
A class definition is an executable statement.
It first evaluates theinheritance list, if present.
Each item in the inheritance listshould evaluate to a class object or class type which allowssubclassing.
The class's suite is then executedin a new execution frame (see section4.1), using a newlycreated local namespace and the original global namespace.(Usually, the suite contains only function definitions.)
When theclass's suite finishes execution, its execution frame is discarded butits local namespace is saved.
A class object is then created usingthe inheritance list for the base classes and the saved localnamespace for the attribute dictionary.
The class name is bound to thisclass object in the original local namespace.
Programmer's note: Variables defined in the class definitionare class variables; they are shared by all instances.
To defineinstance variables, they must be given a value in the__init__() method or in another method.
Both class andinstance variables are accessible through the notation``self.
name'', and an instance variable hides a class variablewith the same name when accessed in this way.
Class variables withimmutable values can be used as defaults for instance variables.For new-style classes, descriptors can be used to create instancevariables with different implementation details.
5 Document Classes
Two LaTeX document classes are defined specifically for use withthe Python documentation.
The manual class is for largedocuments which are sectioned into chapters, and the howtoclass is for smaller documents.The manual documents are larger and are used for most of thestandard documents.
This document class is based on the standardLaTeX report class and is formatted very much like a longtechnical report.
The
Python ReferenceManual
is a good example of a manual document, and the
is a largeexample.The howto documents are shorter, and don't have the largestructure of the manual documents.
This class is based onthe standard LaTeX article class and is formatted somewhatlike the Linux Documentation Project's ``HOWTO'' series as doneoriginally using the LinuxDoc software.
The original intent for thedocument class was that it serve a similar role as the LDP's HOWTOseries, but the applicability of the class turns out to be somewhatbroader.
This class is used for ``how-to'' documents (thisdocument is an example) and for shorter reference manuals for small,fairly cohesive module libraries.
Examples of the later use include
, which contains reference material for anextension package.
These documents are roughly equivalent to asingle chapter from a larger work.
4.9.1.1 Codec Objects
4.9.1.2 StreamWriter Objects
The Codec class defines these methods which also define thefunction interfaces of the stateless encoder and decoder:
Encodes the object input and returns a tuple (output object,length consumed).
While codecs are not restricted to use with Unicode, ina Unicode context, encoding converts a Unicode object to a plain stringusing a particular character set encoding (e.g., cp1252 oriso-8859-1).
errors defines the error handling to apply.
It defaults to'strict' handling.The method may not store state in the Codec instance.
Decodes the object input and returns a tuple (output object,length consumed).
In a Unicode context, decoding converts a plain stringencoded using a particular character set encoding to a Unicode object.
input must be an object which provides the bf_getreadbufbuffer slot.
Python strings, buffer objects and memory mapped filesare examples of objects providing this slot.
It defaults to'strict' handling.The method may not store state in the Codec instance.
The StreamWriter and StreamReader classes providegeneric working interfaces which can be used to implement newencodings submodules very easily.
See encodings. utf_8 for anexample on how this is done.
This section used to document the rules for coercion.
As the languagehas evolved, the coercion rules have become hard to documentprecisely; documenting what one version of one particularimplementation does is undesirable.
Instead, here are some informalguidelines regarding coercion.
In Python 3.0, coercion will not besupported.
If the left operand of a % operator is a string or Unicode object, nocoercion takes place and the string formatting operation is invokedinstead.
It is no longer recommended to define a coercion operation.Mixed-mode operations on types that don't define coercion pass theoriginal arguments to the operation.
For most intents and purposes, an operator that returnsNotImplemented is treated the same as one that is notimplemented at all.
Below, __op__() and __rop__() are used to signifythe generic method names corresponding to an operator;__iop__ is used for the corresponding in-place operator.
Forexample, for the operator `+', __add__() and__radd__() are used for the left and right variant of thebinary operator, and __iadd__ for the in-place variant.
For objects x and y, first
x.__op__(y)is tried.
If this is not implemented or returns NotImplemented,
y.__rop__(x) is tried.
If this is also notimplemented or returns NotImplemented, a TypeErrorexception is raised.
But see the following exception:
Exception to the previous item: if the left operand is an instance ofa built-in type or a new-style class, and the right operand is aninstance of a proper subclass of that type or class, the rightoperand's __rop__() method is tried before the leftoperand's __op__() method.
This is done so that a subclass cancompletely override binary operators.
Otherwise, the left operand's__op__ method would always accept the right operand: when an instanceof a given class is expected, an instance of a subclass of that classis always acceptable.
When either operand type defines a coercion, this coercion is calledbefore that type's __op__() or __rop__() method iscalled, but no sooner.
If the coercion returns an object of adifferent type for the operand whose coercion is invoked, part of theprocess is redone using the new object.
When an in-place operator (like `+=') is used, if the leftoperand implements __iop__(), it is invoked without anycoercion.
When the operation falls back to __op__() and/or__rop__(), the normal coercion rules apply.
y, if x is a sequence that implementssequence concatenation, sequence concatenation is invoked.
y, if one operator is a sequence thatimplements sequence repetition, and the other is an integer(int or long), sequence repetition is invoked.
Rich comparisons (implemented by methods __eq__() and so on)never use coercion.
Three-way comparison (implemented by__cmp__()) does use coercion under the same conditions asother binary operations use it.
In the current implementation, the built-in numeric types int,long and float do not use coercion; the typecomplex however does use it.
The difference can becomeapparent when subclassing these types.
Over time, the typecomplex may be fixed to avoid coercion.
All these typesimplement a __coerce__() method, for use by the built-incoerce() function.
A comment starts with a hash character (#) that is not part ofa string literal, and ends at the end of the physical line.
A commentsignifies the end of the logical line unless the implicit line joiningrules are invoked.Comments are ignored by the syntax; they are not tokens.
10.1 Allocating Objects on
There are a large number of structures which are used in thedefinition of object types for Python.
These arerepresented by the PyObject and PyVarObject types,which are defined, in turn, by the expansions of some macros alsoused, whether directly or indirectly, in the definition of all otherPython objects.
All object types are extensions of this type.
This is a type whichcontains the information Python needs to treat a pointer to anobject as an object.
In a normal ``release'' build, it containsonly the objects reference count and a pointer to the correspondingtype object.
It corresponds to the fields defined by theexpansion of the PyObject_HEAD macro.
This is an extension of PyObject that adds theob_size field.
This is only used for objects that havesome notion of length.
This type does not often appear inthe Python/C API.
It corresponds to the fields defined by theexpansion of the PyObject_VAR_HEAD macro.
These macros are used in the definition of PyObject andPyVarObject:
This is a macro which expands to the declarations of the fields ofthe PyObject type; it is used when declaring new types whichrepresent objects without a varying length.
The specific fields itexpands to depend on the definition ofPy_TRACE_REFS.
By default, that macro is notdefined, and PyObject_HEAD expands to:
When Py_TRACE_REFS is defined, it expands to:
PyObject_VAR_HEAD
This is a macro which expands to the declarations of the fields ofthe PyVarObject type; it is used when declaring new types whichrepresent objects with a length that varies from instance toinstance.
This macro always expands to:
Note that PyObject_HEAD is part of the expansion, andthat it's own expansion varies depending on the definition ofPy_TRACE_REFS.
Type of the functions used to implement most Python callables in C.Functions of this type take two PyObject* parameters andreturn one such value.
If the return value is NULL, an exceptionshall have been set.
If not NULL, the return value is interpretedas the return value of the function as exposed in Python.
Thefunction must return a new reference.
Structure used to describe a method of an extension type.
Thisstructure has four fields:
Field
C Type
name of the method
pointer to the C implementation
flag bits indicating how the call should beconstructed
points to the contents of the docstring
The ml_meth is a C function pointer.
The functions may be ofdifferent types, but they always return PyObject*.
If thefunction is not of the PyCFunction, the compiler will requirea cast in the method table.
Even though PyCFunction definesthe first parameter as PyObject*, it is common that the methodimplementation uses a the specific C type of the self object.The ml_flags field is a bitfield which can include thefollowing flags.
The individual flags indicate either a callingconvention or a binding convention.
Of the calling convention flags,only METH_VARARGS and METH_KEYWORDS can becombined (but note that METH_KEYWORDS alone is equivalentto
METH_VARARGS | METH_KEYWORDS
).Any of the calling convention flags can be combined with abinding flag.
This is the typical calling convention, where the methods have thetype PyCFunction.
The function expects twoPyObject* values.
The first one is the self object formethods; for module functions, it has the value given toPy_InitModule4() (or NULL ifPy_InitModule() was used).
The second parameter(often called args) is a tuple object representing allarguments.
This parameter is typically processed usingPyArg_ParseTuple() or PyArg_UnpackTuple.
Methods with these flags must be of typePyCFunctionWithKeywords.
The function expects threeparameters: self, args, and a dictionary of all thekeyword arguments.
The flag is typically combined withMETH_VARARGS, and the parameters are typically processedusing PyArg_ParseTupleAndKeywords().
Methods without parameters don't need to check whether arguments aregiven if they are listed with the METH_NOARGS flag.
Theyneed to be of type PyCFunction.
When used with objectmethods, the first parameter is typically named self and willhold a reference to the object instance.
In all cases the secondparameter will be NULL.
Methods with a single object argument can be listed with theMETH_O flag, instead of invokingPyArg_ParseTuple() with a "O" argument.
They havethe type PyCFunction, with the self parameter, and aPyObject* parameter representing the single argument.
This calling convention is deprecated.
The method must be of typePyCFunction.
The second argument is NULL if no argumentsare given, a single object if exactly one argument is given, and atuple of objects if more than one argument is given.
There is noway for a function using this convention to distinguish between acall with multiple arguments and a call with a tuple as the onlyargument.
These two constants are not used to indicate the calling conventionbut the binding when use with methods of classes.
These may not beused for functions defined for modules.
At most one of these flagsmay be set for any given method.
The method will be passed the type object as the first parameterrather than an instance of the type.
This is used to createclass methods, similar to what is created when using theclassmethod()
built-infunction.New in version 2.3.
The method will be passed NULL as the first parameter rather thanan instance of the type.
This is used to create staticmethods, similar to what is created when using thestaticmethod()
One other constant controls whether a method is loaded in place ofanother definition with the same method name.
The method will be loaded in place of existing definitions.
WithoutMETH_COEXIST, the default is to skip repeated definitions.
Sinceslot wrappers are loaded before the method table, the existence of asq_contains slot, for example, would generate a wrapped methodnamed __contains__() and preclude the loading of acorresponding PyCFunction with the same name.
With the flag defined,the PyCFunction will be loaded in place of the wrapper object and willco-exist with the slot.
This is helpful because calls to PyCFunctionsare optimized more than wrapper object calls.New in version 2.4.
Return a bound method object for an extension type implemented inC.
This can be useful in the implementation of atp_getattro or tp_getattr handler that does notuse the PyObject_GenericGetAttr() function.
Comparison operations are supported by all objects.
They all have thesame priority (which is higher than that of the Boolean operations).Comparisons can be chained arbitrarily; for example,
is equivalent to
x y andy = z
, except that y is evaluated only once (butin both cases z is not evaluated at all when
is found to be false).
This table summarizes the comparison operations:
strictly less than
less than or equal
strictly greater than
greater than or equal
equal
not equal
object identity
negated object identity
and != are alternate spellings for the same operator.!= is the preferred spelling; is obsolescent.
Again, such objects are ordered arbitrarily butconsistently.
The , =, and =operators will raise a TypeError exception when any operandis a complex number.
Instances of a class normally compare as non-equal unless the class
defines the __cmp__() method. Refer to the
forinformation on the use of this method to effect object comparisons.
Implementation note: Objects of different types exceptnumbers are ordered by their type names; objects of the same typesthat don't support proper comparison are ordered by their address.Two more operations with the same syntactic priority,"in"
and "not in"
, are supportedonly by sequence types (below).
1.6 Calling Python Functions
There are two more things to do before you can use your new extension:compiling and linking it with the Python system.
If you use dynamicloading, the details may depend on the style of dynamic loading yoursystem uses; see the chapters about building extension modules(chapter 3) and additional information that pertains onlyto building on Windows (chapter 4) for moreinformation about this.If you can't use dynamic loading, or if you want to make your module apermanent part of the Python interpreter, you will have to change theconfiguration setup and rebuild the interpreter.
Luckily, this isvery simple on Unix: just place your file (spammodule.c forexample) in the Modules/ directory of an unpacked sourcedistribution, add a line to the file Modules/Setup.localdescribing your file:
o and rebuild the interpreter by running make in the topleveldirectory.
You can also run make in the Modules/subdirectory, but then you must first rebuild Makefilethere by running `make Makefile'.
(This is necessary eachtime you change the Setup file.)If your module requires additional libraries to link with, these canbe listed on the line in the configuration file as well, for instance:
The Python compiler package is a tool for analyzing Python source codeand generating Python bytecode.
The compiler contains libraries togenerate an abstract syntax tree from Python source code and togenerate Python bytecode from the tree.The
package is a Python source to bytecodetranslator written in Python.
It uses the built-in parser andstandard
module to generated a concrete syntaxtree.
This tree is used to generate an abstract syntax tree (AST) andthen Python bytecode.The full functionality of the package duplicates the builtin compilerprovided with the Python interpreter.
It is intended to match itsbehavior almost exactly.
Why implement another compiler that does thesame thing? The package is useful for a variety of purposes.
package work.
It blends reference material witha tutorial.The following modules are part of the
package:
Completer objects have the following method:
Return the stateth completion for text.If called for text that doesn't include a period character("."), it will complete from names currently defined in
andkeywords (as defined by the
module).If called for a dotted name, it will try to evaluate anything withoutobvious side-effects (functions will not be evaluated, but itcan generate calls to __getattr__()) up to the last part, andfind matches for the rest via the dir() function.
7.2.4 Floating Point Objects
7.2.5.1 Complex Numbers as
Python's complex number objects are implemented as two distinct typeswhen viewed from the C API: one is the Python object exposed toPython programs, and the other is a C structure which represents theactual complex number value.
The API provides functions for workingwith both.
Subsections 7.2.5.1 Complex Numbers as C Structures
7.2.5.2 Complex Numbers as Python Objects
7.1 The if statement 7.
Compound statements
Compound statements contain (groups of) other statements; they affector control the execution of those other statements in some way.
Function andclass definitions are also syntactically compound statements.Compound statements consist of one or more `clauses.'
A clauseconsists of a header and a `suite.'
The clause headers of aparticular compound statement are all at the same indentation level.Each clause header begins with a uniquely identifying keyword and endswith a colon.
A suite is a group of statements controlled by aclause. A suite can be one or more semicolon-separated simplestatements on the same line as the header, following the header'scolon, or it can be one or more indented statements on subsequentlines.
Only the latter form of suite can contain nested compoundstatements; the following is illegal, mostly because it wouldn't beclear to which if clause a following else clause wouldbelong:
Also note that the semicolon binds tighter than the colon in thiscontext, so that in the following example, either all or none of theprint statements are executed:
Summarizing:
Note that statements always end in aNEWLINE
possibly followed by aDEDENT.
Also note that optionalcontinuation clauses always begin with a keyword that cannot start astatement, thus there are no ambiguities (the `danglingelse' problem is solved in Python by requiring nestedif statements to be indented).
The formatting of the grammar rules in the following sections placeseach clause on a separate line for clarity. Subsections
Using the Distutils is quite simple, both for module developers and forusers/administrators installing third-party modules.
As a developer,your responsibilities (apart from writing solid, well-documented andwell-tested code, of course!) are:
write a setup script (setup.py by convention)
(optional) write a setup configuration file
create a source distribution
(optional) create one or more built (binary) distributions
Each of these tasks is covered in this document.Not all module developers have access to a multitude of platforms, soit's not always feasible to expect them to create a multitude of builtdistributions.
It is hoped that a class of intermediaries, calledpackagers, will arise to address this need.
Packagers will takesource distributions released by module developers, build them on one ormore platforms, and release the resulting built distributions.
Thus,users on the most popular platforms will be able to install most popularPython module distributions in the most natural way for their platform,without having to run a single setup script or compile a line of code.
7.1 Fundamental Objects 7.
Concrete Objects Layer
The functions in this chapter are specific to certain Python objecttypes.
Passing them an object of the wrong type is not a good idea;if you receive an object from a Python program and you are not surethat it has the right type, you must perform a type check first;for example, to check that an object is a dictionary, usePyDict_Check().
The chapter is structured like the``family tree'' of Python object types.
Warning:While the functions described in this chapter carefully checkthe type of the objects which are passed in, many of them do not checkfor NULL being passed instead of a valid object.
Allowing NULLto be passed in can cause memory access violations and immediatetermination of the interpreter. Subsections
7.2.5.1 Complex Numbers as C Structures
7.3.2.2 Methods and Slot Functions
A condition variable is always associated with some kind of lock;this can be passed in or one will be created by default.
These three must only be called whenthe calling thread has acquired the lock.The wait() method releases the lock, and then blocks until itis awakened by a notify() or notifyAll() call forthe same condition variable in another thread.
Once awakened, itre-acquires the lock and returns.
It is also possible to specify atimeout.The notify() method wakes up one of the threads waiting forthe condition variable, if any are waiting.
For example, the following code is ageneric producer-consumer situation with unlimited buffer capacity:
To choose between notify() and notifyAll(), considerwhether one state change can be interesting for only one or severalwaiting threads.
E.g. in a typical producer-consumer situation,adding one item to the buffer only needs to wake up one consumerthread.
classCondition
If the lock argument is given and not None, it must be aLock or RLock object, and it is used as the underlyinglock.
Otherwise, a new RLock object is created and used asthe underlying lock.
)
Wait until notified or until a timeout occurs.This must only be called when the calling thread has acquired thelock.This method releases the underlying lock, and then blocks until it isawakened by a notify() or notifyAll() call for thesame condition variable in another thread, or until the optionaltimeout occurs.
Instead, aninternal interface of the RLock class is used, which reallyunlocks it even when it has been recursively acquired several times.Another internal interface is then used to restore the recursion levelwhen the lock is reacquired.
)
Wake up a thread waiting on this condition, if any.This must only be called when the calling thread has acquired thelock.This method wakes up one of the threads waiting for the conditionvariable, if any are waiting; it is a no-op if no threads are waiting.The current implementation wakes up exactly one thread, if any arewaiting.
However, it's not safe to rely on this behavior.
A future,optimized implementation may occasionally wake up more than onethread.Note: the awakened thread does not actually return from itswait() call until it can reacquire the lock.
Sincenotify() does not release the lock, its caller should.
Wake up all threads waiting on this condition.
This method acts likenotify(), but wakes up all waiting threads instead of one.
6 Building Extensions: Tips Subsections
As mentioned above, you can use Distutils configuration files to recordpersonal or site preferences for any Distutils options.
That is, anyoption to any command can be stored in one of two or three (depending onyour platform) configuration files, which will be consulted before thecommand-line is parsed.
This means that configuration files willoverride default values, and the command-line will in turn overrideconfiguration files.
Furthermore, if multiple configuration filesapply, values from ``earlier'' files are overridden by ``later'' files.
The names and locations of the configuration files vary slightly acrossplatforms.
On Unix, the three configuration files (in the order theyare processed) are:
Type of file
Location and filename
On Windows, the configuration files are:
And on Mac OS, they are:
Strictly speaking, the system-wide configuration file livesin the directory where the Distutils are installed; under Python 1.6and later on Unix, this is as shown.
For Python 1.5.2, the Distutilswill normally be installed to
prefix/lib/python1.5/site-packages/distutils,so the system configuration file should be put there under Python1.5.2.
On Unix, if the HOME environment variable is notdefined, the user's home directory will be determined with thegetpwuid() function from the standard
module.
I.e., in the current directory (usually the location of thesetup script).
(See also note (1).)
Under Python 1.6 and later, Python'sdefault ``installation prefix'' is C:Python, sothe system configuration file is normallyC:PythonLibdistutilsdistutils.cfg.Under Python 1.5.2, the default prefix wasC:ProgramFilesPython, and theDistutils were not part of the standard library--so the systemconfiguration file would beC:ProgramFilesPythondistutilsdistutils.cfgin a standard Python 1.5.2 installation under Windows.
On Windows, if the HOME environment variable is notdefined, no personal configuration file will be found or used.
(Inother words, the Distutils make no attempt to guess your homedirectory on Windows.)
(See also notes (1) and (4).) The default installationprefix is just Python:, so under Python 1.6 and later this isnormallyPython:Lib:distutils:distutils.cfg.
The Distutils configuration files all have the same syntax.
The configfiles are grouped into sections.
There is one section for each Distutilscommand, plus a global section for global options that affectevery command.
Each section consists of one option per line, specifiedas option=value.For example, the following is a complete config file that just forcesall commands to run quietly by default:
If this is installed as the system config file, it will affect allprocessing of any Python module distribution by any user on the currentsystem.
If it is installed as your personal config file (on systemsthat support them), it will affect only module distributions processedby you.
And if it is used as the setup.cfg for a particularmodule distribution, it affects only that distribution.You could override the default ``build base'' directory and make thebuild* commands always forcibly rebuild all files with thefollowing:
which corresponds to the command-line arguments
python setup.py build --build-base=blib --force
except that including the build command on the command-linemeans that command will be run.
Including a particular command inconfig files has no such implication; it only means that if the commandis run, the options in the config file will apply.
(Or if othercommands that derive values from it are run, they will use the values inthe config file.)You can find out the complete list of options for any command using the--help option, e.g.:
and you can find out the complete list of global options by using--help without a command:
See also the ``Reference'' section of the ``Distributing PythonModules'' manual.
6 Building Extensions: Tips
1.2.5 Configuration
The MacPython distribution comes with EditPythonPrefs, anapplet which will help you to customize the MacPython environment foryour working habits. Subsections
The InteractiveConsole class is a subclass ofInteractiveInterpreter, and so offers all the methods of theinterpreter objects as well as the following additions.
)
The line is appended to a buffer and the interpreter'srunsource() method is called with the concatenated contentsof the buffer as source.
If this indicates that the command wasexecuted or invalid, the buffer is reset; otherwise, the command isincomplete, and the buffer is left as it was after the line wasappended.
The return value is True if more input is required,False if the line was dealt with in some way (this is the same asrunsource()).
Remove any unhandled source text from the input buffer.
Write a prompt and read a line.
The returned line does not includethe trailing newline.
When the user enters the EOF key sequence,EOFError is raised.
The base implementation uses thebuilt-in function raw_input(); a subclass may replace thiswith a different implementation.
Users are expected to subclass ContentHandler to support theirapplication.
The following methods are called by the parser on theappropriate events in the input document:
Called by the parser to give the application a locator for locatingthe origin of document events.
Typically, the application will use this information forreporting its own errors (such as character content that does notmatch an application's business rules).
The information returned bythe locator is probably not sufficient for use with a search engine.Note that the locator will return correct information only duringthe invocation of the events in this interface.
The applicationshould not attempt to use it at any other time.
Receive notification of the beginning of a document.The SAX parser will invoke this method only once, before any othermethods in this interface or in DTDHandler (except forsetDocumentLocator()).
Receive notification of the end of a document.The SAX parser will invoke this method only once, and it will be thelast method invoked during the parse.
The parser shall not invokethis method until it has either abandoned parsing (because of anunrecoverable error) or reached the end of input.
End the scope of a prefix-URI mapping.See startPrefixMapping() for details.
This event willalways occur after the corresponding endElement() event,but the order of endPrefixMapping() events is not otherwiseguaranteed.
Signals the start of an element in non-namespace mode.The name parameter contains the raw XML 1.0 name of theelement type as a string and the attrs parameter holds anobject of the
Attributesinterface containing the attributes of theelement.
The object passed as attrs may be re-used by theparser; holding on to a reference to it is not a reliable way tokeep a copy of the attributes.
To keep a copy of the attributes,use the copy() method of the attrs object.
Signals the end of an element in non-namespace mode.The name parameter contains the name of the element type, justas with the startElement() event.
Signals the start of an element in namespace mode.The name parameter contains the name of the element type as a(uri, localname) tuple, the qname parametercontains the raw XML 1.0 name used in the source document, and theattrs parameter holds an instance of the
AttributesNS interfacecontaining the attributes of the element.
If no namespace isassociated with the element, the uri component of namewill be None.
The object passed as attrs may bere-used by the parser; holding on to a reference to it is not areliable way to keep a copy of the attributes.
To keep a copy ofthe attributes, use the copy() method of the attrsobject.Parsers may set the qname parameter to None, unless thefeature_namespace_prefixes feature is activated.
Receive notification of character data.The Parser will call this method to report each chunk of characterdata.
SAX parsers may return all contiguous character data in asingle chunk, or they may split it into several chunks; however, allof the characters in any single event must come from the sameexternal entity so that the Locator provides useful information.
content may be a Unicode string or a byte string; theexpat reader module produces always Unicode strings.
Note:The earlier SAX 1 interface provided by the PythonXML Special Interest Group used a more Java-like interface for thismethod.
Since most parsers used from Python did not take advantageof the older interface, the simpler signature was chosen to replaceit.
To convert old code to the new interface, use contentinstead of slicing content with the old offset andlength parameters.
Receive notification of a skipped entity.The Parser will invoke this method once for each entityskipped.
Non-validating processors may skip entities if they havenot seen the declarations (because, for example, the entity wasdeclared in an external DTD subset).
All processors may skipexternal entities, depending on the values of thefeature_external_ges and thefeature_external_pes properties.
About this document ... Python/C API Reference Manual
continue may only occur syntactically nested in a for orwhile loop, but not nested in a function or class definition ortry statement within that loop.
It continues with the next cycle of the nearest enclosing loop.
Footnotes ... loop.
It mayoccur within an except or else clause.
Therestriction on occurring in the try clause is implementor'slaziness and will eventually be lifted.
ControlsWindow objects have the following methods besides those ofWindow objects:
Part pcode of control control was hit by theuser.
Tracking and such has already been taken care of.
When a description of an arithmetic operator below uses the phrase``the numeric arguments are converted to a common type,'' thearguments are coerced using the coercion rules listed at the end ofchapter 3.
If both arguments are standard numerictypes, the following coercions are applied:
If either argument is a complex number, the other is convertedto complex;
otherwise, if either argument is a floating point number,the other is converted to floating point;
otherwise, if either argument is a long integer,the other is converted to long integer;
otherwise, both must be plain integers and no conversionis necessary.
Some additional rules apply for certain operators (e.g., a string leftargument to the `%' operator).
Extensions can define their owncoercions.
The following example demonstrates how to use the Cookie module.
Cookie instances have Python attributes roughly correspondingto the standard cookie-attributes specified in the various cookiestandards.
The correspondence is not one-to-one, because there arecomplicated rules for assigning default values, and because themax-age and expires cookie-attributes contain equivalentinformation.Assignment to these attributes should not be necessary other than inrare circumstances in a CookiePolicy method.
The class doesnot enforce internal consistency, so you should know what you'redoing if you do that.
Integer or None.
Netscape cookies have version 0. RFC2965 and RFC 2109 cookies have version 1.
Cookie name (a string).
Cookie value (a string), or None.
String representing a port or a set of ports (eg. '80', or '80,8080'),or None.
Cookie path (a string, eg. '/acme/rocket_launchers').
True if cookie should only be returned over a secure connection.
Integer expiry date in seconds since epoch, or None.
Seealso the is_expired() method.
True if this is a session cookie.
String comment from the server explaining the function of this cookie,or None.
URL linking to a comment from the server explaining the function ofthis cookie, or None.
True if a port or set of ports was explicitly specified by the server(in the Set-Cookie: / Set-Cookie2: header).
True if a domain was explicitly specified by the server.
True if the domain explicitly specified by the server began with adot ('.').
Cookies may have additional non-standard cookie-attributes.
These maybe accessed using the following methods:
Return true if cookie has the named cookie-attribute.
If cookie has the named cookie-attribute, return its value.Otherwise, return default.
set_nonstandard_attr
Set the value of the named cookie-attribute.
The Cookie class also defines the following method:
True if cookie has passed the time at which the server requested itshould expire.
If now is given (in seconds since the epoch),return whether the cookie has expired at the specified time.
Return a decoded value from a string representation.
Return value canbe any type.
This method does nothing in BaseCookie -- it existsso it can be overridden.
Return an encoded value. val can be any type, but return valuemust be a string.
Return an embeddable JavaScript snippet, which, if run on a browser whichsupports JavaScript, will act the same as if the HTTP headers was sent.The meaning for attrs is the same as in output().
If rawdata is a string, parse it as an HTTP_COOKIE and addthe values found there as Morsels.
If it is a dictionary, itis equivalent to:
11.20.2 FileCookieJar subclasses and
Objects implementing the CookiePolicy interface have thefollowing methods:
Return boolean value indicating whether cookie should be accepted from server.
cookie is a cookielib.Cookie instance. request isan object implementing the interface defined by the documentation forCookieJar.extract_cookies().
Return boolean value indicating whether cookie should be returned to server.
cookie is a cookielib.Cookie instance. request isan object implementing the interface defined by the documentation forCookieJar.add_cookie_header().
Return false if cookies should not be returned, given cookie domain.This method is an optimization.
It removes the need for checkingevery cookie with a particular domain (which might involve readingmany files).
Returning true from domain_return_ok() andpath_return_ok() leaves all the work to return_ok().If domain_return_ok() returns true for the cookie domain,path_return_ok() is called for the cookie path.
Otherwise,path_return_ok() and return_ok() are never calledfor that cookie domain.
If path_return_ok() returns true,return_ok() is called with the Cookie object itselffor a full check.
Otherwise, return_ok() is never called forthat cookie path.Note that domain_return_ok() is called for everycookie domain, not just for the request domain.
Forexample, the function might be called with both ".example.com"and "www.example.com" if the request domain is"www.example.com".
The same goes forpath_return_ok().The request argument is as documented for return_ok().
Return false if cookies should not be returned, given cookie path.See the documentation for domain_return_ok().
In addition to implementing the methods above, implementations of theCookiePolicy interface must also supply the followingattributes, indicating which protocols should be used, and how.
Allof these attributes may be assigned to.
Implement Netscape protocol.
Implement RFC 2965 protocol.
Don't add Cookie2: header to requests (the presence ofthis header indicates to the server that we understand RFC 2965cookies).
The most useful way to define a CookiePolicy class is bysubclassing from DefaultCookiePolicy and overriding some orall of the methods above.
CookiePolicy itself may be used asa 'null policy' to allow setting and receiving any and all cookies(this is unlikely to be useful).
The first example shows the most common usage of cookielib:
This example illustrates how to open a URL using your Netscape,Mozilla, or Lynx cookies (assumes Unix/Netscape convention forlocation of the cookies file):
The next example illustrates the use of DefaultCookiePolicy.Turn on RFC 2965 cookies, be more strict about domains when settingand returning Netscape cookies, and block some domains from settingcookies or having them returned:
import urllib2from cookielib import CookieJar, DefaultCookiePolicypolicy = DefaultCookiePolicy(rfc2965=True, strict_ns_domain=Policy.DomainStrict,blocked_domains=["ads.net", ".ads.net"])cj = CookieJar(policy)opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))r = opener.open("http://example.com/")
2. The Very High
The macros in this section are used for managing reference countsof Python objects.
Increment the reference count for object o.
The object mustnot be NULL; if you aren't sure that it isn't NULL, usePy_XINCREF().
The object may beNULL, in which case the macro has no effect.
Decrement the reference count for object o.
The object mustnot be NULL; if you aren't sure that it isn't NULL, usePy_XDECREF().
If the reference count reaches zero, theobject's type's deallocation function (which must not be NULL) isinvoked.
Warning:The deallocation function can cause arbitrary Python codeto be invoked (e.g. when a class instance with a __del__()method is deallocated).
While exceptions in such code are notpropagated, the executed code has free access to all Python globalvariables.
This means that any object that is reachable from aglobal variable should be in a consistent state beforePy_DECREF() is invoked.
For example, code to delete anobject from a list should copy a reference to the deleted object ina temporary variable, update the list data structure, and then callPy_DECREF() for the temporary variable.
Decrement the reference count for object o.
New in version 2.4.
The following functions are for runtime dynamic embedding of Python:Py_IncRef(PyObject *o), Py_DecRef(PyObject *o).They are simply exported function versions of Py_XINCREF() and Py_XDECREF(), respectively.The following functions or macros are only for use within theinterpreter core: _Py_Dealloc(),_Py_ForgetReference(), _Py_NewReference(), aswell as the global variable _Py_RefTotal.
1.12 Providing a C
It is possible to write extension modules in C++.
Some restrictionsapply.
If the main program (the Python interpreter) is compiled andlinked by the C compiler, global or static objects with constructorscannot be used.
This is not a problem if the main program is linkedby the C++ compiler.
Functions that will be called by thePython interpreter (in particular, module initalization functions)have to be declared using extern "C".It is unnecessary to enclose the Python header files inextern "C" {...} -- they use this form already if the symbol"__cplusplus" is defined (all recent C++ compilers define thissymbol).
5.1 Creating dumb built distributions
5.1 Creating dumb built distributions Need to document absolute vs. prefix-relative packages here, butfirst I have to implement it!
The RPM format is used by many popular Linux distributions, includingRed Hat, SuSE, and Mandrake.
or the bdist command with the --format option:
The former allows you to specify RPM-specific options; the latter allows you to easily specify multiple formats in one run.
If you need to doboth, you can explicitly specify multiple bdist_* commandsand their options:
Creating RPM packages is driven by a .spec file, much as usingthe Distutils is driven by the setup script.
To make your life easier,the bdist_rpm command normally creates a .spec filebased on the information you supply in the setup script, on the commandline, and in any Distutils configuration files.
Various options andsections in the .spec file are derived from options in the setupscript as follows:
RPM .spec file option or section
Distutils setup script option
Summary (in preamble)
author and author_email, or maintainer and maintainer_email
%description (section)
Additionally, there many options in .spec files that don't havecorresponding options in the setup script.
Most of these are handledthrough options to the bdist_rpm command as follows:
bdist_rpm option
default value
(see above)
Obviously, supplying even a few of these options on the command-linewould be tedious and error-prone, so it's usually best to put them inthe setup configuration file, setup.cfg--seesection3.
If you distribute or package many Pythonmodule distributions, you might want to put options that apply to all ofthem in your personal Distutils configuration file(~/.pydistutils.cfg).There are three steps to building a binary RPM package, all of which are handled automatically by the Distutils:
create a .spec file, which describes the package (analogous to the Distutils setup script; in fact, much of the information in the setup script winds up in the .spec file)
create the source RPM
create the ``binary'' RPM (which may or may not contain binarycode, depending on whether your module distribution contains Pythonextensions)
Normally, RPM bundles the last two steps together; when you use theDistutils, all three steps are typically bundled together.If you wish, you can separate these three steps.
You can use the--spec-only option to make bdist_rpm justcreate the .spec file and exit; in this case, the .specfile will be written to the ``distribution directory''--normallydist/, but customizable with the --dist-diroption.
(Normally, the .spec file winds up deep in the ``buildtree,'' in a temporary directory created by bdist_rpm.)
1.2.2.2 Set Creator and Double Click
1.2.2.1 Drag and drop
1.2.2 How to run
1.2.3 Simulating command line
Locate it in the scripts folder of the Mac folder of theMacPython distribution.
Put all of the scripts that you want to fix in a folder with nothingelse in it.
Double-click on the fixfiletypes.py icon.
Navigate into the folder of files you want to fix, and press the``Select current folder'' button.
Cryptographic Services
The modules described in this chapter implement various algorithms ofa cryptographic nature.
They are available at the discretion of theinstallation.
Here's an overview:
Keyed-Hashing for Message Authentication (HMAC)implementation for Python.
NIST's secure hash algorithm, SHA.
Hardcore cypherpunks will probably find the cryptographic moduleswritten by A.M. Kuchling of further interest; the package addsbuilt-in modules for DES and IDEA encryption, provides a Python modulefor reading and decrypting PGP files, and then some.
These modulesare not distributed with Python but available separately.
See the URLhttp://www.amk.ca/python/code/crypto.html for more information.
12.20.2 Dialects and Formatting
The csv module defines the following functions:
Return a reader object which will iterate over lines in the givencsvfile. csvfile can be any object which supports theiterator protocol and returns a string each time its nextmethod is called.
If csvfile is a file object, it must be opened withthe 'b' flag on platforms where that makes a difference.
An optionaldialect parameter can be givenwhich is used to define a set of parameters specific to a particular CSVdialect.
It may be an instance of a subclass of the Dialectclass or one of the strings returned by the list_dialectsfunction.
The other optional fmtparam keyword arguments can begiven to override individual formatting parameters in the currentdialect.
For more information about the dialect and formattingparameters, see section12.20.2, ``Dialects and FormattingParameters'' for details of these parameters.All data read are returned as strings.
No automatic data typeconversion is performed.
Return a writer object responsible for converting the user's data intodelimited strings on the given file-like object. csvfile can be anyobject with a write method.
If csvfile is a file object,it must be opened with the 'b' flag on platforms where that makes adifference.
An optionaldialect parameter can be given which is used to define a set ofparameters specific to a particular CSV dialect.
It may be an instanceof a subclass of the Dialect class or one of the stringsreturned by the list_dialects function.
The other optionalfmtparam keyword arguments can be given to override individualformatting parameters in the current dialect.
For more informationabout the dialect and formatting parameters, seesection12.20.2, ``Dialects and Formatting Parameters'' fordetails of these parameters.
To make it as easy as possible tointerface with modules which implement the DB API, the valueNone is written as the empty string.
While this isn't areversible transformation, it makes it easier to dump SQL NULL data valuesto CSV files without preprocessing the data returned from acursor.fetch*() call.
All other non-string data are stringifiedwith str() before being written.
name, dialect)
Associate dialect with name. dialect must be a subclassof csv.Dialect. name must be a string or Unicode object.
Delete the dialect associated with name from the dialect registry.
AnError is raised if name is not a registered dialectname.
Return the dialect associated with name.
An Error israised if name is not a registered dialect name.
Return the names of all registered dialects.
The csv module defines the following classes:
classDictReader
Create an object which operates like a regular reader but maps theinformation read into a dict whose keys are given by the optionalfieldnamesparameter.
If the fieldnames parameter is omitted, the values inthe first row of the csvfile will be used as the fieldnames.If the row read has fewer fields than the fieldnames sequence,the value of restval will be used as the default value.
If the rowread has more fields than the fieldnames sequence, the remaining data isadded as a sequence keyed by the value of restkey.
If the row readhas fewer fields than the fieldnames sequence, the remaining keys take thevalue of the optional restval parameter.
Any other optional orkeyword arguments are passed to the underlying reader instance.
classDictWriter
Create an object which operates like a regular writer but maps dictionariesonto output rows.
The fieldnames parameter identifies the order inwhich values in the dictionary passed to the writerow() method arewritten to the csvfile.
The optional restval parameterspecifies the value to be written if the dictionary is missing a key infieldnames.
If the dictionary passed to the writerow()method contains a key not found in fieldnames, the optionalextrasaction parameter indicates what action to take.
If it is setto 'raise' a ValueError is raised.
If it is set to'ignore', extra values in the dictionary are ignored.
Since Python'sdict objects are not ordered, there is not enough informationavailable to deduce the order in which the row should be written to thecsvfile.
The Dialect class is a container class relied on primarily for itsattributes, which are used to define the parameters for a specificreader or writer instance.
The Sniffer class is used to deduce the format of a CSV file.
The Sniffer class provides a single method:
Analyze the given sample and return a Dialect subclassreflecting the parameters found.
If the optional delimiters parameteris given, it is interpreted as a string containing possible valid delimitercharacters.
Analyze the sample text (presumed to be in CSV format) and returnTrue if the first row appears to be a series of columnheaders.
The csv module defines the following constants:
Instructs writer objects to quote all fields.
Instructs writer objects to only quote those fields which containthe current delimiter or begin with the current quotechar.
Instructs writer objects to quote all non-numeric fields.
Instructs writer objects to never quote fields.
When the currentdelimiter occurs in output data it is preceded by the currentescapechar character.
When QUOTE_NONE is in effect, itis an error not to have a single-character escapechar defined, even ifno data to be written contains the delimiter character.
The csv module defines the following exception:
Raised by any of the functions when an error is detected.
To make it easier to specify the format of input and output records,specific formatting parameters are grouped together into dialects.
Adialect is a subclass of the Dialect class having a set of specificmethods and a single validate() method.
When creating readeror writer objects, the programmer can specify a string or a subclassof the Dialect class as the dialect parameter.
In addition to, orinstead of, the dialect parameter, the programmer can also specifyindividual formatting parameters, which have the same names as theattributes defined below for the Dialect class.Dialects support the following attributes:
A one-character string used to separate fields.
It defaults to ','.
Controls how instances of quotechar appearing inside a field should bethemselves be quoted.
When True, the character is doubled.When False, the escapechar must be a one-character stringwhich is used as a prefix to the quotechar.
It defaults toTrue.
A one-character string used to escape the delimiter if quotingis set to QUOTE_NONE.
It defaults to None.
The string used to terminate lines in the CSV file.
It defaults to'rn'.
A one-character string used to quote elements containing the delimiteror which start with the quotechar.
It defaults to '"'.
Controls when quotes should be generated by the writer.
It can take on anyof the QUOTE_* constants (see section12.20.1)and defaults to QUOTE_MINIMAL.
When True, whitespace immediately following the delimiteris ignored.
The default is False.
The module curses defines the following exception:
Exception raised when a curses library function returns an error.
Note:Whenever x or y arguments to a functionor a method are optional, they default to the current cursor location.Whenever attr is optional, it defaults to A_NORMAL.
The module curses defines the following functions:
Returns the output speed of the terminal in bits per second.
Onsoftware terminal emulators it will have a fixed high value.Included for historical reasons; in former times, it was used to write output loops for time delays and occasionally to changeinterfaces depending on the line speed.
Emit a short attention sound.
Returns true or false, depending on whether the programmer can changethe colors displayed by the terminal.
Enter cbreak mode.
In cbreak mode (sometimes called ``rare'' mode)normal tty line buffering is turned off and characters are availableto be read one by one.
However, unlike raw mode, special characters(interrupt, quit, suspend, and flow control) retain their effects onthe tty driver and calling program.
Calling first raw()then cbreak() leaves the terminal in cbreak mode.
Returns the intensity of the red, green, and blue (RGB) components inthe color color_number, which must be between 0 andCOLORS.
A 3-tuple is returned, containing the R,G,B valuesfor the given color, which will be between 0 (no component) and1000 (maximum amount of component).
color_pair
Returns the attribute value for displaying text in the specifiedcolor.
This attribute value can be combined withA_STANDOUT, A_REVERSE, and the otherA_* attributes. pair_number() is thecounterpart to this function.
Sets the cursor state. visibility can be set to 0, 1, or 2, forinvisible, normal, or very visible.
If the terminal supports thevisibility requested, the previous cursor state is returned;otherwise, an exception is raised.
On many terminals, the ``visible''mode is an underline cursor and the ``very visible'' mode is a block cursor.
Saves the current terminal mode as the ``program'' mode, the mode whenthe running program is using curses.
(Its counterpart is the``shell'' mode, for when the program is not in curses.)
Subsequent callsto reset_prog_mode() will restore this mode.
Saves the current terminal mode as the ``shell'' mode, the mode whenthe running program is not using curses.
(Its counterpart is the``program'' mode, when the program is using curses capabilities.)Subsequent callsto reset_shell_mode() will restore this mode.
delay_output
Inserts an ms millisecond pause in output.
Update the physical screen.
The curses library keeps two datastructures, one representing the current physical screen contentsand a virtual screen representing the desired next state.
Thedoupdate() ground updates the physical screen to match thevirtual screen.The virtual screen may be updated by a noutrefresh() callafter write operations such as addstr() have been performedon a window.
The normal refresh() call is simplynoutrefresh() followed by doupdate(); if you haveto update multiple windows, you can speed performance and perhapsreduce screen flicker by issuing noutrefresh() calls onall windows, followed by a single doupdate().
Enter echo mode.
In echo mode, each character input is echoed to thescreen as it is entered.
De-initialize the library, and return terminal to normal status.
Returns the user's current erase character.
Under Unix operatingsystems this is a property of the controlling tty of the cursesprogram, and is not set by the curses library itself.
The filter() routine, if used, must be called beforeinitscr() is called.
The effect is that, during thosecalls, LINES is set to 1; the capabilities clear, cup, cud, cud1,cuu1, cuu, vpa are disabled; and the home string is set to the value of cr.The effect is that the cursor is confined to the current line, and soare screen updates.
This may be used for enabling cgaracter-at-a-time line editing without touching the rest of the screen.
Flash the screen.
That is, change it to reverse-video and then changeit back in a short interval.
Some people prefer such as `visible bell'to the audible attention signal produced by beep().
Flush all input buffers.
This throws away any typeahead that hasbeen typed by the user and has not yet been processed by the program.
)
Returns the current coordinates of the virtual screen cursor in y andx.
If leaveok is currently true, then -1,-1 is returned.
Reads window related data stored in the file by an earlierputwin() call.
The routine then creates and initializes anew window using that data, returning the new window object.
Returns true if the terminal can display colors; otherwise, itreturns false.
Returns true if the terminal has insert- and delete- charactercapabilities.
This function is included for historical reasons only,as all modern software terminal emulators have such capabilities.
Returns true if the terminal has insert- anddelete-line capabilities, or can simulate them usingscrolling regions.
Takes a key value ch, and returns true if the current terminaltype recognizes a key with that value.
Used for half-delay mode, which is similar to cbreak mode in thatcharacters typed by the user are immediately available to the program.However, after blocking for tenths tenths of seconds, anexception is raised if nothing has been typed.
The value oftenths must be a number between 1 and 255.
Usenocbreak() to leave half-delay mode.
Changes the definition of a color, taking the number of the color tobe changed followed by three RGB values (for the amounts of red,green, and blue components).
The value of color_number must bebetween 0 and COLORS.
Each of r, g,b, must be a value between 0 and 1000.
Wheninit_color() is used, all occurrences of that color on thescreen immediately change to the new definition.
This function is ano-op on most terminals; it is active only ifcan_change_color() returns 1.
Changes the definition of a color-pair.
It takes three arguments: thenumber of the color-pair to be changed, the foreground color number,and the background color number.
The value of pair_number mustbe between 1 and COLOR_PAIRS - 1 (the 0 colorpair is wired to white on black and cannot be changed).
The value offg and bg arguments must be between 0 andCOLORS.
If the color-pair was previously initialized, thescreen is refreshed and all occurrences of that color-pair are changedto the new definition.
Initialize the library.
Returns a WindowObject which representsthe whole screen.
Note:If there is an error opening the terminal,the underlying curses library may cause the interpreter to exit.
Returns true if endwin() has been called (that is, the curses library has been deinitialized).
Return the name of the key numbered k.
The name of a keygenerating printable ASCII character is the key's character.
The nameof a control-key combination is a two-character string consisting of acaret followed by the corresponding printable ASCII character.
Thename of an alt-key combination (128-255) is a string consisting of theprefix `M-' followed by the name of the corresponding ASCII character.
Returns the user's current line kill character.
Returns a string containing the terminfo long name field describing the currentterminal.
The maximum length of a verbose description is 128characters.
It is defined only after the call toinitscr().
If yes is 1, allow 8-bit characters to be input.
If yes is 0, allow only 7-bit chars.
Sets the maximum time in milliseconds that can elapse between press andrelease events in order for them to be recognized as a click, andreturns the previous interval value.
The default value is 200 msec,or one fifth of a second.
If this function is never called, no mouse events areever reported.
Sleep for ms milliseconds.
Creates and returns a pointer to a new pad data structure with thegiven number of lines and columns.
A pad is returned as awindow object.A pad is like a window, except that it is not restricted by the screensize, and is not necessarily associated with a particular part of thescreen.
Pads can be used when a large window is needed, and only apart of the window will be on the screen at one time.
Automaticrefreshes of pads (such as from scrolling or echoing of input) do notoccur.
The refresh() and noutrefresh() methods of apad require 6 arguments to specify the part of the pad to bedisplayed and the location on the screen to be used for the display.The arguments are pminrow, pmincol, sminrow, smincol, smaxrow,smaxcol; the p arguments refer to the upper left corner of the padregion to be displayed and the s arguments define a clipping box onthe screen within which the pad region is to be displayed.
Return a new window, whose left-upper corner is at (begin_y, begin_x), and whose height/width is nlines/ncols.
By default, the window will extend from the specified position to the lower right corner of the screen.
Enter newline mode.
This mode translates the return key into newlineon input, and translates newline into return and line-feed on output.Newline mode is initially on.
Leave cbreak mode.
Return to normal ``cooked'' mode with line buffering.
Leave echo mode.
Echoing of input characters is turned off.
Leave newline mode.
Disable translation of return into newline oninput, and disable low-level translation of newline intonewline/return on output (but this does not change the behavior ofaddch('n'), which always does the equivalent of return andline feed on the virtual screen).
With translation off, curses cansometimes speed up vertical motion a little; also, it will be able todetect the return key on input.
When the noqiflush routine is used, normal flush of input andoutput queues associated with the INTR, QUIT and SUSPcharacters will not be done.
You may want to callnoqiflush() in a signal handler if you want outputto continue as though the interrupt had not occurred, after thehandler exits.
Leave raw mode.
Returns a tuple (fg, bg) containing the colors forthe requested color pair.
The value of pair_number must bebetween 0 and
COLOR_PAIRS - 1.
Returns the number of the color-pair set by the attribute valueattr. color_pair() is the counterpart to thisfunction.
Equivalent to tputs(str, 1, putchar); emits the value of aspecified terminfo capability for the current terminal.
Note that theoutput of putp always goes to standard output.
If flag is false, the effect is the same as callingnoqiflush().
If flag is true, or no argument isprovided, the queues will be flushed when these control characters areread.
Enter raw mode.
In raw mode, normal line buffering and processing of interrupt, quit, suspend, and flow control keys areturned off; characters are presented to curses input functions oneby one.
Restores the terminal to ``program'' mode, as previously saved by def_prog_mode().
Restores the terminal to ``shell'' mode, as previously saved by def_shell_mode().
Sets the virtual screen cursor to y, x.If y and x are both -1, then leaveok is set.
)
Initializes the terminal. termstr is a string giving theterminal name; if omitted, the value of the TERM environment variablewill be used. fd is the file descriptor to which anyinitialization sequences will be sent; if not supplied, the filedescriptor for sys.stdout will be used.
start_color
Must be called if the programmer wants to use colors, and before anyother color manipulation routine is called.
It is goodpractice to call this routine right after initscr().
start_color() initializes eight basic colors (black, red, green, yellow, blue, magenta, cyan, and white), and two globalvariables in the curses module, COLORS andCOLOR_PAIRS, containing the maximum number of colors andcolor-pairs the terminal can support.
It also restores the colors onthe terminal to the values they had when the terminal was just turnedon.
Returns a logical OR of all video attributes supported by theterminal.
This information is useful when a curses program needscomplete control over the appearance of the screen.
Returns the value of the environment variable TERM, truncated to 14characters.
Returns the value of the Boolean capability corresponding to theterminfo capability name capname.
The value -1 isreturned if capname is not a Boolean capability, or 0 ifit is canceled or absent from the terminal description.
Returns the value of the numeric capability corresponding to theterminfo capability name capname.
The value -2 isreturned if capname is not a numeric capability, or -1 ifit is canceled or absent from the terminal description.
Returns the value of the string capability corresponding to theterminfo capability name capname.
None is returned ifcapname is not a string capability, or is canceled or absentfrom the terminal description.
)
Instantiates the string str with the supplied parameters, where str should be a parameterized string obtained from the terminfo database.
E.g. tparm(tigetstr("cup"), 5, 3) could result in '033[6;4H', the exact result depending on terminal type.
Specifies that the file descriptor fd be used for typeaheadchecking.
If fd is -1, then no typeahead checking isdone.The curses library does ``line-breakout optimization'' by looking fortypeahead periodically while updating the screen.
If input is found,and it is coming from a tty, the current update is postponed untilrefresh or doupdate is called again, allowing faster response tocommands typed in advance.
This function allows specifying a differentfile descriptor for typeahead checking.
Returns a string which is a printable representation of the characterch.
Control characters are displayed as a caret followed by thecharacter, for example as ^C.
Printingcharacters are left as they are.
Push ch so the next getch() will return it.
Note:Only one ch can be pushed before getch()is called.
Push a KEY_MOUSE event onto the input queue, associatingthe given state data with it.
If used, this function should be called before initscr() ornewterm are called.
When flag is false, the values oflines and columns specified in the terminfo database will beused, even if environment variables LINES andCOLUMNS (used by default) are set, or if curses is running ina window (in which case default behavior would be to use the windowsize if LINES and COLUMNS are not set).
Allow use of default values for colors on terminals supporting thisfeature.
Use this to support transparency in yourapplication.
The default color is assigned to the color number -1.After calling this function, init_pair(x, curses.COLOR_RED, -1) initializes, for instance,color pair x to a red foreground color on the default background.
Panel objects, as returned by new_panel() above, are windowswith a stacking order.
There's always a window associated with apanel which determines the content, while the panel methods areresponsible for the window's depth in the panel stack.Panel objects have the following methods:
Returns the panel above the current panel.
Returns the panel below the current panel.
Push the panel to the bottom of the stack.
Returns true if the panel is hidden (not visible), false otherwise.
Hide the panel.
This does not delete the object, it just makes thewindow on screen invisible.
Move the panel to the screen coordinates (y, x).
Change the window associated with the panel to the window win.
Set the panel's user pointer to obj.
This is used to associate anarbitrary piece of data with the panel, and can be any Python object.
Display the panel (which might have been hidden).
Push panel to the top of the stack.
Returns the user pointer for the panel.
This might be any Python object.
Returns the window object associated with the panel.
6.16.1 Textbox objects
You can instantiate a Textbox object as follows:
classTextbox
Return a textbox widget object.
Textbox objects have the following methods:
This is the entry point you will normally use.
It accepts editingkeystrokes until one of the termination keystrokes is entered.
Ifvalidator is supplied, it must be a function.
It will be calledfor each keystroke entered with the keystroke as a parameter; commanddispatch is done on the result.
This method returns the windowcontents as a string; whether blanks in the window are included isaffected by the stripspaces member.
Process a single command keystroke.
Here are the supported specialkeystrokes:
Keystroke
Action
Go to left edge of window.
Cursor left, wrapping to previous line if appropriate.
Delete character under cursor.
Go to right edge (stripspaces off) or end of line(stripspaces on).
Cursor right, wrapping to next line when appropriate.
Terminate, returning the window contents.
Delete character backward.
Control-J
Terminate if the window is 1 line, otherwiseinsert newline.
If line is blank, delete it, otherwise clear toend of line.
Refresh screen.
Cursor down; move down one line.
Insert a blank line at cursor location.
Cursor up; move up one line.
Move operations do nothing if the cursor is at an edge where themovement is not possible.
The following synonyms are supported wherepossible:
Constant
All other keystrokes are treated as a command to insert the givencharacter and move right (with line wrapping).
This method returns the window contents as a string; whether blanks inthe window are included is affected by the stripspacesmember.
This data member is a flag which controls the interpretation of blanks inthe window.
When it is on, trailing blanks on each line are ignored;any cursor motion that would land the cursor on a trailing blank goesto the end of that line instead, and trailing blanks are stripped whenthe window contents are gathered.
6.15.3 Constants
Window objects, as returned by initscr() andnewwin() above, have thefollowing methods:
Paint character ch at (y, x) with attributesattr, overwriting any character previously painter at thatlocation.
By default, the character position and attributes are thecurrent settings for the window object.
Paint at most n characters of the string str at (y, x) with attributesattr, overwriting anything previously on the display.
Paint the string str at (y, x) with attributesattr, overwriting anything previously on the display.
Remove attribute attr from the ``background'' set applied to allwrites to the current window.
Add attribute attr from the ``background'' set applied to allwrites to the current window.
Set the ``background'' set of attributes to attr.
This set isinitially 0 (no attributes).
Sets the background property of the window to the character ch,with attributes attr.
The change is then applied to everycharacter position in that window:
The attribute of every character in the window ischanged to the new background attribute.
Wherever the former background character appears,it is changed to the new background character.
Sets the window's background.
A window's background consists of acharacter and any combination of attributes.
The attribute part ofthe background is combined (OR'ed) with all non-blank characters thatare written into the window.
Both the character and attribute partsof the background are combined with the blank characters.
Thebackground becomes a property of the character and moves with thecharacter through any scrolling and insert/delete line/characteroperations.
Draw a border around the edges of the window.
Each parameter specifies the character to use for a specific part of the border; see the tablebelow for more details.
The characters can be specified as integersor as one-character strings.
Note:A 0 value for any parameter will cause thedefault character to be used for that parameter.
Keyword parameterscan not be used.
The defaults are listed in this table:
Parameter
Description
Default value
Left side
Right side
Top
Bottom
Upper-left corner
Upper-right corner
Bottom-left corner
Bottom-right corner
Similar to border(), but both ls and rs arevertch and both ts and bs are horch.
The defaultcorner characters are always used by this function.
Like erase(), but also causes the whole window to be repaintedupon next call to refresh().
If yes is 1, the next call to refresh()will clear the window completely.
Erase from cursor to the end of the window: all lines below the cursorare deleted, and then the equivalent of clrtoeol() is performed.
Erase from cursor to the end of the line.
Updates the current cursor position of all the ancestors of the windowto reflect the current cursor position of the window.
)
Delete the line under the cursor.
All following lines are moved upby 1 line.
begin_y, begin_x)
An abbreviation for ``derive window'', derwin() is the sameas calling subwin(), except that begin_y andbegin_x are relative to the origin of the window, rather thanrelative to the entire screen.
Returns a window object for thederived window.
Add character ch with attribute attr, and immediately call refresh() on the window.
Tests whether the given pair of screen-relative character-cellcoordinates are enclosed by the given window, returning true orfalse.
It is useful for determining what subset of the screenwindows enclose the location of a mouse event.
Clear the window.
Return a tuple (y, x) of co-ordinates of upper-leftcorner.
Get a character.
Note that the integer returned does not have tobe in ASCII range: function keys, keypad keys and so on return numbershigher than 256.
In no-delay mode, -1 is returned if there is no input.
Get a character, returning a string instead of an integer, asgetch() does.
Function keys, keypad keys and so on return amultibyte string containing the key name.
In no-delay mode, anexception is raised if there is no input.
Return a tuple (y, x) of the height and width ofthe window.
Returns the beginning coordinates of this window relative to itsparent window into two integer variables y and x.
Returns-1,-1 if this window has no parent.
Read a string from the user, with primitive line editing capacity.
Return a tuple (y, x) of current cursor position relative to the window's upper-left corner.
Display a horizontal line starting at (y, x) withlength n consisting of the character ch.
If flag is false, curses no longer considers using the hardwareinsert/delete character feature of the terminal; if flag istrue, use of character insertion and deletion is enabled.
When cursesis first initialized, use of character insert/delete is enabled bydefault.
If called with yes equal to 1, curses will try and usehardware line editing facilities.
Otherwise, line insertion/deletionare disabled.
If flag is true, any change in the window imageautomatically causes the window to be refreshed; you no longerhave to call refresh() yourself.
However, it maydegrade performance considerably, due to repeated calls towrefresh.
This option is disabled by default.
Return the character at the given position in the window.
The bottom8 bits are the character proper, and upper bits are the attributes.
Paint character ch at (y, x) with attributesattr, moving the line from position x right by onecharacter.
Inserts nlines lines into the specified window above the currentline.
The nlines bottom lines are lost.
For negativenlines, delete nlines lines starting with the one underthe cursor, and move the remaining lines up.
The bottom nlineslines are cleared.
The current cursor position remains the same.
Insert a blank line under the cursor.
All following lines are moveddown by 1 line.
Insert a character string (as many characters as will fit on the line)before the character under the cursor, up to n characters.
If n is zero or negative,the entire string is inserted.All characters to the right ofthe cursor are shifted right, with the rightmost characters on theline being lost.
The cursor position does not change (after moving toy, x, if specified).
Insert a character string (as many characters as will fit on the line)before the character under the cursor.
All characters to the right ofthe cursor are shifted right, with the rightmost characters on theline being lost.
Returns a string of characters, extracted from the window starting atthe current cursor position, or at y, x if specified.Attributes are stripped from the characters.
If n is specified,instr() returns return a string at most n characterslong (exclusive of the trailing NUL).
is_linetouched
Returns true if the specified line was modified since the last call torefresh(); otherwise returns false.
Raises acurses.error exception if line is not validfor the given window.
Returns true if the specified window was modified since the last call torefresh(); otherwise returns false.
If yes is 1, escape sequences generated by some keys (keypad, function keys) will be interpreted by curses.If yes is 0, escape sequences will be left as is in the inputstream.
If possible the cursor will be made invisible.If yes is 0, cursor will always be at ``cursor position'' afteran update.
Move cursor to (new_y, new_x).
Moves the window inside its parent window.
The screen-relativeparameters of the window are not changed.
This routine is used todisplay different parts of the parent window at the same physicalposition on the screen.
Move the window so its upper-left corner is at(new_y, new_x).
If yes is 1, getch() will be non-blocking.
If yes is 1, escape sequences will not be timed out.If yes is 0, after a few milliseconds, an escape sequencewill not be interpreted, and will be left in the input stream as is.
Mark for refresh but wait.
This function updates the data structurerepresenting the desired state of the window, but does not forcean update of the physical screen.
To accomplish that, call doupdate().
Overlay the window on top of destwin.
The windows need not bethe same size, only the overlapping region is copied.
Overwrite the window on top of destwin.
The windows need not bethe same size, in which case only the overlapping region iscopied.
Writes all data associated with the window into the provided fileobject.
This information can be later retrieved using thegetwin() function.
Indicates that the num screen lines, starting at line beg,are corrupted and should be completely redrawn on the nextrefresh() call.
Touches the entire window, causing it to be completely redrawn on thenext refresh() call.
Update the display immediately (sync actual screen with previousdrawing/deleting methods).The 6 optional arguments can only be specified when the window is apad created with newpad().
The additional parameters areneeded to indicate what part of the pad and screen are involved.
pminrow and pmincol specify the upper left-hand corner of therectangle to be displayed in the pad. sminrow, smincol,smaxrow, and smaxcol specify the edges of the rectangle tobe displayed on the screen.
The lower right-hand corner of therectangle to be displayed in the pad is calculated from the screencoordinates, since the rectangles must be the same size.
Bothrectangles must be entirely contained within their respectivestructures.
Negative values of pminrow, pmincol,sminrow, or smincol are treated as if they were zero.
Scroll the screen or scrolling region upward by lines lines.
Controls what happens when the cursor of a window is moved off theedge of the window or scrolling region, either as a result of anewline action on the bottom line, or typing the last characterof the last line.
If flag is false, the cursor is lefton the bottom line.
If flag is true, the window isscrolled up one line.
Note that in order to get the physicalscrolling effect on the terminal, it is also necessary to callidlok().
Set the scrolling region from line top to line bottom.
Allscrolling actions will take place in this region.
Turn off the standout attribute.
On some terminals this has theside effect of turning off all attributes.
Turn on attribute A_STANDOUT.
Return a sub-window, whose upper-left corner is at(begin_y, begin_x), and whose width/height isncols/nlines.
begin_y, begin_x)
Return a sub-window, whose upper-left corner is at(begin_y, begin_x), and whose width/height isncols/nlines.By default, the sub-window will extend from thespecified position to the lower right corner of the window.
Touches each location in the window that has been touched in any ofits ancestor windows.
This routine is called by refresh(),so it should almost never be necessary to call it manually.
If called with flag set to true, then syncup() iscalled automatically whenever there is a change in the window.
Touches all locations in ancestors of the window that have been changed in the window.
Sets blocking or non-blocking read behavior for the window.
Ifdelay is negative, blocking read is used (which will waitindefinitely for input).
If delay is zero, then non-blockingread is used, and -1 will be returned by getch() if no inputis waiting.
If delay is positive, then getch() willblock for delay milliseconds, and return -1 if there is still noinput at the end of that time.
Pretend count lines have been changed, starting with linestart.
Pretend the whole window has been changed, for purposes of drawingoptimizations.
Marks all lines in the window as unchanged since the last call torefresh().
Display a vertical line starting at (y, x) withlength n consisting of the character ch.
The module curses. panel defines the following functions:
Returns the bottom panel in the panel stack.
Returns a panel object, associating it with the given window win.
Returns the top panel in the panel stack.
Updates the virtual screen after changes in the panel stack.
This doesnot call curses. doupdate(), so you'll have to do this yourself.
Called when the instance is created.
Thearguments are those passed to the class constructor expression.
If abase class has an __init__() method, the derived class's__init__() method, if any, must explicitly call it to ensure properinitialization of the base class part of the instance; for example:"BaseClass.__init__(self, [args...])".
As a specialconstraint on constructors, no value may be returned; doing so willcause a TypeError to be raised at runtime.
Called when the instance is about to be destroyed.
This is alsocalled a destructor
.
If a base classhas a __del__() method, the derived class's __del__()method, if any,must explicitly call it to ensure proper deletion of the base classpart of the instance.
Note that it is possible (though not recommended!)for the __del__()method to postpone destruction of the instance by creating a newreference to it.
It may then be called at a later time when this newreference is deleted.
It is not guaranteed that__del__() methods are called for objects that still exist whenthe interpreter exits.
Note:"del x" doesn't directly callx.__del__() -- the former decrements the reference count forx by one, and the latter is only called when x's referencecount reaches zero.
Circularreferences which are garbage are detected when the option cycledetector is enabled (it's on by default), but can only be cleaned upif there are no Python-level __del__() methods involved.Refer to the documentation for the
gcmodule for more information about how__del__() methods are handled by the cycle detector,particularly the description of the garbage value.
Also, when __del__() is invoked in response to a modulebeing deleted (e.g., when execution of the program is done), otherglobals referenced by the __del__() method may already have beendeleted.
For this reason, __del__() methods should do theabsolute minimum needed to maintain external invariants.
Starting withversion 1.5, Python guarantees that globals whose name begins with a singleunderscore are deleted from their module before other globals are deleted;if no other references to such globals exist, this may help in assuring thatimported modules are still available at the time when the__del__() method is called.
Called by the repr()
built-in functionand by string conversions (reverse quotes) to compute the ``official''string representation of an object.
If at all possible, this shouldlook like a valid Python expression that could be used to recreate anobject with the same value (given an appropriate environment).
Ifthis is not possible, a string of the form "...some usefuldescription..." should be returned.
The return value must be astring object.If a class defines __repr__() but not __str__(),then __repr__() is also used when an ``informal'' stringrepresentation of instances of that class is required.
This is typically used for debugging, so it is important that therepresentation is information-rich and unambiguous.
Called by the str()
built-in function andby the print
statement to compute the``informal'' string representation of an object.
This differs from__repr__() in that it does not have to be a valid Pythonexpression: a more convenient or concise representation may be usedinstead.
The return value must be a string object.
calls
x=y
calls
x==y
calls
calls
calls
x==y
does not imply that
is false.
A richcomparison method may return NotImplemented if it does notimplement the operation for a given pair of arguments.
Called by comparison operations if rich comparison (see above) is notdefined.
Should return a negative integer if self other,zero if self == other, a positive integer if self other.
If no __cmp__(), __eq__() or__ne__() operation is defined, class instances are comparedby object identity (``address'').
See also the description of__hash__() for some important notes on creating objects whichsupport custom comparison operations and are usable as dictionarykeys.(Note: the restriction that exceptions are not propagated by__cmp__() has been removed since Python 1.5.)
Changed in version 2.1:No longer supported.
. Should return a 32-bit integerusable as a hash valuefor dictionary operations.
The only required property is that objectswhich compare equal have the same hash value; it is advised to somehowmix together (e.g., using exclusive or) the hash values for thecomponents of the object that also play a part in comparison ofobjects.
If a class does not define a __cmp__() method it shouldnot define a __hash__() operation either; if it defines__cmp__() or __eq__() but not __hash__(),its instances will not be usable as dictionary keys.
If a classdefines mutable objects and implements a __cmp__() or__eq__() method, it should not implement __hash__(),since the dictionary implementation requires that a key's hash valueis immutable (if the object's hash value changes, it will be in thewrong hash bucket).
Called to implement truth value testing, and the built-in operationbool(); should return False or True, or theirinteger equivalents 0 or 1.When this method is not defined, __len__() iscalled, if it is defined (see below).
If a class defines neither__len__() nor __nonzero__(), all its instances areconsidered true.
Called to implement unicode()
builtin;should return a Unicode object.
When this method is not defined, stringconversion is attempted, and the result of string conversion is convertedto Unicode using the system default encoding.
7.3 Working on Cygwin
Installing the required tools under Cygwin under Cygwin can be alittle tedious, if only because many packages are more difficultto install under Cygwin.Using the Cygwin installer, make sure your Cygwin installationincludes Perl, Python, and the TeX packages.
Perl and Pythonare located under Interpreters in the installer.The TeX packages are located in the Textsection; installing the tetex-beta, texmf,texmf-base, and texmf-extra ensures that all therequired packages are available.
Install accordingto the instructions.
LaTeX2HTML can be installed from the source archive, but onlyafter munging one of the files in the distribution.
Edit the fileL2hos.pm in the top level of the unpacked distribution;near the bottom of the file, change the text$^O with the text 'unix'.
Proceedusing this command to build and install the software:
You should now be able to build at least the DVI, HTML, PDF, andPostScript versions of the formatted documentation.
Subsections 3.1 Objects, values and types
3.3.2.1 More attribute access for new-style classes
A date object represents a date (year, month and day) in an idealizedcalendar, the current Gregorian calendar indefinitely extended in bothdirections.
January 1 of year 1 is called day number 1, January 2 of year1 is called day number 2, and so on.
This matches the definition of the"proleptic Gregorian" calendar in Dershowitz and Reingold's bookCalendrical Calculations, where it's the base calendar for allcomputations.
See the book for algorithms for converting betweenproleptic Gregorian ordinals and many other calendar systems. classdate
All arguments are required.
Arguments may be ints or longs, in thefollowing ranges:
1 = day = number of days in the given month and year
If an argument outside those ranges is given, ValueErroris raised.
Other constructors, all class methods:
Return the current local date.
This is equivalent todate.fromtimestamp(time.time()).
Return the local date corresponding to the POSIX timestamp, suchas is returned by time.
time(). This may raiseValueError, if the timestamp is out of the range ofvalues supported by the platform C localtime()function.
It's common for this to be restricted to years from 1970through 2038.
Note that on non-POSIX systems that include leapseconds in their notion of a timestamp, leap seconds are ignored byfromtimestamp().
Return the date corresponding to the proleptic Gregorian ordinal,where January 1 of year 1 has ordinal 1.
ValueError israised unless 1 = ordinal = date.max.toordinal().For any date d, date.fromordinal(d.toordinal()) ==d
.
Class attributes:
The earliest representable date, date(MINYEAR, 1, 1).
The latest representable date, date(MAXYEAR, 12, 31).
The smallest possible difference between non-equal dateobjects, timedelta(days=1).
Instance attributes (read-only):
Between MINYEAR and MAXYEAR inclusive.
Between 1 and 12 inclusive.
Between 1 and the number of days in the given month of the givenyear.
Supported operations:
date2 is
timedelta.days days removed fromdate1. (1)
date1 is considered less than date2 when date1precedes date2 in time.
date2 is moved forward in time if
timedelta.days 0, or backward if timedelta.days 0.
Afterward
date2 - date1 == timedelta.days.
timedelta.seconds and
timedelta.microseconds are ignored.OverflowError is raised if
date2.yearwould be smaller than MINYEAR or larger thanMAXYEAR.
This isn't quite equivalent to date1 +(-timedelta), because -timedelta in isolation can overflow in caseswhere date1 - timedelta does not.
timedelta.secondsand
timedelta.microseconds are ignored.
This is exact, and cannot overflow. timedelta.seconds andtimedelta.microseconds are 0, and date2 + timedelta == date1after.
In other words, date1 date2if and only if
date1.toordinal() date2.toordinal().In order to stop comparison from falling back to the defaultscheme of comparing object addresses, date comparisonnormally raises TypeError if the other comparandisn't also a date object.
However, NotImplementedis returned instead if the other comparand has atimetuple attribute.
This hook gives other kinds ofdate objects a chance at implementing mixed-type comparison.If not, when a date object iscompared to an object of a different type, TypeError israised unless the comparison is == or !=.
The lattercases return False or True, respectively.
Dates can be used as dictionary keys.
In Boolean contexts, alldate objects are considered to be true.Instance methods:
Return a date with the same value, except for those members givennew values by whichever keyword arguments are specified.
Forexample, if d == date(2002, 12, 31), thend.replace(day=26) == date(2002, 12, 26).
The hours, minutes and seconds are0, and the DST flag is -1.
d.timetuple() is equivalent totime. struct_time((d.year, d.month, d.day,0, 0, 0,d.weekday(),d.toordinal() - date(d.year, 1, 1).toordinal() + 1,-1))
Return the proleptic Gregorian ordinal of the date, where January 1of year 1 has ordinal 1.
For any date object d,date.fromordinal(d.toordinal()) == d
.
Return the day of the week as an integer, where Monday is 0 andSunday is 6.
For example, date(2002, 12, 4).weekday()
== 2, aWednesday.See also isoweekday().
Return the day of the week as an integer, where Monday is 1 andSunday is 7.
For example, date(2002, 12, 4).isoweekday()
== 3, aWednesday.See also weekday(), isocalendar().
)
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).The ISO calendar is a widely used variant of the Gregorian calendar.See http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm for a good explanation.The ISO year consists of 52 or 53 full weeks, and where a week startson a Monday and ends on a Sunday.
The first week of an ISO year isthe first (Gregorian) calendar week of a year containing a Thursday.This is called week number 1, and the ISO year of that Thursday isthe same as its Gregorian year.For example, 2004 begins on a Thursday, so the first week of ISOyear 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan2004, so thatdate(2003, 12, 29).isocalendar()
== (2004, 1, 1)anddate(2004, 1, 4).isocalendar()
== (2004, 1, 7).
Return a string representing the date in ISO 8601 format,'YYYY-MM-DD'.
For example,date(2002, 12, 4).isoformat()
For a date d, str(d) is equivalent to
d.isoformat().
Return a string representing the date, for exampledate(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'.
d.ctime() is equivalent totime.ctime(time.mktime(d.timetuple()))on platforms where the native C ctime() function(which time.ctime() invokes, but whichdate.ctime() does not invoke) conforms to the C standard.
Return a string representing the date, controlled by an explicitformat string.
Format codes referring to hours, minutes or secondswill see 0 values.See the section on strftime() behavior.
A datetime object is a single object containing all theinformation from a date object and a time object.
Like adate object, datetime assumes the current Gregoriancalendar extended in both directions; like a time object,datetime assumes there are exactly 3600*24 seconds in everyday.Constructor:
classdatetime
The year, month and day arguments are required. tzinfo maybe None, or an instance of a tzinfo subclass.
Theremaining arguments may be ints or longs, in the following ranges:
1 = day = number of days in the given month and year
If an argument outside those ranges is given,ValueError is raised.
Other constructors, all class methods:
Return the current local datetime, with tzinfo None.This is equivalent todatetime.
fromtimestamp(time.time()).See also now(), fromtimestamp().
Return the current local date and time.
If optional argumenttz is None or not specified, this is liketoday(), but, if possible, supplies more precision than canbe gotten from going through a time.
time() timestamp (forexample, this may be possible on platforms supplying the Cgettimeofday() function).Else tz must be an instance of a class tzinfo subclass,and the current date and time are converted to tz's timezone.
In this case the result is equivalent to
tz.fromutc(datetime.
utcnow().replace(tzinfo=tz)).See also today(), utcnow().
)
Return the current UTC date and time, with tzinfo None.This is like now(), but returns the current UTC date and time,as a naive datetime object.See also now().
Return the local date and time corresponding to the POSIXtimestamp, such as is returned by time.
time().If optional argument tz is None or not specified, thetimestamp is converted to the platform's local date and time, andthe returned datetime object is naive.Else tz must be an instance of a class tzinfo subclass,and the timestamp is converted to tz's time zone.
In this casethe result is equivalent to
tz.fromutc(datetime. utcfromtimestamp(timestamp).replace(tzinfo=tz)).
fromtimestamp() may raise ValueError, if thetimestamp is out of the range of values supported by the platform Clocaltime() or gmtime() functions.
Return the UTC datetime corresponding to the POSIXtimestamp, with tzinfo None.This may raise ValueError, if thetimestamp is out of the range of values supported by the platformC gmtime() function.
It's common for this to berestricted to years in 1970 through 2038.See also fromtimestamp().
Return the datetime corresponding to the prolepticGregorian ordinal, where January 1 of year 1 has ordinal 1.ValueError is raised unless 1 = ordinal =datetime.max.toordinal().
The hour, minute, second andmicrosecond of the result are all 0,and tzinfo is None.
Return a new datetime object whose date members areequal to the given date object's, and whose timeand tzinfo members are equal to the given time object's.For any datetime object d,
d ==datetime.combine(d.date(), d.timetz()).
If date is adatetime object, its time and tzinfo members areignored.
The earliest representable datetime,datetime(MINYEAR, 1, 1, tzinfo=None).
The latest representable datetime,datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).
The smallest possible difference between non-equal datetimeobjects, timedelta(microseconds=1).
In range(24).
In range(60).
In range(1000000).
The object passed as the tzinfo argument to thedatetime constructor, or None if none was passed.
Supported operations:
Compares datetime to datetime.(4)
datetime2 is a duration of timedelta removed from datetime1, movingforward in time if
timedelta.days 0, or backward if
timedelta.days 0.
Subtraction of a datetime from adatetime is defined only if bothoperands are naive, or if both are aware.
If one is aware and theother is naive, TypeError is raised.If both are naive, or both are aware and have the same tzinfomember, the tzinfo members are ignored, and the result isa timedelta object t such that
datetime2 + t == datetime1
.
No time zoneadjustments are done in this case.If both are aware and have different tzinfo members,a-b acts as if a and b were first converted tonaive UTC datetimes first.
The result is(a.replace(tzinfo=None) - a.utcoffset()) -(b.replace(tzinfo=None) - b.utcoffset())except that the implementation never overflows.
datetime1 is considered less than datetime2when datetime1 precedes datetime2 in time.If one comparand is naive andthe other is aware, TypeError is raised.
If bothcomparands are aware, and have the same tzinfo member,the common tzinfo member is ignored and the base datetimesare compared.
If both comparands are aware and have differenttzinfo members, the comparands are first adjusted bysubtracting their UTC offsets (obtained from self. utcoffset()).
Note:In order to stop comparison from falling back to the defaultscheme of comparing object addresses, datetime comparisonnormally raises TypeError if the other comparandisn't also a datetime object.
However,NotImplemented is returned instead if the other comparandhas a timetuple attribute.
This hook gives otherkinds of date objects a chance at implementing mixed-typecomparison.
If not, when a datetime object iscompared to an object of a different type, TypeErroris raised unless the comparison is == or !=.
Thelatter cases return False or True,respectively.
datetime objects can be used as dictionary keys.
In Booleancontexts, all datetime objects are considered to be true.Instance methods:
Return date object with same year, month and day.
Return time object with same hour, minute, second and microsecond.tzinfo is None.
See also method timetz().
Return time object with same hour, minute, second, microsecond,and tzinfo members.
See also method time().
Return a datetime with the same members, except for those members givennew values by whichever keyword arguments are specified.
Note thattzinfo=None can be specified to create a naive datetime froman aware datetime with no conversion of date and time members.
tz must be an instance of a tzinfo subclass, and itsutcoffset() and dst() methods must not returnNone. self must be aware (
self.
tzinfo mustnot be None, and self.
utcoffset() must not returnNone).If self.
tzinfo is tz, self.
astimezone(tz) is equal to self: noadjustment of date or time members is performed.Else the result is local time in time zone tz, representing thesame UTC time as self: after
astz =dt.astimezone(tz),
astz - astz.utcoffset() will usually have the samedate and time members as
dt - dt.utcoffset().The discussion of class tzinfo explains the cases at DaylightSaving Time transition boundaries where this cannot be achieved (an issueonly if tz models both standard and daylight time).If you merely want to attach a time zone object tz to adatetime dt without adjustment of date and time members,use
dt.replace(tzinfo=tz).
Ifyou merely want to remove the time zone object from an aware datetimedt without conversion of date and time members, use
dt.replace(tzinfo=None).Note that the default tzinfo.fromutc() method can be overriddenin a tzinfo subclass to affect the result returned byastimezone().
Ignoring error cases, astimezone()acts like:
If tzinfo is None, returns None, elsereturns
self.
tzinfo.utcoffset(self), andraises an exception if the latter doesn't return None, ora timedelta object representing a whole number of minuteswith magnitude less than one day.
self.
tzinfo.dst(self), andraises an exception if the latter doesn't return None, ora timedelta object representing a whole number of minuteswith magnitude less than one day.
self.
tzinfo.tzname(self),raises an exception if the latter doesn't return None ora string object,
d.timetuple() is equivalent totime.
struct_time((d.year, d.month, d.day,d.hour, d.minute, d.second,d.weekday(),d.toordinal() - date(d.year, 1, 1).toordinal() + 1,dst))The tm_isdst flag of the result is set according tothe dst() method: tzinfo is None ordst() returns None,tm_isdst is set to -1; else if dst() returnsa non-zero value, tm_isdst is set to 1;else tm_isdst is set to 0.
If datetime instance d is naive, this is the same as
d.timetuple() except that tm_isdst is forced to 0regardless of what d.dst() returns.
DST is never in effectfor a UTC time.If d is aware, d is normalized to UTC time, by subtracting
d.utcoffset(), and a time.
struct_time for thenormalized time is returned. tm_isdst is forced to 0.Note that the result's tm_year member may beMINYEAR-1 or MAXYEAR+1, if d.year wasMINYEAR or MAXYEAR and UTC adjustment spills over ayear boundary.
Return the proleptic Gregorian ordinal of the date.
The same asself. date().toordinal().
The same as self.
date().weekday().See also isoweekday().
The same as self.
date().isoweekday().See also weekday(), isocalendar().
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
Thesame as self. date().isocalendar().
)
Return a string representing the date and time in ISO 8601 format,YYYY-MM-DDTHH:MM:SS.mmmmmmor, if microsecond is 0,YYYY-MM-DDTHH:MM:SSIf utcoffset() does not return None, a 6-characterstring is appended, giving the UTC offset in (signed) hours andminutes:YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MMor, if microsecond is 0YYYY-MM-DDTHH:MM:SS+HH:MMThe optional argument sep (default 'T') is aone-character separator, placed between the date and time portionsof the result.
For example,
__str__
For a datetime instance d, str(d) isequivalent to
d.isoformat(' ').
Return a string representing the date and time, for exampledatetime(2002, 12, 4, 20, 30, 40).ctime()
=='Wed Dec 4 20:30:40 2002'.d.ctime() is equivalent totime.ctime(time.mktime(d.timetuple())) on platforms wherethe native C ctime() function (whichtime.ctime() invokes, but whichdatetime.ctime() does not invoke) conforms to the Cstandard.
Return a string representing the date and time, controlled by anexplicit format string.
See the section on strftime()behavior.
Various date and time objects are supplied by the datetimemodule.
Before using any of these functions, the header filedatetime. h must be included in your source (note that this isnot include by Python.h), and macro PyDateTime_IMPORT()must be invoked.
The macro arranges to put a pointer to a C structurein a static variable PyDateTimeAPI, which is used by the followingmacros.Type-check macros:
Return true if ob is of type PyDateTime_DateType ora subtype of PyDateTime_DateType. ob must not beNULL.New in version 2.4.
Return true if ob is of type PyDateTime_DateType.ob must not be NULL.New in version 2.4.
Return true if ob is of type PyDateTime_DateTimeType ora subtype of PyDateTime_DateTimeType. ob must not beNULL.New in version 2.4.
Return true if ob is of type PyDateTime_DateTimeType.ob must not be NULL.New in version 2.4.
Return true if ob is of type PyDateTime_TimeType ora subtype of PyDateTime_TimeType. ob must not beNULL.New in version 2.4.
Return true if ob is of type PyDateTime_TimeType.ob must not be NULL.New in version 2.4.
Return true if ob is of type PyDateTime_DeltaType ora subtype of PyDateTime_DeltaType. ob must not beNULL.New in version 2.4.
Return true if ob is of type PyDateTime_DeltaType.ob must not be NULL.New in version 2.4.
Return true if ob is of type PyDateTime_TZInfoType ora subtype of PyDateTime_TZInfoType. ob must not beNULL.New in version 2.4.
Return true if ob is of type PyDateTime_TZInfoType.ob must not be NULL.New in version 2.4.
Macros to create objects:
Return a datetime.
date object with the specified year, monthand day.New in version 2.4.
Return a datetime. datetime object with the specified year, month,day, hour, minute, second and microsecond.New in version 2.4.
Return a datetime. time object with the specified hour, minute,second and microsecond.New in version 2.4.
Return a datetime. timedelta object representing the given numberof days, seconds and microseconds.
Normalization is performed so thatthe resulting number of microseconds and seconds lie in the rangesdocumented for datetime.
timedelta objects.New in version 2.4.
Macros to extract fields from date objects.
The argument must be aninstance of PyDateTime_Date, including subclasses (such asPyDateTime_DateTime).
The argument must not be NULL, andthe type is not checked:
Return the year, as a positive int.New in version 2.4.
Return the month, as an int from 1 through 12.New in version 2.4.
Return the day, as an int from 1 through 31.New in version 2.4.
Macros to extract fields from datetime objects.
The argument must be aninstance of PyDateTime_DateTime, including subclasses.The argument must not be NULL, and the type is not checked:
Return the hour, as an int from 0 through 23.New in version 2.4.
Return the minute, as an int from 0 through 59.New in version 2.4.
Return the second, as an int from 0 through 59.New in version 2.4.
Return the microsecond, as an int from 0 through 999999.New in version 2.4.
Macros to extract fields from time objects.
The argument must be aninstance of PyDateTime_Time, including subclasses.The argument must not be NULL, and the type is not checked:
Macros for the convenience of modules implementing the DB API:
Create and return a new datetime. datetime object given an argumenttuple suitable for passing to datetime.
datetime.
Create and return a new datetime. date object given an argumenttuple suitable for passing to datetime.
date.fromtimestamp().New in version 2.4.
A time object represents a (local) time of day, independent of anyparticular day, and subject to adjustment via a tzinfo object.
classtime
All arguments are optional. tzinfo may be None, oran instance of a tzinfo subclass.
The remaining argumentsmay be ints or longs, in the following ranges:
All default to 0 excepttzinfo, which defaults to None.
The earliest representable time, time(0, 0, 0, 0).
The latest representable time, time(23, 59, 59, 999999).
The smallest possible difference between non-equal timeobjects, timedelta(microseconds=1), although note thatarithmetic on time objects is not supported.
The object passed as the tzinfo argument to the timeconstructor, or None if none was passed.
Supported operations:
comparison of time to time,where a is considered less than b when a precedesb in time.
If one comparand is naive and the other is aware,TypeError is raised.
If both comparands are aware, andhave the same tzinfo member, the common tzinfomember is ignored and the base times are compared.
If bothcomparands are aware and have different tzinfo members,the comparands are first adjusted by subtracting their UTC offsets(obtained from self.
utcoffset()).In order to stop mixed-type comparisons from falling back to thedefault comparison by object address, when a time object iscompared to an object of a different type, TypeError israised unless the comparison is == or !=.
hash, use as dict key
efficient pickling
in Boolean contexts, a time object is considered to betrue if and only if, after converting it to minutes andsubtracting utcoffset() (or 0 if that'sNone), the result is non-zero.
Instance methods:
Return a time with the same value, except for those members givennew values by whichever keyword arguments are specified.
Note thattzinfo=None can be specified to create a naive time froman aware time, without conversion of the time members.
Return a string representing the time in ISO 8601 format,HH:MM:SS.mmmmmmor, if self.
microsecond is 0,HH:MM:SSIf utcoffset() does not return None, a 6-characterstring is appended, giving the UTC offset in (signed) hours andminutes:HH:MM:SS.mmmmmm+HH:MMor, if self.
For a time t, str(t) is equivalent to
t.isoformat().
Return a string representing the time, controlled by an explicitformat string.
See the section on strftime() behavior.
self.
tzinfo.utcoffset(None), andraises an exception if the latter doesn't return None ora timedelta object representing a whole number of minuteswith magnitude less than one day.
self.
tzinfo.dst(None), andraises an exception if the latter doesn't return None, ora timedelta object representing a whole number of minuteswith magnitude less than one day.
self.
tzinfo.tzname(None), orraises an exception if the latter doesn't return None ora string object.
A timedelta object represents a duration, the differencebetween two dates or times.
classtimedelta
All arguments are optional and default to 0.
Arguments maybe ints, longs, or floats, and may be positive or negative.Only days, seconds and microseconds are storedinternally.
Arguments are converted to those units:
A millisecond is converted to 1000 microseconds.
A minute is converted to 60 seconds.
An hour is converted to 3600 seconds.
A week is converted to 7 days.
and days, seconds and microseconds are then normalized so that therepresentation is unique, with
0 = seconds 3600*24 (the number of seconds in one day)
If any argument is a float and there are fractional microseconds,the fractional microseconds left over from all arguments are combinedand their sum is rounded to the nearest microsecond.
d = timedelta(microseconds=-1) (d.days, d.seconds, d.microseconds)(-1, 86399, 999999)
Class attributes are:
The most negative timedelta object,timedelta(-999999999).
The most positive timedelta object,timedelta(days=999999999, hours=23, minutes=59, seconds=59,microseconds=999999).
The smallest possible difference between non-equaltimedelta objects, timedelta(microseconds=1).
Attribute
Value
Between -999999999 and 999999999 inclusive
Between 0 and 86399 inclusive
Between 0 and 999999 inclusive
The floor is computed and the remainder (if any) is thrown away.(3)
Returns a timedelta object with the same value.(2)
-t1
equivalent to +t when t.days = 0, and to-t when t.days 0.(2)
This is exact, but may overflow.
This is exact, and cannot overflow.
Division by 0 raises ZeroDivisionError.
-timedelta.max is not representable as a timedelta object.
timedelta objects are hashable (usable as dictionary keys),support efficient pickling, and in Boolean contexts, a timedeltaobject is considered to be true if and only if it isn't equal totimedelta(0).
tzinfo is an abstract base clase, meaning that this classshould not be instantiated directly.
This is a technicalrequirement that may be relaxed in the future.A concrete subclass of tzinfo may need to implement thefollowing methods.
Exactly which methods are needed depends on theuses made of aware datetime objects.
If in doubt, simplyimplement all of them.
Return offset of local time from UTC, in minutes east of UTC.
Iflocal time is west of UTC, this should be negative.
Note that thisis intended to be the total offset from UTC; for example, if atzinfo object represents both time zone and DST adjustments,utcoffset() should return their sum.
If the UTC offsetisn't known, return None.
Else the value returned must bea timedelta object specifying a whole number of minutes in therange -1439 to 1439 inclusive (1440 = 24*60; the magnitude of the offsetmust be less than one day).
Most implementations ofutcoffset() will probably look like one of these two:
If utcoffset() does not return None,dst() should not return None either.The default implementation of utcoffset() raisesNotImplementedError.
Return the daylight saving time (DST) adjustment, in minutes east ofUTC, or None if DST information isn't known.
Forexample, datetime.
must return the same result for every datetime dtwith
dt.tzinfo == tz For sane tzinfosubclasses, this expression yields the time zone's "standard offset",which should not depend on the date or the time, but only on geographiclocation.
The implementation of datetime. astimezone() relieson this, but cannot detect violations; it's the programmer'sresponsibility to ensure it.
If a tzinfo subclass cannotguarantee this, it may be able to override the default implementationof tzinfo.fromutc() to work correctly with astimezone()regardless.Most implementations of dst() will probably look like oneof these two:
The default implementation of dst() raisesNotImplementedError.
Return the time zone name corresponding to the datetimeobject dt, as a string.Nothing about string names is defined by thedatetime module, and there's no requirement that it meananything in particular.
For example, "GMT", "UTC", "-500", "-5:00","EDT", "US/Eastern", "America/New York" are all valid replies.
ReturnNone if a string name isn't known.
Note that this is a methodrather than a fixed string primarily because some tzinfosubclasses will wish to return different names depending on the specificvalue of dt passed, especially if the tzinfo class isaccounting for daylight time.The default implementation of tzname() raisesNotImplementedError.
These methods are called by a datetime or time object,in response to their methods of the same names.
A datetimeobject passes itself as the argument, and a time object passesNone as the argument.
A tzinfo subclass's methods shouldtherefore be prepared to accept a dt argument of None, or ofclass datetime.When None is passed, it's up to the class designer to decide thebest response.
For example, returning None is appropriate if theclass wishes to say that time objects don't participate in thetzinfo protocols.
The intent is thatthe tzinfo methods interpret dt as being in local time,and not need worry about objects in other timezones.There is one more tzinfo method that a subclass may wish tooverride:
This is called from the default datetime.
astimezone()implementation. When called from that,
dt.tzinfo isself, and dt's date and time members are to be viewed asexpressing a UTC time.
The purpose of fromutc() is toadjust the date and time members, returning an equivalent datetime inself's local time.Most tzinfo subclasses should be able to inherit the defaultfromutc() implementation without problems.
It's strong enoughto handle fixed-offset time zones, and time zones accounting for bothstandard and daylight time, and the latter even if the DST transitiontimes differ in different years.
Example tzinfo classes:
Note that there are unavoidable subtleties twice per year in atzinfosubclass accounting for both standard and daylight time, at the DSTtransition points.
For concreteness, consider US Eastern (UTC -0500),where EDT begins the minute after 1:59 (EST) on the first Sunday inApril, and ends the minute after 1:59 (EDT) on the last Sunday in October:
When DST starts (the "start" line), the local wall clock leaps from 1:59to 3:00.
A wall time of the form 2:MM doesn't really make sense on thatday, so astimezone(Eastern) won't deliver a result withhour == 2 on theday DST begins.
In order for astimezone() to make thisguarantee, the rzinfo.dst() method must consider timesin the "missing hour" (2:MM for Eastern) to be in daylight time.When DST ends (the "end" line), there's a potentially worse problem:there's an hour that can't be spelled unambiguously in local wall time:the last hour of daylight time.
In Eastern, that's times ofthe form 5:MM UTC on the day daylight time ends.
In the Eastern example, UTC times of the form5:MM and 6:MM both map to 1:MM when converted to Eastern.
In order forastimezone() to make this guarantee, the tzinfo.dst()method must consider times in the "repeated hour" to be instandard time.
This is easily arranged, as in the example, by expressingDST switch times in the time zone's standard local time.Applications that can't bear such ambiguities should avoid using hybridtzinfo subclasses; there are no ambiguities when using UTC, orany other fixed-offset tzinfo subclass (such as a classrepresenting only EST (fixed offset -5 hours), or only EDT (fixed offset-4 hours)).
The database objects returned by open() provide the methods common to all the DBM-style databases and mapping objects.
The followingmethods are available in addition to the standard methods.
It's possible to loop over every key/value pair in the database usingthis method and the next() method.
The traversal is ordered bythe databases internal hash values, and won't be sorted by the keyvalues.
This method returns the starting key.
Return the last key/value pair in a database traversal.
This may be used tobegin a reverse-order traversal; see previous().
Returns the key next key/value pair in a database traversal.
Thefollowing code prints every key in the database db, withouthaving to create a list in memory that contains them all:
Returns the previous key/value pair in a forward-traversal of the database.In conjunction with last(), this may be used to implementa reverse-order traversal.
This method forces any unwritten data to be written to the disk.
The debugger recognizes the following commands.
Most commands can beabbreviated to one or two letters; e.g.
"h(elp)" means thateither "h" or "help" can be used to enter the helpcommand (but not "he" or "hel", nor "H" or"Help" or "HELP").
Arguments to commands must beseparated by whitespace (spaces or tabs).
Optional arguments areenclosed in square brackets ("[]") in the command syntax; thesquare brackets must not be typed.
Alternatives in the command syntaxare separated by a vertical bar ("|").Entering a blank line repeats the last command entered.
Exception: ifthe last command was a "list" command, the next 11 lines arelisted.Commands that the debugger doesn't recognize are assumed to be Pythonstatements and are executed in the context of the program beingdebugged.
Python statements can also be prefixed with an exclamationpoint ("!").
This is a powerful way to inspect the programbeing debugged; it is even possible to change a variable or call afunction.
When anexception occurs in such a statement, the exception name is printedbut the debugger's state is not changed.Multiple commands may be entered on a single line, separated by";;".
Aliases can have parameters whichallows one a certain level of adaptability to the context underexamination.If a file .pdbrc
If both files exist, the onein the home directory is read first and aliases defined there can beoverridden by the local file.
Without argument, print the list of available commands.
With acommand as argument, print help about that command.
"helppdb" displays the full documentation file; if the environment variablePAGER is defined, the file is piped through that commandinstead.
Since the command argument must be an identifier,"help exec" must be entered to get help on the "!" command.
Print a stack trace, with the most recent frame at the bottom.
Anarrow indicates the current frame, which determines the context ofmost commands.
Move the current frame one level down in the stack trace(to an newer frame).
Move the current frame one level up in the stack trace(to a older frame).
With a lineno argument, set a break there in the currentfile.
With a function argument, set a break at the firstexecutable statement within that function.The line number may be prefixed with a filename and a colon,to specify a breakpoint in another file (probably one thathasn't been loaded yet).
The file is searched on sys.
Temporary breakpoint, which is removed automatically when it isfirst hit.
The arguments are the same as break.
With a space separated list of breakpoint numbers, clear thosebreakpoints.
Without argument, clear all breaks (but firstask confirmation).
Disables the breakpoints given as a space separated list ofbreakpoint numbers.
Disabling a breakpoint means it cannot causethe program to stop execution, but unlike clearing a breakpoint, itremains in the list of breakpoints and can be (re-)enabled.
Enables the breakpoints specified.
Sets the ignore count for the given breakpoint number.
Ifcount is omitted, the ignore count is set to 0.
A breakpointbecomes active when the ignore count is zero.
When non-zero,the count is decremented each time the breakpoint is reachedand the breakpoint is not disabled and any associated conditionevaluates to true.
Condition is an expression which must evaluate to true beforethe breakpoint is honored.
If condition is absent, any existingcondition is removed; i.e., the breakpoint is made unconditional.
Execute the current line, stop at the first possible occasion(either in a function that is called or on the next line in thecurrent function).
Continue execution until the next line in the current functionis reached or it returns.
(The difference between "next" and"step" is that "step" stops inside a called function, while"next" executes called functions at (nearly) full speed, onlystopping at the next line in the current function.)
Continue execution until the current function returns.
Continue execution, only stop when a breakpoint is encountered.
Set the next line that will be executed.
Only available in thebottom-most frame.
This lets you jump back and execute codeagain, or jump forward to skip code that you don't want to run.It should be noted that not all jumps are allowed -- for instance itis not possible to jump into the middle of a for loop or outof a finally clause.
List source code for the current file.
Without arguments, list 11lines around the current line or continue the previous listing.
Withone argument, list 11 lines around at that line.
With two arguments,list the given range; if the second argument is less than the first,it is interpreted as a count.
Print the argument list of the current function.
Evaluate the expression in the current context and print itsvalue.
Note:"print" can also be used, but is not a debuggercommand -- this executes the Python print statement.
Like the "p" command, except the value of the expression ispretty-printed using the pprint module.
Creates an alias called name that executes command.
Thecommand must not be enclosed in quotes.
Replaceable parameterscan be indicated by "%1", "%2", and so on, while "%*" isreplaced by all the parameters.
If no command is given, the currentalias for name is shown.
If no arguments are given, allaliases are listed.Aliases may be nested and can contain anything that can belegally typed at the pdb prompt.
Note that internal pdb commandscan be overridden by aliases.
Such a command isthen hidden until the alias is removed.
Deletes the specified alias.
Execute the (one-line) statement in the context ofthe current stack frame.The exclamation point can be omitted unless the first wordof the statement resembles a debugger command.To set a global variable, you can prefix the assignmentcommand with a "global" command on the same line, e.g.:
(Pdb) global list_options; list_options = ['-l'](Pdb)
Quit from the debugger.The program being executed is aborted.
Some changes were made to the interpreter:
sys.settrace(func) sets the global trace function
there can also a local trace function (see later)
A function is called (or some other code block entered).
The interpreter is about to execute a new line of code (sometimesmultiple line events on one line exist).
The local trace function iscalled; arg is None; the return value specifies the newlocal trace function.
A function (or other code block) is about to return.
The local tracefunction is called; arg is the value that will be returned.
Thetrace function's return value is ignored.
An exception has occurred.
A C function is about to be called.
This may be an extension functionor a builtin. arg is the C function object.
'c_return'
A C function has returned. arg is None.
'c_exception'
A C function has thrown an exception. arg is None.
Note that as an exception is propagated down the chain of callers, an'exception' event is generated at each level.For more information on code and frame objects, refer to the
Contexts are environments for arithmetic operations.
They govern precision,set rules for rounding, determine which signals are treated as exceptions, andlimit the range for exponents.Each thread has its own current context which is accessed or changed usingthe getcontext() and setcontext() functions:
)
This is a standard context defined by the General Decimal ArithmeticSpecification.
Precision is set to nine.
Rounding is set toROUND_HALF_UP.
All flags are cleared.
All traps are enabled(treated as exceptions) except Inexact, Rounded, andSubnormal.Because many of the traps are enabled, this context is useful for debugging.
Rounding is set toROUND_HALF_EVEN.
No traps are enabled(so that exceptions are not raised during computations).Because the trapped are disabled, this context is useful for applicationsthat prefer to have result value of NaN or Infinityinstead of raising exceptions.
This allows an application to complete arun in the presence of conditions that would otherwise halt the program.
This context is used by the Context constructor as a prototype fornew contexts.
Changing a field (such a precision) has the effect ofchanging the default for new contexts creating by the Contextconstructor.This context is most useful in multi-threaded environments.
Changing one ofthe fields before threads are started has the effect of setting system-widedefaults.
Changing the fields after threads have started is not recommendedas it would require thread synchronization to prevent race conditions.In single threaded environments, it is preferable to not use this contextat all.
Instead, simply create contexts explicitly as described below.The default values are precision=28, rounding=ROUND_HALF_EVEN, and enabledtraps for Overflow, InvalidOperation, and DivisionByZero.
In addition to the three supplied contexts, new contexts can be createdwith the Context constructor.
classContext
Creates a new context.
If a field is not specified or is None,the default values are copied from the DefaultContext.
The Context class defines several general purpose methods as well as alarge number of methods for doing arithmetic directly in a given context.
Sets all of the flags to 0.
Returns a duplicate of the context.
Creates a new Decimal instance from num but using self ascontext.
Unlike the Decimal constructor, the context precision,rounding method, flags, and traps are applied to the conversion.This is useful because constants are often given to a greater precision thanis needed by the application.
Another benefit is that rounding immediatelyeliminates unintended effects from digits beyond the current precision.In the following example, using unrounded inputs means that adding zeroto a sum can change the result:
Returns a value equal to "Emin - prec + 1" which is the minimumexponent value for subnormal results.
When underflow occurs, theexponent is set to Etiny.
Returns a value equal to "Emax - prec + 1".
The usual approach to working with decimals is to create Decimalinstances and then apply arithmetic operations which take place within thecurrent context for the active thread.
An alternate approach is to usecontext methods for calculating within a specific context.
The methods aresimilar to those for the Decimal class and are only briefly recountedhere.
Returns the absolute value of x.
Return the sum of x and y.
Compares values numerically.Like __cmp__() but returns a decimal instance:
Return x divided by y.
Divides two numbers and returns the integer part of the result.
x, y)
Compare two values numerically and return the maximum.If they are numerically equal then the left-hand operand is chosen as theresult.
x, y)
Compare two values numerically and return the minimum.If they are numerically equal then the left-hand operand is chosen as theresult.
Minus corresponds to the unary prefix minus operator in Python.
Return the product of x and y.
Normalize reduces an operand to its simplest form.Essentially a plus operation with all trailing zeros removed fromthe result.
Plus corresponds to the unary prefix plus operator in Python.
Thisoperation applies the context precision and rounding, so it isnot an identity operation.
)
Return "x ** y" to the modulo if given.The right-hand operand must be a whole number whose integer part (after anyexponent has been applied) has no more than 9 digits and whose fractionalpart (if any) is all zeros before any rounding.
Returns a value equal to x after rounding and having the exponent ofy.Unlike other operations, if the length of the coefficient after the quantizeoperation would be greater than precision, then anInvalidOperation is signaled.
This guarantees that, unless thereis an error condition, the quantized exponent is always equal to that of theright-hand operand.Also unlike other operations, quantize never signals Underflow, evenif the result is subnormal and inexact.
Returns the remainder from integer division.The sign of the result, if non-zero, is the same as that of the originaldividend.
remainder_near
Computed the modulo as either a positive or negative value dependingon which is closest to zero.
For instance,"Decimal(10).remainder_near(6)" returns Decimal("-2")which is closer to zero than Decimal("4").If both are equally close, the one chosen will have the same signas self.
Test whether x and y have the same exponent or whether both areNaN.
Return the square root to full precision.
Return the difference between x and y.
)
Convert to engineering-type string.Engineering notation has an exponent which is a multiple of 3, so thereare up to 3 digits left of the decimal place.
For example, convertsDecimal('123E+1') to Decimal("1.23E+3")
to_integral
Rounds to the nearest integer without signaling Inexactor Rounded.
Converts a number to a string using scientific notation.
The use of decimal floating point eliminates decimal representation error(making it possible to represent 0.1 exactly); however, someoperations can still incur round-off error when non-zero digits exceed thefixed precision.The effects of round-off error can be amplified by the addition or subtractionof nearly offsetting quantities resulting in loss of significance.
Knuthprovides two instructive examples where rounded floating point arithmetic withinsufficient precision causes the breakdown of the associative anddistributive properties of addition:
The decimal module makes it possible to restore the identitiesby expanding the precision sufficiently to avoid loss of significance:
The number system for the decimal module provides specialvalues including NaN, sNaN, -Infinity,Infinity, and two zeroes, +0 and -0.Infinities can be constructed directly with: Decimal('Infinity').
Also,they can arise from dividing by zero when the DivisionByZerosignal is not trapped.
Likewise, when the Overflow signal is nottrapped, infinity can result from rounding beyond the limits of the largestrepresentable number.The infinities are signed (affine) and can be used in arithmetic operationswhere they get treated as very large, indeterminate numbers.
Forexample, 0/0 returns NaN which means ``not a number''.
Thisvariety of NaN is quiet and, once created, will flow through othercomputations always resulting in another NaN.
This behavior can beuseful for a series of computations that occasionally have missing inputs --it allows the calculation to proceed while flagging specific results asinvalid.
A variant is sNaN which signals rather than remaining quietafter every operation.
Since their magnitude iszero, both positive and negative zeros are treated as equal and theirsign is informational.In addition to the two signed zeros which are distinct yet equal,there are various representations of zero with differing precisionsyet equivalent in value.
This takes a bit of getting used to.
Foran eye accustomed to normalized floating point representations, itis not immediately obvious that the following calculation returnsa value equal to zero:
Here are a few recipes that serve as utility functions and that demonstrateways to work with the Decimal class:
def moneyfmt(value, places=2, curr='', sep=',', dp='.',pos='', neg='-', trailneg=''):"""Convert Decimal to a money formatted string.
places: required number of places after the decimal pointcurr: optional currency symbol before the sign (may be blank)sep: optional grouping separator (comma, period, space, or blank)dp: decimal point indicator (comma or period)only specify as blank when places is zeropos: optional sign for positive numbers: '+', space or blankneg: optional sign for negative numbers: '-', '(', space or blanktrailneg:optional trailing minus indicator: '-', ')', space or blank d = Decimal('-1234567.8901') moneyfmt(d, curr='$')'-$1,234,567.89' moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')'1.234.568-' moneyfmt(d, curr='$', neg='(', trailneg=')')'($1,234,567.89)' moneyfmt(Decimal(123456789), sep=' ')'123 456 789.00' moneyfmt(Decimal('-0.02'), neg='', trailneg='')'.02'"""q = Decimal((0, (1,), -places)) # 2 places -- '0.01'sign, digits, exp = value.quantize(q).as_tuple()assert exp == -places result = []digits = map(str, digits)build, next = result.append, digits.
popif sign:build(trailneg)for i in range(places):if digits:build(next())else:build('0')build(dp)i = 0while digits:build(next())i += 1if i == 3 and digits:i = 0build(sep)build(curr)if sign:build(neg)else:build(pos)result.reverse()return ''.join(result)def pi():"""Compute Pi to the current precision. print pi()3.141592653589793238462643383"""getcontext().prec += 2 # extra digits for intermediate stepsthree = Decimal(3) # substitute "three=3.0" for regular floatslasts, t, s, n, na, d, da = 0, three, 3, 1, 0, 0, 24while s != lasts:lasts = sn, na = n+na, na+8d, da = d+da, da+32t = (t * n) / ds += tgetcontext().prec -= 2return +s # unary plus applies the new precisiondef exp(x):"""Return e raised to the power of x.
5.6.4 Signals
For example, if theDivisionByZero trap is set, then a DivisionByZeroexception is raised upon encountering the condition.
Altered an exponent to fit representation constraints.Typically, clamping occurs when an exponent falls outside the context'sEmin and Emax limits.
If possible, the exponent isreduced to fit by adding zeroes to the coefficient.
Base class for other signals and is a subclass ofArithmeticError.
Signals the division of a non-infinite number by zero.Can occur with division, modulo division, or when raising a number to anegative power.
If this signal is not trapped, returnsInfinity or -Infinity with the sign determined bythe inputs to the calculation.
Indicates that rounding occurred and the result is not exact.Signals when non-zero digits were discarded during rounding.
The roundedresult is returned.
The signal flag or trap is used to detect whenresults are inexact.
Possible causes include:
Numerical overflow.Indicates the exponent is larger than Emax after rounding hasoccurred.
If not trapped, the result depends on the rounding mode, eitherpulling inward to the largest representable finite number or roundingoutward to Infinity.
In either case, Inexact andRounded are also signaled.
If nottrapped, returns the result unchanged.
This signal is used to detectloss of significant digits.
The following table summarizes the hierarchy of signals:
The getcontext() function accesses a different Contextobject for each thread.
To control the defaults so that each thread will use thesame values throughout the application, directly modify theDefaultContext object.
This should be done before any threads arestarted so that there won't be a race condition between threads callinggetcontext().
For example:
# Set applicationwide defaults for all threads about to be launchedDefaultContext.prec = 12DefaultContext.rounding = ROUND_DOWNDefaultContext.traps = ExtendedContext.traps.copy()DefaultContext.traps[InvalidOperation] = 1setcontext(DefaultContext)# Afterwards, the threads can be startedt1.start()t2.start()t3.start(). . .
The usual start to using decimals is importing the module, viewing the currentcontext with getcontext() and, if necessary, setting new valuesfor precision, rounding, or enabled traps:
from decimal import * getcontext()Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,capitals=1, flags=[], traps=[Overflow, InvalidOperation,DivisionByZero]) getcontext().prec = 7 # Set a new precision
Decimal instances can be constructed from integers, strings or tuples.
Tocreate a Decimal from a float, first convert it to a string.
Thisserves as an explicit reminder of the details of the conversion (includingrepresentation error).
Decimal numbers include special values such asNaN which stands for ``Not a number'', positive and negativeInfinity, and -0. Decimal(10)Decimal("10")
The significance of a new Decimal is determined solely by the numberof digits input.
Context precision and rounding only come into play duringarithmetic operations.
Decimals interact well with much of the rest of python.
Here is a smalldecimal floating point flying circus:
data = map(Decimal, '1.34 1.87 3.45 2.35 1.00 0.03 9.25'.split()) max(data)Decimal("9.25") min(data)Decimal("0.03") sorted(data)[Decimal("0.03"), Decimal("1.00"), Decimal("1.34"), Decimal("1.87"),Decimal("2.35"), Decimal("3.45"), Decimal("9.25")] sum(data)Decimal("19.29") a,b,c = data[:3] str(a)'1.34' float(a)1.3400000000000001 round(a, 1) # round() first converts to binary floating point1.3 int(a)1 a * 5Decimal("6.70") a * bDecimal("2.5058") c % aDecimal("0.77")
The quantize() method rounds a number to a fixed exponent.
Thismethod is useful for monetary applications that often round results to a fixednumber of places:
As shown above, the getcontext() function accesses the currentcontext and allows the settings to be changed.
This approach meets theneeds of most applications.For more advanced work, it may be useful to create alternate contexts usingthe Context() constructor.
To make an alternate active, use thesetcontext() function.In accordance with the standard, the Decimal module provides twoready to use standard contexts, BasicContext andExtendedContext.
The former is especially useful for debuggingbecause many of the traps are enabled: myothercontext = Context(prec=60, rounding=ROUND_HALF_DOWN) setcontext(myothercontext)
Contexts also have signal flags for monitoring exceptional conditionsencountered during computations.
The flags remain set until explicitlycleared, so it is best to clear the flags before each set of monitoredcomputations by using the clear_flags() method.
The flags entry shows that the rational approximation to Piwas rounded (digits beyond the context precision were thrown away) and thatthe result is inexact (some of the discarded digits were non-zero).Individual traps are set using the dictionary in the trapsfield of a context:
Most programs adjust the current context only once, at the beginning of theprogram.
And, in many applications, data is converted to Decimal witha single cast inside a loop.
With context set and decimals created, the bulkof the program manipulates the data no differently than with other Pythonnumeric types.
Implements the standard rules for accepting and returning cookies.Both RFC 2965 and Netscape cookies are covered.
RFC 2965 handling isswitched off by default.The easiest way to provide your own policy is to override this classand call its methods in your overriden implementations before addingyour own additional checks:
In addition to the features required to implement theCookiePolicy interface, this class allows you to block andallow domains from setting and receiving cookies.
Usethe blocked_domains constructor argument, andblocked_domains() and set_blocked_domains() methods(and the corresponding argument and methods forallowed_domains).
If you set a whitelist, you can turn it offagain by setting it to None.Domains in block or allow lists that do not start with a dot mustequal the cookie domain to be matched.
For example,"example.com" matches a blacklist entry of"example.com", but "www.example.com" does not.
Domainsthat do start with a dot are matched by more specific domains too.For example, both "www.example.com" and"www.coyote.example.com" match ".example.com" (but"example.com" itself does not).
IP addresses are an exception,and must match exactly.
For example, if blocked_domains contains"192.168.1.2" and ".168.1.2", 192.168.1.2 is blocked,but 193.168.1.2 is not.
DefaultCookiePolicy implements the following additionalmethods:
Return the sequence of blocked domains (as a tuple).
Set the sequence of blocked domains.
Return whether domain is on the blacklist for setting orreceiving cookies.
Return None, or the sequence of allowed domains (as a tuple).
Set the sequence of allowed domains, or None.
Return whether domain is not on the whitelist for setting orreceiving cookies.
Don't allow sites to set two-component domains with country-codetop-level domains like .co.uk, .gov.uk,.co.nz.etc.
This is far from perfect and isn't guaranteed towork!
RFC 2965 protocol strictness switches:
Follow RFC 2965 rules on unverifiable transactions (usually, anunverifiable transaction is one resulting from a redirect or a requestfor an image hosted on another site).
If this is false, cookies arenever blocked on the basis of verifiability
Netscape protocol strictness switches:
apply RFC 2965 rules on unverifiable transactions even to Netscapecookies
Flags indicating how strict to be with domain-matching rules forNetscape cookies.
See below for acceptable values.
Ignore cookies in Set-Cookie: headers that have names starting with'$'.
Don't allow setting cookies whose path doesn't path-match request URI.
strict_ns_domain is a collection of flags.
Its value isconstructed by or-ing together (for example,DomainStrictNoDots|DomainStrictNonDomain means both flags areset).
When setting cookies, the 'host prefix' must not contain a dot(eg. www.foo.bar.com can't set a cookie for .bar.com,because www.foo contains a dot).
Cookies that did not explicitly specify a domaincookie-attribute can only be returned to a domain equal to the domainthat set the cookie (eg. spam.example.com won't be returnedcookies from example.com that had no domaincookie-attribute).
When setting cookies, require a full RFC 2965 domain-match.
The following attributes are provided for convenience, and are themost useful combinations of the above flags:
Equivalent to 0 (ie. all of the above Netscape domain strictness flagsswitched off).
Equivalent to DomainStrictNoDots|DomainStrictNonDomain.
The ``Default startup options...'' button in theEditPythonPrefs dialog box gives you many options includingthe ability to keep the ``Output'' window open after the scriptterminates, and the ability to enter interactive mode after thetermination of the run script.
The latter can be very helpful if youwant to examine the objects that were created during your script.
2.1 The Basics 2.
Defining New Types
Note:The way new types are defined changed dramatically (and for thebetter) in Python 2.2.
This document documents how to define newtypes for Python 2.2 and later.
If you need to support olderversions of Python, you will need to refer to older versions of thisdocumentation. Subsections
2.2.3.1 Generic Attribute Management
2.2.3.2 Type-specific Attribute Management
Deletion is recursively defined very similar to the way assignment isdefined.
Rather that spelling it out in full details, here are somehints.
Deletion of a target list recursively deletes each target, from leftto right.Deletion of a name removes the binding of that name from the local or global namespace, depending on whether the nameoccurs in a global statement in the same code block.
If thename is unbound, a NameError exception will be raised.
It is illegal to delete a name from the local namespace if it occursas a free variable
in a nested block.Deletion of attribute references, subscriptions and slicingsis passed to the primary object involved; deletion of a slicingis in general equivalent to assignment of an empty slice of theright type (but even this is determined by the sliced object).
The following tokens serve as delimiters in the grammar:
The period can also occur in floating-point and imaginary literals.
Asequence of three periods has a special meaning as an ellipsis in slices.The second half of the list, the augmented assignment operators, servelexically as delimiters, but also perform an operation.The following printing ASCII characters have special meaning as partof other tokens or are otherwise significant to the lexical analyzer:
' " # \
The following printing ASCII characters are not used in Python.
Theiroccurrence outside string literals and comments is an unconditionalerror:
This section shows various approaches to working with deques.The rotate() method provides a way to implement dequeslicing and deletion.
For example, a pure python implementation ofdel d[n] relies on the rotate() method to positionelements to be popped:
To implement deque slicing, use a similar approach applyingrotate() to bring a target element to the left side of the deque.Remove old entries with popleft(), add new entries withextend(), and then reverse the rotation.With minor variations on that approach, it is easy to implement Forth stylestack manipulations such as dup, drop, swap, over,pick, rot, and roll.A roundrobin task server can be built from a deque usingpopleft() to select the current task and append()to add it back to the tasklist if the input stream is not exhausted:
Multi-pass data reduction algorithms can be succinctly expressed andefficiently coded by extracting elements with multiple calls topopleft(), applying the reduction function, and callingappend() to add the result back to the queue.For example, building a balanced binary tree of nested lists entailsreducing two adjacent nodes into one by grouping them in a list:
2. Writing the Setup
Subsections 2.3.1 Extension names and packages
Just as writing Python extension modules is a bit more complicated thanwriting pure Python modules, describing them to the Distutils is a bitmore complicated.
Suppose your distribution includes a singleextension, called foo and implemented by foo.c.
If noadditional instructions to the compiler/linker are needed, describingthis extension is quite simple:
The Extension class can be imported fromdistutils.core along with setup().
Thus, the setupscript for a module distribution that contains only this one extensionand nothing else might be:
The Extension class (actually, the underlying extension-buildingmachinery implemented by the build_ext command) supports agreat deal of flexibility in describing Python extensions, which isexplained in the following sections.
The first argument to the Extension constructor is always thename of the extension, including any package names.
describes an extension that lives in the root package, while
Extension('pkg.foo', ['src/foo1.c', 'src/foo2.c'])
describes the same extension in the pkg package.
The sourcefiles and resulting object code are identical in both cases; the onlydifference is where in the filesystem (and therefore where in Python'snamespace hierarchy) the resulting extension lives.If you have a number of extensions all in the same package (or all underthe same base package), use the ext_package keyword argumentto setup().
will compile foo.c to the extension pkg.foo, andbar.c to pkg.subpkg.bar.
The second argument to the Extension constructor is a list ofsource files.
Since the Distutils currently only support C, C++, andObjective-C extensions, these are normally C/C++/Objective-C sourcefiles.
(Be sure to use appropriate extensions to distinguish C++ source files: .cc and .cpp seem to be recognized by bothUnix and Windows compilers.)However, you can also include SWIG interface (.i) files in thelist; the build_ext command knows how to deal with SWIGextensions: it will run SWIG on the interface file and compile theresulting C/C++ file into your extension.
Three optional arguments to Extension will help if you need tospecify include directories to search or preprocessor macros todefine/undefine: include_dirs, define_macros, andundef_macros.For example, if your extension requires header files in theinclude directory under your distribution root, use theinclude_dirs option:
You can specify absolute directories there; if you know that yourextension will only be built on Unix systems with X11R6 installed to/usr, you can get away with
Extension('foo', ['foo.c'], include_dirs=['/usr/include/X11'])
You should avoid this sort of non-portable usage if you plan todistribute your code: it's probably better to write C code like
If you need to include header files from some other Python extension,you can take advantage of the fact that header files are installed in aconsistent way by the Distutils install_header command.
Forexample, the Numerical Python header files are installed (on a standardUnix installation) to /usr/local/include/python1.5/Numerical.(The exact location will differ according to your platform and Pythoninstallation.)
Since the Python includedirectory--/usr/local/include/python1.5 in this case--is alwaysincluded in the search path when building Python extensions, the bestapproach is to write C code like
If you must put the Numerical include directory right into yourheader search path, though, you can find that directory using theDistutils
module:
define_macros takes a list of (name, value) tuples, wherename is the name of the macro to define (a string) andvalue is its value: either a string or None.
(Defining amacro FOO to None is the equivalent of a bare#define FOO in your C source: with most compilers, this setsFOO to the string 1.) undef_macros is justa list of macros to undefine.For example:
is the equivalent of having this at the top of every C source file:
#define NDEBUG 1#define HAVE_STRFTIME#undef HAVE_FOO#undef HAVE_BAR
You can also specify the libraries to link against when building yourextension, and the directories to search for those libraries.
If you need to link with libraries in a non-standard location, you'llhave to include the location in library_dirs:
(Again, this sort of non-portable construct should be avoided if youintend to distribute your code.)
Should mention clib libraries here or somewhere else!
2.3.5 Other options
There are still some other options which can be used to handle specialcases.The extra_objects option is a list of object files to be passedto the linker.
These files must not have extensions, as the defaultextension for the compiler is used.
extra_compile_args and extra_link_args can be usedto specify additional command line options for the respective compiler andlinker command lines.
export_symbols is only useful on Windows.
It can contain a listof symbols (functions or variables) to be exported.
This optionis not needed when building compiled extensions: Distutils will automatically add initmoduleto the list of exported symbols.
3.3.2.3 Invoking Descriptors
In general, a descriptor is an object attribute with ``binding behavior'',one whose attribute access has been overridden by methods in the descriptorprotocol: __get__(), __set__(), and __delete__().If any of those methods are defined for an object, it is said to be adescriptor.The default behavior for attribute access is to get, set, or delete theattribute from an object's dictionary.
For instance, a.x has alookup chain starting with a.__dict__['x'], thentype(a).__dict__['x'], and continuing through the base classes of type(a) excluding metaclasses.However, if the looked-up value is an object defining one of the descriptormethods, then Python may override the default behavior and invoke thedescriptor method instead.
Where this occurs in the precedence chain dependson which descriptor methods were defined and how they were called.
Direct Call
The simplest and least common call is when user codedirectly invokes a descriptor method: x.__get__(a).
Instance Binding
If binding to a new-style object instance,a.x is transformed into the call:type(a).__dict__['x'].__get__(a, type(a)).
Class Binding
If binding to a new-style class, A.xis transformed into the call: A.__dict__['x'].__get__(None, A).
Super Binding
If a is an instance of super,then the binding super(B, obj).m() searchesobj.__class__.__mro__ for the base class A immediatelypreceding B and then invokes the descriptor with the call:A.__dict__['m'].__get__(obj, A).
For instance bindings, the precedence of descriptor invocation dependson the which descriptor methods are defined.
Data descriptors defineboth __get__() and __set__().
Non-data descriptors havejust the __get__() method.
Data descriptors always overridea redefinition in an instance dictionary.
In contrast, non-datadescriptors can be overridden by instances.Python methods (including staticmethod() and classmethod())are implemented as non-data descriptors.
Accordingly, instances canredefine and override methods.
This allows individual instances to acquirebehaviors that differ from other instances of the same class.
The property() function is implemented as a data descriptor.Accordingly, instances cannot override the behavior of a property.
``Descriptors'' are objects that describe some attribute of an object.They are found in the dictionary of type objects.
The type object for the built-in descriptor types.New in version 2.2.
PyObject*
New reference. New in version 2.2.
Returns true if the descriptor objects descr describes a dataattribute, or false if it describes a method. descr must be adescriptor object; there is no error checking.New in version 2.2.
3.3.2.3 Invoking Descriptors 3.3.2.2 Implementing Descriptors
The following methods only apply when an instance of the classcontaining the method (a so-called descriptor class) appears inthe class dictionary of another new-style class, known as theowner class.
In the examples below, ``the attribute'' refers tothe attribute whose name is the key of the property in the ownerclass' __dict__.
This method shouldreturn the (computed) attribute value or raise anAttributeError exception.
Called to set the attribute on an instance instance of the ownerclass to a new value, value.
Called to delete the attribute on an instance instance of theowner class.
DialogWindow objects have the following methods besides those ofWindow objects:
Create the dialog window, from the DLOG resource with idresid.
The dialog object is stored in self. wid.
Item number item was hit.
You are responsible for redrawingtoggle buttons, etc.
A dictionary display yields a new dictionary object.
Clashes between duplicate keysare not detected; the last datum (textually rightmost in the display)stored for a given key value prevails.
This subtype of PyObject represents a Python dictionaryobject.
This instance of PyTypeObject represents the Pythondictionary type.
This is exposed to Python programs astypes.DictType and types.DictionaryType.
Returns true if p is a dict object or an instance of asubtype of the dict type.Changed in version 2.2:Allowed subtypes to be accepted.
Return true if p is a dict object, but not an instance of asubtype of the dict type.New in version 2.4.
Return a proxy object for a mapping which enforces read-onlybehavior.
This is normally used to create a proxy to preventmodification of the dictionary for non-dynamic class types.New in version 2.2.
Empties an existing dictionary of all key-value pairs.
Determine if dictionary p contains key.
If an itemin p is matches key, return 1, otherwise return0.
On error, return -1.
This is equivalent to thePython expression "
".New in version 2.4.
Returns a new dictionary that contains the same key-value pairs asp.New in version 1.6.
Inserts value into the dictionary p with a key ofkey.
key must be hashable; if it isn't,TypeError will be raised.Returns 0 on success or -1 on failure.
Inserts value into the dictionary p using key as akey.
key should be a char*.
The key object is createdusing PyString_FromString(key).
Returns 0 onsuccess or -1 on failure.
Removes the entry in dictionary p with key key.key must be hashable; if it isn't, TypeError israised.
Returns 0 on success or -1 on failure.
Removes the entry in dictionary p which has a key specified bythe string key.
Returns 0 on success or -1 onfailure.
Returns the object from dictionary p which has a keykey.
Returns NULL if the key key is not present, butwithout setting an exception.
This is the same as PyDict_GetItem(), but key isspecified as a char*, rather than a PyObject*.
Returns a PyListObject containing all the items from thedictionary, as in the dictionary method items() (see the
).
Returns a PyListObject containing all the keys from thedictionary, as in the dictionary method keys() (see the
Returns a PyListObject containing all the values from thedictionary p, as in the dictionary method values()(see the
Returns the number of items in the dictionary.
This is equivalentto "len(p)" on a dictionary.
Iterate over all key-value pairs in the dictionary p.
Theint referred to by ppos must be initialized to0 prior to the first call to this function to start theiteration; the function returns true for each pair in thedictionary, and false once all pairs have been reported.
Theparameters pkey and pvalue should either point toPyObject* variables that will be filled in with each key andvalue, respectively, or may be NULL.
Any references returned throughthem are borrowed. ppos should not be altered during iteration.Its value represents offsets within the internal dictionary structure,and since the structure is sparse, the offsets are not consecutive.For example:
PyObject *key, *value;int pos = 0;while (PyDict_Next(self-dict, pos, key, value))
{/* do something interesting with the values...
*/...}
The dictionary p should not be mutated during iteration.
Itis safe (since Python 2.1) to modify the values of the keys as youiterate over the dictionary, but only so long as the set of keysdoes not change.
PyObject *a, PyObject *b, int override)
This is the same as PyDict_Merge(a, b, 1) in C,or a.update(b) in Python.
Update or merge into dictionary a, from the key-value pairs inseq2. seq2 must be an iterable object producingiterable objects of length 2, viewed as key-value pairs.
This example compares two texts.
First we set up the texts, sequencesof individual single-line strings ending with newlines (such sequencescan also be obtained from the readlines() method of file-likeobjects): text1 = ''' 1.
'''.splitlines(1) Next we instantiate a Differ object:
d = Differ()
Note that when instantiating a Differ object we may passfunctions to filter out line and character ``junk.'' See theDiffer() constructor for details.Finally, we compare the two: result = list(d.compare(text1, text2))
Note that Differ-generated deltas make no claim to beminimal diffs.
Restricting synch points tocontiguous matches preserves some notion of locality, at theoccasional cost of producing a longer diff.The Differ class has this constructor:
classDiffer
Optional keyword parameters linejunk and charjunk arefor filter functions (or None):
linejunk: A function that accepts a single stringargument, and returns true if the string is junk.
The default isNone, meaning that no line is considered junk.
charjunk: A function that accepts a single character argument(a string of length 1), and returns true if the character is junk.The default is None, meaning that no character isconsidered junk.
Differ objects are used (deltas generated) via a singlemethod:
Compare two sequences of lines, and generate the delta (a sequenceof lines).Each sequence must contain individual single-line strings endingwith newlines.
Such sequences can be obtained from thereadlines() method of file-like objects.
The delta generatedalso consists of newline-terminated strings, ready to be printed as-isvia the writelines() method of a file-like object.
dircmp instances are built using this constructor:
classdircmp
The dircmp class provides the following methods:
Print (to sys.stdout) a comparison between a and b.
Print a comparison between a and b and common immediatesubdirctories.
Print a comparison between a and b and common subdirctories (recursively).
The dircmp offers a number of interesting attributes that maybe used to get various bits of information about the directory treesbeing compared.Note that via __getattr__() hooks, all attributes arecomputed lazilly, so there is no speed penalty if only thoseattributes which are lightweight to compute are used.
Files and subdirectories in a, filtered by hide andignore.
Files and subdirectories in b, filtered by hide andignore.
Files and subdirectories in both a and b.
Files and subdirectories only in a.
Files and subdirectories only in b.
Subdirectories in both a and b.
Files in both a and b
Names in both a and b, such that the type differs betweenthe directories, or names for which os. stat() reports anerror.
Files which are identical in both a and b.
Files which are in both a and b, whose contents differ.
Files which are in both a and b, but could not becompared.
A dictionary mapping names in common_dirs todircmp objects.
2 Directory Structure The source distribution for the standard Python documentationcontains a large number of directories.
While third-party documentsdo not need to be placed into this structure or need to be placedwithin a similar structure, it can be helpful to know where to lookfor examples and tools when developing new documents using thePython documentation tools.
The files are mostly self-explanatory, including aREADME and a Makefile.
The directories fall intothree categories:
Document Sources
The LaTeX sources for each document are placed in aseparate directory.
These directories are given shortnames which vaguely indicate the document in each:
Directory
Document Title
Macintosh Module Reference
What's New in Python 2.4
Format-Specific Output
Most output formats have a directory which contains aMakefile which controls the generation of that formatand provides storage for the formatted documents.
The onlyvariations within this category are the Portable DocumentFormat (PDF) and PostScript versions are placed in thedirectories paper-a4/ and paper-letter/ (thiscauses all the temporary files created by LaTeX to be keptin the same place for each paper size, where they can be moreeasily ignored).
Output Formats
HTML output
GNU info output
iSilodocuments (for Palm OS devices) paper-a4/
PDF and PostScript, US-Letter paper
Supplemental Files
Some additional directories are used to store supplementalfiles used for the various processes.
Directories areincluded for the shared LaTeX document classes, theLaTeX2HTML support, template files for various documentcomponents, and the scripts used to perform various steps inthe formatting processes.
Contents
Document content shared among documents
Support for LaTeX2HTML processing
Example files for source documents
Style implementation for LaTeX
Custom processing scripts
Discussion of the future of the Python documentation and relatedtopics takes place in the Documentation Special Interest Group, or``Doc-SIG.'' Information on the group, including mailing listarchives and subscription information, is available athttp://www.python.org/sigs/doc-sig/.
The SIG is open to allinterested parties.Comments and bug reports on the standard documents should be sentto docs@python.org.
This may include commentsabout formatting, content, grammatical and spelling errors, orthis document.
You can also send comments on this documentdirectly to the author at fdrake@acm.org.
About this document ...
3.
3. Building C and
4.
Building C and 3.1 Distributing your extension modules
When an extension has been successfully build, there are three ways touse it.End-users will typically want to install the module, they do so byrunning
Module maintainers should produce source packages; to do so, they run
Depending on the platform, oneof the following commands can be used to do so.
Building C and
1.4 Distutils-specific terminology The following terms apply more specifically to the domain ofdistributing Python modules using the Distutils:
module distribution
a collection of Python modules distributedtogether as a single downloadable resource and meant to be installeden masse.
Examples of some well-known module distributions areNumeric Python, PyXML, PIL (the Python Imaging Library), ormxBase.
(This would be called a package, except that termis already taken in the Python context: a single module distributionmay contain zero, one, or many Python packages.)
pure module distribution
a module distribution that contains onlypure Python modules and packages.
Sometimes referred to as a ``puredistribution.''
non-pure module distribution
a module distribution that containsat least one extension module.
Sometimes referred to as a ``non-puredistribution.''
distribution root
the top-level directory of your source tree (or source distribution); the directory where setup.py exists.
Generally setup.py will be run from this directory.
Dl objects, as returned by open() above, have thefollowing methods:
Free all resources, except the memory.
Return the pointer for the function named name, as a number, ifit exists in the referenced shared object, otherwise None.
Thisis useful in code like: if a.sym('time'): ... a.call('time')... else: ... time.
time()
(Note that this function will return a non-zero number, as zero is theNULL pointer)
Call the function named name in the referenced shared object.The arguments must be either Python integers, which will be passed as is, Python strings, to which a pointer will be passed, or None, which will be passed as NULL.
Note that strings should only be passed to functions as const char*, asPython will not like its string mutated.There must be at most 10 arguments, and arguments not given will betreated as None.
The function's return value must be a Clong, which is a Python integer.
2.1.1 Adding data and
The Python runtime sees all Python objects as variables of typePyObject*.
A PyObject is not a very magnificentobject - it just contains the refcount and a pointer to the object's``type object''.
This is where the action is; the type objectdetermines which (C) functions get called when, for instance, anattribute gets looked up on an object or it is multiplied by anotherobject.
#include Python.htypedef struct {PyObject_HEAD/* Type-specific fields go here.
Now that's quite a bit to take in at once, but hopefully bits willseem familiar from the last chapter.The first bit that will be new is:
This is what a Noddy object will contain--in this case, nothing morethan every Python object contains, namely a refcount and a pointer to a typeobject.
These are the fields the PyObject_HEAD macro bringsin.
The reason for the macro is to standardize the layout and toenable special debugging fields in debug builds.
Note that there isno semicolon after the PyObject_HEAD macro; one is included inthe macro definition.
Be wary of adding one by accident; it's easy todo from habit, and your compiler might not complain, but someoneelse's probably will!
(On Windows, MSVC is known to call this anerror and refuse to compile the code.)For contrast, let's take a look at the corresponding definition forstandard Python integers:
typedef struct {PyObject_HEADlong ob_ival;} PyIntObject;
Moving on, we come to the crunch -- the type object.
Now if you go and look up the definition of PyTypeObject inobject.h you'll see that it has many more fields that thedefinition above.
The remaining fields will be filled with zeros bythe C compiler, and it's common practice to not specify themexplicitly unless you need them.This is so important that we're going to pick the top of it apart stillfurther:
This line is a bit of a wart; what we'd like to write is:
as the type of a type object is ``type'', but this isn't strictlyconforming C and some compilers complain.
Fortunately, this memberwill be filled in for us by PyType_Ready().
The ob_size field of the header is not used; its presence inthe type structure is a historical artifact that is maintained forbinary compatibility with extension modules compiled for olderversions of Python.
Always set this field to zero.
The name of our type.
This will appear in the default textualrepresentation of our objects and in some error messages, for example:
"" + noddy.new_noddy()Traceback (most recent call last):File "stdin", line 1, in ?TypeError: cannot add type "noddy.Noddy" to string
Note that the name is a dotted name that includes both the module nameand the name of the type within the module.
The module in this case isnoddy and the type is Noddy, so we set the type nameto noddy.Noddy.
This is so that Python knows how much memory to allocate when you callPyObject_New().
Note:If you want your type to be subclassable from Python, and yourtype has the same tp_basicsize as its base type, you mayhave problems with multiple inheritance.
A Python subclass of yourtype will have to list your type first in its __bases__, orelse it will not be able to call your type's __new__ methodwithout getting an error.
You can avoid this problem by ensuringthat your type has a larger value for tp_basicsize thanits base type does.
Most of the time, this will be true anyway,because either your base type will be object, or else you willbe adding data members to your base type, and therefore increasing itssize.
This has to do with variable length objects like lists and strings.Ignore this for now.Skipping a number of type methods that we don't provide, we set theclass flags to Py_TPFLAGS_DEFAULT.
All types should include this constant in their flags.
It enables allof the members defined by the current version of Python.We provide a doc string for the type in tp_doc.
Now we get into the type methods, the things that make your objectsdifferent from the others.
To enable object creation, we have to provide atp_new implementation.
In this case, we can just use thedefault implementation provided by the API functionPyType_GenericNew().
We'd like to just assign this to thetp_new slot, but we can't, for portability sake, On someplatforms or compilers, we can't statically initialize a structuremember with a function defined in another C module, so, instead, we'llassign the tp_new slot in the module initialization functionjust before calling PyType_Ready():
This initializes the Noddy type, filing in a number ofmembers, including ob_type that we initially set to NULL.
This adds the type to the module dictionary.
This allows us to createNoddy instances by calling the Noddy class:
That's it!
All that remains is to build it; put the above code in afile called noddy.c and
in a file called setup.py; then typing
It has nodata and doesn't do anything.
It can't even be subclassed. Subsections
2.1.3 Supporting cyclic garbage
Now that's a lot of methods.
We won't go in the orderthey are defined in the structure, because there is a lot ofhistorical baggage that impacts the ordering of the fields; be sureyour type initialization keeps the fields in the right order!
It'soften easiest to find an example that includes all the fields you need(even if they're initialized to 0) and then change the valuesto suit your new type.
char *tp_name; /* For printing */
The name of the type - as mentioned in the last section, this willappear in various places, almost entirely for diagnostic purposes.Try to choose something that will be helpful in such a situation!
int tp_basicsize, tp_itemsize; /* For allocation */
These fields tell the runtime how much memory to allocate when newobjects of this type are created.
Python has some built-in supportfor variable length structures (think: strings, lists) which is wherethe tp_itemsize field comes in.
This will be dealt withlater.
The DocXMLRPCServer class is derived fromSimpleXMLRPCServer.SimpleXMLRPCServer and provides a means ofcreating self-documenting, stand alone XML-RPC servers.
HTTP POSTrequests are handled as XML-RPC method calls.
HTTP GET requests arehandled by generating pydoc-style HTML documentation.
This allows aserver to provide its own web-based documentation.
Set the title used in the generated HTML documentation.
This titlewill be used inside the HTML "title" element.
Set the name used in the generated HTML documentation.
This name willappear at the top of the generated documentation inside a "h1"element.
Set the description used in the generated HTML documentation.
Thisdescription will appear as a paragraph, below the server name, in thedocumentation.
5.2.6.1 DocTest Objects
5.2.6.2 Example Objects
classDocTest
A collection of doctest examples that should be run in a singlenamespace.
The constructor arguments are used to initialize themember variables of the same names.New in version 2.4.
DocTest defines the following member variables.
They areinitialized by the constructor, and should not be modified directly.
A list of Example objects encoding the individualinteractive Python examples that should be run by this test.
The namespace (aka globals) that the examples should be run in.This is a dictionary mapping names to values.
Any changes to thenamespace made by the examples (such as binding new variables)will be reflected in globs after the test is run.
A string name identifying the DocTest.
Typically, this isthe name of the object or file that the test was extracted from.
The name of the file that this DocTest was extracted from;or None if the filename is unknown, or if theDocTest was not extracted from a file.
The line number within filename where thisDocTest begins, or None if the line number isunavailable.
This line number is zero-based with respect to thebeginning of the file.
The string that the test was extracted from, or `None` if thestring is unavailable, or if the test was not extracted from astring.
5.2.6.3 DocTestFinder objects
5.2.6.4 DocTestParser objects
classDocTestFinder
A processing class used to extract the DocTests that arerelevant to a given object, from its docstring and the docstringsof its contained objects.
DocTests can currently beextracted from the following object types: modules, functions,classes, methods, staticmethods, classmethods, and properties.The optional argument verbose can be used to display theobjects searched by the finder.
DocTestFinder defines the following method:
If name is not specified, then
obj.__name__ is used.The optional parameter module is the module that containsthe given object.
If the module is not specified or is None, thenthe test finder will attempt to automatically determine thecorrect module.
The object's module is used:
As a default namespace, if globs is not specified.
To prevent the DocTestFinder from extracting DocTestsfrom objects that are imported from other modules. (Containedobjects with modules other than module are ignored.)
To find the name of the file containing the object.
To help find the line number of the object within its file.
If module is False, no attempt to find the modulewill be made.
A new shallow copy of the globalsdictionary is created for each DocTest.
If globs isnot specified, then it defaults to the module's __dict__, ifspecified, or {} otherwise.
If extraglobs is notspecified, then it defaults to {}.
5.2.6.5 DocTestRunner objects
classDocTestParser
A processing class used to extract interactive examples from astring, and use them to create a DocTest object.New in version 2.4.
DocTestParser defines the following methods:
Extract all doctest examples from the given string, and collectthem into a DocTest object.
globs, name, filename, and lineno areattributes for the new DocTest object.
See thedocumentation for DocTest for more information.
Extract all doctest examples from the given string, and returnthem as a list of Example objects.
Line numbers are0-based.
The optional argument name is a name identifyingthis string, and is only used for error messages.
Divide the given string into examples and intervening text, andreturn them as a list of alternating Examples and strings.Line numbers for the Examples are 0-based.
The optionalargument name is a name identifying this string, and is onlyused for error messages.
5.2.6.6 OutputChecker objects
classDocTestRunner
A processing class used to execute and verify the interactiveexamples in a DocTest.The comparison between expected outputs and actual outputs is doneby an OutputChecker.
This comparison may be customizedwith a number of option flags; see section5.2.3for more information.
It defaults tosys.stdout.write.
If verbose isTrue, then information is printed about each example, as itis run.
If verbose is False, then only failures areprinted.
If verbose is unspecified, or None, thenverbose output is used iff the command-line switch -vis used.The optional keyword argument optionflags can be used tocontrol how the test runner compares expected output to actualoutput, and how it displays failures.
For more information, seesection5.2.3.
DocTestParser defines the following methods:
example is the example about to be processed. test isthe test containing example. out is the outputfunction that was passed to DocTestRunner.run().
report_success
Report that the given example ran successfully.
This method isprovided to allow subclasses of DocTestRunner to customizetheir output; it should not be called directly.
Report that the given example failed.
This method is provided toallow subclasses of DocTestRunner to customize theiroutput; it should not be called directly.
Report that the given example raised an unexpected exception.This method is provided to allow subclasses ofDocTestRunner to customize their output; it should not becalled directly.
Run the examples in test (a DocTest object), anddisplay the results using the writer function out.The examples are run in the namespace test.globs.
compileflags gives the set of flags that should be used bythe Python compiler when running the examples.
If not specified,then it will default to the set of future-import flags that applyto globs.The output of each example is checked using theDocTestRunner's output checker, and the results areformatted by the DocTestRunner.report_* methods.
Print a summary of all the test cases that have been run by thisDocTestRunner, and return a tuple "(failure_count,test_count)".The optional verbose argument controls how detailed thesummary is.
If the verbosity is not specified, then theDocTestRunner's verbosity is used.
classExample
A single interactive example, consisting of a Python statement andits expected output.
The constructor arguments are used toinitialize the member variables of the same names.New in version 2.4.
Example defines the following member variables.
A string containing the example's source code.
This source codeconsists of a single Python statement, and always ends with anewline; the constructor adds a newline when necessary.
The constructor adds a newline whennecessary.
The exception message generated by the example, if the example isexpected to generate an exception; or None if it is notexpected to generate an exception.
This exception message iscompared against the return value oftraceback.format_exception_only(). exc_msgends with a newline unless it's None.
The constructor addsa newline if needed.
The line number within the string containing this example wherethe example begins.
This line number is zero-based with respectto the beginning of the containing string.
The example's indentation in the containing string, i.e., thenumber of space characters that preceed the example's firstprompt.
A dictionary mapping from option flags to True orFalse, which is used to override default options for thisexample.
Any option flags not contained in this dictionary areleft at their default value (as specified by theDocTestRunner's optionflags).By default, no options are set.
classOutputChecker
A class used to check the whether the actual output from a doctestexample matches the expected output.
OutputCheckerdefines two methods: check_output, which compares a givenpair of outputs, and returns true if they match; andoutput_difference, which returns a string describing thedifferences between two outputs.New in version 2.4.
OutputChecker defines the following methods:
Return True iff the actual output from an example(got) matches the expected output (want).
Thesestrings are always considered to match if they are identical; butdepending on what option flags the test runner is using, severalnon-exact match types are also possible.
Seesection5.2.3 for more information about optionflags.
Return a string describing the differences between the expectedoutput for a given example (example) and the actual output(got). optionflags is the set of option flags used tocompare want and got.
The basic API is a simple wrapper that's intended to make doctest easyto use.
It is fairly flexible, and should meet most users' needs;however, if you require more fine-grained control over testing, orwish to extend doctest's capabilities, then you should use theadvanced API.The advanced API revolves around two container classes, which are usedto store the interactive examples extracted from doctest cases:
Example: A single python statement, paired with itsexpected output.
DocTest: A collection of Examples, typicallyextracted from a single docstring or text file.
Additional processing classes are defined to find, parse, and run, andcheck doctest examples:
DocTestFinder: Finds all docstrings in a given module,and uses a DocTestParser to create a DocTestfrom every docstring that contains interactive examples.
DocTestParser: Creates a DocTest object froma string (such as an object's docstring).
DocTestRunner: Executes the examples in aDocTest, and uses an OutputChecker to verifytheir output.
OutputChecker: Compares the actual output from adoctest example with the expected output, and decides whetherthey match.
The relationships among these processing classes are summarized in thefollowing diagram:
5.2.3.6 Warnings
The functions testmod() and testfile() provide asimple interface to doctest that should be sufficient for most basicuses.
For a less formal introduction to these two functions, seesections 5.2.1 and5.2.2.
All arguments except filename are optional, and should bespecified in keyword form.Test examples in the file named filename.
Return"(failure_count, test_count)".Optional argument module_relative specifies how the filenameshould be interpreted:
If module_relative is True (the default), thenfilename specifies an OS-independent module-relativepath.
By default, this path is relative to the callingmodule's directory; but if the package argument isspecified, then it is relative to that package.
To ensureOS-independence, filename should use / charactersto separate path segments, and may not be an absolute path(i.e., it may not begin with /).
If module_relative is False, then filenamespecifies an OS-specific path.
The path may be absolute orrelative; relative paths are resolved with respect to thecurrent working directory.
Optional argument name gives the name of the test; by default,or if None, os.path.basename(filename) is used.Optional argument package is a Python package or the name of aPython package whose directory should be used as the base directoryfor a module-relative filename.
If no package is specified, thenthe calling module's directory is used as the base directory formodule-relative filenames.
This works likedict.update(): if globs and extraglobs have acommon key, the associated value in extraglobs appears in thecombined dict. By default, or if None, no extra globals areused.
This is an advanced feature that allows parameterization ofdoctests.
argv.Optional argument report prints a summary at the end when true,else prints nothing at the end.
Seesection5.2.3.Optional argument raise_on_error defaults to false.
If true,an exception is raised upon the first failure or unexpected exceptionin an example.
Itdefaults to a normal parser (i.e.,
DocTestParser()).
m.__doc__.Also test examples reachable from dict
m.__name__ is used.Optional argument exclude_empty defaults to false.
m.__dict__.Optional argument isprivate specifies a function used todetermine whether a name is private.
Deprecated since release 2.4.
isprivate was a stupid idea - don't use it.If you need to skip tests based on name, filter the list returned byDocTestFinder.find() instead.
Changed in version 2.3:The parameter optionflags was added.
Changed in version 2.4:The parameters extraglobs, raise_on_errorand exclude_empty were added.
There's also a function to run the doctests associated with a single object.This function is provided for backward compatibility.
There are no plansto deprecate it, but it's rarely useful:
)
By default, output is generated only in caseof an example failure.Optional argument compileflags gives the set of flags that shouldbe used by the Python compiler when running the examples.
By default, orif None, flags are deduced corresponding to the set of futurefeatures found in globs.Optional argument optionflags works as for functiontestfile() above.
5.2.8 Soapbox
Doctest provides several mechanisms for debugging doctest examples:
Several functions convert doctests to executable Pythonprograms, which can be run under the Python debugger,
.
The
cases generated by DocTestSuite()support the debug() method defined by
.TestCase. You can add a call to
.set_trace() in adoctest example, and you'll drop into the Python debugger when thatline is executed.
Then you can inspect current values of variables,and so on.
For example, suppose a.py contains just thismodule docstring:
Then an interactive Python session may look like this:
Changed in version 2.4:The ability to use
.set_trace()usefully inside doctests was added.
Functions that convert doctests to Python code, and possibly runthe synthesized code under the debugger:
Convert text with examples to a script.Argument s is a string containing doctest examples.
The stringis converted to a Python script, where doctest examples in sare converted to regular code, and everything else is converted toPython comments.
The generated script is returned as a string.For example,
import doctestprint doctest.script_from_examples(r"""Set x and y to 1 and 2. x, y = 1, 2Print their sum: print x+y3""")
displays:
# Set x and y to 1 and 2.x, y = 1, 2## Print their sum:print x+y# Expected:## 3
This function is used internally by other functions (see below), butcan also be useful when you want to transform an interactive Pythonsession into a Python script.
Convert the doctest for an object to a script.Argument module is a module object, or dotted name of a module,containing the object whose doctests are of interest.
Argumentname is the name (within the module) of the object with thedoctests of interest.
The result is a string, containing theobject's docstring converted to a Python script, as described forscript_from_examples() above.
For example, if modulea.py contains a top-level function f(), then
prints a script version of function f()'s docstring,with doctests converted to code, and the rest placed in comments.
Debug the doctests for an object.The module and name arguments are the same as for functiontestsource() above.
The synthesized Python script for thenamed object's docstring is written to a temporary file, and then thatfile is run under the control of the Python debugger,
module.__dict__ is used for both localand global execution context.Optional argument pm controls whether post-mortem debugging isused.
If pm has a true value, the script file is run directly, andthe debugger gets involved only if the script terminates via raising anunhandled exception.
If it does, then post-mortem debugging is invoked,via
.post_mortem(), passing the traceback objectfrom the unhandled exception.
If pm is not specified, or is false,the script is run under the debugger from the start, via passing anappropriate execfile() call to
.run().
Changed in version 2.4:The pm argument was added.
)
If not specified, or None,an empty dictionary is used.
If specified, a shallow copy of thedictionary is used.
The DebugRunner class, and the special exceptions it may raise,are of most interest to testing framework authors, and will only besketched here. See the source code, and especially DebugRunner'sdocstring (which is a doctest!) for more details:
classDebugRunner
A subclass of DocTestRunner that raises an exception assoon as a failure is encountered.
If an unexpected exceptionoccurs, an UnexpectedException exception is raised,containing the test, the example, and the original exception.
There are two exceptions that may be raised by DebugRunnerinstances:
exceptionDocTestFailure
An exception thrown by DocTestRunner to signal that adoctest example's actual output did not match its expected output.The constructor arguments are used to initialize the membervariables of the same names.
DocTestFailure defines the following member variables:
The DocTest object that was being run when the example failed.
The Example that failed.
The example's actual output.
exceptionUnexpectedException
An exception thrown by DocTestRunner to signal that adoctest example raised an unexpected exception.
The constructorarguments are used to initialize the member variables of the samenames.
UnexpectedException defines the following member variables:
A tuple containing information about the unexpected exception, asreturned by sys.exc_info().
5.2.3.2 How are Docstring Examples Recognized?
5.2.3.1 Which Docstrings Are
5.2.3.3 What's the Execution
5.2.3.2 How are Docstring ExamplesRecognized?
In most cases a copy-and-paste of an interactive console session worksfine, but doctest isn't trying to do an exact emulation of any specificPython shell.
All hard tab characters are expanded to spaces, using8-column tab stops.
If you don't believe tabs should mean that, toobad: don't use hard tabs, or write your own DocTestParserclass.
Changed in version 2.4:Expanding tabs to spaces is new; previous versionstried to preserve hard tabs, with confusing results.
Expected output cannot contain an all-whitespace line, since such aline is taken to signal the end of expected output.
Output to stdout is captured, but not output to stderr (exceptiontracebacks are captured via a different means).
If you continue a line via backslashing in an interactive session,or for any other reason use a backslash, you should use a rawdocstring, which will preserve your backslashes exactly as you typethem:
Otherwise, the backslash will be interpreted as part of the string.For example, the "" above would be interpreted as anewline character.
Alternatively, you can double each backslash in thedoctest version (and not use a raw string):
The starting column doesn't matter:
and as many leading whitespace characters are stripped from theexpected output as appeared in the initial '' linethat started the example.
5.2.3 How It Works
5.2.2 Simple Usage: Checking
This section examines in detail how doctest works: which docstrings itlooks at, how it finds interactive examples, what execution context ituses, how it handles exceptions, and how option flags can be used tocontrol its behavior.
5.2.3.5 Option Flags and Directives
5.2.3.4 What About Exceptions?
5.2.3 How It Works
A number of option flags control various aspects of doctest'sbehavior.
Symbolic names for the flags are supplied as module constants,which can be or'ed together and passed to various functions.
By default, if an expected output block contains just 1,an actual output block containing just 1 or justTrue is considered to be a match, and similarly for 0versus False.
When DONT_ACCEPT_TRUE_FOR_1 isspecified, neither substitution is allowed.
The default behaviorcaters to that Python changed the return type of many functionsfrom integer to boolean; doctests expecting "little integer"output still work in these cases.
This option will probably goaway, but not for several years.
By default, if an expected output block contains a linecontaining only the string BLANKLINE, then that linewill match a blank line in the actual output.
Because agenuinely blank line delimits the expected output, this isthe only way to communicate that a blank line is expected.
WhenDONT_ACCEPT_BLANKLINE is specified, this substitutionis not allowed. NORMALIZE_WHITESPACE
When specified, all sequences of whitespace (blanks and newlines) aretreated as equal.
When specified, an ellipsis marker (...) in the expected outputcan match any substring in the actual output.
This includessubstrings that span line boundaries, and empty substrings, so it'sbest to keep usage of this simple.
Complicated uses can lead to thesame kinds of "oops, it matched too much!" surprises that .*is prone to in regular expressions.
When specified, an example that expects an exception passes ifan exception of the expected type is raised, even if the exceptiondetail does not match.
For example, an example expecting"ValueError: 42" will pass if the actual exception raised is"ValueError: 3*14", but will fail, e.g., ifTypeError is raised.Note that a similar effect can be obtained using ELLIPSIS,and IGNORE_EXCEPTION_DETAIL may go away when Python releasesprior to 2.4 become uninteresting.
Until then,IGNORE_EXCEPTION_DETAIL is the only clear way to write adoctest that doesn't care about the exception detail yet continuesto pass under Python releases prior to 2.4 (doctest directivesappear to be comments to them).
passes under Python 2.4 and Python 2.3.
The detail changed in 2.4,to say "does not" instead of "doesn't".
A bitmask or'ing together all the comparison flags above.
The second group of options controls how test failures are reported:
When specified, failures that involve multi-line expected andactual outputs are displayed using a unified diff.
When specified, failures that involve multi-line expected andactual outputs will be displayed using a context diff.
When specified, differences are computed by difflib.Differ,using the same algorithm as the popular ndiff.
py utility.This is the only method that marks differences within lines aswell as across lines.
For example, if a line of expected outputcontains digit 1 where actual output contains letter l,a line is inserted with a caret marking the mismatching columnpositions.
When specified, display the first failing example in each doctest,but suppress output for all remaining examples.
This will preventdoctest from reporting correct examples that break because ofearlier failures; but it might also hide incorrect examples thatfail independently of the first failure.
WhenREPORT_ONLY_FIRST_FAILURE is specified, the remainingexamples are still run, and still count towards the total number offailures reported; only the output is suppressed.
A bitmask or'ing together all the reporting flags above.
"Doctest directives" may be used to modify the option flags forindividual examples.
Doctest directives are expressed as a specialPython comment following an example's source code:
Whitespace is not allowed between the + or - and thedirective option name.
The directive option name can be any of theoption flag names explained above.An example's doctest directives modify doctest's behavior for thatsingle example.
Use + to enable the named behavior, or- to disable it.For example, this test passes:
Without the directive it would fail, both because the actual outputdoesn't have two blanks before the single-digit list elements, andbecause the actual output is on a single line.
This test also passes,and also requires a directive to do so:
Multiple directives can be used on a single physical line, separatedby commas:
If multiple directive comments are used for a single example, thenthey are combined:
As the previous example shows, you can add "..." lines to yourexample containing only directives.
This can be useful when anexample is too long for a directive to comfortably fit on the sameline:
Note that since all options are disabled by default, and directives applyonly to the example they appear in, enabling options (via + in adirective) is usually the only meaningful choice.
However, option flagscan also be passed to functions that run doctests, establishing differentdefaults.
In such cases, disabling an option via - in a directivecan be useful.
Changed in version 2.4:Constants DONT_ACCEPT_BLANKLINE,NORMALIZE_WHITESPACE, ELLIPSIS,IGNORE_EXCEPTION_DETAIL,REPORT_UDIFF, REPORT_CDIFF,REPORT_NDIFF, REPORT_ONLY_FIRST_FAILURE,COMPARISON_FLAGS and REPORTING_FLAGSwere added; by default BLANKLINE in expected outputmatches an empty line in actual output; and doctest directiveswere added.
There's also a way to register new option flag names, although thisisn't useful unless you intend to extend
internalsvia subclassing:
Create a new option flag with a given name, and return the newflag's integer value. register_optionflag() can beused when subclassing OutputChecker orDocTestRunner to create new options that are supported byyour subclasses. register_optionflag should always becalled using the following idiom:
MY_FLAG = register_optionflag('MY_FLAG')
5.2.1 Simple Usage: Checking
Another simple application of doctest is testing interactive examplesin a text file.
This can be done with the testfile()function:
That short script executes and verifies any interactive Pythonexamples contained in the file example.txt.
The file contentis treated as if it were a single giant docstring; the file doesn'tneed to contain a Python program! For example, perhaps example.txtcontains this:
Running doctest.testfile("example.txt") then finds the errorin this documentation:
As with testmod(), testfile() won't display anythingunless an example fails.
If an example does fail, then the failingexample(s) and the cause(s) of the failure(s) are printed to stdout, usingthe same format as testmod().By default, testfile() looks for files in the callingmodule's directory.
The simplest way to start using doctest (but not necessarily the wayyou'll continue to do it) is to end each module M with:
and a detailed report of all examples tried is printed to standardoutput, along with assorted summaries at the end.You can force verbose mode by passing verbose=True totestmod(), orprohibit it by passing verbose=False.
5.3 unittest
As mentioned in the introduction,
has grown to havethree primary uses:
Checking examples in docstrings.
Regression testing.
Executable documentation / literate testing.
These uses have different requirements, and it is important todistinguish them.
Examples should add genuine value to thedocumentation.
A good example can often be worth many words.If done with care, the examples will be invaluable for your users, andwill pay back the time it takes to collect them many times over as theyears go by and things change.
examples stops working after a "harmless"change.Doctest also makes an excellent tool for regression testing, especially ifyou don't skimp on explanatory text.
By interleaving prose and examples,it becomes much easier to keep track of what's actually being tested, andwhy.
When a test fails, good prose can make it much easier to figure outwhat the problem is, and how it should be fixed.
It's true that you couldwrite extensive comments in code-based testing, but few programmers do.Many have found that using doctest approaches instead leads to much clearertests.
Perhaps this is simply because doctest makes writing prose a littleeasier than writing code, while writing comments in code is a littleharder.
I think it goes deeper than just that: the natural attitudewhen writing a doctest-based test is that you want to explain the finepoints of your software, and illustrate them with examples.
This inturn naturally leads to test files that start with the simplest features,and logically progress to complications and edge cases.
A coherentnarrative is the result, instead of a collection of isolated functionsthat test isolated bits of functionality seemingly at random.
Thereare several options for organizing tests:
Write text files containing test cases as interactive examples,and test the files using testfile() orDocFileSuite().
Define functions named _regrtest_topic
thatconsist of single docstrings, containing test cases for thenamed topics.
These functions can be included in the same fileas the module, or separated out into a separate test file.
Define a __test__ dictionary mapping from regression testtopics to docstrings containing test cases.
As your collection of doctest'ed modules grows, you'll want a way to runall their doctests systematically.
Prior to Python 2.4,
had a barely documented Tester class that supplied a rudimentaryway to combine doctests from multiple modules.
Tester was feeble,and in practice most serious Python testing frameworks build on the
module, which supplies many flexible ways to combinetests from multiple sources.
So, in Python 2.4,
These test suites can then berun using
test runners:
There are two main functions for creating
.TestSuiteinstances from text files and modules with doctests:
Convert doctest tests from one or more text files to a
.TestSuite.The returned
.TestSuite is to be run by theunittest framework and runs the interactive examples in each file.
If module_relative is True (the default), theneach filename specifies an OS-independent module-relativepath.
To ensureOS-independence, each filename should use / charactersto separate path segments, and may not be an absolute path(i.e., it may not begin with /).
If module_relative is False, then each filenamespecifies an OS-specific path.
Optional argument package is a Python package or the nameof a Python package whose directory should be used as the basedirectory for module-relative filenames.
If no package isspecified, then the calling module's directory is used as the basedirectory for module-relative filenames.
It is an error to specifypackage if module_relative is False.Optional argument setUp specifies a set-up function forthe test suite.
This is called before running the tests in eachfile.
The setUp function will be passed a DocTestobject.
The setUp function can access the test globals as theglobs attribute of the test passed.Optional argument tearDown specifies a tear-down functionfor the test suite.
This is called after running the tests in eachfile.
The tearDown function will be passed a DocTestobject.
The setUp function can access the test globals as theglobs attribute of the test passed.Optional argument globs is a dictionary containing theinitial global variables for the tests.
A new copy of thisdictionary is created for each test.
By default, globs isa new empty dictionary.Optional argument optionflags specifies the defaultdoctest options for the tests, created by or-ing togetherindividual option flags.
Itdefaults to a normal parser (i.e.,
Convert doctest tests for a module to a
.TestSuite.The returned
.TestSuite is to be run by theunittest framework and runs each doctest in the module.
If any of thedoctests fail, then the synthesized unit test fails, and afailureException exception is raised showing the name of thefile containing the test and a (sometimes approximate) line number.Optional argument module provides the module to be tested.
Itcan be a module object or a (possibly dotted) module name.
If notspecified, the module calling this function is used.Optional argument globs is a dictionary containing theinitial global variables for the tests.
By default, globs isa new empty dictionary.Optional argument extraglobs specifies an extra set ofglobal variables, which is merged into globs.
Changed in version 2.4:The parameters globs, extraglobs,test_finder, setUp, tearDown, andoptionflags were added; this function now uses the same searchtechnique as testmod().
Under the covers, DocTestSuite() creates a
.TestSuite out of doctest.DocTestCaseinstances, and DocTestCase is a subclass of
.TestCase.
DocTestCase isn't documentedhere (it's an internal detail), but studying its code can answer questionsabout the exact details of
integration.Similarly, DocFileSuite() creates a
This is important for a subtle reason:when you run
functions yourself, you can control the
options in use directly, by passing option flags to
functions.
However, if you're writing a
framework,
ultimately controlswhen and how tests get run.
The framework author typically wants tocontrol
reporting options (perhaps, e.g., specified bycommand line options), but there's no way to pass options through
to
test runners.For this reason,
doctest also supports a notion of
reporting flags specific to
support, via this function:
reporting flags to use.Argument flags or's together option flags.
Seesection5.2.3.
Only "reporting flags" can be used.This is a module-global setting, and affects all future doctests run bymodule
: the runTest() method ofDocTestCase looks at the option flags specified for the test casewhen the DocTestCase instance was constructed.
If no reportingflags were specified (which is the typical and expected case),
's
reporting flags are or'ed intothe option flags, and the option flags so augmented are passed to theDocTestRunner instance created to run the doctest.
If anyreporting flags were specified when the DocTestCase instance wasconstructed,
reporting flagsare ignored.The value of the
reporting flags in effect before thefunction was called is returned by the function.
5.2.3.5 Option Flags and
doctest is serious about requiring exact matches in expectedoutput.
If even a single character doesn't match, the test fails.
Thiswill probably surprise you a few times, as you learn exactly what Pythondoes and doesn't guarantee about output.
For example, when printing adict, Python doesn't guarantee that the key-value pairs will be printedin any particular order, so a test like
is vulnerable! One workaround is to do
instead.
Another is to do
d = foo().items() d.sort() d[('Harry', 'broomstick'), ('Hermione', 'hippogryph')]
There are others, but you get the idea.Another bad idea is to print things that embed an object address, like
The ELLIPSIS directive gives a nice approach for the lastexample:
Floating-point numbers are also subject to small output variations acrossplatforms, because Python defers to the platform C library for floatformatting, and C libraries vary widely in quality here.
Numbers of the form I/2.**J are safe across all platforms, and Ioften contrive doctest examples to produce numbers of that form:
Simple fractions are also easier for people to understand, and that makesfor better documentation.
5.2.3.1 Which Docstrings Are Examined?
5.2.3.2 How are Docstring
The module docstring, and all function, class and method docstrings aresearched.
Objects imported into the module are not searched.In addition, if M.__test__ exists and "is true", it must be adict, and each entry maps a (string) name to a function object, classobject, or string.
Function and class object docstrings found fromM.__test__ are searched, and strings are treated as if theywere docstrings.
In output, a key K in M.__test__ appearswith name
name of M.__test__.K
Any classes found are recursively searched similarly, to test docstrings intheir contained methods and nested classes.
Changed in version 2.4:A "private name" concept is deprecated and no longerdocumented.
13.6.3.2 Accessor Methods
13.6.3.1 Type Mapping
The mapping from OMG IDL to Python defines accessor functions for IDLattribute declarations in much the way the Java mappingdoes.
Mapping the IDL declarations
yields three accessor functions: a ``get'' method forsomeValue (_get_someValue()), and ``get'' and``set'' methods foranotherValue (_get_anotherValue() and_set_anotherValue()).
The mapping, in particular, does notrequire that the IDL attributes are accessible as normal Pythonattributes:
object.someValue is not required towork, and may raise an AttributeError.The Python DOM API, however, does require that normal attributeaccess work.
This means that the typical surrogates generated byPython IDL compilers are not likely to work, and wrapper objects maybe needed on the client if the DOM objects are accessed via CORBA.While this does require some additional consideration for CORBA DOMclients, the implementers with experience using DOM over CORBA fromPython do not consider this a problem.
Attributes that are declaredreadonly may not restrict write access in all DOMimplementations.Additionally, the accessor functions are not required.
If provided,they should take the form defined by the Python IDL mapping, butthese methods are considered unnecessary since the attributes areaccessible directly from Python.
``Set'' accessors should never beprovided for readonly attributes.
13.6.2.7 Attr Objects
13.6.2.6 Element Objects
13.6.2 Objects in the
Attr inherits from Node, so inherits all itsattributes.
The part of the name following the colon if there is one, else theentire name. This is a read-only attribute.
The part of the name preceding the colon if there is one, else theempty string.
13.6.2.9 Comment Objects
NamedNodeMap does not inherit from Node.
The length of the attribute list.
Return an attribute with a particular index.
The order you get theattributes in is arbitrary but will be consistent for the life of aDOM.
Each item is an attribute node.
Get its value with thevalue attribbute.
There are also experimental methods that give this class more mappingbehavior.
You can use them or you can use the standardizedgetAttribute*() family of methods on the Elementobjects.
13.6.2.10 Text and CDATASection
Comment represents a comment in the XML document.
It is asubclass of Node, but cannot have child nodes.
The content of the comment as a string.
- and trailing-
-, but does not include them.
13.6.2.12 Exceptions
13.6.2.5 Document Objects
13.6.2.4 DocumentType Objects
A Document represents an entire XML document, including itsconstituent elements, attributes, processing instructions, commentsetc.
Remeber that it inherits properties from Node.
The one and only root element of the document.
Create and return a new element node.
The element is not insertedinto the document when it is created.
You need to explicitly insertit with one of the other methods such as insertBefore() orappendChild().
Create and return a new element with a namespace.
ThetagName may have a prefix.
The element is not inserted into thedocument when it is created.
You need to explicitly insert it withone of the other methods such as insertBefore() orappendChild().
Create and return a text node containing the data passed as aparameter.
As with the other creation methods, this one does notinsert the node into the tree.
Create and return a comment node containing the data passed as aparameter.
Create and return a processing instruction node containing thetarget and data passed as parameters.
As with the othercreation methods, this one does not insert the node into the tree.
Create and return an attribute node.
This method does not associatethe attribute node with any particular element.
You must usesetAttributeNode() on the appropriate Element objectto use the newly created attribute instance.
Create and return an attribute node with a namespace.
This method does not associate theattribute node with any particular element.
Search for all descendants (direct children, children's children,etc.) with a particular element type name.
Search for all descendants (direct children, children's children,etc.) with a particular namespace URI and localname.
The localname isthe part of the namespace after the prefix.
13.6.2.3 NodeList Objects
Information about the notations and entities declared by a document(including the external subset if the parser uses it and can providethe information) is available from a DocumentType object.
TheDocumentType for a document is available from theDocument object's doctype attribute; if there is noDOCTYPE declaration for the document, the document'sdoctype attribute will be set to None instead of aninstance of this interface.
DocumentType is a specialization of Node, and adds thefollowing attributes:
The public identifier for the external subset of the document typedefinition.
This will be a string or None.
The system identifier for the external subset of the document typedefinition.
This will be a URI as a string, or None.
A string giving the complete internal subset from the document.This does not include the brackets which enclose the subset.
If thedocument has no internal subset, this should be None.
The name of the root element as given in the DOCTYPEdeclaration, if present.
This is a NamedNodeMap giving the definitions of externalentities.
For entity names defined more than once, only the firstdefinition is provided (others are ignored as required by the XMLrecommendation).
This may be None if the information is notprovided by the parser, or if no entities are defined.
This is a NamedNodeMap giving the definitions of notations.For notation names defined more than once, only the first definitionis provided (others are ignored as required by the XMLrecommendation).
This may be None if the information is notprovided by the parser, or if no notations are defined.
Element is a subclass of Node, so inherits all theattributes of that class.
The element type name.
In a namespace-using document it may havecolons in it.
The value is a string.
Same as equivalent method in the Document class.
Return an attribute value as a string.
Return the Attr node for the attribute named byattrname.
Return an attribute value as a string, given a namespaceURI andlocalName.
Return an attribute value as a node, given a namespaceURI andlocalName.
Remove an attribute by name.
No exception is raised if there is nomatching attribute.
Remove and return oldAttr from the attribute list, if present.If oldAttr is not present, NotFoundErr is raised.
Note that it uses a localName, not aqname.
No exception is raised if there is no matching attribute.
Set an attribute value from a string.
Add a new attibute node to the element, replacing an existingattribute if necessary if the name attribute matches.
If areplacement occurs, the old attribute node will be returned.
IfnewAttr is already in use, InuseAttributeErr will beraised.
Add a new attibute node to the element, replacing an existingattribute if necessary if the namespaceURI andlocalName attributes match.
If a replacement occurs, the oldattribute node will be returned.
If newAttr is already in use,InuseAttributeErr will be raised.
Set an attribute value from a string, given a namespaceURI and aqname.
Note that a qname is the whole attribute name. This isdifferent than above.
13.7.3 minidom and the
This example program is a fairly realistic example of a simpleprogram.
In this particular case, we do not take much advantageof the flexibility of the DOM.
13.6.2.11 ProcessingInstruction Objects
New in version 2.1.
The implementations must raisethe appropriate specific exception, each of which carries theappropriate value for the code attribute.
Base exception class used for all specific DOM exceptions.
Thisexception class cannot be directly instantiated.
Raised when a specified range of text does not fit into a string.This is not known to be used in the Python DOM implementations, butmay be received from DOM implementations not written in Python.
Raised when an attempt is made to insert a node where the node typeis not allowed.
Raised when an index or size parameter to a method is negative orexceeds the allowed values.
Raised when an attempt is made to insert an Attr node thatis already present elsewhere in the document.
Raised if a parameter or an operation is not supported on theunderlying object.
This exception is raised when a string parameter contains acharacter that is not permitted in the context it's being used in bythe XML 1.0 recommendation.
For example, attempting to create anElement node with a space in the element type name willcause this error to be raised.
Raised when an attempt is made to modify the type of a node.
Raised when an attempt is made to use an object that is not defined or is nolonger usable.
recommendation, this exception is raised.
Exception when a node does not exist in the referenced context.
Forexample, NamedNodeMap.removeNamedItem() will raise this ifthe node passed in does not exist in the map.
Raised when the implementation does not support the requested typeof object or operation.
This is raised if data is specified for a node which does notsupport data.
Raised on attempts to modify an object where modifications are notallowed (such as for read-only nodes).
Raised when an invalid or illegal string is specified.
Raised when a node is inserted in a different document than itcurrently belongs to, and the implementation does not supportmigrating the node from one document to the other.
The exception codes defined in the DOM recommendation map to theexceptions described above according to this table:
Exception
13.6.2.1 DOMImplementation Objects
13.6.2.2 Node Objects
The DOMImplementation interface provides a way forapplications to determine the availability of particular features inthe DOM they are using.
DOM Level2 added the ability to create newDocument and DocumentType objects using theDOMImplementation as well.
The definition of the DOM API for Python is given as part of the
module documentation.
.
Break internal references within the DOM so that it will be garbagecollected on versions of Python without cyclic GC.
Even when cyclicGC is available, using this can make large amounts of memory availablesooner, so calling this on DOM objects as soon as they are no longerneeded is good practice.
This only needs to be called on theDocument object, but may be called on child nodes to discardchildren of that node.
Write XML to the writer object.
The writer should have awrite() method which matches that of the file objectinterface.
The indent parameter is the indentation of the currentnode.
The addindent parameter is the incremental indentation to usefor subnodes of the current one.
The newl parameter specifies thestring to use to terminate newlines.
Changed in version 2.1:The optional keyword parametersindent, addindent, and newl were added to support prettyoutput.
Changed in version 2.3:For the Document node, an additional keywordargument encoding can be used to specify the encoding field of the XMLheader.
Return the XML that the DOM represents as a string.With no argument, the XML header does not specify an encoding, and theresult is Unicode string if the default encoding cannot represent allcharacters in the document.
Encoding this string in an encoding otherthan UTF-8 is likely incorrect, since UTF-8 is the default encoding ofXML.With an explicit encoding argument, the result is a byte stringin the specified encoding.
It is recommended that this argument isalways specified.
To avoid UnicodeError exceptions in case ofunrepresentable text data, the encoding argument should be specifiedas "utf-8".
Changed in version 2.3:the encoding argument was introduced.
Return a pretty-printed version of the document. indent specifiesthe indentation string and defaults to a tabulator; newl specifiesthe string emitted at the end of each line and defaults to n.
Changed in version 2.3:the encoding argument; see toxml().
The following standard DOM methods have special considerations with
:
Although this method was present in the version of
packaged with Python 2.0, it was seriouslybroken.
This has been corrected for subsequent releases.
Represents a processing instruction in the XML document; this inheritsfrom the Node interface and cannot have child nodes.
The content of the processing instruction up to the first whitespacecharacter.
This is a read-only attribute.
The content of the processing instruction following the firstwhitespace character.
13.6.2.10 Text and CDATASection Objects
The Text interface represents text in the XML document.
Ifthe parser and DOM implementation support the DOM's XML extension,portions of the text enclosed in CDATA marked sections are stored inCDATASection objects.
These two interfaces are identical, butprovide different values for the nodeType attribute.These interfaces extend the Node interface.
They cannot havechild nodes.
The content of the text node as a string.
Note:The use of a CDATASection node does not indicate that thenode represents a complete CDATA marked section, only that thecontent of the node was part of a CDATA section.
A single CDATAsection may be represented by more than one node in the documenttree.
There is no way to determine whether two adjacentCDATASection nodes represent different CDATA markedsections.
The primitive IDL types used in the DOM specification are mapped toPython types according to the following table.
IDL Type
Python Type
IntegerType (with a value of 0 or 1)
Additionally, the DOMString defined in the recommendation ismapped to a Python string or Unicode string.
Applications shouldbe able to handle Unicode whenever a string is returned from the DOM.The IDL null value is mapped to None, which may beaccepted or provided by the implementation whenever null isallowed by the API.
DTDHandler instances provide the following methods:
Handle a notation declaration event.
Handle an unparsed entity declaration event.
In addition to the methods provided by the UserDict.DictMixin class,dumbdbm objects provide the following methods.
Synchronize the on-disk directory and data files.
This method is called bythe sync method of Shelve objects.
4.1 Naming and binding
There are several cases where Python statements are illegal whenused in conjunction with nested scopes that contain freevariables.If a variable is referenced in an enclosing scope, it is illegalto delete the name.
An error will be reported at compile time.If the wild card form of import -- "import *"
-- is used in afunction and the function contains or is a nested block with freevariables, the compiler will raise a SyntaxError.If exec is used in a function and the function contains oris a nested block with free variables, the compiler will raise aSyntaxError unless the exec explicitly specifies the localnamespace for the exec.
Names may be resolved in thelocal and global namespaces of the caller.
Free variables are notresolved in the nearest enclosing namespace, but in the globalnamespace.
The exec statement and the eval() andexecfile() functions have optional arguments to overridethe global and local namespace.
If only one namespace is specified,it is used for both.
Footnotes ...namespace.
This limitation occurs because the code that isexecuted by these operations is not available at the time themodule is compiled.
4. Building C and
Unix and Windows use completely different paradigms for run-timeloading of code.
Before you try to build a module that can bedynamically loaded, be aware of how your system works.In Unix, a shared object (.so) file contains code to be used by theprogram, and also the names of functions and data that it expects tofind in the program.
When the file is joined to the program, allreferences to those functions and data in the file's code are changedto point to the actual locations in the program where the functionsand data are placed in memory.
This is basically a link operation.In Windows, a dynamic-link library (.dll) file has no danglingreferences.
Instead, an access to functions or data goes through alookup table.
During the linkstep to create a shared object file (.so), the linker may findthat it doesn't know where an identifier is defined.
The linker willlook for it in the object files in the libraries; if it finds it, itwill include all the code from that object file.In Windows, there are two types of library, a static library and animport library (both called .lib).
A static library is like aUnix .a file; it contains code to be included as necessary.An import library is basically used only to reassure the linker that acertain identifier is legal, and will be present in the program whenthe DLL is loaded.
So the linker uses the information from theimport library to build the lookup table for using identifiers thatare not included in the DLL.
In Windows, building A.dll will also buildA.lib.
You do pass A.lib to the linker for B andC.
A.lib does not contain code; it just contains informationwhich will be used at runtime to access A's code.
In Windows, using an import library is sort of like using "importspam"; it gives you access to spam's names, but does not create aseparate copy.
On Unix, linking with a library is more like"from spam import *"; it does create a separate copy.
6.27.1 Background, details, hints,
6.27.3 Access to message
Extension modules should never call setlocale(), except tofind out what the current locale is.
But since the return value canonly be used portably to restore it, that is not very useful (exceptperhaps to find out whether or not the locale is "C").When Python code uses the locale module to change the locale,this also affects the embedding application.
If the embeddingapplication doesn't want this to happen, it should remove the_locale extension module (which does all the work) from thetable of built-in modules in the config.c file, and make surethat the _locale module is not accessible as a shared library.
The one important task that only embedders (as opposed to extensionwriters) of the Python interpreter have to worry about is theinitialization, and possibly the finalization, of the Pythoninterpreter.
.This initializes the table of loaded modules, and creates thefundamental modules __builtin__
,and exceptions.
It also initializesthe module search path (sys.path).
Py_Initialize() does not set the ``script argument list'' (sys.argv).
If this variable is needed by Python code that will be executed later, it must be set explicitly with a call to PySys_SetArgv(argc,argv)
subsequent to the call toPy_Initialize().On most systems (in particular, on Unix and Windows, although thedetails are slightly different),Py_Initialize() calculates the module search path basedupon its best guess for the location of the standard Pythoninterpreter executable, assuming that the Python library is found in afixed location relative to the Python interpreter executable.
The user can overridethis behavior by setting the environment variable PYTHONHOME,or insert additional directories in front of the standard path bysetting PYTHONPATH.The embedding application can steer the search by calling Py_SetProgramName(file)
before calling Py_Initialize().
Note that PYTHONHOME stilloverrides this and PYTHONPATH is still inserted in front ofthe standard path.
An application that requires total control has toprovide its own implementation ofPy_GetPath()
, andPy_GetProgramFullPath()
(alldefined in Modules/getpath.c).Sometimes, it is desirable to ``uninitialize'' Python.
The functionPy_IsInitialized()
returnstrue if Python is currently in the initialized state.
Moreinformation about these functions is given in a later chapter.
5. Embedding Python in
It is also possible to embed Python in a C++ program; precisely how thisis done will depend on the details of the C++ system used; in general youwill need to write the main program in C++, and use the C++ compilerto compile and link your program.
There is no need to recompile Pythonitself using C++.
If a comment in the first or second line of the Python script matchesthe regular expression coding[=:]s*([-w.]+), this comment isprocessed as an encoding declaration; the first group of thisexpression names the encoding of the source code file. The recommendedforms of this expression are
# -*- coding: encoding-name -*- which is recognized also by GNU Emacs, and
which is recognized by Bram Moolenaar's VIM.
The encoding is used for all lexical analysis, in particular to findthe end of a string, and to interpret the contents of Unicode literals.String literals are converted to Unicode for syntactical analysis,then converted back to their original encoding before interpretationstarts.
The encoding declaration must appear on a line of its own.
Resolve the system identifier of an entity and return either thesystem identifier to read from as a string, or an InputSource toread from.
The default implementation returns systemId.
1.3 Back to the
An important convention throughout the Python interpreter is thefollowing: when a function fails, it should set an exception conditionand return an error value (usually a NULL pointer).
Exceptionsare stored in a static global variable inside the interpreter; if thisvariable is NULL no exception has occurred.
A second globalvariable stores the ``associated value'' of the exception (the secondargument to raise).
A third variable contains the stacktraceback in case the error originated in Python code.
These threevariables are the C equivalents of the Python variablessys.exc_type, sys.exc_value and sys.exc_traceback (seethe section on module sys in the
).
Its argumentsare an exception object and a C string.
The exception object isusually a predefined object like PyExc_ZeroDivisionError.
The mostgeneral function is PyErr_SetObject(), which takes two objectarguments, the exception and its associated value.
You don't need toPy_INCREF() the objects passed to any of these functions.You can test non-destructively whether an exception has been set withPyErr_Occurred().
This returns the current exception object,or NULL if no exception has occurred.
It should not call one of thePyErr_*() functions -- one has already been called by g.f's caller is then supposed to also return an error indicationto its caller, again without calling PyErr_*(),and so on -- the most detailed cause of the error was alreadyreported by the function that first detected it.
Once the errorreaches the Python interpreter's main loop, this aborts the currentlyexecuting Python code and tries to find an exception handler specifiedby the Python programmer.(There are situations where a module can actually give a more detailederror message by calling another PyErr_*() function, and insuch cases it is fine to do so.
As a general rule, however, this isnot necessary, and can cause information about the cause of the errorto be lost: most operations can fail for a variety of reasons.)To ignore an exception set by a function call that failed, the exceptioncondition must be cleared explicitly by calling PyErr_Clear().
The only time C code should call PyErr_Clear() is if it doesn'twant to pass the error on to the interpreter but wants to handle itcompletely by itself (possibly by trying something else, or pretendingnothing went wrong).Every failing malloc() call must be turned into anexception -- the direct caller of malloc() (orrealloc()) must call PyErr_NoMemory() andreturn a failure indicator itself.
There arepredeclared C objects corresponding to all built-in Python exceptions,such as PyExc_ZeroDivisionError, which you can use directly.Of course, you should choose exceptions wisely -- don't usePyExc_TypeError to mean that a file couldn't be opened (thatshould probably be PyExc_IOError).
If something's wrong withthe argument list, the PyArg_ParseTuple() function usuallyraises PyExc_TypeError.
If you have an argument whose valuemust be in a particular range or must satisfy other conditions,PyExc_ValueError is appropriate.You can also define a new exception that is unique to your module.For this, you usually declare a static object variable at thebeginning of your file:
and initialize it in your module's initialization function(initspam()) with an exception object (leaving outthe error checking for now):
Note that the Python name for the exception object isspam.error.
The PyErr_NewException() functionmay create a class with the base class being Exception(unless another class is passed in instead of NULL), described in the
under ``Built-inExceptions.''Note also that the SpamError variable retains a reference tothe newly created exception class; this is intentional!
Since theexception could be removed from the module by external code, an ownedreference to the class is needed to ensure that it will not bediscarded, causing SpamError to become a dangling pointer.Should it become a dangling pointer, C code which raises the exceptioncould cause a core dump or other unintended side effects.We discuss the use of PyMODINIT_FUNC as a function return type later in thissample.
Python evaluates expressions from left to right.
Notice that whileevaluating an assignment, the right-hand side is evaluated beforethe left-hand side.In the following lines, expressions will be evaluated in thearithmetic order of their suffixes:
expr1, expr2, expr3, expr4(expr1, expr2, expr3, expr4){expr1: expr2, expr3: expr4}expr1 + expr2 * (expr3 - expr4)func(expr1, expr2, *expr3, **expr4)expr3, expr4 = expr1, expr2
7.5.4.1 Semaphore Example
The wait() method blocks until the flag is true.
classEvent
The internal flag is initially false.
Return true if and only if the internal flag is true.
)
Set the internal flag to true.All threads waiting for it to become true are awakened.Threads that call wait() once the flag is true will not blockat all.
)
Reset the internal flag to false.Subsequently, threads calling wait() will block untilset() is called to set the internal flag to true again.
)
Block until the internal flag is true.If the internal flag is true on entry, return immediately.
Otherwise,block until another thread calls set() to set the flag totrue, or until the optional timeout occurs.When the timeout argument is present and not None, it should be afloating point number specifying a timeout for the operation inseconds (or fractions thereof).
The following function emulates what was the standard import statementup to Python 1.4 (no hierarchical module names).
(Thisimplementation wouldn't work in that version, sincefind_module() has been extended andload_module() has been added in 1.4.)
A more complete example that implements hierarchical module names andincludes a reload()
function can befound in the module knee
.
Theknee module can be found in Demo/imputil/ in thePython source distribution.
6. Registering with the
7.1 Pure Python distribution
The functions described in this chapter will let you handle and raise Pythonexceptions.
It is important to understand some of the basics ofPython exception handling.
It works somewhat like theUnix errno variable: there is a global indicator (perthread) of the last error that occurred.
Most functions don't clearthis on success, but will set it to indicate the cause of the error onfailure.
It is responsible for either handling the error andclearing the exception or returning after cleaning up any resources itholds (such as object references or memory allocations); it shouldnot continue normally if it is not prepared to handle theerror.
If returning due to an error, it is important to indicate tothe caller that an error has been set.
If the error is not handled orcarefully propagated, additional calls into the Python/C API may notbehave as intended and may fail in mysterious ways.The error indicator consists of three Python objects corresponding to
the Python variables sys.exc_type, sys.exc_value andsys.exc_traceback.
API functions exist to interact with theerror indicator in various ways.
There is a separate error indicatorfor each thread.
Print a standard traceback to sys.stderr and clear the errorindicator.
Call this function only when the error indicator isset.
(Otherwise it will cause a fatal error!)
Test whether the error indicator is set.
If set, return theexception type (the first argument to the last call to one ofthe PyErr_Set*() functions or toPyErr_Restore()).
If not set, return NULL.
You donot own a reference to the return value, so you do not need toPy_DECREF() it.
Note:Do not compare the return valueto a specific exception; use PyErr_ExceptionMatches()instead, shown below.
Equivalent to "PyErr_GivenExceptionMatches(PyErr_Occurred(),exc)".
This should only be called when an exception isactually set; a memory access violation will occur if no exceptionhas been raised.
Return true if the given exception matches the exception inexc.
If exc is a class object, this also returns truewhen given is an instance of a subclass.
If exc is atuple, all exceptions in the tuple (and recursively in subtuples)are searched for a match.
If given is NULL, a memory accessviolation will occur.
Under certain circumstances, the values returned byPyErr_Fetch() below can be ``unnormalized'', meaningthat *exc
is a class object but *val
isnot an instance of the same class.
This function can be used toinstantiate the class in that case.
If the values are alreadynormalized, nothing happens.
The delayed normalization isimplemented to improve performance.
Clear the error indicator.
If the error indicator is not set, thereis no effect.
Retrieve the error indicator into three variables whose addressesare passed.
If the error indicator is not set, set all threevariables to NULL.
If it is set, it will be cleared and you own areference to each object retrieved.
The value and traceback objectmay be NULL even when the type object is not.
Note:Thisfunction is normally only used by code that needs to handleexceptions or by code that needs to save and restore the errorindicator temporarily.
Set the error indicator from the three objects.
If the errorindicator is already set, it is cleared first.
If the objects areNULL, the error indicator is cleared.
Do not pass a NULL typeand non-NULL value or traceback.
The exception type should be aclass.
Do not pass an invalid exception type or value.(Violating these rules will cause subtle problems later.)
This calltakes away a reference to each object: you must own a reference toeach object before the call and after the call you no longer ownthese references.
(If you don't understand this, don't use thisfunction.
I warned you.)
This is the most common way to set the error indicator.
The firstargument specifies the exception type; it is normally one of thestandard exceptions, e.g.
PyExc_RuntimeError.
You need notincrement its reference count.
The second argument is an errormessage; it is converted to a string object.
This function is similar to PyErr_SetString() but letsyou specify an arbitrary Python object for the ``value'' of theexception.
Always NULL.
The width.precisionbefore a format code is parsed, but the width part is ignored.
Character
Character, as an int parameter
Number in decimal, as an int parameter
Number in hexadecimal, as an int parameter
A string, as a char * parameter
A hex pointer, as a void * parameter
An unrecognized format character causes all the rest of the formatstring to be copied as-is to the result string, and any extraarguments discarded.
This is a shorthand for "PyErr_SetObject(type,Py_None)".
This is a shorthand for "PyErr_SetString(PyExc_TypeError,message)", where message indicates that a built-inoperation was invoked with an illegal argument.
It is mostly forinternal use.
This is a shorthand for "PyErr_SetNone(PyExc_MemoryError)"; itreturns NULL so an object allocation function can write"return PyErr_NoMemory();" when it runs out of memory.
This is a convenience function to raise an exception when a Clibrary function has returned an error and set the C variableerrno.
It constructs a tuple object whose first item is theinteger errno value and whose second item is thecorresponding error message (gotten fromstrerror()
), and then calls"PyErr_SetObject(type, object)".
On Unix, whenthe errno value is EINTR, indicating aninterrupted system call, this callsPyErr_CheckSignals(), and if that set the errorindicator, leaves it set to that.
The function always returnsNULL, so a wrapper function around a system call can write"return PyErr_SetFromErrno(type);" when the system callreturns an error.
PyObject*
Similar to PyErr_SetFromErrno(), with the additionalbehavior that if filename is not NULL, it is passed to theconstructor of type as a third parameter.
In the case ofexceptions such as IOError and OSError, thisis used to define the filename attribute of the exceptioninstance.
This is a convenience function to raise WindowsError.If called with ierr of 0, the error code returned by acall to GetLastError() is used instead.
PyObject*
Similar to PyErr_SetFromWindowsErr(), with an additionalparameter specifying the exception type to be raised.Availability: Windows.New in version 2.3.
Similar to PyErr_SetFromWindowsErr(), with theadditional behavior that if filename is not NULL, it ispassed to the constructor of WindowsError as a thirdparameter.Availability: Windows.
)
This is a shorthand for "PyErr_SetString(PyExc_TypeError,message)", where message indicates that an internaloperation (e.g. a Python/C API function) was invoked with an illegalargument.
It is mostly for internal use.
Issue a warning message.
It is also possible that the function raises anexception because of a problem with the warning machinery (theimplementation imports the warnings module to do the heavylifting).
The return value is 0 if no exception is raised,or -1 if an exception is raised.
There is no C API for warning control.
Issue a warning message with explicit control over all warningattributes.
This is a straightforward wrapper around the Pythonfunction warnings. warn_explicit(), see there for moreinformation.
The module and registry arguments may beset to NULL to get the default effect described there.
This function interacts with Python's signal handling.
It checkswhether a signal has been sent to the processes and if so, invokesthe corresponding signal handler.
module is supported, this caninvoke a signal handler written in Python.
KeyboardInterrupt exception.
If an exception is raisedthe error indicator is set and the function returns 1;otherwise the function returns 0.
The error indicator may ormay not be cleared if it was previously set.
This function simulates the effect of aSIGINT
signal arriving -- the next timePyErr_CheckSignals() is called,
KeyboardInterrupt will be raised.
It may be calledwithout holding the interpreter lock.
This utility function creates and returns a new exception object.The name argument must be the name of the new exception, a Cstring of the form module.class.
The base anddict arguments are normally NULL.
This creates a classobject derived from the root for all exceptions, the built-in nameException (accessible in C as PyExc_Exception).The __module__ attribute of the new class is set to thefirst part (up to the last dot) of the name argument, and theclass name is set to the last part (after the last dot).
Thebase argument can be used to specify an alternate base class.The dict argument can be used to specify a dictionary of classvariables and methods.
This utility function prints a warning message to sys.stderrwhen an exception has been set but it is impossible for theinterpreter to actually raise the exception.
It is used, forexample, when an exception occurs in an __del__() method.The function is called with a single argument obj thatidentifies the context in which the unraisable exception occurred.The repr of obj will be printed in the warning message.
Subsections
All functions in the Python/C API can raise exceptions, unless an explicit claim is made otherwise in a function's documentation.
In general, when a function encounters an error, it sets an exception, discards any object references that it owns, and returns an error indicator -- usually NULL or -1.
A few functions return a Boolean true/false result, with false indicating an error.Very few functions return no explicit error indicator or have an ambiguous return value, and require explicit testing for errors with PyErr_Occurred()
.Exception state is maintained in per-thread storage (this is equivalent to using global storage in an unthreaded application).
A thread can be in one of two states: an exception has occurred, or not.The function PyErr_Occurred() can be used to check forthis: it returns a borrowed reference to the exception type objectwhen an exception has occurred, and NULL otherwise.
There are anumber of functions to set the exception state:PyErr_SetString()
is the mostcommon (though not the most general) function to set the exceptionstate, and PyErr_Clear()
clears theexception state.The full exception state consists of three objects (all of which can be NULL): the exception type, the corresponding exception value, and the traceback.
These have the same meanings as the Python
sys.exc_info(), which returns the per-thread exception state for Python code.
Also, the semantics of both ways to access the exception state have changed so that a function which catches an exception will save and restore its thread's exception state so as to preserve the exception state of its caller.
This prevents common bugs in exception handling code caused by an innocent-looking function overwriting the exception being handled; it also reduces the often unwanted lifetime extension for objects that are referenced by the stack frames in the traceback.As a general principle, a function that calls another function to perform some task should check whether the called function raised an exception, and if so, pass the exception state on to its caller.
It should discard any object references that it owns, and return an error indicator, but it should not set another exception --that would overwrite the exception that was just raised, and loseimportant information about the exact cause of the error.A simple example of detecting exceptions and passing them on is shownin the sum_sequence()
exampleabove.
It so happens that that example doesn't need to clean up anyowned references when it detects an error.
The following examplefunction shows some error cleanup.
First, to remind you why you likePython, we show the equivalent Python code:
Here is the corresponding C code, in all its glory:
intincr_item(PyObject *dict, PyObject *key){/* Objects all initialized to NULL for Py_XDECREF */PyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;int rv = -1; /* Return value initialized to -1 (failure) */item = PyObject_GetItem(dict, key);if (item == NULL) {/* Handle KeyError only: */if (!PyErr_ExceptionMatches(PyExc_KeyError))goto error;/* Clear the error and use zero: */PyErr_Clear();item = PyInt_FromLong(0L);if (item == NULL)goto error;}const_one = PyInt_FromLong(1L);if (const_one == NULL)goto error;incremented_item = PyNumber_Add(item, const_one);if (incremented_item == NULL)goto error;if (PyObject_SetItem(dict, key, incremented_item) 0)goto error;rv = 0; /* Success *//* Continue with cleanup code */error:/* Cleanup code, shared by success and failure path *//* Use Py_XDECREF() to ignore NULL references */Py_XDECREF(item);Py_XDECREF(const_one);Py_XDECREF(incremented_item);return rv; /* -1 for error, 0 for success */}
This example represents an endorsed use of the goto statement in C! It illustrates the use ofPyErr_ExceptionMatches()
andPyErr_Clear()
tohandle specific exceptions, and the use ofPy_XDECREF()
todispose of owned references that may be NULL (note the"X" in the name; Py_DECREF() would crash whenconfronted with a NULL reference).
It is important that thevariables used to hold owned references are initialized to NULL forthis to work; likewise, the proposed return value is initialized to-1 (failure) and only set to success after the final call madeis successful.
7.
Compound statements
This statement supports dynamic execution of Python code.
The firstexpression should evaluate to either a string, an open file object, ora code object.
If it is a string, the string is parsed as a suite ofPython statements which is then executed (unless a syntax erroroccurs).
If it is an open file, the file is parsed until EOF andexecuted.
If it is a code object, it is simply executed.In all cases, if the optional parts are omitted, the code is executedin the current scope.
If only the first expression after inis specified, it should be a dictionary, which will be used for boththe global and the local variables.
If two expressions are given,they are used for the global and local variables, respectively.If provided, locals can be any mapping object.Changed in version 2.4:formerly locals was required to be a dictionary.
As a side effect, an implementation may insert additional keys intothe dictionaries given besides those corresponding to variable namesset by the executed code.
For example, the current implementationmay add a reference to the dictionary of the built-in module__builtin__ under the key __builtins__ (!).
Programmer's hints:dynamic evaluation of expressions is supported by the built-infunction eval(). The built-in functionsglobals() and locals() return the current globaland local dictionary, respectively, which may be useful to pass aroundfor use by exec.
Subsections 4.1 Naming and binding
Content modules are described using nested tuples.
Each tuplecontains four values: the type, the quantifier, the name, and a tupleof children.
Children are simply additional content moduledescriptions.The values of the first two fields are constants defined in themodel object of the xml.parsers.expat module.
Theseconstants can be collected in two groups: the model type group and thequantifier group.The constants in the model type group are:
XML_CTYPE_ANY
The element named by the model name was declared to have a contentmodel of ANY.
The named element allows a choice from a number of options; this isused for content models such as (A | B | C).
Elements which are declared to be EMPTY have this model type.
Models which represent a series of models which follow one after theother are indicated with this model type.
This is used for modelssuch as (A, B, C).
The constants in the quantifier group are:
XML_CQUANT_NONE
No modifier is given, so it can appear exactly once, as for A.
The model is optional: it can appear once or not at all, as forA?.
The model must occur one or more times (like A+).
The model must occur zero or more times, as for A*.
The following constants are provided in the errors object ofthe
module.
These constants are usefulin interpreting some of the attributes of the ExpatErrorexception objects raised when an error has occurred.The errors object has the following attributes:
XML_ERROR_ASYNC_ENTITY
An entity reference in an attribute value referred to an externalentity instead of an internal entity.
A character reference referred to a character which is illegal in XML(for example, character 0, or `#0;').
An entity reference referred to an entity which was declared with anotation, so cannot be parsed.
An attribute was used more than once in a start tag.
Raised when an input byte could not properly be assigned to acharacter; for example, a NUL byte (value 0) in a UTF-8 inputstream.
Something other than whitespace occurred after the document element.
An XML declaration was found somewhere other than the start of theinput data.
The document contains no elements (XML requires all documents tocontain exactly one top-level element)..
Expat was not able to allocate memory internally.
A parameter entity reference was found where it was not allowed.
An entity reference contained another reference to the same entity;possibly via a different name, and possibly indirectly.
Some unspecified syntax error was encountered.
An end tag did not match the innermost open start tag.
Some token (such as a start tag) was not closed before the end of thestream or the next token was encountered.
A reference was made to a entity which was not defined.
The document encoding is not supported by Expat.
A CDATA marked section was not closed.
The parser determined that the document was not ``standalone'' thoughit declared itself to be in the XML declaration, and theNotStandaloneHandler was set and returned 0.
An operation was requested that requires DTD support to be compiledin, but Expat was configured without DTD support.
This should neverbe reported by a standard build of the xml.parsers.expatmodule.
A behavioral change was requested after parsing started that can onlybe changed before parsing has started.
This is (currently) onlyraised by UseForeignDTD().
An undeclared prefix was found when namespace processing was enabled.
The document attempted to remove the namespace declaration associatedwith a prefix.
A parameter entity contained incomplete markup.
The document contained no document element at all.
There was an error parsing a text declaration in an external entity.
Characters were found in the public id that are not allowed.
The requested operation was made on a suspended parser, but isn'tallowed.
This should not be reported to Python applications.
The requested operation was made on a parser which was finishedparsing input, but isn't allowed.
This includes attempts to provideadditional input or to stop the parser.
The following program defines three handlers that just print out theirarguments.
The output from this program is:
ExpatError exceptions have a number of interestingattributes:
Expat's internal error number for the specific error.
This willmatch one of the constants defined in the errors object fromthis module.New in version 2.1.
Line number on which the error was detected.
The first line isnumbered 1.New in version 2.1.
Character offset into the line where the error occurred.
The firstcolumn is numbered 0.New in version 2.1.
Two or more physical lines may be joined into logical lines usingbackslash characters (), as follows: when a physical line endsin a backslash that is not part of a string literal or comment, it isjoined with the following forming a single logical line, deleting thebackslash and the following end-of-line character.
For example:
if 1900 year 2100 and 1 = month = 12 \and 1 = day = 31 and 0 = hour 24 \and 0 = minute 60 and 0 = second 60: # Looks like a valid datereturn 1
A line ending in a backslash cannot carry a comment.
A backslash doesnot continue a comment.
A backslash does not continue a token exceptfor string literals (i.e., tokens other than string literals cannot besplit across physical lines using a backslash).
A backslash isillegal elsewhere on a line outside a string literal.
8.4 Expression input
A. History and License
There are two forms of expression input.
Both ignore leadingwhitespace.The string argument to eval() must have the following form:
The input line read by input() must have the following form:
Note: to read `raw' input line without interpretation, you can use thebuilt-in function raw_input() or the readline() methodof file objects.
This chapter explains the meaning of the elements of expressions inPython.
Syntax Notes: In this and the following chapters, extendedBNF notation will be used to describe syntax, not lexicalanalysis.
When (one alternative of) a syntax rule has the form
and no semantics are given, the semantics of this form of nameare the same as for othername. Subsections
An expression list containing at least one comma yields atuple.
The length of the tuple is the number of expressions in thelist.
The expressions are evaluated from left to right.
The trailing comma is required only to create a single tuple (a.k.a. asingleton); it is optional in all other cases.
A singleexpression without a trailing comma doesn't create atuple, but rather yields the value of that expression.(To create an empty tuple, use an empty pair of parentheses:().)
Expression statements are used (mostly interactively) to compute andwrite a value, or (usually) to call a procedure (a function thatreturns no meaningful result; in Python, procedures return the valueNone).
Other uses of expression statements are allowed andoccasionally useful.
The syntax for an expression statement is:
An expression statement evaluates the expression list (which may be asingle expression).
In interactive mode, if the value is not None, it is convertedto a string using the built-in repr()
function and the resulting string is written to standard output (seesection6.6) on a line by itself.
(Expression statementsyielding None are not written, so that procedure calls do notcause any output.)
5.5 Embedding Python in
Until now, the embedded Python interpreter had no access tofunctionality from the application itself.
The Python API allows thisby extending the embedded interpreter.
That is, the embeddedinterpreter gets extended with routines provided by the application.While it sounds complex, it is not so bad.
Simply forget for a whilethat the application starts the Python interpreter.
Instead, considerthe application to be a set of subroutines, and write some glue codethat gives Python access to those routines, just like you would writea normal Python extension.
For example:
static int numargs=0;/* Return the number of arguments of the application command line */static PyObject*emb_numargs(PyObject *self, PyObject *args){if(!PyArg_ParseTuple(args, ":numargs"))return NULL;return Py_BuildValue("i", numargs);}static PyMethodDef EmbMethods[] = {{"numargs", emb_numargs, METH_VARARGS,"Return the number of arguments received by the process."},{NULL, NULL, 0, NULL}};
Insert the above code just above the main() function.Also, insert the following two statements directly afterPy_Initialize():
These two lines initialize the numargs variable, and make theemb.numargs() function accessible to the embedded Pythoninterpreter.
With these extensions, the Python script can do thingslike
import embprint "Number of arguments", emb.numargs()
In a real application, the methods will expose an API of theapplication to Python.
Distutils can be extended in various ways.
Most extensions take theform of new commands or replacements for existing commands.
Newcommands may be written to support new types of platform-specificpackaging, for example, while replacements for existing commands maybe made to modify details of how the command operates on a package.Most extensions of the distutils are made within setup.pyscripts that want to modify existing commands; many simply add a fewfile extensions that should be copied into packages in addition to.py files as a convenience.Most distutils command implementations are subclasses of theCommand class from
distutils.cmd
.
New commandsmay directly inherit from Command, while replacements oftenderive from Command indirectly, directly subclassing thecommand they are replacing.
Commands are required to derive fromCommand. Subsections
A Fault object encapsulates the content of an XML-RPC fault tag.Fault objects have the following members:
A string indicating the fault type.
A string containing a diagnostic message associated with the fault.
11.20.1 CookieJar and FileCookieJar
The following CookieJar subclasses are provided for readingand writing .
Further CookieJar subclasses, including onethat reads Microsoft Internet Explorer cookies, are available athttp://wwwsearch.sf.net/ClientCookie/.
classMozillaCookieJar
A FileCookieJar that can load from and save cookies to disk inthe Mozilla cookies. txt file format (which is also used by theLynx and Netscape browsers).
Note:This loses information about RFC2965 cookies, and also about newer or non-standard cookie-attributessuch as port.
Warning:Back up your cookies before saving if you have cookies whoseloss / corruption would be inconvenient (there are some subtletieswhich may lead to slight changes in the file over a load / saveround-trip).
Also note that cookies saved while Mozilla is running will getclobbered by Mozilla.
classLWPCookieJar
A FileCookieJar that can load from and save cookies to disk informat compatible with the libwww-perl library's Set-Cookie3file format.
This is convenient if you want to store cookies in ahuman-readable file.
Open the file locally, if there is no host name, orthe host name is 'localhost'.
Change theprotocol to ftp otherwise, and retry openingit using parent.
All input read from non-interactive files has the same form:
Download entire grammar as text.
This syntax is used in the following situations:
when parsing a complete Python program (from a file or from a string);
when parsing a module;
when parsing a string passed to the exec statement;
Python's built-in file objects are implemented entirely on theFILE* support from the C standard library.
This is animplementation detail and may change in future releases of Python.
This subtype of PyObject represents a Python file object.
This instance of PyTypeObject represents the Python filetype.
This is exposed to Python programs as types.FileType.
Returns true if its argument is a PyFileObject or a subtypeof PyFileObject.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if its argument is a PyFileObject, but not asubtype of PyFileObject.New in version 2.2.
On success, returns a new file object that is opened on the filegiven by filename, with a file mode given by mode, wheremode has the same semantics as the standard C routinefopen()
.
On failure, returns NULL.
Creates a new PyFileObject from the already-open standard Cfile pointer, fp.
The function close will be calledwhen the file should be closed.
Returns NULL on failure.
Returns the file object associated with p as a FILE*.
Ifn is 0, exactly one line is read, regardless of thelength of the line.
If n is greater than 0, no morethan n bytes will be read from the file; a partial line can bereturned.
In both cases, an empty string is returned if the end ofthe file is reached immediately.
If n is less than 0,however, one line is read regardless of length, butEOFError is raised if the end of the file is reachedimmediately.
Returns the name of the file specified by p as a stringobject.
Available on systems with setvbuf()
only. This should only be called immediately after file objectcreation.
Set the file's encoding for Unicode output to enc.
Return1 on success and 0 on failure.New in version 2.3.
This function exists for internal use by the interpreter.
Sets thesoftspace attribute of p to newflag and
returns theprevious value.
p does not have to be a file object for thisfunction to work properly; any object is supported (thought its onlyinteresting if the softspace attribute can be set).
Thisfunction clears any errors, and will return 0 as the previousvalue if the attribute either does not exist or if there were errorsin retrieving it.
There is no way to detect errors from thisfunction, but doing so should not be needed.
Writes object obj to file object p.
The only supportedflag for flags isPy_PRINT_RAW
; if given, thestr() of the object is written instead of therepr().
Returns 0 on success or -1 onfailure; the appropriate exception will be set.
Writes string s to file object p.
Returns 0 onsuccess or -1 on failure; the appropriate exception will beset.
See Inside Macintosh: Files for a complete description of whatthe various fields mean.
The 4-character creator code of the file.
The 4-character type code of the file.
The finder flags for the file as 16-bit integer.
The bit values inFlags are defined in standard module MACFS.
A Point giving the position of the file's icon in its folder.
The folder the file is in (as an integer).
7.2.5 Complex Number Objects
This subtype of PyObject represents a Python floating pointobject.
This instance of PyTypeObject represents the Python floatingpoint type.
This is the same object as types.FloatType.
Returns true if its argument is a PyFloatObject or a subtypeof PyFloatObject.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if its argument is a PyFloatObject, but not asubtype of PyFloatObject.New in version 2.2.
Creates a PyFloatObject object based on the string value instr, or NULL on failure.
The pend argument is ignored.
Itremains only for backward compatibility.
Creates a PyFloatObject object from v, or NULL onfailure.
Returns a C double representation of the contents ofpyfloat.
Returns a C double representation of the contents ofpyfloat, but without error checking.
2.4.4 Integer and long
Floating point literals are described by the following lexicaldefinitions:
Note that the integer and exponent parts of floating point numberscan look like octal integers, but are interpreted using radix 10.
Forexample, "077e010" is legal, and denotes the same numberas "77e10".The allowed range of floating point literals isimplementation-dependent.Some examples of floating point literals:
3.14 10. .001 1e100 3.14e-10 0e0
Note that numeric literals do not include a sign; a phrase like-1 is actually an expression composed of the operator- and the literal 1.
The for statement is used to iterate over the elements of asequence (such as a string, tuple or list) or other iterable object:
The expression list is evaluated once; it should yield an iterableobject.
An iterator is created for the result of theexpression_list. The suite is then executed once for eachitem provided by the iterator, in theorder of ascending indices.
Each item in turn is assigned to thetarget list using the standard rules for assignments, and then thesuite is executed.
When the items are exhausted (which is immediatelywhen the sequence is empty), the suite in the else clause, ifpresent, is executed, and the loop terminates.
A break statement executed in the first suite terminates theloop without executing the else clause's suite.
Acontinue statement executed in the first suite skips the restof the suite and continues with the next item, or with the elseclause if there was no next item.
The suite may assign to the variable(s) in the target list; this doesnot affect the next item assigned to it.The target list is not deleted when the loop is finished, but if thesequence is empty, it will not have been assigned to at all by theloop.
Hint: the built-in function range() returns asequence of integers suitable to emulate the effect of Pascal'sfor i := a to b do;e.g., range(3) returns the list [0, 1, 2].
Warning:There is a subtlety when the sequence is being modifiedby the loop (this can only occur for mutable sequences, i.e. lists).An internal counter is used to keep track of which item is used next,and this is incremented on each iteration.
When this counter hasreached the length of the sequence the loop terminates.
This means thatif the suite deletes the current (or a previous) item from thesequence, the next item will be skipped (since it gets the index ofthe current item which has already been treated).
20.4.1 Functions Defined in
Form objects (returned by make_form() above) have thefollowing methods.
Each method corresponds to a C function whosename is prefixed with "fl_"; and whose first argument is a formpointer; please refer to the official FORMS documentation fordescriptions.All the add_*() methods return a Python object representingthe FORMS object.
Methods of FORMS objects are described below.
Mostkinds of FORMS object also have some methods specific to that kind;these methods are listed here.
Show the form.
Hide the form.
x, y)
)
)
)
)
Begin a new group of objects; return a group object.
End the current group of objects.
Find the first object in the form.
Find the last object in the form.
Add a box object to the form.No extra methods.
Add a text object to the form.No extra methods.
Add a clock object to the form.
Method:get_clock().
Add a button object to the form.
Methods:get_button(),set_button().
Add a lightbutton object to the form.
Add a roundbutton object to the form.
Add a slider object to the form.
Methods:set_slider_value(),get_slider_value(),set_slider_bounds(),get_slider_bounds(),set_slider_return(),set_slider_size(),set_slider_precision(),set_slider_step().
Add a valslider object to the form.
Add a dial object to the form.
Methods:set_dial_value(),get_dial_value(),set_dial_bounds(),get_dial_bounds().
Add a positioner object to the form.
Methods:set_positioner_xvalue(),set_positioner_yvalue(),set_positioner_xbounds(),set_positioner_ybounds(),get_positioner_xvalue(),get_positioner_yvalue(),get_positioner_xbounds(),get_positioner_ybounds().
Add a counter object to the form.
Methods:set_counter_value(),get_counter_value(),set_counter_bounds(),set_counter_step(),set_counter_precision(),set_counter_return().
Add a input object to the form.
Methods:set_input(),get_input(),set_input_color(),set_input_return().
Add a menu object to the form.
Methods:set_menu(),get_menu(),addto_menu().
Add a choice object to the form.
Methods:set_choice(),get_choice(),clear_choice(),addto_choice(),replace_choice(),delete_choice(),get_choice_text(),set_choice_fontsize(),set_choice_fontstyle().
Add a browser object to the form.
Methods:set_browser_topline(),clear_browser(),add_browser_line(),addto_browser(),insert_browser_line(),delete_browser_line(),replace_browser_line(),get_browser_line(),load_browser(),get_browser_maxline(),select_browser_line(),deselect_browser_line(),deselect_browser(),isselected_browser_line(),get_browser(),set_browser_fontsize(),set_browser_fontstyle(),set_browser_specialkey().
Add a timer object to the form.
Methods:set_timer(),get_timer().
Form objects have the following data attributes; see the FORMSdocumentation:
Name
C Type
GL window id
form width
form height
form x origin
form y origin
nonzero if form is deactivated
nonzero if form is visible
nonzero if form is frozen
nonzero if double buffering on
Two implementations of formatter objects are provided by this module.Most applications may use one of these classes without modification orsubclassing.
classNullFormatter
A formatter which does nothing.
If writer is omitted, aNullWriter instance is created.
No methods of the writer arecalled by NullFormatter instances.
Implementations shouldinherit from this class if implementing a writer interface but don'tneed to inherit any implementation.
classAbstractFormatter
The standard formatter.
This implementation has demonstrated wideapplicability to many writers, and may be used directly in mostcircumstances.
It has been used to implement a full-featuredWorld Wide Web browser.
Interfaces to create formatters are dependent on the specificformatter class being instantiated.
The interfaces described beloware the required interfaces which all formatters must support onceinitialized.One data element is defined at the module level:
Value which can be used in the font specification passed to thepush_font() method described below, or as the new value to anyother push_property() method.
Pushing the AS_ISvalue allows the corresponding pop_property() method tobe called without having to track whether the property was changed.
The following attributes are defined for formatter instance objects:
The writer instance with which the formatter interacts.
Close any open paragraphs and insert at least blanklinesbefore the next paragraph.
)
Add a hard line break if one does not already exist.
This does notbreak the logical paragraph.
Insert a horizontal rule in the output.
A hard break is inserted ifthere is data in the current paragraph, but the logical paragraph isnot broken.
The arguments and keywords are passed on to the writer'ssend_line_break() method.
Provide data which should be formatted with collapsed whitespace.Whitespace from preceding and successive calls toadd_flowing_data() is considered as well when the whitespacecollapse is performed.
The data which is passed to this method isexpected to be word-wrapped by the output device.
Note that anyword-wrapping still must be performed by the writer object due to theneed to rely on device and font information.
Provide data which should be passed to the writer unchanged.Whitespace, including newline and tab characters, are considered legalin the value of data.
Insert a label which should be placed to the left of the current leftmargin.
This should be used for constructing bulleted or numberedlists.
Interpretation of non-string labelvalues is dependent on the associated writer.Format specifications are strings which, in combination with a countervalue, are used to compute label values.
Each character in the formatstring is copied to the label value, with some characters recognizedto indicate a transform on the counter value.
Specifically, thecharacter "1" represents the counter value formatter as anArabic number, the characters "A" and "a"represent alphabetic representations of the counter value in upper andlower case, respectively, and "I" and "i"represent the counter value in Roman numerals, in upper and lowercase.
Note that the alphabetic and roman transforms require that thecounter value be greater than zero.
Send any pending whitespace buffered from a previous call toadd_flowing_data() to the associated writer object.
Thisshould be called before any direct manipulation of the writer object.
Push a new alignment setting onto the alignment stack.
This may beAS_IS if no change is desired.
If the alignment value ischanged from the previous setting, the writer's new_alignment()method is called with the align value.
Restore the previous alignment.
Change some or all font properties of the writer object.
Propertieswhich are not set to AS_IS are set to the values passed inwhile others are maintained at their current settings.
The writer'snew_font() method is called with the fully resolved fontspecification.
Restore the previous font.
Increase the number of left margin indentations by one, associatingthe logical tag margin with the new indentation.
The initialmargin level is 0.
Changed values of the logical tag must betrue values; false values other than AS_IS are notsufficient to change the margin.
Restore the previous margin.
Push any number of arbitrary style specifications.
All styles arepushed onto the styles stack in order.
A tuple representing theentire stack, including AS_IS values, is passed to thewriter's new_styles() method.
Pop the last n style specifications passed topush_style().
A tuple representing the revised stack,including AS_IS values, is passed to the writer'snew_styles() method.
Set the spacing style for the writer.
Inform the formatter that data has been added to the current paragraphout-of-band.
This should be used when the writer has been manipulateddirectly.
The optional flag argument can be set to false ifthe writer manipulations produced a hard line break at the end of theoutput.
Besides methods specific to particular kinds of FORMS objects, allFORMS objects also have the following methods:
Set the object's callback function and argument.
When the objectneeds interaction, the callback function will be called with twoarguments: the object, and the callback argument.
(FORMS objectswithout a callback function are returned by fl.do_forms()or fl.check_forms() when they need interaction.)
Call thismethod without arguments to remove the callback function.
Delete the object.
Show the object.
Hide the object.
)
Unfreeze the object.
FORMS objects have these data attributes; see the FORMS documentation:
object class
object type
box type
x origin
y origin
width
height
primary color
secondary color
alignment
label color
label font size
label string
label style
(see FORMS docs)
3.4.2 Limitations and other
The following example demonstrates how to start up and test operation ofthe fpectl module.
This manual documents the API used by C and C++ programmers whowant to write extension modules or embed Python. It is a companion to
, which describes the general principles of extensionwriting but does not document the API functions in detail.
Warning:The current version of this document is incomplete.
I hopethat it is nevertheless useful.
I will continue to work on it, andrelease new versions from time to time, independent from Python sourcecode releases.
The raw data from the FSSpec object, suitable for passingto other applications, for instance.
Return the full pathname of the file described by the FSSpecobject.
Return the (wdRefNum, parID, name) tuple ofthe file described by the FSSpec object.
Create an Alias object pointing to the file described by thisFSSpec.
If the optional file parameter is present the aliaswill be relative to that file, otherwise it will be absolute.
Create a minimal alias pointing to this file.
Return the 4-character creator and type of the file.
Set the 4-character creator and type of the file.
Return a FInfo object describing the finder info for the file.
Set the finder info for the file to the values given as finfo(an FInfo object).
Return a tuple with three floating point values representing thecreation date, modification date and backup date of the file.
Set the creation, modification and backup date of the file.
The valuesare in the standard floating point format used for times throughoutPython.
Open the FTP file indicated by req.The login is always done with empty username and password.
Several methods are available in two flavors: one for handling textfiles and another for binary files.
These are named for the commandwhich is used followed by "lines" for the text version or"binary" for the binary version.
FTP instances have the following methods:
Set the instance's debugging level.
This controls the amount ofdebugging output printed.
The default, 0, produces nodebugging output.
A value of 1 produces a moderate amount ofdebugging output, generally a single line per request.
A value of2 or higher produces the maximum amount of debugging output,logging each line sent and received on the control connection.
Connect to the given host and port.
The default port number is 21, asspecified by the FTP protocol specification.
It is rarely needed tospecify a different port number.
This function should be called onlyonce for each instance; it should not be called at all if a host wasgiven when the instance was created.
All other methods can only beused after a connection has been made.
Return the welcome message sent by the server in reply to the initialconnection.
(This message sometimes contains disclaimers or helpinformation that may be relevant to the user.)
Log in as the given user.
The passwd and acctparameters are optional and default to the empty string.
If nouser is specified, it defaults to 'anonymous'.
Ifuser is 'anonymous', the default passwd is'anonymous@'.
This function should be called onlyonce for each instance, after a connection has been established; itshould not be called at all if a host and user were given when theinstance was created.
Most FTP commands are only allowed after theclient has logged in.
Abort a file transfer that is in progress.
Using this does not alwayswork, but it's worth a try.
Send a simple command string to the server and return the responsestring.
]
)
Retrieve a file in binary transfer mode. command should be anappropriate "RETR" command: 'RETR filename'.The callback function is called for each block of data received,with a single string argument giving the data block.The optional maxblocksize argument specifies the maximum chunk size toread on the low-level socket object created to do the actual transfer(which will also be the largest size of the data blocks passed tocallback).
A reasonable default is chosen. rest means thesame thing as in the transfercmd() method.
Retrieve a file or directory listing in ASCII transfer mode.command should be an appropriate "RETR" command (seeretrbinary()) or a "LIST" command (usually just the string'LIST').
The callback function is called for each line,with the trailing CRLF stripped.
The default callback printsthe line to sys.stdout.
Enable ``passive'' mode if boolean is true, other disablepassive mode.
(In Python 2.0 and before, passive mode was off bydefault; in Python 2.1 and later, it is on by default.)
)
Store a file in binary transfer mode. command should be anappropriate "STOR" command: "STOR filename".file is an open file object which is read until EOF using itsread() method in blocks of size blocksize to provide thedata to be stored.
The blocksize argument defaults to 8192.Changed in version 2.1:default for blocksize added.
Store a file in ASCII transfer mode. command should be anappropriate "STOR" command (see storbinary()).
Lines areread until EOF from the open file object file using itsreadline() method to provide the data to be stored.
Initiate a transfer over the data connection.
If the transfer isactive, send a "EPRT" or "PORT" command and the transfer command specifiedby cmd, and accept the connection.
If the server is passive,send a "EPSV" or "PASV" command, connect to it, and start the transfercommand.
Note however that RFC959 requires only that rest be a string containing charactersin the printable range from ASCII code 33 to ASCII code 126.
Thetransfercmd() method, therefore, convertsrest to a string, but no check isperformed on the string's contents.
If the server doesnot recognize the "REST" command, anerror_reply exception will be raised.
If this happens,simply call transfercmd() without a rest argument.
Like transfercmd(), but returns a tuple of the dataconnection and the expected size of the data.
If the expected sizecould not be computed, None will be returned as the expectedsize. cmd and rest means the same thing as intransfercmd().
Return a list of files as returned by the "NLST" command.
Theoptional argument is a directory to list (default is the currentserver directory).
Multiple arguments can be used to passnon-standard options to the "NLST" command.
Produce a directory listing as returned by the "LIST" command,printing it to standard output.
The optional argument is adirectory to list (default is the current server directory).
Multiplearguments can be used to pass non-standard options to the "LIST"command.
If the last argument is a function, it is used as acallback function as for retrlines(); the defaultprints to sys.stdout.
This method returns None.
Rename file fromname on the server to toname.
Remove the file named filename from the server.
If successful,returns the text of the response, otherwise raiseserror_perm on permission errors orerror_reply on other errors.
Set the current directory on the server.
Create a new directory on the server.
Return the pathname of the current directory on the server.
Remove the directory named dirname on the server.
Request the size of the file named filename on the server.
Onsuccess, the size of the file is returned as an integer, otherwiseNone is returned.
Note that the "SIZE" command is not standardized, but is supported by many common server implementations.
)
Send a "QUIT" command to the server and close the connection.This is the ``polite'' way to close a connection, but it may raise anexception of the server reponds with an error to the"QUIT" command.
This implies a call to the close()method which renders the FTP instance useless for subsequentcalls (see below).
Close the connection unilaterally.
This should not be applied to analready closed connection such as after a successful call toquit().
After this call the FTP instance should notbe used any more (after a call to close() orquit() you cannot reopen the connection by issuing anotherlogin() method).
A function definition defines a user-defined function object (seesection3.2):
A function definition is an executable statement.
Its execution bindsthe function name in the current local namespace to a function object(a wrapper around the executable code for the function).
Thisfunction object contains a reference to the current global namespaceas the global namespace to be used when the function is called.
The result must be a callable,which is invoked with the function object as the only argument.The returned value is bound to the function name instead of the functionobject.
Multiple decorators are applied in nested fashion.For example, the following code:
is equivalent to:
= expression, the function is said to have ``defaultparameter values.'' For a parameter with adefault value, the corresponding argument may be omitted from a call,in which case the parameter's default value is substituted.
If aparameter has a default value, all following parameters must also havea default value -- this is a syntactic restriction that is notexpressed by the grammar.
Default parameter values are evaluated when the functiondefinition is executed.
This means that the expression is evaluatedonce, when the function is defined, and that that same``pre-computed'' value is used for each call.
This is especiallyimportant to understand when a default parameter is a mutable object,such as a list or a dictionary: if the function modifies the object(e.g. by appending an item to a list), the default value is in effectmodified.
This is generally not what was intended.
A way around this is to use None as the default, and explicitly test for it inthe body of the function, e.g.:
If the form ``*identifier''is present, it is initialized to a tuple receiving any excesspositional parameters, defaulting to the empty tuple.
This uses lambda forms,described in section5.11.
Note that the lambda form ismerely a shorthand for a simplified function definition; a functiondefined in a ``def'' statement can be passed around orassigned to another name just like a function defined by a lambdaform.
The ``def'' form is actually more powerful since itallows the execution of multiple statements.
Programmer's note: Functions are first-class objects.
A``def'' form executed inside a function definition defines alocal function that can be returned or passed around.
Free variablesused in the nested function can access the local variables of thefunction containing the def.
See section4.1 for details.
This section describes Python type objects and the singleton objectNone.
Subsections 7.1.1 Type Objects
A future statement
is a directive tothe compiler that a particular module should be compiled using syntaxor semantics that will be available in a specified future release ofPython.
The future statement is intended to ease migration to futureversions of Python that introduce incompatible changes to thelanguage.
It allows use of the new features on a per-module basisbefore the release in which the feature becomes standard.
A future statement must appear near the top of the module.
The onlylines that can appear before a future statement are:
The features recognized by Python 2.3 are "generators","division" and "nested_scopes".
"generators" and"nested_scopes" are redundant in 2.3 because they are alwaysenabled.
A future statement is recognized and treated specially at compiletime: Changes to the semantics of core constructs are oftenimplemented by generating different code.
import __future__ [as name]
This can,starting with Python 2.2 be controlled by optional arguments tocompile()
-- see the documentation of that function in the library reference for details.A future statement typed at an interactive interpreter prompt willtake effect for the rest of the interpreter session.
If aninterpreter is started with the -i option, is passed ascript name to execute, and the script includes a future statement, itwill be in effect in the interactive session started after the scriptis executed.
9 Future Directions The history of the Python documentation is full of changes, most ofwhich have been fairly small and evolutionary.
There has been agreat deal of discussion about making large changes in the markuplanguages and tools used to process the documentation.
This sectiondeals with the nature of the changes and what appears to be the mostlikely path of future development. Subsections
7.5.11 Generator Objects
Generator objects are what Python uses to implement generator iterators.They are normally created by iterating over a function that yields values,rather than explicitly calling PyGen_New.
The C structure used for generator objects.
The type object corresponding to generator objects
Return true if ob is a generator object; ob must not beNULL.
Return true if ob's type is PyGen_Typeis a generator object; ob must not beNULL.
PyObject*
Create and return a new generator object based on the frame object.The parameter must not be NULL.
A generator expression is a compact generator notation in parentheses:
A generator expression yields a new generator object.
It consists of a single expression followed by at least onefor clause and zero or more for or ifclauses.
The iterating values of the new generator are those thatwould be produced by considering each of the for orif clauses a block, nesting from left to right, andevaluating the expression to yield a value that is reached theinnermost block for each iteration.Variables used in the generator expression are evaluated lazilywhen the next() method is called for generator object(in the same fashion as normal generators).
B.3.10 XML Remote Procedure
u
__builtin__ (built-in module),[Link],[Link]
_ob_next (PyObject member)
_ob_prev (PyObject member)
apply() (built-in function),[Link],[Link]
classmethod() (built-in function)
cmp() (built-in function),[Link]
coerce() (built-in function)
exceptions (built-in module)
exec_prefix (environment variable),[Link],[Link]
hash() (built-in function),[Link]
ihooks (standard module)
len() (built-in function),[Link],[Link],[Link],[Link]
ob_refcnt (PyObject member)
ob_size (PyVarObject member)
ob_type (PyObject member)
path (in module sys),[Link],[Link]
pow() (built-in function),[Link]
prefix (environment variable),[Link],[Link],[Link],[Link]
PYTHONDUMPREFS (environment variable)
PYTHONHOME (environment variable),[Link]
PYTHONPATH (environment variable),[Link]
reload() (built-in function)
repr() (built-in function),[Link]
rexec (standard module)
signal (built-in module)
staticmethod() (built-in function)
str() (built-in function)
sys (built-in module),[Link],[Link]
thread (built-in module)
tp_alloc (PyTypeObject member)
tp_allocs (PyTypeObject member)
tp_as_buffer (PyTypeObject member)
tp_base (PyTypeObject member)
tp_bases (PyTypeObject member)
tp_basicsize (PyTypeObject member)
tp_cache (PyTypeObject member)
tp_call (PyTypeObject member)
tp_clear (PyTypeObject member)
tp_compare (PyTypeObject member)
tp_dealloc (PyTypeObject member)
tp_descr_get (PyTypeObject member)
tp_descr_set (PyTypeObject member)
tp_dict (PyTypeObject member)
tp_dictoffset (PyTypeObject member)
tp_doc (PyTypeObject member)
tp_flags (PyTypeObject member)
tp_free (PyTypeObject member)
tp_frees (PyTypeObject member)
tp_getattr (PyTypeObject member)
tp_getattro (PyTypeObject member)
tp_getset (PyTypeObject member)
tp_hash (PyTypeObject member)
tp_init (PyTypeObject member)
tp_is_gc (PyTypeObject member)
tp_itemsize (PyTypeObject member)
tp_iter (PyTypeObject member)
tp_iternext (PyTypeObject member)
tp_maxalloc (PyTypeObject member)
tp_members (PyTypeObject member)
tp_methods (PyTypeObject member)
tp_mro (PyTypeObject member)
tp_name (PyTypeObject member)
tp_new (PyTypeObject member)
tp_next (PyTypeObject member)
tp_print (PyTypeObject member)
tp_repr (PyTypeObject member)
tp_richcompare (PyTypeObject member)
tp_setattr (PyTypeObject member)
tp_setattro (PyTypeObject member)
tp_str (PyTypeObject member)
tp_subclasses (PyTypeObject member)
tp_traverse (PyTypeObject member)
tp_weaklist (PyTypeObject member)
tp_weaklistoffset (PyTypeObject member)
tuple() (built-in function),[Link]
unicode() (built-in function)
1.1.1 How to run
As of Python 2.3a2 the only sure way of getting MacPython-OSX on your machineis getting a source distribution and building what is called a "framework Python".The details are in the file Mac/OSX/README.As binary installers become available the details will be posted tohttp://www.cwi.nl/~jack/macpython.html.What you get after installing is a number of things:
In here you find the PythonIDE Integrated Development Environment;PythonLauncher, which handles double-clicking Python scripts fromthe Finder; and the Package Manager.
A framework /Library/Frameworks/Python.framework, whereall the action really is, but which you usually do not have to be aware of.
1.2.1 Entering the interactive
1.2 Getting and Installing MacPython-OS9
The most recent release version as well as possible newer experimentalversions are best found at the MacPython page maintained by JackJansen: http://homepages.cwi.nl/~jack/macpython.html.Please refer to the README included with your distribution forthe most up-to-date instructions.Note that MacPython-OS9 runs fine on Mac OS X, and it runs in nativemode, not in the Classic environment.
Unless you have specificrequirements for a CFM-based Python there is no reason not touse MacPython-OSX, though. Subsections
1.2.4.1 In an editor
1.2.4.2 Editors with Python modes
6.12.1 Future statements
The global statement is a declaration which holds for theentire current code block.
It means that the listed identifiers are to beinterpreted as globals.
It would be impossible to assign to a globalvariable without global, although free variables may referto globals without being declared global.
Programmer's note:the global is a directive to the parser.
Itapplies only to code parsed at the same time as the globalstatement.
In particular, a global statement contained in anexec statement does not affect the code block containingthe exec statement, and code contained in an execstatement is unaffected by global statements in the codecontaining the exec statement.
The same applies to theeval(), execfile() and compile() functions.
Open the gopher resource indicated by req.
6.12 Grammar Production Displays
Special markup is available for displaying the productions of aformal grammar. The markup is simple and does not attempt tomodel all aspects of BNF (or any derived forms), but providesenough to allow context-free grammars to be displayed in a waythat causes uses of a symbol to be rendered as hyperlinks to thedefinition of the symbol.
There is one environment and a pair ofmacros:
This environment is used to enclose a group of productions.
Thetwo macros are only defined within this environment.
If adocument descibes more than one language, the optional parameterlanguage should be used to distinguish productions betweenlanguages.
The value of the parameter should be a short namethat can be used as part of a filename; colons or othercharacters that can't be used in filename across platformsshould be included.
A production rule in the grammar.
The rule defines the symbolname to be definition. name should notcontain any markup, and the use of hyphens in a document whichsupports more than one grammar is undefined. definitionmay contain token macros and any additional contentneeded to describe the grammatical model of symbol.
Onlyone production may be used to define a symbol --multiple definitions are not allowed.
The name of a symbol defined by a production macro, usedin the definition of a symbol.
Where possible, this willbe rendered as a hyperlink to the definition of the symbolname.
Note that the entire grammar does not need to be defined in asingle productionlist environment; any number ofgroupings may be used to describe the grammar.
Every use of thetoken must correspond to a production.The following is an example taken from the
:
The standard documentation included with Python makes no use ofdiagrams or images; this is intentional.
The outside tools used toformat the documentation have not always been suited to working withgraphics.
As the tools have evolved and been improved by theirmaintainers, support for graphics has improved.The internal tools, starting with the mkhowto script, donot provide any direct support for graphics.
However,mkhowto will not interfere with graphics support in theexternal tools.Experience using graphics together with these tools and thehowto and manual document classes is not extensive,but has been known to work.
The basic approach is this:
Create the image or graphic using your favoriteapplication.
Convert the image to a format supported by the conversion toyour desired output format.
If you want to generate HTML orPostScript, you can convert the image or graphic toencapsulated PostScript (a .eps file); LaTeX2HTMLcan convert that to a .gif file; it may be possibleto provide a .gif file directly.
If you want togenerate PDF, you need to provide an ``encapsulated'' PDFfile.
This can be generated from encapsulated PostScriptusing the epstopdf tool provided with the teTeXdistribution on Linux and Unix.
In your document, add this line to ``import'' the generalgraphics support package graphicx:
Where you want to include your graphic or image, includemarkup similar to this:
\begin{figure}\centering\includegraphics[width=5in]{myimage}\caption{Description of my image}\end{figure}
In particular, note for the includegraphics macrothat no file extension is provided.
If you're onlyinterested in one target format, you can include theextension of the appropriate input file, but to allowsupport for multiple formats, omitting the extension makeslife easier.
Run mkhowto normally.
If you're working on systems which support some sort ofmake facility, you can use that to ensure the intermediategraphic formats are kept up to date.
This example shows aMakefile used to format a document containing a diagramcreated using the dia application:
6.13 Graphical Interface Components The components of graphical interfaces will be assigned markup, butmost of the specifics have not been determined.
Labels presented as part of an interactive user interface shouldbe marked using guilabel.
This includes labels fromtext-based interfaces such as those created using curses orother text-based libraries.
Any label used in the interfaceshould be marked with this macro, including button labels, windowtitles, field names, menu and menu selection names, and evenvalues in selection lists.
Menu selections should be marked using a combination ofmenuselection and sub.
This macro is used to marka complete sequence of menu selections, including selectingsubmenus and choosing a specific operation, or any subsequence ofsuch a sequence.
The names of individual selections should beseparated by occurances of sub.For example, to mark the selection ``Start Programs'', use this markup:
\menuselection{Start \sub Programs}
When including a selection that includes some trailing indicator,such as the ellipsis some operating systems use to indicate thatthe command opens a dialog, the indicator should be omitted fromthe selection name.Individual selection names within the menuselection shouldnot be marked using guilabel since that's implied by usingmenuselection.
Separator for menu selections that include multiple levels.
Thismacro is only defined within the context of themenuselection macro.
This object wraps a Windows HKEY object, automatically closing it whenthe object is destroyed.
You can also use the Detach() method to return the integer handle, andalso disconnect the Windows handle from the handle object.
Closes the underlying Windows handle.If the handle is already closed, no error is raised.
)
Detaches the Windows handle from the handle object.The result is an integer (or long on 64 bit Windows) that holdsthe value of the handle before it is detached.
If thehandle is already detached or closed, this will return zero.After calling this function, the handle is effectively invalidated,but the handle is not closed.
You would call this function when you need the underlying Win32 handle to exist beyond the lifetime of the handle object.
5.2 Beyond Very High
The simplest form of embedding Python is the use of the veryhigh level interface.
This interface is intended to execute aPython script without needing to interact with the applicationdirectly.
This can for example be used to perform some operationon a file.
The above code first initializes the Python interpreter withPy_Initialize(), followed by the execution of a hard-codedPython script that print the date and time.
Afterwards, thePy_Finalize() call shuts the interpreter down, followed bythe end of the program.
In a real program, you may want to get thePython script from another source, perhaps a text-editor routine, afile, or a database.
Getting the Python code from a file can betterbe done by using the PyRun_SimpleFile() function, whichsaves you the trouble of allocating memory space and loading the filecontents.
Note that this example runs the python ``benchmark'' pystones.
Profile objects have the following methods:
Add an arbitrary labelled value to the profile output.
Close the logfile and terminate the profiler.
Return the file descriptor of the profiler's log file.
Profile an exec-compatible string in the script environment.The globals from the
module are used asboth the globals and locals for the script.
Evaluate an exec-compatible string in a specific environment.The string is compiled before profiling begins.
Start the profiler.
Stop the profiler.
In addition to tag methods, the HTMLParser class provides someadditional methods and instance variables for use within tag methods.
This is the formatter instance associated with the parser.
Boolean flag which should be true when whitespace should not becollapsed, or false when it should be.
In general, this should onlybe true when character data is to be treated as ``preformatted'' text,as within a PRE element.
The default value is false.
Thisaffects the operation of handle_data() and save_end().
This method is called at the start of an anchor region.
The argumentscorrespond to the attributes of the A tag with the samenames.
The default implementation maintains a list of hyperlinks(defined by the HREF attribute for A tags) within thedocument.
The list of hyperlinks is available as the data attributeanchorlist.
This method is called at the end of an anchor region.
The defaultimplementation adds a textual footnote marker using an index into thelist of hyperlinks created by anchor_bgn().
This method is called to handle images.
The default implementationsimply passes the alt value to the handle_data()method.
Begins saving character data in a buffer instead of sending it to theformatter object.
Retrieve the stored data via save_end().Use of the save_bgn() / save_end() pair may not benested.
Ends buffering character data and returns all data saved since thepreceding call to save_bgn().
If the nofill flag isfalse, whitespace is collapsed to single spaces.
A call to thismethod without a preceding call to save_bgn() will raise aTypeError exception.
As a basic example, below is a very basic HTML parser that uses theHTMLParser class to print out tags as they are encountered:
Retry the request with authentication information, if available.
HTTPCookieProcessor instances have one attribute:
The cookielib.CookieJar in which cookies are stored.
Process HTTP error responses.For 200 error codes, the response object is returned immediately.For non-200 error codes, this simply passes the job on to the
protocol_error_code() handler methods, viaOpenerDirector.error().
Eventually,urllib2.HTTPDefaultErrorHandler will raise anHTTPError if no other handler handles the error.
Send an HTTP request, which can be either GET or POST, depending on
req.has_data().
These methods are available on HTTPPasswordMgr andHTTPPasswordMgrWithDefaultRealm objects.
uri can be either a single URI, or a sequence of URIs. realm,user and passwd must be strings.
This causes(user, passwd) to be used as authentication tokenswhen authentication for realm and a super-URI of any of thegiven URIs is given.
Get user/password for given realm and URI, if any.
This method willreturn (None, None) if there is no matching user/password.For HTTPPasswordMgrWithDefaultRealm objects, the realmNone will be searched if the given realm has no matchinguser/password.
Note:Some HTTP redirections require action from this module's clientcode.
If this is the case, HTTPError is raised.
SeeRFC 2616 for details of the precise meanings of the variousredirection codes.
Return a Request or None in response to a redirect.This is called by the default implementations of thehttp_error_30*() methods when a redirection is received fromthe server.
If a redirection should take place, return a newRequest to allow http_error_30*() to perform theredirect.
Otherwise, raise HTTPError if no other handlershould try to handle this URL, or return None if you can't butanother handler might.
Note:The default implementation of this method does not strictlyfollow RFC 2616, which says that 301 and 302 responses to POSTrequests must not be automatically redirected without confirmation bythe user.
In reality, browsers do allow automatic redirection ofthese responses, changing the POST to a GET, and the defaultimplementation reproduces this behavior.
Redirect to the Location: URL.
This method is called bythe parent OpenerDirector when getting an HTTP`moved permanently' response.
The same as http_error_301(), but called for the`found' response.
The same as http_error_301(), but called for the`see other' response.
The same as http_error_301(), but called for the`temporary redirect' response.
HTTPConnection instances have the following methods:
This will send a request to the server using the HTTP request methodmethod and the selector url.
Set the debugging level (the amount of debugging output printed).The default debug level is 0, meaning no debugging output isprinted.
Connect to the server specified when the object was created.
Close the connection to the server.
Send data to the server.
This should be used directly only after theendheaders() method has been called and beforegetreply() has been called.
This should be the first call after the connection to the server hasbeen made.
It sends a line to the server consisting of therequest string, the selector string, and the HTTP version(HTTP/1.1).
To disable automatic sending of Host: orAccept-Encoding: headers (for example to accept additionalcontent encodings), specify skip_host or skip_accept_encodingwith non-False values.Changed in version 2.4:skip_accept_encoding argument added.
Send an RFC 822-style header to the server.
It sends a line to theserver consisting of the header, a colon and a space, and the firstargument.
If more arguments are given, continuation lines are sent,each consisting of a tab and an argument.
Send a blank line to the server, signalling the end of the headers.
Here is an example session that uses the "GET" method:
Here is an example session that shows how to "POST" requests:
HTTPResponse instances have the following methods and attributes:
Reads and returns the response body, or up to the next amt bytes.
Get the contents of the header name, or default if there is nomatching header.
Return a list of (header, value) tuples.
A mimetools.Message instance containing the response headers.
HTTP protocol version used by server.
10 for HTTP/1.0, 11 for HTTP/1.1.
Status code returned by server.
Reason phrase returned by server.
Send an HTTPS request, which can be either GET or POST, depending on
2.3 Identifiers and keywords
Certain classes of identifiers (besides keywords) have specialmeanings.
These classes are identified by the patterns of leading andtrailing underscore characters:
Not imported by "from module import *".
The specialidentifier "_" is used in the interactive interpreter to storethe result of the last evaluation; it is stored in the__builtin__ module.
When not in interactive mode, "_" has no special meaning and is not defined.See section6.12, ``The import statement.''
Note:The name "_" is often used in conjunction withinternationalization; refer to the documentation for the
gettext module for moreinformation on this convention.
System-defined names.
These names are defined by the interpreterand it's implementation (including the standard library);applications should not expect to define additional names using thisconvention.
The set of names of this class defined by Python may beextended in future versions.See section3.3, ``Special method names.''
__*
Class-private names.
Names in this category, when used within thecontext of a class definition, are re-written to use a mangled formto help avoid name clashes between ``private'' attributes of baseand derived classes.See section5.2.1, ``Identifiers (Names).''
Identifiers (also referred to as names) are described by the followinglexical definitions:
Identifiers are unlimited in length.
Case is significant.
Subsections 2.3.1 Keywords
16.4.1 Pen and RawPen
16. Graphical User Interfaces
Idle is the Python IDE built with the
GUI toolkit.
IDLE has the following features: coded in 100% pure Python, using the
GUI toolkit
cross-platform: works on Windows and Unix (on Mac OS, there arecurrently problems with Tcl/Tk)
multi-window text editor with multiple undo, Python colorizingand many other features, e.g. smart indent and call tips
Python shell window (a.k.a. interactive interpreter)
debugger (not complete, but you can set breakpoints, view and step) Subsections
16.5.1.1 File menu
16.5.1.2 Edit menu
16.5.1.3 Windows menu
16.5.1.4 Debug menu (in the Python Shell window only)
16.5.2.1 Automatic indentation
16.5.2.2 Python Shell window
16.5.3.1 Command line usage
The if statement is used for conditional execution:
It selects exactly one of the suites by evaluating the expressions oneby one until one is found to be true (see section5.10 forthe definition of true and false); then that suite is executed (and noother part of the if statement is executed or evaluated). Ifall expressions are false, the suite of the else clause, ifpresent, is executed.
Imaginary literals are described by the following lexical definitions:
An imaginary literal yields a complex number with a real part of0.0.
Complex numbers are represented as a pair of floating pointnumbers and have the same restrictions on their range.
To create acomplex number with a nonzero real part, add a floating point numberto it, e.g., (3+4j).
Some examples of imaginary literals:
Here is a minimal example (without error checking) that opens amailbox and retrieves and prints all messages:
If necessary (the string contains IMAP4protocol-sensitive characters and isn't enclosed with eitherparentheses or double quotes) each string is quoted.
Each datais either a string, or a tuple.
Append message to named mailbox.
Authenticate command -- requires response processing.
mechanism specifies which authentication mechanism is to beused - it should appear in the instance variable capabilitiesin the form AUTH=mechanism.
authobject must be a callable object:
)
Close currently selected mailbox.
Deleted messages are removed fromwritable mailbox.
This is the recommended command before"LOGOUT".
Copy message_set messages onto end of new_mailbox.
Create new mailbox named mailbox.
Delete old mailbox named mailbox.
Delete the ACLs (remove any rights) set for who on mailbox.New in version 2.4.
Permanently remove deleted items from selected mailbox.
Generates an"EXPUNGE" response for each deleted message.
Returned datacontains a list of "EXPUNGE" message numbers in orderreceived.
message_set, message_parts)
Fetch (parts of) messages. message_parts should bea string of message part names enclosed within parentheses,eg: ""(UID BODY[TEXT])"".
Returned data are tuplesof message part envelope and data.
Get the "ACL"s for mailbox.The method is non-standard, but is supported by the "Cyrus" server.
List mailbox names in directory matchingpattern. directory defaults to the top-level mailfolder, and pattern defaults to match anything.
Returned datacontains a list of "LIST" responses.
Identify the client using a plaintext password.The password will be quoted.
login_cram_md5
Force use of "CRAM-MD5" authentication when identifying theclient to protect the password.
Will only work if the server"CAPABILITY" response includes the phrase "AUTH=CRAM-MD5".New in version 2.3.
Shutdown connection to server.
Returns server "BYE" response.
Returns IMAP namespaces as defined in RFC2342.New in version 2.3.
Send "NOOP" to server.
message_num, message_part, start, length)
Fetch truncated part of a message.Returned data is a tuple of message part envelope and data.
user)
Reads size bytes from the remote server.You may override this method.
Reads one line from the remote server.You may override this method.
Prompt server for an update.
Returned data is None if no newmessages, else value of "RECENT" response.
Rename mailbox named oldmailbox to newmailbox.
Return data for response code if received, orNone.
Returns the given code, instead of the usual type.
Search mailbox for matching messages.
Returned data contains a spaceseparated list of matching message numbers. charset may beNone, in which case no "CHARSET" will be specified in therequest to the server.
The IMAP protocol requires that at least onecriterion be specified; an exception will be raised when the serverreturns an error.Example:
# M is a connected IMAP4 instance...msgnums = M.search(None, 'FROM', '"LDJ"')# or:msgnums = M.search(None, '(FROM "LDJ")')
Select a mailbox.
Returned data is the count of messages inmailbox ("EXISTS" response).
The default mailboxis 'INBOX'.
If the readonly flag is set, modificationsto the mailbox are not allowed.
Sends data to the remote server.You may override this method.
Set an "ACL" for mailbox.The method is non-standard, but is supported by the "Cyrus" server.
Close connection established in open.You may override this method.
Returns socket instance used to connect to server.
The sort command is a variant of search with sortingsemantics for the results.
Returned data contains a space separatedlist of matching message numbers.Sort has two arguments before the search_criterionargument(s); a parenthesized list of sort_criteria, and thesearching charset.
Note that unlike search, thesearching charset argument is mandatory.
There is also auid sort command which corresponds to sort the waythat uid search corresponds to search.
Thesort command first searches the mailbox for messages thatmatch the given searching criteria using the charset argument forthe interpretation of strings in the searching criteria.
It thenreturns the numbers of matching messages.This is an "IMAP4rev1" extension command.
Request named status conditions for mailbox.
Alters flag dispositions for messages in mailbox.
Subscribe to new mailbox.
The thread command is a variant of search withthreading semantics for the results.
Returned data contains a spaceseparated list of thread members.Thread members consist of zero or more messages numbers, delimitedby spaces, indicating successive parent and child.Thread has two arguments before the search_criterionargument(s); a threading_algorithm, and the searchingcharset.
Note that unlike search, the searchingcharset argument is mandatory.
There is also a uidthread command which corresponds to thread the way thatuid search corresponds to search.
The threadcommand first searches the mailbox for messages that match the givensearching criteria using the charset argument for the interpretationof strings in the searching criteria.
It thren returns the matchingmessages threaded according to the specified threading algorithm.This is an "IMAP4rev1" extension command.
Execute command args with messages identified by UID, rather thanmessage number.
Returns response appropriate to command.
At leastone argument must be supplied; if none are provided, the server willreturn an error and an exception will be raised.
Unsubscribe from old mailbox.
Allow simple extension commands notified by server in"CAPABILITY" response.
Instances of IMAP4_SSL have just one additional method:
Returns SSLObject instance used for the secure connection with the server.
The following attributes are defined on instances of IMAP4:
The most recent supported protocol in the"CAPABILITY" response from the server.
Integer value to control debugging output.
The initialize value istaken from the module variable Debug.
Values greater thanthree trace each command.
Sets can only contain immutable elements.
Those methods check an element for hashabilityand, if not, check for a __as_temporarily_immutable__() methodwhich returns the element wrapped by a class that provides temporarymethods for __hash__(), __eq__(), and __ne__().The alternate mechanism spares the need to build a separate copy ofthe original mutable object.
In other words, sets of mutable setsare not thread-safe.
Expressions in parentheses, square brackets or curly braces can besplit over more than one physical line without using backslashes.For example:
month_names = ['Januari', 'Februari', 'Maart', # These are the'April', 'Mei', 'Juni', # Dutch names'Juli', 'Augustus', 'September', # for the months'Oktober', 'November', 'December'] # of the year
Implicitly continued lines can carry comments.
The indentation of thecontinuation lines is not important.
Blank continuation lines areallowed.
There is no NEWLINE token between implicit continuationlines.
Implicitly continued lines can also occur within triple-quotedstrings (see below); in that case they cannot carry comments.
Import statements are executed in two steps: (1) find a module, andinitialize it if necessary; (2) define a name or names in the localnamespace (of the scope where the import statement occurs).The first form (without from) repeats these steps for eachidentifier in the list.
This table isaccessible as sys.modules.
When a module name is found inthis table, step (1) is finished.
If not, a search for a moduledefinition is started.
When a module is found, it is loaded.
Detailsof the module searching and loading process are implementation andplatform specific.
It generally involves searching for a ``built-in''module with the given name and then searching a list of locationsgiven as sys. path.
If a built-in module is found,
itsbuilt-in initialization code is executed and step (1) is finished.
Ifno matching file is found,ImportError
is raised.
If a file is found, it is parsed,yielding an executable code block.
If a syntax error occurs,SyntaxError
is raised.
Otherwise, anempty module of the given name is created and inserted in the moduletable, and then the code block is executed in the context of thismodule.
If the module name is followed byas, the name following as is used as the localname for the module.
The from form does not bind the module name: it goes through thelist of identifiers, looks each one of them up in the module found in step(1), and binds the name in the local namespace to the object thus found.
As with the first form of import, an alternate local name can besupplied by specifying "as localname".
If a name is not found,ImportError is raised.
If the list of identifiers is replacedby a star ("*"), all public names defined in the module arebound in the local namespace of the import statement..
The names given in __all__ are allconsidered public and are required to exist.
If __all__ is notdefined, the set of public names includes all names found in themodule's namespace which do not begin with an underscore character("_").
__all__ should contain the entire public API.It is intended to avoid accidentally exporting items that are not partof the API (such as library modules which were imported and used withinthe module).
The from form with "*" may only occur in a modulescope.
If the wild card form of import -- "import *" -- isused in a function and the function contains or is a nested block withfree variables, the compiler will raise a SyntaxError.
Hierarchical module names:
when the module names contains one or more dots, the module searchpath is carried out differently.
The sequence of identifiers up tothe last dot is used to find a ``package''
; the finalidentifier is then searched inside the package.
A package isgenerally a subdirectory of a directory on sys. path that has afile __init__.py.
[XXX Can't be bothered to spell this out right now; see the URLhttp://www.python.org/doc/essays/packages.html for more details, alsoabout how the module search works from inside a package.]The built-in function __import__() is provided to supportapplications that determine which modules need to be loadeddynamically; refer to Built-inFunctions in the
for additionalinformation. Subsections
This is a simplified interface toPyImport_ImportModuleEx() below, leaving theglobals and locals arguments set to NULL.
When thename argument contains a dot (when it specifies a submodule ofa package), the fromlist argument is set to the list['*'] so that the return value is the named module ratherthan the top-level package containing it as would otherwise be thecase.
(Unfortunately, this has an additional side effect whenname in fact specifies a subpackage instead of a submodule:the submodules specified in the package's __all__ variableare
loaded.)
Returna new reference to the imported module, or NULL with an exceptionset on failure.
Before Python 2.4, the module may still be created inthe failure case -- examine sys.modules to find out.
Startingwith Python 2.4, a failing import of a module no longer leaves themodule in sys.modules.Changed in version 2.4:failing imports remove incomplete module objects.
Import a module.
This is best described by referring to thebuilt-in Python function__import__()
, as the standard__import__() function calls this function directly.The return value is a new reference to the imported module ortop-level package, or NULL with an exception set on failure (beforePython 2.4, themodule may still be created in this case).
Like for__import__(), the return value when a submodule of apackage was requested is normally the top-level package, unless anon-empty fromlist was given.Changed in version 2.4:failing imports remove incomplete module objects.
PyObject*
This is a higher-level interface that calls the current ``importhook function''.
It invokes the __import__() functionfrom the __builtins__ of the current globals.
This meansthat the import is done using whatever import hooks are installed inthe current environment, e.g. by rexec
or ihooks
.
Reload a module.
This is best described by referring to thebuilt-in Python function reload()
, asthe standard reload() function calls this functiondirectly.
Return a new reference to the reloaded module, or NULLwith an exception set on failure (the module still exists in thiscase).
PyObject*
Return the module object corresponding to a module name.
Note:This function does not load or import the module; if themodule wasn't already loaded, you will get an empty module object.Use PyImport_ImportModule() or one of its variants toimport a module.
Package structures implied by a dotted name forname are not created if not already present.
Given a module name (possibly of the form package.module) anda code object read from a Python bytecode file or obtained from thebuilt-in function compile()
, loadthe module.
Return a new reference to the module object, or NULLwith an exception set if an error occurred.
Before Python 2.4, the modulecould still be created in error cases.
Starting with Python 2.4,name is removed from sys.modules in error cases, and evenif name was already in sys.modules on entry toPyImport_ExecCodeModule().
Leaving incompletely initializedmodules in sys.modules is dangerous, as imports of such moduleshave no way to know that the module object is an unknown (and probablydamaged with respect to the module author's intents) state.This function will reload the module if it was already imported.
SeePyImport_ReloadModule() for the intended way to reload amodule.If name points to a dotted name of theform package.module, any package structures not alreadycreated will still not be created.
Changed in version 2.4:name is removed from sys.modules in error cases.
Return the magic number for Python bytecode files(a.k.a. .pyc and .pyo files).
The magic number shouldbe present in the first four bytes of the bytecode file, inlittle-endian byte order.
Return the dictionary used for the module administration(a.k.a. sys.modules).
Note that this is a per-interpretervariable.
Initialize the import mechanism.
For internal use only.
Empty the module table.
Finalize the import mechanism.
Load a frozen module named name.
Return 1 for success,0 if the module is not found, and -1 with an exceptionset if the initialization failed.
To access the imported module ona successful load, use PyImport_ImportModule().
(Notethe misnomer -- this function would reload the module if it wasalready imported.)
This is the structure type definition for frozen module descriptors,as generated by the freeze
utility(see Tools/freeze/ in the Python source distribution). Itsdefinition, found in Include/import.h, is:
This pointer is initialized to point to an array of struct_frozen records, terminated by one whose members are all NULL orzero.
When a frozen module is imported, it is searched in thistable.
Third-party code could play tricks with this to provide adynamically created collection of frozen modules.
Add a single module to the existing table of built-in modules.
Thisis a convenience wrapper aroundPyImport_ExtendInittab(), returning -1 if thetable could not be extended.
The new module can be imported by thename name, and uses the function initfunc as theinitialization function called on the first attempted import.
Thisshould be called before Py_Initialize().
Structure describing a single entry in the list of built-inmodules.
Each of these structures gives the name and initializationfunction for a module built into the interpreter.
Programs whichembed Python may use an array of these structures in conjunctionwith PyImport_ExtendInittab() to provide additionalbuilt-in modules.
The structure is defined inInclude/import.
Add a collection of modules to the table of built-in modules.
Thenewtab array must end with a sentinel entry which containsNULL for the name field; failure to provide the sentinelvalue can result in a memory fault.
Returns 0 on success or-1 if insufficient memory could be allocated to extend theinternal table.
In the event of failure, no modules are added tothe internal table.
This should be called beforePy_Initialize().
1.1 Include Files
1.2 Objects, Types and
All function, type and macro definitions needed to use the Python/CAPI are included in your code by the following line:
This implies inclusion of the following standard headers:stdio.h, string.h, errno.h,limits.h, and stdlib.h (if available).
Warning:Since Python may define some pre-processor definitions which affectthe standard headers on some systems, you must includePython.h before any standard headers are included.
All user visible names defined by Python.h (except those defined bythe included standard headers) have one of the prefixes "Py" or"_Py".
Names beginning with "_Py" are for internal use bythe Python implementation and should not be used by extension writers.Structure member names do not have a reserved prefix.
Important: user code should never define names that beginwith "Py" or "_Py".
This confuses the reader, andjeopardizes the portability of the user code to future Pythonversions, which may define additional names beginning with one ofthese prefixes.The header files are typically installed with Python.
On Unix, these are located in the directories
prefix/include/pythonversion/ and
exec_prefix/include/pythonversion/, whereprefix and exec_prefix are defined by thecorresponding parameters to Python's configure script andversion is sys.version[:3].
On Windows, the headers areinstalled in
Do not place the parentdirectories on the search path and then use"#include python2.4/Python.h"; this will break onmulti-platform builds since the platform independent headers underprefix include the platform specific headers fromexec_prefix.C++ users should note that though the API is defined entirely usingC, the header files do properly declare the entry points to beextern "C", so there is no need to do anything special to usethe API from C++.
6.11 Index-generating Markup Effective index generation for technical documents can be verydifficult, especially for someone familiar with the topic but notthe creation of indexes.
Much of the difficulty arises in thearea of terminology: including the terms an expert would use for aconcept is not sufficient.
Coming up with the terms that a novicewould look up is fairly difficult for an author who, typically, isan expert in the area she is writing on.The truly difficult aspects of index generation are not areas withwhich the documentation tools can help.
However, easeof producing the index once content decisions are made is withinthe scope of the tools.
Markup is provided which the processingsoftware is able to use to generate a variety of kinds of indexentry with minimal effort.
This should be used in the document preamble if a ``ModuleIndex'' is desired for a document containing reference materialon many modules.
This causes a data filelibjobname.idx to be created from thedeclaremodule macros.
This file can be processed by themakeindex program to generate a file which can beinput into the document at the desired location of themodule index.
There are a number of macros that are useful for adding indexentries for particular concepts, many of which are specific toprogramming languages or even Python.
Add an index entry referring to a built-in function namedname; parentheses should not be included aftername.
Add a reference to an exception named exception.
Theexception should be class-based.
Add a reference to a language keyword (not a keyword parameterin a function or method call).
Add an index entry for a built-in object type.
Add a reference to an operator, such as "+".
Add an index entry for module module; if modulecontains an underscore, the optional parameter key shouldbe provided as the same string with underscores removed.
Anindex entry ``module (module)'' will be generated.
Thisis intended for use with non-standard modules implemented inPython.
As for refmodindex, but the index entry will be``module (extension module).'' This is intended for usewith non-standard modules not implemented in Python.
As for refmodindex, but the index entry will be``module (built-in module).'' This is intended for usewith standard modules not implemented in Python.
As for refmodindex, but the index entry will be``module (standard module).'' This is intended for usewith standard modules implemented in Python.
Add an index entry for a statement type, such as printor try/finally.XXX Need better examples of difference from kwindex.
Additional macros are provided which are useful for convenientlycreating general index entries which should appear at many placesin the index by rotating a list of words.
These are simple macrosthat simply use index to build some number of indexentries.
Index entries build using these macros contain bothprimary and secondary text.
Build two index entries.
This is exactly equivalent to usingindex{word1!word2} andindex{word2!word1}.
Build three index entries.
This is exactly equivalent to usingindex{word1!word2 word3},index{word2!word3, word1}, andindex{word3!word1 word2}.
Build four index entries.
This is exactly equivalent to usingindex{word1!word2 word3 word4},index{word2!word3 word4, word1},index{word3!word4, word1 word2},andindex{word4!word1 word2 word3}.
6.3 Information Units
XXX Explain terminology, or come up with something more ``lay.''There are a number of environments used to describe specificfeatures provided by modules.
Each environment requiresparameters needed to provide basic information about what is beingdescribed, and the environment content should be the description.Most of these environments make entries in the general index (ifone is being produced for the document); if no index entry isdesired, non-indexing variants are available for many of theseenvironments.
The environments have names of the form
featuredesc, and the non-indexing variants are named
featuredescni.
When the feature is an attribute ofclass instances, type name only needs to be given if theclass was not the most recently described class in the module; thename value from the most recent classdesc is implied.For features of built-in or extension types, the type namevalue should always be provided.
Another special case includesmethods and members of general ``protocols,'' such as theformatter and writer protocols described for theformatter module: these may be documented without anyspecific implementation classes, and will always require thetype name parameter to be provided.
Environment used to described a C function.
The typeshould be specified as a typedef name, structtag
, or the name of a primitive type.
If it is a pointertype, the trailing asterisk should not be preceded by a space.name should be the name of the function (or function-likepre-processor macro), and args should give the types andnames of the parameters.
The names need to be given so they maybe used in the description.
Description for a structure member. container should bethe typedef name, if there is one, otherwise if shouldbe "struct tag
".
The type of the member should givenas type, and the name should be given as name.
Thetext of the description should include the range of valuesallowed, how the value should be interpreted, and whether thevalue can be changed.
References to structure members in textshould use the member macro.
Documentation for a ``simple'' macro.
Simple macros are macroswhich are used for code expansion, but which do not takearguments so cannot be described as functions.
This is not tobe used for simple constant definitions.
Examples of it's usein the Python documentation includePyObject_HEAD andPy_BEGIN_ALLOW_THREADS.
Environment used to described a C type.
The nameparameter should be the typedef name.
If the type isdefined as a struct without a typedef,name should have the form struct tag
Description of a global C variable. type should be thetypedef name, struct tag
, or the name ofa primitive type.
If variable has a pointer type, the trailingasterisk should not be preceded by a space.
Like datadesc, but without creating any index entries.
Descibe an exception defined by a class. constructorparameters should not include the self parameter orthe parentheses used in the call syntax.
To describe anexception class without describing the parameters to itsconstructor, use the excdesc environment.
Describe an exception.
In the case of class exceptions, theconstructor parameters are not described; use excclassdescto describe an exception class and its constructor.
Describe a module-level function. parameters shouldnot include the parentheses used in the call syntax.
Objectmethods are not documented using this environment.
Bound objectmethods placed in the module namespace as part of the publicinterface of the module are documented using this, as they areequivalent to normal functions for most purposes.The description should include information about the parametersrequired and how they are used (especially whether mutableobjects passed as parameters are modified), side effects, andpossible exceptions.
A small example may be provided.
Like funcdesc, but without creating any index entries.
Describe a class and its constructor. constructorparameters should not include the self parameter orthe parentheses used in the call syntax.
Describe a class without describing the constructor.
This canbe used to describe classes that are merely containers forattributes or which should never be instantiated or subclassedby user code.
Describe an object data attribute.
The description shouldinclude information about the type of the data to be expectedand whether it may be changed directly.
Like memberdesc, but without creating any index entries.
Describe an object method. parameters should not includethe self parameter or the parentheses used in the callsyntax.
The description should include similar information tothat described for funcdesc.
Like methoddesc, but without creating any index entries.
6.4 Showing Code Examples
6.5 Inline Markup The macros described in this section are used to mark just aboutanything interesting in the document text.
They may be used inheadings (though anything involving hyperlinks should be avoidedthere) as well as in the body text.
Like code, but also makes the font bold-face.
The name of a C-language variable.
}
The name of a C-language function. name should include thefunction name and the trailing parentheses.
A character when discussing the character rather than a one-bytestring value.
The character will be typeset as with samp.
A title for a referenced publication.
If url is specified,the title will be made into a hyperlink when formatted as HTML.
A class name; a dotted name may be used.
A short code fragment or literal constant value.
Typically, itshould not include any spaces since no quotation marks areadded.
The name of a ``defined'' constant.
This may be a C-language#define or a Python variable that is not intended to bechanged.
The name of a ``simple'' macro.
Simple macros are macroswhich are used for code expansion, but which do not takearguments so cannot be described as functions.
The name of a C typedef or structure.
For structuresdefined without a typedef, use ctype{structstruct_tag} to make it clear that the struct isrequired.
Declare whatever is being described as being deprecated startingwith release version.
The text given as what to doshould recommend something to use instead.
It should becomplete sentences.
The entire deprecation notice will bepresented as a separate paragraph; it should either preceed orsucceed the description of the deprecated feature.
Mark the defining instance of term in the text.
(No indexentries are generated.)
Produces a backslash.
This is convenient in code,file, and similar macros, and the allttenvironment, and is only defined there.
Tocreate a backslash in ordinary text (such as the contents of thecitetitle macro), use the standard textbackslashmacro.
An email address.
Note that this is not hyperlinked inany of the possible output formats.
The domain name portion ofthe address should be lower case.
Emphasized text; this will be presented in an italic font.
An environment variable.
Index entries are generated.
The name of an exception.
A dotted name may be used.
The name of a file or directory.
In the PDF and PostScriptoutputs, single quotes and a font change are used to indicatethe file name, but no quotes are used in the HTML output.
Warning:The file macro cannot be used in thecontent of a section title due to processing limitations.
Like file, but single quotes are never used.
This canbe used in conjunction with tables if a column will only containfile or directory names.
Warning:The filenq macro cannot be used in thecontent of a section title due to processing limitations.
The name of a Python function; dotted names may be used.
The symbol for mathematical infinity: .
Some Webbrowsers are not able to render the HTML representation of thissymbol properly, but support is growing.
Mark a sequence of keystrokes.
What form key sequencetakes may depend on platform- or application-specificconventions.
When there are no relevant conventions, the namesof modifier keys should be spelled out, to improve accessibilityfor new users and non-native speakers.
For example, anxemacs key sequence may be marked likekbd{C-x C-f}, but without reference to a specificapplication or platform, the same sequence should be marked askbd{Control-x Control-f}.
The name of a keyword in a programming language.
The name of an RFC 822-style mail header.
This markup doesnot imply that the header is being used in an email message, butcan be used to refer to any header of the same ``style.'' Thisis also used for headers defined by the various MIMEspecifications.
The header name should be entered in the sameway it would normally be found in practice, with thecamel-casing conventions being preferred where there is morethan one common usage.
The colon which follows the name of theheader should not be included.For example: mailheader{Content-Type}.
The name of a make variable.
A reference to a Unix manual page.
The name of a data attribute of an object.
}
The name of a method of an object. name should include themethod name and the trailing parentheses.
A dotted name may beused.
The name of a MIME type, or a component of a MIME type (themajor or minor portion, taken alone).
The name of a module; a dotted name may be used.
This shouldalso be used for package names.
The name of a Usenet newsgroup.
An especially important bit of information about an API that auser should be aware of when using whatever bit of API thenote pertains to.
This should be the last thing in theparagraph as the end of the note is not visually marked inany way.
The content of text should be written incomplete sentences and include all appropriate punctuation.
A reference to a Python Enhancement Proposal.
This generatesappropriate index entries.
" isgenerated; in the HTML output, this text is a hyperlink to anonline copy of the specified PEP.
The symbol for indicating a value that may take a positive ornegative value of a specified magnitude, typically representedby a plus sign placed over a minus sign.
For example:plusminus 3%.
The name of an executable program.
This may differ from thefile name for the executable for some platforms.
In particular,the .exe (or other) extension should be omitted forWindows programs.
A command-line option to an executable program.
Use this onlyfor ``short'' options, and include the leading hyphen.
A long command-line option to an executable program.
Thisshould only be used for long option names which will be prefixedby two hyphens; the hyphens should not be provided as part ofoption.
Like module, but create a hyperlink to the documentationfor the named module.
Note that the correspondingdeclaremodule must be in the same document.
If thedeclaremodule defines a module key different from themodule name, it must also be provided as key to therefmodule macro.
Mark a regular expression.
A reference to an Internet Request for Comments.
This generatesappropriate index entries.
The text "RFC number
" isgenerated; in the HTML output, this text is a hyperlink to anonline copy of the specified RFC.
A short code sample, but possibly longer than would be givenusing code.
Since quotation marks are added, spaces areacceptable.
The ``short'' version number of the documented software, asspecified using the setshortversion macro in thepreamble.
For Python, the short version number for a release isthe first three characters of the sys.version value.
Forexample, versions 2.0b1 and 2.0.1 both have a short version of2.0.
This may not apply for all packages; ifsetshortversion is not used, this produces an emptyexpansion.
See also the version macro.
Strongly emphasized text; this will be presented using a boldfont.
A hypertext link with a target specified by a URL, but for whichthe link text should not be the title of the resource.
Forresources being referenced by name, use the citetitlemacro.
Not all formatted versions support arbitrary hypertextlinks.
Note that many characters are special to LaTeX andthis macro does not always do the right thing.
In particular,the tilde character ("~") is mis-handled; encoding itas a hex-sequence does work, use "%7e" in place of thetilde character.
A URL (or URN).
The URL will be presented as text.
In the HTMLand PDF formatted versions, the URL will also be a hyperlink.This can be used when referring to external resources withoutspecific titles; references to resources which have titlesshould be marked using the citetitle macro.
See thecomments about special characters in the description of theulink macro for special considerations.
The name of a variable or formal parameter in running text.
The version number of the described software, as specified usingrelease in the preamble.
See also theshortversion macro.
An important bit of information about an API that a user shouldbe very aware of when using whatever bit of API the warningpertains to.
This should be the last thing in the paragraph asthe end of the warning is not visually marked in any way.
Thecontent of text should be written in complete sentencesand include all appropriate punctuation.
This differs fromnote in that it is recommended over note forinformation regarding security.
The following two macros are used to describe information that'sassociated with changes from one release to another.
For featureswhich are described by a single paragraph, these are typicallyadded as separate source lines at the end of the paragraph.
Whenadding these to features described by multiple paragraphs, theyare usually collected in a single separate paragraph after thedescription.
When both versionadded andversionchanged are used, versionadded should comefirst; the versions should be listed in chronological order.
Bothof these should come before availability statements.
The locationshould be selected so the explanation makes sense and may vary asneeded.
The version of Python in which the named feature was changed insome way (new parameters, changed side effects, etc.).explanation should be a brief explanation of thechange consisting of a capitalized sentence fragment; aperiod will be appended by the formatting process.
This shouldnot generally be applied to modules.
Instances of IncrementalParser offer the following additionalmethods:
Process a chunk of data.
Assume the end of the document.
That will check well-formednessconditions that can be checked only at the end, invoke handlers, andmay clean up resources allocated during parsing.
This method is called after close has been called to reset theparser so that it is ready to parse new documents.
The results ofcalling parse or feed after close without calling reset areundefined.
Leading whitespace (spaces and tabs) at the beginning of a logicalline is used to compute the indentation level of the line, which inturn is used to determine the grouping of statements.
First, tabs are replaced (from left to right) by one to eight spacessuch that the total number of characters up to and including thereplacement is a multiple ofeight (this is intended to be the same rule as used by Unix).
Thetotal number of spaces preceding the first non-blank character thendetermines the line's indentation.
Indentation cannot be split overmultiple physical lines using backslashes; the whitespace up to thefirst backslash determines the indentation.
Cross-platform compatibility note: because of the nature oftext editors on non-UNIX platforms, it is unwise to use a mixture ofspaces and tabs for the indentation in a single source file.
Itshould also be noted that different platforms may explicitly limit themaximum indentation level.A formfeed character may be present at the start of the line; it willbe ignored for the indentation calculations above.
The numbers pushed onthe stack will always be strictly increasing from bottom to top.
Atthe beginning of each logical line, the line's indentation level iscompared to the top of the stack.
If it is equal, nothing happens.If it is larger, it is pushed on the stack, and one INDENT token isgenerated.
If it is smaller, it must be one of the numbersoccurring on the stack; all numbers on the stack that are larger arepopped off, and for each number popped off a DEDENT token isgenerated.
At the end of the file, a DEDENT token is generated foreach number remaining on the stack that is larger than zero.Here is an example of a correctly (though confusingly) indented pieceof Python code:
The following example shows various indentation errors:
(Actually, the first three errors are detected by the parser; only thelast error is found by the lexical analyzer -- the indentation ofreturn r does not match a level popped off the stack.)
8.1 Thread State and 8.
Initialization, Finalization, and Threads
Initialize the Python interpreter.
In an application embedding Python, this should be called before using any other Python/C APIfunctions; with the exception ofPy_SetProgramName()
,PyEval_ReleaseLock()
,and PyEval_AcquireLock()
creates the fundamental modules__builtin__
It also initializes the modulesearch path (sys.path).It does not set sys.
argv; usePySys_SetArgv()
for that.
Thisis a no-op when called for a second time (without callingPy_Finalize()
first).
There isno return value; it is a fatal error if the initialization fails.
This function works like Py_Initialize() ifinitsigs is 1. If initsigs is 0, it skipsinitialization registration of signal handlers, whichmight be useful when Python is embedded.
Return true (nonzero) when the Python interpreter has beeninitialized, false (zero) if not.
After Py_Finalize()is called, this returns false until Py_Initialize() iscalled again.
Undo all initializations made by Py_Initialize() andsubsequent use of Python/C API functions, and destroy allsub-interpreters (see Py_NewInterpreter() below) thatwere created and not yet destroyed since the last call toPy_Initialize().
Ideally, this frees all memoryallocated by the Python interpreter.
This is a no-op when calledfor a second time (without calling Py_Initialize() againfirst).
There is no return value; errors during finalization areignored.This function is provided for a number of reasons.
An embeddingapplication might want to restart Python without having to restartthe application itself.
An application that has loaded the Pythoninterpreter from a dynamically loadable library (or DLL) might wantto free all memory allocated by Python before unloading theDLL.
During a hunt for memory leaks in an application a developermight want to free all memory allocated by Python before exitingfrom the application.
Bugs and caveats: The destruction of modules and objects inmodules is done in random order; this may cause destructors(__del__() methods) to fail when they depend on otherobjects (even functions) or modules.
Dynamically loaded extensionmodules loaded by Python are not unloaded.
Small amounts of memoryallocated by the Python interpreter may not be freed (if you find aleak, please report it).
Memory tied up in circular referencesbetween objects is not freed.
Some memory allocated by extensionmodules may not be freed.
Some extensions may not work properly iftheir initialization routine is called more than once; this canhappen if an application calls Py_Initialize() andPy_Finalize() more than once.
Create a new sub-interpreter.
This is an (almost) totally separateenvironment for the execution of Python code.
In particular, thenew interpreter has separate, independent versions of all importedmodules, including the fundamental modules__builtin__
andsys
.
The table of loaded modules(sys.modules) and the module search path (sys.path)are also separate.
The new environment has no sys.argvvariable.
It has new standard I/O stream file objectssys.stdin, sys.stdout and sys.stderr (howeverthese refer to the same underlying FILE structures in the Clibrary).
The return value points to the first thread state created in the newsub-interpreter.
This thread state is made in the current threadstate.
Note that no actual thread is created; see the discussion ofthread states below.
If creation of the new interpreter isunsuccessful, NULL is returned; no exception is set since theexception state is stored in the current thread state and there maynot be a current thread state.
(Like all other Python/C APIfunctions, the global interpreter lock must be held before callingthis function and is still held when it returns; however, unlikemost other Python/C API functions, there needn't be a current threadstate on entry.)Extension modules are shared between (sub-)interpreters as follows:the first time a particular extension is imported, it is initializednormally, and a (shallow) copy of its module's dictionary issquirreled away.
function is calledagain.
Bugs and caveats: Because sub-interpreters (and the maininterpreter) are part of the same process, the insulation betweenthem isn't perfect -- for example, using low-level file operationslike
os.close() they can (accidentally or maliciously) affecteach other's open files.
Because of the way extensions are sharedbetween (sub-)interpreters, some extensions may not work properly;this is especially likely when the extension makes use of (static)global variables, or when the extension manipulates its module'sdictionary after its initialization.
It is possible to insertobjects created in one sub-interpreter into a namespace of anothersub-interpreter; this should be done with great care to avoidsharing user-defined functions, methods, instances or classesbetween sub-interpreters, since import operations executed by suchobjects may affect the wrong (sub-)interpreter's dictionary ofloaded modules.
(XXX This is a hard-to-fix bug that will beaddressed in a future release.)
Destroy the (sub-)interpreter represented by the given thread state.The given thread state must be the current thread state.
See thediscussion of thread states below.
When the call returns, thecurrent thread state is NULL.
All thread states associated withthis interpreter are destroyed.
(The global interpreter lock mustbe held before calling this function and is still held when itreturns.)
willdestroy all sub-interpreters that haven't been explicitly destroyedat that point.
This function should be called beforePy_Initialize()
is calledfor the first time, if it is called at all.
This isused by Py_GetPath()
and someother functions below to find the Python run-time libraries relativeto the interpreter executable.
The default value is'python'.
The argument should point to a zero-terminatedcharacter string in static storage whose contents will not changefor the duration of the program's execution.
No code in the Pythoninterpreter will change the contents of this storage.
Return the program name set withPy_SetProgramName()
, or thedefault. The returned string points into static storage; the callershould not modify its value.
)
Return the prefix for installed platform-independent files.This is derived through a number of complicated rules from theprogram name set with Py_SetProgramName() and someenvironment variables; for example, if the program name is'/usr/local/bin/python', the prefix is '/usr/local'.The returned string points into static storage; the caller shouldnot modify its value.
This corresponds to the prefixvariable in the top-level Makefile and the--prefix argument to the configure scriptat build time.
The value is available to Python code assys.prefix.
It is only useful on Unix.
See also the nextfunction.
Return the exec-prefix for installedplatform-dependent files.
This is derived through a numberof complicated rules from the program name set withPy_SetProgramName() and some environment variables; forexample, if the program name is '/usr/local/bin/python', theexec-prefix is '/usr/local'.
The returned string points intostatic storage; the caller should not modify its value.
Thiscorresponds to the exec_prefix variable in the top-levelMakefile and the --exec-prefix argument to theconfigure script at build time.
The value is availableto Python code as sys.exec_prefix.
It is only useful onUnix.Background: The exec-prefix differs from the prefix when platformdependent files (such as executables and shared libraries) areinstalled in a different directory tree.
In a typical installation,platform dependent files may be installed in the/usr/local/plat subtree while platform independent may beinstalled in /usr/local.Generally speaking, a platform is a combination of hardware andsoftware families, e.g.
Sparc machines running the Solaris 2.xoperating system are considered the same platform, but Intelmachines running Solaris 2.x are another platform, and Intelmachines running Linux are yet another platform.
Different majorrevisions of the same operating system generally also form differentplatforms.
Return the full program name of the Python executable; this is computed as a side-effect of deriving the default module search path from the program name (set byPy_SetProgramName()
above).The returned string points into static storage; the caller shouldnot modify its value.
The value is available to Python code assys.executable.
char*
Return the default module search path; this is computed from the program name (set by Py_SetProgramName() above) and someenvironment variables.
The returned string consists of a series ofdirectory names separated by a platform dependent delimitercharacter.
The delimiter character is ":" on Unix,";" on Windows, and "n" (the ASCIInewline character) on Macintosh.
The valueis available to Python code as the listsys.path
, whichmay be modified to change the future search path for loadedmodules.
Return the version of this Python interpreter.
This is a stringthat looks something like
"1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"
The first word (up to the first space character) is the currentPython version; the first three characters are the major and minorversion separated by a period.
The valueis available to Python code as sys.version.
Return the platform identifier for the current platform.
On Unix,this is formed from the ``official'' name of the operating system,converted to lower case, followed by the major revision number;e.g., for Solaris 2.x, which is also known as SunOS 5.x, the valueis 'sunos5'.
On Macintosh, it is 'mac'.
On Windows,it is 'win'.
The returned string points into static storage;the caller should not modify its value.
The value is available toPython code as sys. platform.
Return the official copyright string for the current Python version,for example 'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'
The returned string points into static storage; the caller shouldnot modify its value.
The value is available to Python code assys.copyright.
Return an indication of the compiler used to build the currentPython version, in square brackets, for example:
"[GCC 2.7.2.2]"
The value is available to Python code as partof the variable sys.version.
Return information about the sequence number and build date and time of the current Python interpreter instance, for example
The returned string points into static storage; the caller shouldnot modify its value.
Set sys.argv based on argc and argv.
Theseparameters are similar to those passed to the program'smain()
function with the difference thatthe first entry should refer to the script file to be executedrather than the executable hosting the Python interpreter.
If thereisn't a script that will be run, the first entry in argv canbe an empty string.
Subsections 8.1 Thread State and the Global Interpreter Lock
8.1 Thread State and
Sets the public identifier of this InputSource.
Returns the public identifier of this InputSource.
Sets the system identifier of this InputSource.
Returns the system identifier of this InputSource.
Get the character encoding of this InputSource.
)
Get the byte stream for this input source.The getEncoding method will return the character encoding for thisbyte stream, or None if unknown.
Set the character stream for this input source.
(The stream must bea Python 1.6 Unicode-wrapped file-like that performs conversion toUnicode strings.)If there is a character stream specified, the SAX parser will ignoreany byte stream and will not attempt to open a URI connection to thesystem identifier.
Get the character stream for this input source.
)
Arrange the given list of classes into a hierarchy of nested lists.Where a nested list appears, it contains classes derived from the classwhose entry immediately precedes the list.
Each entry is a 2-tuplecontaining a class and a tuple of its base classes.
If the uniqueargument is true, exactly one entry appears in the returned structurefor each class in the given list.
Otherwise, classes using multipleinheritance and their descendants will appear multiple times.
func)
Format a pretty argument spec from the four values returned bygetargspec().
The other four arguments are thecorresponding optional formatting functions that are called to turnnames and values into strings.
Format a pretty argument spec from the four values returned bygetargvalues().
Return a tuple of class cls's base classes, including cls, inmethod resolution order.
No class appears more than once in this tuple.Note that the method resolution order depends on cls's type.
Unless avery peculiar user-defined metatype is in use, cls will be the firstelement of the tuple.
Get the documentation string for an object.All tabs are expanded to spaces.
To clean up docstrings that areindented to line up with blocks of code, any whitespace than can beuniformly removed from the second line onwards is removed.
Return in a single string any lines of comments immediately precedingthe object's source code (for a class, function, or method), or at thetop of the Python source file (if the object is a module).
Return the name of the (text or binary) file in which an object wasdefined.
This will fail with a TypeError if the objectis a built-in module, class, or function.
Try to guess which module an object was defined in.
Return the name of the Python source file in which an object wasdefined.
This will fail with a TypeError if the objectis a built-in module, class, or function.
Return a list of source lines and starting line number for an object.The argument may be a module, class, method, function, traceback, frame,or code object.
The source code is returned as a list of the linescorresponding to the object and the line number indicates where in theoriginal source file the first line of code was found.
AnIOError is raised if the source code cannot be retrieved.
Return the text of the source code for an object.The argument may be a module, class, method, function, traceback, frame,or code object.
The source code is returned as a single string.
When the following functions return ``frame records,'' each recordis a tuple of six items: the frame object, the filename,the line number of the current line, the function name, a list oflines of context from the source code, and the index of the currentline within that list.
Warning:Keeping references to frame objects, as found inthe first element of the frame records these functions return, cancause your program to create reference cycles.
Once a reference cyclehas been created, the lifespan of all objects which can be accessedfrom the objects which form the cycle can become much longer even ifPython's optional cycle detector is enabled.
If such cycles must becreated, it is important to ensure they are explicitly broken to avoidthe delayed destruction of objects and increased memory consumptionwhich occurs.Though the cycle detector will catch these, destruction of the frames(and local variables) can be made deterministic by removing the cyclein a finally clause.
This is also important if the cycledetector was disabled when Python was compiled or using
.disable().
For example:
The optional context argument supported by most of thesefunctions specifies the number of lines of context to return, whichare centered around the current line.
Get information about a frame or traceback object.
A 5-tupleis returned, the last five elements of the frame's frame record.
Get a list of frame records for a frame and all outer frames.
Theseframes represent the calls that lead to the creation of frame.The first entry in the returned list represents frame; thelast entry represents the outermost call on frame's stack.
Get a list of frame records for a traceback's frame and all innerframes.
These frames represent calls made as a consequence offrame.
The first entry in the list representstraceback; the last entry represents where the exception wasraised.
Return the frame object for the caller's stack frame.
Return a list of frame records for the caller's stack.
The firstentry in the returned list represents the caller; the last entryrepresents the outermost call on the stack.
Return a list of frame records for the stack between the currentframe and the frame in which an exception currently being handledwas raised in.
The first entry in the list represents the caller;the last entry represents where the exception was raised.
The install command ensures that the build commands have been run and thenruns the subcommands install_lib,install_data andinstall_scripts.
This command installs all data files provided with the distribution.
This command installs all (Python) scripts in the distribution.
There are very few functions specific to instance objects.
Type object for class instances.
Returns true if obj is an instance.
Create a new instance of a specific class.
The parameters argand kw are used as the positional and keyword parameters tothe object's constructor.
Create a new instance of a specific class without calling it'sconstructor. class is the class of new object.
Thedict parameter will be used as the object's __dict__;if NULL, a new dictionary will be created for the instance.
This subtype of PyObject represents a Python integerobject.
This instance of PyTypeObject represents the Python plaininteger type.
This is the same object as types.IntType.
Returns true if o is of type PyInt_Type or a subtypeof PyInt_Type.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if o is of type PyInt_Type, but not asubtype of PyInt_Type.New in version 2.2.
Return a new PyIntObject or PyLongObject based on thestring value in str, which is interpreted according to the radix inbase.
If pend is non-NULL, *pend
will point tothe first character in str which follows the representation of thenumber.
If base is 0, the radix will be determined based onthe leading characters of str: if str starts with '0x'or '0X', radix 16 will be used; if str starts with'0', radix 8 will be used; otherwise radix 10 will be used.
Ifbase is not 0, it must be between 2 and 36,inclusive.
Leading spaces are ignored.
If there are no digits,ValueError will be raised.
If the string represents a numbertoo large to be contained within the machine's long int type andoverflow warnings are being suppressed, a PyLongObject will bereturned.
If overflow warnings are not being suppressed, NULL will bereturned in this case.
Creates a new integer object with a value of ival.The current implementation keeps an array of integer objects for allintegers between -1 and 100, when you create an int inthat range you actually just get back a reference to the existingobject.
So it should be possible to change the value of 1.
Isuspect the behaviour of Python in this case is undefined. :-)
Will first attempt to cast the object to a PyIntObject, ifit is not already one, and then return its value.
Returns the value of the object io.
No error checking isperformed.
Will first attempt to cast the object to a PyIntObject orPyLongObject, if it is not already one, and then return itsvalue as unsigned long.
This function does not check for overflow.New in version 2.3.
Integer and long integer literals are described by the followinglexical definitions:
Although both lower case "l" and upper case "L" areallowed as suffix for long integers, it is strongly recommended to alwaysuse "L", since the letter "l" looks too much like thedigit "1".Plain integer literals that are above the largest representable plaininteger (e.g., 2147483647 when using 32-bit arithmetic) are acceptedas if they were long integers instead.
2.1
There is no limit for long integerliterals apart from what can be stored in available memory.Some examples of plain integer literals (first row) and long integerliterals (second and third rows):
Footnotes ... instead.
In versions of Pythonprior to 2.4, octal and hexadecimal literals in the range just abovethe largest representable plain integer but below the largest unsigned32-bit number (on a machine using 32-bit arithmetic), 4294967296, weretaken as the negative plain integer obtained by subtracting 4294967296from their unsigned value.
Input in interactive mode is parsed using the following grammar:
Note that a (top-level) compound statement must be followed by a blankline in interactive mode; this is needed to help the parser detect theend of the input.
Internet Protocols and Support
The modules described in this chapter implement Internet protocols and support for related technology.
They are all implemented in Python.Most of these modules require the presence of the system-dependentmodule
, which is currentlysupported on most popular platforms.
Here is an overview:
Easy-to-use controller for Web browsers.
Common Gateway Interface support, used to interpretforms in server-side scripts.
Configurable traceback handler for CGI scripts.
Open an arbitrary network resource by URL (requires sockets).
An extensible library for opening URLs using a variety of protocols
HTTP and HTTPS protocol client (requires sockets).
FTP protocol client (requires sockets).
Gopher protocol client (requires sockets).
POP3 protocol client (requires sockets).
NNTP protocol client (requires sockets).
SMTP protocol client (requires sockets).
Implement a flexible SMTP server
Telnet client class.
Parse URLs into components.
A framework for network servers.
Basic HTTP server (base class forSimpleHTTPServer and CGIHTTPServer).
This module provides a basic request handler for HTTPservers.
This module provides a request handler for HTTP serverswhich can run CGI scripts.
Cookie handling for HTTP clients
Support for HTTP state management (cookies).
Basic XML-RPC server implementation.
Self-documenting XML-RPC server implementation.
A base class for developing asynchronous socket handling services.
Support for asynchronous command/response protocols.
One several things can happen:
The input is incorrect; compile_command() raised anexception (SyntaxError or OverflowError).
Asyntax traceback will be printed by calling theshowsyntaxerror() method. runsource() returnsFalse.
The input is complete; compile_command() returned a codeobject.
The code is executed by calling the runcode() (whichalso handles run-time exceptions, except for SystemExit).runsource() returns False.
The return value can be used to decide whether to usesys.
ps1 or sys. ps2 to prompt the next line.
Execute a code object.When an exception occurs, showtraceback() is called todisplay a traceback.
The callershould be prepared to deal with it.
Display the syntax error that just occurred.
Display the exception that just occurred.
Write a string to the standard error stream (sys.stderr).Derived classes should override this to provide the appropriate outputhandling as needed.
You should see the version information and the"" prompt.
Use it exactly as described in thestandard documentation.
Introduction Python/C API Reference Manual
Introduction The Application Programmer's Interface to Python gives C andC++ programmers access to the Python interpreter at a variety oflevels.
The API is equally usable from C++, but for brevity it isgenerally referred to as the Python/C API.
There are twofundamentally different reasons for using the Python/C API.
The firstreason is to write extension modules for specific purposes;these are C modules that extend the Python interpreter.
This isprobably the most common use.
The second reason is to use Python as acomponent in a larger application; this technique is generallyreferred to as embedding Python in an application.Writing an extension module is a relatively well-understood process, where a ``cookbook'' approach works well.
There are several tools that automate the process to some extent.
While people have embedded Python in other applications since its early existence, the process of embedding Python is less straightforward than writing an extension.
Many API functions are useful independent of whether you're embedding or extending Python; moreover, most applications that embed Python will need to provide a custom extension as well, so it's probably a good idea to become familiar with writing an extension before attempting to embed Python in a real application. Subsections
1.2.1.1 Reference Count Details
1.
Introduction
This reference manual describes the Python programming language.It is not intended as a tutorial.While I am trying to be as precise as possible, I chose to use Englishrather than formal specifications for everything except syntax andlexical analysis.
On theother hand, there is currently only one Python implementation inwidespread use (although a second one now exists!), andits particular quirks are sometimes worth being mentioned, especiallywhere the implementation imposes additional limitations.
Therefore,you'll find short ``implementation notes'' sprinkled throughout thetext.Every Python implementation comes with a number of built-in andstandard modules.
These are not documented here, but in the separate
document.
A fewbuilt-in modules are mentioned when they interact in a significant waywith the language definition.
Subsections 1.1 Notation
Python provides two general-purpose iterator objects.
The first, asequence iterator, works with an arbitrary sequence supporting the__getitem__() method.
The second works with a callableobject and a sentinel value, calling the callable for each item in thesequence, and ending the iteration when the sentinel value isreturned.
Type object for iterator objects returned byPySeqIter_New() and the one-argument form of theiter() built-in function for built-in sequence types.New in version 2.2.
Return true if the type of op is PySeqIter_Type.New in version 2.2.
Return an iterator that works with a general sequence object,seq.
The iteration ends when the sequence raisesIndexError for the subscripting operation.New in version 2.2.
Type object for iterator objects returned byPyCallIter_New() and the two-argument form of theiter() built-in function.New in version 2.2.
Return true if the type of op is PyCallIter_Type.New in version 2.2.
Return a new iterator.
The first parameter, callable, can beany Python callable object that can be called with no parameters;each call to it should return the next item in the iteration.
Whencallable returns a value equal to sentinel, theiteration will be terminated.New in version 2.2.
There are only a couple of functions specifically for working withiterators.
Return true if the object o supports the iterator protocol.
Return the next value from the iteration o.
If the object isan iterator, this retrieves the next value from the iteration, andreturns NULL with no exception set if there are no remainingitems.
If the object is not an iterator, TypeError israised, or if there is an error in retrieving the item, returnsNULL and passes along the exception.
To write a loop which iterates over an iterator, the C code shouldlook something like this:
PyObject *iterator = PyObject_GetIter(obj);PyObject *item;if (iterator == NULL) {/* propagate error */}while (item = PyIter_Next(iterator)) {/* do something with item */.../* release reference when done */Py_DECREF(item);}Py_DECREF(iterator);if (PyErr_Occurred()) {/* propagate error */}else {/* continue doing useful work */}
The following examples show common uses for each tool anddemonstrate ways they can be combined.
The following module functions all construct and return iterators.Some provide streams of infinite length, so they should only be accessedby functions or loops that truncate the stream.
Make an iterator that returns elements from the first iterable untilit is exhausted, then proceeds to the next iterable, until all of theiterables are exhausted.
Used for treating consecutive sequences asa single sequence.
Equivalent to:
Make an iterator that returns consecutive integers starting with n.If not specified n defaults to zero.
Does not currently support python long integers.
Often used as anargument to imap() to generate consecutive data points.Also, used with izip() to add sequence numbers.
Note, count() does not check for overflow and will returnnegative numbers after exceeding sys.maxint.
This behaviormay change in the future.
Make an iterator returning elements from the iterable and saving acopy of each.
When the iterable is exhausted, return elements fromthe saved copy. Repeats indefinitely.
Make an iterator that drops elements from the iterable as long asthe predicate is true; afterwards, returns every element.
Note,the iterator does not produce any output until the predicateis true, so it may have a lengthy start-up time.
Make an iterator that returns consecutive keys and groups from theiterable.
The key is a function computing a key value for eachelement.
If not specified or is None, key defaults to anidentity function and returns the element unchanged.
Generally, theiterable needs to already be sorted on the same key function.The returned group is itself an iterator that shares the underlyingiterable with groupby().
Because the source is shared, whenthe groupby object is advanced, the previous group is nolonger visible.
Make an iterator that filters elements from iterable returning onlythose for which the predicate is True.If predicate is None, return the items that are true.Equivalent to:
def ifilter(predicate, iterable):if predicate is None:predicate = boolfor x in iterable:if predicate(x):yield x
Make an iterator that filters elements from iterable returning onlythose for which the predicate is False.If predicate is None, return the items that are false.Equivalent to:
def ifilterfalse(predicate, iterable):if predicate is None:predicate = boolfor x in iterable:if not predicate(x):yield x
Make an iterator that computes the function using arguments fromeach of the iterables.
If function is set to None, thenimap() returns the arguments as a tuple.
Likemap() but stops when the shortest iterable is exhaustedinstead of filling in None for shorter iterables.
The reasonfor the difference is that infinite iterator arguments are typicallyan error for map() (because the output is fully evaluated)but represent a common and useful way of supplying arguments toimap().Equivalent to:
def imap(function, *iterables):iterables = map(iter, iterables)while True:args = [i.next() for i in iterables]if function is None:yield tuple(args)else:yield function(*args)
Make an iterator that returns selected elements from the iterable.If start is non-zero, then elements from the iterable are skippeduntil start is reached.
Afterward, elements are returned consecutivelyunless step is set higher than one which results in items beingskipped.
If stop is None, then iteration continues untilthe iterator is exhausted, if at all; otherwise, it stops at the specifiedposition.
Unlike regular slicing,islice() does not support negative values for start,stop, or step.
Can be used to extract related fieldsfrom data where the internal structure has been flattened (forexample, a multi-line report may list a name field on everythird line).
Make an iterator that aggregates elements from each of the iterables.Like zip() except that it returns an iterator instead ofa list.
Used for lock-step iteration over several iterables at atime.
Changed in version 2.4:When no iterables are specified, returns a zero lengthiterator instead of raising a TypeError exception.
)
Make an iterator that returns object over and over again.Runs indefinitely unless the times argument is specified.Used as argument to imap() for invariant parametersto the called function.
Also used with izip() to createan invariant part of a tuple record.
Make an iterator that computes the function using arguments tuplesobtained from the iterable.
Used instead of imap() whenargument parameters are already grouped in tuples from a single iterable(the data has been ``pre-zipped'').
The difference betweenimap() and starmap() parallels the distinctionbetween function(a,b) and function(*c).Equivalent to:
Make an iterator that returns elements from the iterable as long asthe predicate is true.
Return n independent iterators from a single iterable.The case where n==2 is equivalent to:
def tee(iterable):def gen(next, data={}, cnt=[0]):for i in count():if i == cnt[0]:item = data[i] = next()cnt[0] += 1else:item = data.pop(i)yield itemit = iter(iterable)return (gen(it.next), gen(it.next))
This section shows recipes for creating an extended toolset using theexisting itertools as building blocks.The extended tools offer the same high performance as the underlyingtoolset.
The superior memory performance is kept by processing elements oneat a time rather than bringing the whole iterable into memory all at once.Code volume is kept small by linking the tools together in a functional stylewhich helps eliminate temporary variables.
High speed is retained bypreferring ``vectorized'' building blocks over the use of for-loops andgenerators which incur interpreter overhead.
2.3.2 Reserved classes of
The following identifiers are used as reserved words, orkeywords of the language, and cannot be used as ordinaryidentifiers.
They must be spelled exactly as written here:
Note that although the identifier as can be used as part of thesyntax of import statements, it is not currently a reservedword.In some future version of Python, the identifiers as andNone will both become keywords.
Lambda forms (lambda expressions) have the same syntactic position asexpressions.
They are a shorthand to create anonymous functions; theexpression lambda arguments: expression
yields a function object.
The unnamed object behaves like a functionobject defined with
See section 7.5 for the syntax of parameter lists.
Notethat functions created with lambda forms cannot contain statements.
Python Language Services
Python provides a number of modules to assist in working with thePython language.
These module support tokenizing, parsing, syntaxanalysis, bytecode disassembly, and various other facilities.These modules include:
Access parse trees for Python source code.
Test whether a string is a keyword in Python.
Lexical scanner for Python source code.
Tool for detecting white space related problemsin Python source files in a directory tree.
Supports information extraction for a Python classbrowser.
Compile Python source files to byte-code files.
Tools for byte-compiling all Python source files in adirectory tree.
Support for building and installing Python modulesinto an existing Python installation.
LaTeX provides a variety of environments even without theadditional markup provided by the Python-specific document classesintroducted in the next section.
The following environments areprovided as part of standard LaTeX and are being used in thestandard Python documentation; descriptions will be added here astime allows.
4 LaTeX Primer
This section is a brief introduction to LaTeX concepts andsyntax, to provide authors enough information to author documentsproductively without having to become ``TeXnicians.'' This doesnot teach everything needed to know about writing LaTeX forPython documentation; many of the standard ``environments'' are notdescribed here (though you will learn how to mark something as anenvironment).Perhaps the most important concept to keep in mind while marking upPython documentation is that while TeX is unstructured, LaTeX wasdesigned as a layer on top of TeX which specifically supportsstructured markup.
The Python-specific markup is intended to extendthe structure provided by standard LaTeX document classes tosupport additional information specific to Python.
LaTeX documents contain two parts: the preamble and the body.The preamble is used to specify certain metadata about the documentitself, such as the title, the list of authors, the date, and theclass the document belongs to.
Additional information usedto control index generation and the use of bibliographic databasescan also be placed in the preamble.
For most authors, the preamblecan be most easily created by copying it from an existing documentand modifying a few key pieces of information.The class of a document is used to place a document within abroad category of documents and set some fundamental formattingproperties.
For Python documentation, two classes are used: themanual class and the howto class.
These classes alsodefine the additional markup used to document Python concepts andstructures.
Specific information about these classes is provided insection 5, ``Document Classes,'' below.
The first thingin the preamble is the declaration of the document's class.After the class declaration, a number of macros are used toprovide further information about the document and setup anyadditional markup that is needed.
No output is generated from thepreamble; it is an error to include free text in the preamblebecause it would cause output.The document body follows the preamble.
This contains all theprinted components of the document marked up structurally.
GenericLaTeX structures include hierarchical sections, numbered andbulleted lists, and special structures for the document abstract andindexes. Subsections
LaTeX expects documents to be arranged in a conventional,hierarchical way, with chapters, sections, sub-sections,appendixes, and the like.
These are marked using macros ratherthan environments, probably because the end of a section can besafely inferred when a section of equal or higher level starts.There are six ``levels'' of sectioning in the document classesused for Python documentation, and the deepest twolevels
are not used.
The levels are:
Level Macro Name
Only used for the manual documents, as described insection 5, ``Document Classes.''
Not the same as a paragraph of text; nobody seems to use this. Footnotes
... levels
The deepest levels have the highest numbers in thetable.
4.1 Syntax
There are some things that an author of Python documentation needsto know about LaTeX syntax.A comment is started by the ``percent'' character("%") and continues through the end of the line and allleading whitespace on the following line.
This is a littledifferent from any programming language I know of, so an exampleis in order:
The first non-comment character following the first comment is theletter "T" on the second line; the leading whitespace onthat line is consumed as part of the first comment.
Groups can be nested hierarchically.
The formattingcontext includes the font and the definition of additional macros(or overrides of macros defined in outer groups).
Syntactically,groups are enclosed in braces:
Since Python tends toward the explicit, groupsare also made explicit in the documentation markup.Groups are used only sparingly in the Python documentation, exceptfor their use in marking parameters to macros and environments.A macro is usually a simple construct which is identified byname and can take some number of parameters.
In normal LaTeXusage, one of these can be optional.
The markup is introducedusing the backslash character (""), and the name isgiven by alphabetic characters (no digits, hyphens, orunderscores).
Required parameters should be marked as a group,and optional parameters should be marked using the alternatesyntax for a group.For example, a macro which takes a single parameterwould appear like this:
A macro which takes an optional parameter would be typed like thiswhen the optional parameter is given:
If both optional and required parameters are to be required, itlooks like this:
A macro name may be followed by a space or newline; a spacebetween the macro name and any parameters will be consumed, butthis usage is not practiced in the Python documentation.
Such aspace is still consumed if there are no parameters to the macro,in which case inserting an empty group ({}) or explicitword space ("
") immediately after the macro name helps toavoid running the expansion of the macro into the following text.Macros which take no parameters but which should not be followedby a word space do not need special treatment if the followingcharacter in the document source if not a name character (such aspunctuation).Each line of this example shows an appropriate way to write textwhich includes a macro which takes no parameters:
An environment is a larger construct than a macro, and canbe used for things with more content than would conveniently fitin a macro parameter.
They are primarily used when formattingparameters need to be changed before and after a large chunk ofcontent, but the content itself needs to be highly flexible.
These macros both take thename of the environment as a parameter.
An example is theenvironment used to mark the abstract of a document: \begin{abstract}This is the text of the abstract.
An environment can also have required and optional parameters ofits own.
These follow the parameter of the begin macro.This example shows an environment which takes a single requiredparameter:
There are a number of less-used marks in LaTeX which are usedto enter characters which are not found in ASCII or which aconsidered special, or active in TeX or LaTeX.
Giventhat these are often used adjacent to other characters, the markuprequired to produce the proper character may need to be followedby a space or an empty group, or the markup can be enclosed in agroup.
Some which are found in Python documentation are:
Character
Markup
Set-up and tear-down functions can also optionally bewrapped.Given the following test function:
one can create an equivalent test case instance as follows:
If there are additional set-up and tear-down methods that should becalled as part of the test case's operation, they can also be provided:
Note:PyUnit supports the use of AssertionErroras an indicator of test failure, but does not recommend it.
Futureversions may treat AssertionError differently.
A Python program is read by a parser.
Input to the parser is astream of tokens, generated by the lexical analyzer.
Future compatibility note: It may be tempting to assume that thecharacter set for 8-bit characters is ISO Latin-1 (an ASCIIsuperset that covers most western languages that use the Latinalphabet), but it is possible that in the future Unicode text editorswill become common.
These generally use the UTF-8 encoding, which isalso an ASCII superset, but with very different use for thecharacters with ordinals 128-255.
While there is no consensus on thissubject yet, it is unwise to assume either Latin-1 or UTF-8, eventhough the current implementation appears to favor Latin-1.
Thisapplies both to the source character set and the run-time characterset. Subsections
6.8 Library-level Markup This markup is used when describing a selection of modules.
Forexample, the
Macintosh LibraryModules
document uses this to help provide an overview of themodules in the collection, and many chapters in the
use it forthe same purpose.
If a .syn file exists for the currentchapter (or for the entire document in howto documents), asynopsistable is created with the contents loaded from the.syn file.
A Python program is divided into a number of logical lines.
Subsections 2.1.1 Logical lines
While the configure script shipped with the Python sourceswill correctly build Python to export the symbols needed bydynamically linked extensions, this is not automatically inherited byapplications which embed the Python library statically, at least onUnix.
This is an issue when the application is linked to the staticruntime library (libpython.a) and needs to load dynamicextensions (implemented as .so files).The problem is that some entry points are defined by the Pythonruntime solely for extension modules to use.
If the embeddingapplication does not use any of these entry points, some linkers willnot include those entries in the symbol table of the finishedexecutable.
Some additional options are needed to inform the linkernot to remove these symbols.Determining the right options to use for any given platform can bequite difficult, but fortunately the Python configuration already hasthose values.
To retrieve them from an installed Python interpreter,start an interactive interpreter and have a short session like this:
The contents of the string presented will be the options that shouldbe used.
If the string is empty, there's no need to add anyadditional options.
The LINKFORSHARED definitioncorresponds to the variable of the same name in Python's top-levelMakefile.
This subtype of PyObject represents a Python list object.
This instance of PyTypeObject represents the Python listtype.
This is the same object as types.ListType.
Returns a new list of length len on success, or NULL onfailure.
Returns the length of the list object in list; this isequivalent to "len(list)" on a list object.
Macro form of PyList_Size() without error checking.
Returns the object at position pos in the list pointed to byp.
If pos is out of bounds, returns NULL and sets anIndexError exception.
Macro form of PyList_GetItem() without error checking.
Sets the item at index index in list to item.
Returns0 on success or -1 on failure.
Note:This function``steals'' a reference to item and discards a reference to anitem already in the list at the affected position.
Macro form of PyList_SetItem() without error checking.This is normally only used to fill in new lists where there is noprevious content.
Note:This function ``steals'' a reference to item, and,unlike PyList_SetItem(), does not discard areference to any item that it being replaced; any reference inlist at position i will be leaked.
Inserts the item item into list list in front of indexindex.
Returns 0 if successful; returns -1 andraises an exception if unsuccessful.
Analogous to list.insert(index, item).
Appends the object item at the end of list list.Returns 0 if successful; returns -1 and sets anexception if unsuccessful.
Analogous to list.append(item).
Returns a list of the objects in list containing the objectsbetween low and high.
Returns NULL and setsan exception if unsuccessful.Analogous to
list[low:high].
Sets the slice of list between low and high to thecontents of itemlist.
.The itemlist may be NULL, indicating the assignmentof an empty list (slice deletion).Returns 0 on success, -1 on failure.
Sorts the items of list in place.
Returns 0 onsuccess, -1 on failure.
Reverses the items of list in place.
This is the equivalent of"
Returns a new tuple object containing the contents of list;equivalent to "tuple(list)".
For a small module distribution, you might prefer to list all modulesrather than listing packages--especially the case of a single modulethat goes in the ``root package'' (i.e., no package at all).
Thissimplest case was shown in section1.2; here is aslightly more involved example:
This describes two modules, one of them in the ``root'' package, theother in the pkg package.
Again, the default package/directorylayout implies that these two modules can be found in mod1.py andpkg/mod2.py, and that pkg/__init__.py exists as well.And again, you can override the package/directory correspondence usingthe package_dir option.
The packages option tells the Distutils to process (build,distribute, install, etc.) all pure Python modules found in each packagementioned in the packages list.
In order to do this, ofcourse, there has to be a correspondence between package names anddirectories in the filesystem.
The default correspondence is the mostobvious one, i.e. package distutils is found in the directorydistutils relative to the distribution root.
Thus, when you saypackages = ['foo'] in your setup script, you are promising thatthe Distutils will find a file foo/__init__.py (which mightbe spelled differently on your system, but you get the idea) relative tothe directory where your setup script lives.
If you break thispromise, the Distutils will issue a warning but still process the brokenpackage anyways.If you use a different convention to lay out your source directory,that's no problem: you just have to supply the package_diroption to tell the Distutils about your convention.
For example, sayyou keep all Python source under lib, so that modules in the``root package'' (i.e., not in any package at all) are inlib, modules in the foo package are in lib/foo,and so forth. Then you would put
in your setup script.
The keys to this dictionary are package names,and an empty package name stands for the root package.
The values aredirectory names relative to your distribution root.
In this case, whenyou say packages = ['foo'], you are promising that the filelib/foo/__init__.py exists.Another possible convention is to put the foo package right in lib, the foo.bar package in lib/bar, etc.
Thiswould be written in the setup script as
A
entry in the package_dirdictionary implicitly applies to all packages below package, sothe foo.bar case is automatically handled here.
In thisexample, having packages = ['foo', 'foo.bar'] tells the Distutilsto look for lib/__init__.py andlib/bar/__init__.py.
(Keep in mind that althoughpackage_dir applies recursively, you must explicitly list allpackages in packages: the Distutils will not recursivelyscan your source tree looking for any directory with an__init__.py file.)
A list display is a possibly empty series of expressions enclosed insquare brackets:
A list display yields a new list object.
Its contents are specifiedby providing either a list of expressions or a list comprehension.
When a comma-separated list of expressions is supplied, its elements areevaluated from left to right and placed into the list object in thatorder.
When a list comprehension is supplied, it consists of asingle expression followed by at least one for clause and zero ormore for or if clauses.
In thiscase, the elements of the new list are those that would be producedby considering each of the for or if clauses a block,nesting fromleft to right, and evaluating the expression to produce a list elementeach time the innermost block is reached
... reached
In Python 2.3, alist comprehension "leaks" the control variables of each"for" it contains into the containing scope.
However, thisbehavior is deprecated, and relying on it will not work once thisbug is fixed in a future release
Literals are notations for constant values of some built-in types.
Subsections 2.4.1 String literals
6.27.2 For extension writers
The locale module exposes the C library's gettext interface on systemsthat provide this interface.
It consists of the functionsgettext(), dgettext(), dcgettext(),textdomain(), bindtextdomain(), andbind_textdomain_codeset().
These are similar to the samefunctions in the
module, but use the C library'sbinary format for message catalogs, and the C library's searchalgorithms for locating message catalogs.
Python applications should normally find no need to invoke thesefunctions, and should use
For these applications, it may be necessary tobind the text domain, so that the libraries can properly locate theirmessage catalogs.
Instances of Locator provide these methods:
Return the column number where the current event ends.
Return the line number where the current event ends.
Return the public identifier for the current event.
Return the system identifier for the current event.
7.5.1 Lock Objects A primitive lock is a synchronization primitive that is not ownedby a particular thread when locked.
In Python, it is currentlythe lowest level synchronization primitive available, implementeddirectly by the
It has two basic methods,acquire() and release().
When the state isunlocked, acquire() changes the state to locked and returnsimmediately.
When the state is locked, acquire() blocksuntil a call to release() in another thread changes it tounlocked, then the acquire() call resets it to locked andreturns.
The release() method should only be called in thelocked state; it changes the state to unlocked and returnsimmediately.
)
Acquire a lock, blocking or non-blocking.When invoked without arguments, block until the lock isunlocked, then set it to locked, and return.
There is noreturn value in this case.When invoked with the blocking argument set to true, do thesame thing as when called without arguments, and return true.When invoked with the blocking argument set to false, do notblock.
If a call without an argument would block, return falseimmediately; otherwise, do the same thing as when calledwithout arguments, and return true.
Release a lock.When the lock is locked, reset it to unlocked, and return.
6.29.10.1 Configuration functions
This function can be called several times from an application,allowing an end user the ability to select from various pre-cannedconfigurations (if the developer provides a mechanism to present thechoices and load the chosen configuration).
6.29.10 Configuration
6.29.10.2 Configuration file format
6.29.10.2 Configuration file format
6.29.10.1 Configuration functions
The configuration file format understood by fileConfig() isbased on ConfigParser functionality.
The file must contain sectionscalled [loggers], [handlers] and [formatters]which identify by name the entities of each type which are defined inthe file.
For each such entity, there is a separate section whichidentified how that entity is configured.
Thus, for a logger namedlog01 in the [loggers] section, the relevantconfiguration details are held in a section[logger_log01].
Similarly, a handler called hand01 inthe [handlers] section will have its configuration held in asection called [handler_hand01], while a formatter calledform01 in the [formatters] section will have itsconfiguration specified in a section called[formatter_form01].
The root logger configuration must bespecified in a section called [logger_root].Examples of these sections in the file are given below.
The root logger must specify a level and a list of handlers.
Anexample of a root logger section is given below.
The level entry can be one of DEBUG, INFO, WARNING,ERROR, CRITICAL or NOTSET.
For the root logger only,NOTSET means that all messages will be logged.
Level values areeval()uated in the context of the logging package'snamespace.The handlers entry is a comma-separated list of handler names,which must appear in the [handlers] section.
These names mustappear in the [handlers] section and have correspondingsections in the configuration file.For loggers other than the root logger, some additional information isrequired.
This is illustrated by the following example.
The level and handlers entries are interpreted as forthe root logger, except that if a non-root logger's level is specifiedas NOTSET, the system consults loggers higher up the hierarchyto determine the effective level of the logger.
The propagateentry is set to 1 to indicate that messages must propagate to handlershigher up the logger hierarchy from this logger, or 0 to indicate thatmessages are not propagated to handlers up the hierarchy.
Thequalname entry is the hierarchical channel name of the logger,that is to say the name used by the application to get the logger.Sections which specify handler configuration are exemplified by thefollowing.
The class entry indicates the handler's class (as determined byeval() in the logging package's namespace).
Thelevel is interpreted as for loggers, and NOTSET is takento mean "log everything".The formatter entry indicates the key name of the formatter forthis handler.
If blank, a default formatter(logging._defaultFormatter) is used.
If a name is specified, itmust appear in the [formatters] section and have acorresponding section in the configuration file.The args entry, when eval()uated in the context ofthe logging package's namespace, is the list of arguments tothe constructor for the handler class.
Refer to the constructors forthe relevant handlers, or to the examples below, to see how typicalentries are constructed.
Sections which specify formatter configuration are typified by the following.
The format entry is the overall format string, and thedatefmt entry is the strftime()-compatible date/time formatstring.
If empty, the package substitutes ISO8601 format date/times, whichis almost equivalent to specifying the date format string "The ISO8601 format also specifies milliseconds, which are appended to theresult of using the above format string, with a comma separator.
An exampletime in ISO8601 format is 2003-01-23 00:29:50,411.
The end ofa logical line is represented by the token NEWLINE.
Statements cannotcross logical line boundaries except where NEWLINE is allowed by thesyntax (e.g., between statements in compound statements).A logical line is constructed from one or more physical linesby following the explicit or implicit line joining rules.
This subtype of PyObject represents a Python long integerobject.
This instance of PyTypeObject represents the Python longinteger type.
This is the same object as types.LongType.
Returns true if its argument is a PyLongObject or a subtypeof PyLongObject.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if its argument is a PyLongObject, but not asubtype of PyLongObject.New in version 2.2.
Returns a new PyLongObject object from v, or NULLon failure.
Returns a new PyLongObject object from a C unsignedlong, or NULL on failure.
Returns a new PyLongObject object from a C long long,or NULL on failure.
Returns a new PyLongObject object from a C unsignedlong long, or NULL on failure.
Returns a new PyLongObject object from the integer part ofv, or NULL on failure.
Return a new PyLongObject based on the string value instr, which is interpreted according to the radix inbase.
willpoint to the first character in str which follows therepresentation of the number.
If base is 0, the radixwill be determined based on the leading characters of str: ifstr starts with '0x' or '0X', radix 16 will beused; if str starts with '0', radix 8 will be used;otherwise radix 10 will be used.
If base is not 0, itmust be between 2 and 36, inclusive.
Leading spacesare ignored.
If there are no digits, ValueError will beraised.
Convert a sequence of Unicode digits to a Python long integervalue.
The first parameter, u, points to the first characterof the Unicode string, length gives the number of characters,and base is the radix for the conversion.
The radix must bein the range [2, 36]; if it is out of range, ValueErrorwill be raised.New in version 1.6.
PyObject*
Returns a C long representation of the contents ofpylong.
Returns a C unsigned long representation of the contents ofpylong.
Return a C long long from a Python long integer.
Ifpylong cannot be represented as a long long, anOverflowError will be raised.New in version 2.2.
Return a C unsigned long from a Python long integer, withoutchecking for overflow.New in version 2.3.
Return a C unsigned long long from a Python long integer, withoutchecking for overflow.New in version 2.3.
Returns a C double representation of the contents ofpylong.
If pylong cannot be approximately representedas a double, an OverflowError exception israised and -1.0 will be returned.
Convert a Python integer or long integer pylong to a Cvoid pointer.
If pylong cannot be converted, anOverflowError will be raised.
This is only assured toproduce a usable void pointer for values created withPyLong_FromVoidPtr().New in version 1.5.2.
The high level interface gives you the ability to executearbitrary pieces of Python code from your application, butexchanging data values is quite cumbersome to say the least.
Ifyou want that, you should use lower level calls.
At the cost ofhaving to write more C code, you can achieve almost anything.It should be noted that extending Python and embedding Pythonis quite the same activity, despite the different intent.
Mosttopics discussed in the previous chapters are still valid.
Toshow this, consider what the extension code from Python to Creally does:
Convert data values from Python to C,
Perform a function call to a C routine using theconverted values, and
Convert the data values from the call from C to Python.
When embedding Python, the interface code does:
Convert data values from C to Python,
Perform a function call to a Python interface routineusing the converted values, and
Convert the data values from the call from Python to C.
As you can see, the data conversion steps are simply swapped toaccommodate the different direction of the cross-language transfer.The only difference is the routine that you call between bothdata conversions.
When extending, you call a C routine, whenembedding, you call a Python routine.This chapter will not discuss how to convert data from Pythonto C and vice versa.
Also, proper use of references and dealingwith errors is assumed to be understood.
Since these aspects do notdiffer from extending the interpreter, you can refer to earlierchapters for the required information.
The following modules are only available on the Macintosh, and aredocumented here:
Implementations for the os module.
MacOS path manipulation functions.
Support for FSSpec, the Alias Manager,finder aliases, and the Standard File package.
Access to Internet Config.
Access to Mac OS-specific interpreter features.
Convenience routines for file manipulation.
Wrappers around the finder's Apple Events interface.
Basic Macintosh dialogs.
Interactive application framework.
Global Interpreter Lock handling in event loops.
All implementations of mailbox objects are iterable objects, andhave one externally visible method.
This method is used by iteratorscreated from mailbox objects and may also be used directly.
Return the next message in the mailbox, created with the optionalfactory argument passed into the mailbox object's constructor.By default this is an rfc822.Messageobject (see the
rfc822
module).
Depending on the mailboximplementation the fp attribute of this object may be a truefile object or a class instance simulating a file object, taking careof things like message boundaries if multiple mail messages arecontained in a single file, etc.
If no more messages are available,this method returns None.
4.1 Specifying the files
4. Creating a Source
Creating Built Distributions 4.2 Manifest-related options
The normal course of operations for the sdist command is asfollows:
if the manifest file, MANIFEST doesn't exist, readMANIFEST.in and create the manifest
if neither MANIFEST nor MANIFEST.in exist, create amanifest with just the default file set
if either MANIFEST.in or the setup script (setup.py)are more recent than MANIFEST, recreate MANIFEST byreading MANIFEST.in
use the list of files now in MANIFEST (either justgenerated or read in) to create the source distribution archive(s)
There are a couple of options that modify this behaviour.
First, usethe --no-defaults and --no-prune todisable the standard ``include'' and ``exclude'' sets.Second, you might want to force the manifest to be regenerated--forexample, if you have added or removed files or directories that match anexisting pattern in the manifest template, you should regenerate themanifest:
Or, you might just want to (re)generate the manifest, but not create asource distribution:
--manifest-only implies --force-manifest.-o is a shortcut for --manifest-only, and-f for --force-manifest.
Creating Built Distributions
Subsections 7.4.1 Dictionary Objects
10.5 Number Object Structures
Structure used to hold pointers to the functions used to implementthe mapping protocol for an extension type.
Return 1 if the object provides mapping protocol, and0 otherwise.
This function always succeeds.
Returns the number of keys in object o on success, and-1 on failure.
For objects that do not provide mappingprotocol, this is equivalent to the Python expression"len(o)".
Remove the mapping for object key from the object o.Return -1 on failure.
This is equivalent to the Pythonstatement "del o[key]".
Remove the mapping for object key from the object o.Return -1 on failure.
On success, return 1 if the mapping object has the keykey and 0 otherwise.
This function alwayssucceeds.
Return 1 if the mapping object has the key key and0 otherwise.
This is equivalent to the Python expression"
o.has_key(key)".
On success, return a list of the keys in object o.
Onfailure, return NULL.
o.keys()".
On success, return a list of the values in object o.
o.values()".
On success, return a list of the items in object o, where eachitem is a tuple containing a key-value pair.
On failure, returnNULL.
o.items()".
Return element of o corresponding to the object key orNULL on failure.
This is the equivalent of the Python expression"
o[key]".
Map the object key to the value v in object o.Returns -1 on failure.
This is the equivalent of the Pythonstatement "
".
Structured Markup Processing Tools
Python supports a variety of modules to work with various forms ofstructured data markup.
A simple parser that can handle HTML and XHTML.
Only as much of an SGML parser as needed to parse HTML.
A parser for HTML documents.
Definitions of HTML general entities.
An interface to the Expat non-validating XML parser.
Document Object Model API for Python.
Lightweight Document Object Model (DOM) implementation.
Support for building partial DOM trees from SAX events.
Package containing SAX2 base classes and conveniencefunctions.
Base classes for SAX event handlers.
Convenience functions and classes for use with SAX.
Interface which SAX-compliant XML parsers must implement.
A parser for XML documents.
Python/XML Libraries
Home page for the PyXML package, containing an extensionof xml package bundled with Python.
These routines allow C code to work with serialized objects using thesame data format as the marshal module.
There are functionsto write data into the serialization format, and additional functionsthat can be used to read the data back.
Py_MARSHAL_VERSIONindicates the current file format (currently 1).
Marshal a long integer, value, to file.
Thiswill only write the least-significant 32 bits of value;regardless of the size of the native long type.
Changed in version 2.4:version indicates the file format.
Marshal a Python object, value, to file.
Return a string object containing the marshalled representation ofvalue.
Return a C long from the data stream in a FILE*opened for reading.
Only a 32-bit value can be read in usingthis function, regardless of the native size of long.
Return a C short from the data stream in a FILE*opened for reading.
Only a 16-bit value can be read in usingthis function, regardless of the native size of short.
Return a Python object from the data stream in a FILE*opened for reading.
On error, sets the appropriate exception(EOFError or TypeError) and returns NULL.
UnlikePyMarshal_ReadObjectFromFile(), this function assumesthat no further objects will be read from the file, allowing it toaggressively load file data into memory so that the de-serializationcan operate from data in memory rather than reading a byte at a timefrom the file.
Only use these variant if you are certain that youwon't be reading anything else from the file.
On error, sets theappropriate exception (EOFError orTypeError) and returns NULL.
Return a Python object from the data stream in a character buffercontaining len bytes pointed to by string.
On error,sets the appropriate exception (EOFError orTypeError) and returns NULL.
MatchObject instances support the following methods andattributes:
Return the string obtained by doing backslash substitution on thetemplate string template, as done by the sub() method.Escapes such as "n" are converted to the appropriatecharacters, and numeric backreferences ("1", "2") andnamed backreferences ("g1", "gname") are replacedby the contents of the corresponding group.
Returns one or more subgroups of the match.
If there is a singleargument, the result is a single string; if there aremultiple arguments, the result is a tuple with one item per argument.Without arguments, group1 defaults to zero (the whole matchis returned).If a groupN argument is zero, the corresponding return value is theentire matching string; if it is in the inclusive range [1..
99], it isthe string matching the corresponding parenthesized group.
If agroup number is negative or larger than the number of groups definedin the pattern, an IndexError exception is raised.If a group is contained in a part of the pattern that did not match,the corresponding result is None.
If a group is contained in apart of the pattern that matched multiple times, the last match isreturned.If the regular expression uses the (?Pname...) syntax,the groupN arguments may also be strings identifying groups bytheir group name.
If a string argument is not used as a group name inthe pattern, an IndexError exception is raised.A moderately complicated example:
After performing this match, m.group(1) is '3', as ism.group('int'), and m.group(2) is '14'.
Return a tuple containing all the subgroups of the match, from 1 up tohowever many groups are in the pattern.
The default argument isused for groups that did not participate in the match; it defaults toNone.
(Incompatibility note: in the original Python 1.5release, if the tuple was one element long, a string would be returnedinstead.
In later versions (from 1.5.1 on), a singleton tuple isreturned in such cases.)
Return a dictionary containing all the named subgroups of thematch, keyed by the subgroup name.
The default argument isused for groups that did not participate in the match; it defaults toNone.
Return the indices of the start and end of the substringmatched by group; group defaults to zero (meaning the wholematched substring).Return -1 if group exists butdid not contribute to the match.
For a match objectm, and a group g that did contribute to the match, thesubstring matched by group g (equivalent to
m.string[m.start(g):m.end(g)]
Note thatm.start(group) will equal m.end(group) ifgroup matched a null string.
For example, after
m =re.search('b(c?)', 'cba'),
m.start(0) is 1,
m.end(0) is 2,
m.start(1) and
m.end(1) are both 2, and
m.start(2) raisesan IndexError exception.
For MatchObject m, return the 2-tuple(m.start(group), m.end(group)).Note that if group did not contribute to the match, this is(-1, -1).
Again, group defaults to zero.
The value of pos which was passed to the search() ormatch() method of the RegexObject.
This is theindex into the string at which the RE engine started looking for amatch.
The value of endpos which was passed to the search()or match() method of the RegexObject.
This is theindex into the string beyond which the RE engine will not go.
The integer index of the last matched capturing group, or Noneif no group was matched at all.
For example, the expressions(a)b, ((a)(b)), and ((ab)) will havelastindex == 1 if applyied to the string 'ab',while the expression (a)(b) will have lastindex == 2,if applyied to the same string.
The name of the last matched capturing group, or None if thegroup didn't have a name, or if no group was matched at all.
The regular expression object whose match() orsearch() method produced this MatchObject instance.
The string passed to match() or search().
Python offers two different primitive operations based on regularexpressions: match and search.
If you are accustomed to Perl'ssemantics, the search operation is what you're looking for.
See thesearch() function and corresponding method of compiledregular expression objects.Note that match may differ from search using a regular expressionbeginning with "^":"^" matches only at thestart of the string, or in MULTILINE mode also immediatelyfollowing a newline.
The ``match'' operation succeeds only if thepattern matches at the start of the string regardless of mode, or atthe starting position given by the optional pos argumentregardless of whether a newline precedes it.
re.compile("a").match("ba", 1) # succeedsre.compile("^a").search("ba", 1) # fails; 'a' not at startre.compile("^a").search("\na", 1) # fails; 'a' not at startre.compile("^a", re.M).search("\na", 1) # succeedsre.compile("^a", re.M).search("ba", 1) # fails; no preceding \n
8.3 Advanced Debugger Support
9.1 Overview 9.
Memory Management
Subsections 9.1 Overview
Here is the example from section 9.1, rewritten sothat the I/O buffer is allocated from the Python heap by using thefirst function set:
The same code using the type-oriented function set:
Note that in the two examples above, the buffer is alwaysmanipulated via functions belonging to the same set.
Indeed, itis required to use the same memory API family for a givenmemory block, so that the risk of mixing different allocators isreduced to a minimum.
The following code sequence contains two errors,one of which is labeled as fatal because it mixes two differentallocators operating on different heaps.
*/free(buf2); /* Right -- allocated via malloc()
*/free(buf1); /* Fatal -- should be PyMem_Del() */
In addition to the functions aimed at handling raw memory blocks fromthe Python heap, objects in Python are allocated and released withPyObject_New(), PyObject_NewVar() andPyObject_Del(), or with their corresponding macrosPyObject_NEW(), PyObject_NEW_VAR() andPyObject_DEL().These will be explained in the next chapter on defining andimplementing new object types in C.
The following function sets, modeled after the ANSI C standard,but specifying behavior when requesting zero bytes,are available for allocating and releasing memory from the Python heap:
(
size_t n)
Allocates n bytes and returns a pointer of type void*to the allocated memory, or NULL if the request fails.Requesting zero bytes returns a distinct non-NULL pointer ifpossible, as if PyMem_Malloc(1) had been called instead.The memory will not have been initialized in any way.
If p is NULL, the call is equivalent toPyMem_Malloc(n); else if n is equal to zero, thememory block is resized but is not freed, and the returned pointeris non-NULL.
Unless p is NULL, it must have beenreturned by a previous call to PyMem_Malloc() orPyMem_Realloc().
Frees the memory block pointed to by p, which must have beenreturned by a previous call to PyMem_Malloc() orPyMem_Realloc().
Otherwise, or ifPyMem_Free(p) has been called before, undefinedbehavior occurs.
If p is NULL, no operation is performed.
The following type-oriented macros are provided for convenience.
Returns a pointer cast to
TYPE*. The memory will not have been initialized inany way.
Same as PyMem_Realloc(), but the memory block is resizedto (n * sizeof(TYPE)) bytes.
Returns a pointercast to TYPE*.
Same as PyMem_Free().
In addition, the following macro sets are provided for calling thePython memory allocator directly, without involving the C API functionslisted above.
However, note that their use does not preserve binarycompatibility accross Python versions and is therefore deprecated inextension modules.
PyMem_MALLOC(), PyMem_REALLOC(), PyMem_FREE().
PyMem_NEW(), PyMem_RESIZE(), PyMem_DEL().
Memory management in Python involves a private heap containing allPython objects and data structures.
The management of this privateheap is ensured internally by the Python memory manager.
On topof the raw memory allocator, several object-specific allocatorsoperate on the same heap and implement distinct memory managementpolicies adapted to the peculiarities of every object type.
Forexample, integer objects are managed differently within the heap thanstrings, tuples or dictionaries because integers imply differentstorage requirements and speed/space tradeoffs.
The Python memorymanager thus delegates some of the work to the object-specificallocators, but ensures that the latter operate within the bounds ofthe private heap.It is important to understand that the management of the Python heapis performed by the interpreter itself and that the user has nocontrol over it, even if she regularly manipulates object pointers tomemory blocks inside that heap.
The allocation of heap space forPython objects and other internal buffers is performed on demand bythe Python memory manager through the Python/C API functions listed inthis document.To avoid memory corruption, extension writers should never try tooperate on Python objects with the functions exported by the Clibrary: malloc()
,calloc()
,realloc()
andfree()
.
This will result in mixed calls between the C allocator and the Python memory managerwith fatal consequences, because they implement different algorithmsand operate on different heaps.
However, one may safely allocate andrelease memory blocks with the C library allocator for individualpurposes, as shown in the following example:
In this example, the memory request for the I/O buffer is handled bythe C library allocator.
Consequently, under certaincircumstances, the Python memory manager may or may not triggerappropriate actions, like garbage collection, memory compaction orother preventive procedures.
Note that by using the C libraryallocator as shown in the previous example, the allocated memory forthe I/O buffer escapes completely the Python memory manager.
A Message instance has the following methods:
Seek to the start of the message body.
This only works if the fileobject is seekable.
Returns a line's canonicalized fieldname (the dictionary key that willbe used to index it) if the line is a legal RFC 2822 header; otherwisereturns None (implying that parsing should stop here and theline be pushed back on the input stream).
It is sometimes useful tooverride this method in a subclass.
Return true if the given line is a delimiter on which Message shouldstop.
The delimiter line is consumed, and the file object's readlocation positioned immediately after it.
By default this method justchecks that the line is blank, but you can override it in a subclass.
Return True if the given line should be ignored entirely, just skipped.By default this is a stub that always returns False, but you canoverride it in a subclass.
Return a list of lines consisting of all headers matchingname, if any.
Each physical line, whether it is a continuationline or not, is a separate list item.
Return the empty list if noheader matches name.
Return a list of lines comprising the first header matchingname, and its continuation line(s), if any.
ReturnNone if there is no header matching name.
Return a single string consisting of the text after the colon in thefirst header matching name.
This includes leading whitespace,the trailing linefeed, and internal linefeeds and whitespace if thereany continuation line(s) were present.
Return None if there isno header matching name.
Like getrawheader(name), but strip leading and trailingwhitespace.
Internal whitespace is not stripped.
The optionaldefault argument can be used to specify a different default tobe returned when there is no header matching name.
An alias for getheader(), to make the interface more compatible with regular dictionaries.
Return a pair (full name, email address) parsedfrom the string returned by getheader(name).
This is similar to getaddr(list), but parses a headercontaining a list of email addresses (e.g. a To: header) andreturns a list of (full name, email address) pairs(even if there was only one address in the header).
Retrieve a header using getheader() and parse it into a 9-tuplecompatible with time. mktime(); note that fields 6, 7, and 8 are not usable.
If there is no header matchingname, or it is unparsable, return None.Date parsing appears to be a black art, and not all mailers adhere tothe standard.
While it has been tested and found correct on a largecollection of email from many sources, it is still possible that thisfunction may occasionally yield an incorrect result.
Retrieve a header using getheader() and parse it into a10-tuple; the first 9 elements will make a tuple compatible withtime.mktime(), and the 10th is a number giving the offsetof the date's timezone from UTC. Note that fields 6, 7, and 8 are not usable.
Similarly to getdate(), ifthere is no header matching name, or it is unparsable, returnNone.
Message instances also support a limited mapping interface.In particular:
m[name] is like
m.getheader(name) but raises KeyError ifthere is no matching header; and len(m),
]),
m.keys(),
m.items(), and
]) act asexpected, with the one difference that setdefault() usesan empty string as the default value.
Message instancesalso support the mapping writable interface
m[name] =value and del m[name].
Message objects do notsupport the clear(), copy(), popitem(), orupdate() methods of the mapping interface.
(Support forget() and setdefault() was only added in Python2.2.)Finally, Message instances have some public instance variables:
A list containing the entire set of header lines, in the order inwhich they were read (except that setitem calls may disturb thisorder).
Each line contains a trailing newline.
Theblank line terminating the headers is not contained in the list.
The file or file-like object passed at instantiation time.
This canbe used to read the message content.
The Unix "From" line, if the message had one, or an emptystring.
This is needed to regenerate the message in some contexts,such as an mbox-style mailbox file.
2.8 Debugging the setup
The setup script may include additional meta-data beyond the name andversion.
This information includes:
Meta-Data
name of the package
short string
version of this release
package author's name
email address of the package author
email address
package maintainer's name
email address of the package maintainer
home page for the package
short, summary description of the package
longer description of the package
long string
location where the package may be downloaded
a list of Trove classifiers
list of strings
These fields are required.
It is recommended that versions take the formmajor.minor[.patch[.sub]
.
Either the author or the maintainer must be identified.
These fields should not be used if your package is to becompatible with Python versions prior to 2.2.3 or 2.3.
The list isavailable from the PyPI website.
'short string'
A single line of text, not more than 200 characters.
'long string'
Multiple lines of plain text in reStructuredTextformat (see http://docutils.sf.net/).
'list of strings'
See below.
None of the string values may be Unicode.Encoding the version information is an art in itself.
Python packagesgenerally adhere to the version formatmajor.minor[.patch]
.
The major number is0 forinitial, experimental releases of software.
It is incremented forreleases that represent major milestones in a package.
The minornumber is incremented when important new features are added to thepackage.
The patch number increments when bug-fix releases aremade.
Additional trailing version information is sometimes used toindicate sub-releases.
These are "a1,a2,...,aN" (for alpha releases,where functionality and API may change), "b1,b2,...,bN" (for betareleases, which only fix bugs) and "pr1,pr2,...,prN" (for finalpre-release release testing).
Some examples:
the first, experimental release of a package
the second alpha release of the first patch version of 1.0
classifiers are specified in a python list:
If you wish to include classifiers in your setup.py file and alsowish to remain backwards-compatible with Python releases prior to 2.2.3,then you can include the following code fragment in your setup.pybefore the setup() call.
6.1 Markup for the
The domain name portion ofthe address should be lower case.No presentation is generated from this markup, but it is used tohelp keep track of contributions.
Modifying the class dictionary prior to the class being created.
Returning an instance of another class - essentially performingthe role of a factory function.
__metaclass__
This variable can be any callable accepting arguments for name,bases, and dict.
Upon class creation, the callable isused instead of the built-in type().New in version 2.2.
The appropriate metaclass is determined by the following precedence rules:
If dict['__metaclass__'] exists, it is used.
Otherwise, if there is at least one base class, its metaclass is used(this looks for a __class__ attribute first and if not found, uses itstype).
Otherwise, if a global variable named __metaclass__ exists, it is used.
Otherwise, the old-style, classic metaclass (types.ClassType) is used.
The potential uses for metaclasses are boundless.
Some ideas that havebeen explored including logging, interface checking, automatic delegation,automatic property creation, proxies, frameworks, and automatic resourcelocking/synchronization.
There are some useful functions that are useful for working withmethod objects.
This instance of PyTypeObject represents the Python methodtype.
This is exposed to Python programs as types.MethodType.
Return true if o is a method object (has typePyMethod_Type).
The parameter must not be NULL.
Return a new method object, with func being any callableobject; this is the function that will be called when the method iscalled.
If this method should be bound to an instance, selfshould be the instance and class should be the class ofself, otherwise self should be NULL and classshould be the class which provides the unbound method..
PyObject*
Return the class object from which the method meth wascreated; if this was created from an instance, it will be the classof the instance.
Macro version of PyMethod_Class() which avoids errorchecking.
Return the function object associated with the method meth.
Macro version of PyMethod_Function() which avoids errorchecking.
Return the instance associated with the method meth if it isbound, otherwise return NULL.
Macro version of PyMethod_Self() which avoids errorchecking.
I promised to show how spam_system() is called from Pythonprograms.
First, we need to list its name and address in a ``methodtable'':
Note the third entry ("METH_VARARGS").
This is a flag tellingthe interpreter the calling convention to be used for the Cfunction.
In this case, theC function should accept a third "PyObject *" parameter whichwill be a dictionary of keywords.
UsePyArg_ParseTupleAndKeywords() to parse the arguments tosuch a function.The method table must be passed to the interpreter in the module'sinitialization function.
The initialization function must be namedinitname(), where name is the name of themodule, and should be the only non-static item defined inthe module file:
Note that PyMODINIT_FUNC declares the function as void return type, declares any special linkage declarations required by the platform, and for C++ declares the function as extern "C".When the Python program imports module spam for the firsttime, initspam() is called.
(See below for comments aboutembedding Python.)
It callsPy_InitModule(), which creates a ``module object'' (whichis inserted in the dictionary sys.modules under the key"spam"), and inserts built-in function objects into the newlycreated module based upon the table (an array of PyMethodDefstructures) that was passed as its second argument.Py_InitModule() returns a pointer to the module objectthat it creates (which is unused here).
It aborts with a fatal errorif the module could not be initialized satisfactorily, so the callerdoesn't need to check for errors.When embedding Python, the initspam() function is notcalled automatically unless there's an entry in the_PyImport_Inittab table.
The easiest way to handle this is to statically initialize your statically-linked modules by directlycalling initspam() after the call toPy_Initialize() or PyMac_Initialize():
intmain(int argc, char *argv[]){/* Pass argv[0] to the Python interpreter */Py_SetProgramName(argv[0]);/* Initialize the Python interpreter.
Required.
*/Py_Initialize();/* Add a static module */initspam();
An example may be found in the file Demo/embed/demo.c in thePython source distribution.
A more substantial example module is included in the Python sourcedistribution as Modules/xxmodule.c.
This file may be used as a template or simply read as an example.
The modulator.pyscript included in the source distribution or Windows install provides a simple graphical user interface for declaring the functions andobjects which a module should implement, and can generate a templatewhich can be filled in.
The script lives in theTools/modulator/ directory; see the README file therefor more information.
Folder instances represent open folders and have the followingmethods:
Print an error message - can be overridden.
Return the folder's full pathname.
Return the full pathname of the folder's sequences file.
Return the full pathname of message n of the folder.
Return a list of messages in the folder (as numbers).
Return the current message number.
Set the current message number to n.
Parse msgs syntax into list of messages.
Get last message, or 0 if no messages are in the folder.
Set last message (internal use only).
Return dictionary of sequences in folder.
The sequence names are used as keys, and the values are the lists of message numbers in thesequences.
Return dictionary of sequences in folder name: list.
Remove messages in list from folder.
Move messages in list to other folder.
Move one message to a given destination in another folder.
Copy one message to a given destination in another folder.
The Message class adds one method to those ofmimetools.Message:
Return a new open message object (costs a file descriptor).
MH instances have the following methods:
Return a profile entry (None if not set).
Return the mailbox pathname.
Return the current folder name.
Set the current folder name.
Return a list of top-level folders.
Return a list of all folders.
Return a list of direct subfolders of the given folder.
Return a list of all subfolders of the given folder.
Create a new folder.
Delete a folder - must have no subfolders.
Return a new open folder object.
The Message class defines the following methods inaddition to the rfc822.Message methods:
)
Return the parameter list of the Content-Type: header.This is a list of strings.
", key is converted to lower case butvalue is not.
For example, if the message contains the header"Content-type: text/html; spam=1; Spam=2; Spam" thengetplist() will return the Python list ['spam=1','spam=2', 'Spam'].
Return the encoding specified in theContent-Transfer-Encoding: message header.
If no suchheader exists, return '7bit'.
The encoding is converted tolower case.
Return the message type (of the form "
")as specified in the Content-Type: header.
If no suchheader exists, return 'text/plain'.
The type is converted tolower case.
Return the main type as specified in the Content-Type:header.
If no such header exists, return 'text'.
The maintype is converted to lower case.
Return the subtype as specified in the Content-Type:header.
If no such header exists, return 'plain'.
The subtypeis converted to lower case.
MimeTypes instances provide an interface which is very likethat of the
module.
Dictionary mapping suffixes to suffixes.
This is used to allowrecognition of encoded files for which the encoding and the type areindicated by the same extension.
For example, the .tgzextension is mapped to .tar.gz to allow the encoding and typeto be recognized separately.
This is initially a copy of the globalsuffix_map defined in the module.
Dictionary mapping filename extensions to encoding types.
This isinitially a copy of the global encodings_map defined in themodule.
Dictionary mapping filename extensions to MIME types.
This isinitially a copy of the global types_map defined in themodule.
Dictionary mapping filename extensions to non-standard, but commonlyfound MIME types.
This is initially a copy of the globalcommon_types defined in the module.
Similar to the guess_extension() function, using thetables stored as part of the object.
Similar to the guess_type() function, using the tablesstored as part of the object.
Load MIME information from a file named path.
This usesreadfp() to parse the file.
Load MIME type information from an open file.
The file must havethe format of the standard mime. types files.
module is essentially a DOM1.0-compatible DOM with some DOM 2 features (primarily namespacefeatures).Usage of the DOM interface in Python is straight-forward.
Thefollowing mapping rules apply:
Interfaces are accessed through instance objects.
Applicationsshould not instantiate the classes themselves; they should usethe creator functions available on the Document object.Derived interfaces support all operations (and attributes) fromthe base interfaces, plus any new operations.
Operations are used as methods.
Since the DOM uses onlyin parameters, the arguments are passed in normalorder (from left to right).
There are no optionalarguments. void operations return None.
IDL attributes map to instance attributes.
For compatibilitywith the OMG IDL language mapping for Python, an attributefoo can also be accessed through accessor methods_get_foo() and _set_foo(). readonlyattributes must not be changed; this is not enforced atruntime.
The types short int, unsigned int, unsignedlong long, and boolean all map to Python integerobjects.
The type DOMString maps to Python strings.
supports either byte or Unicodestrings, but will normally produce Unicode strings.
Valuesof type DOMString may also be None where allowedto have the IDL null value by the DOM specification fromthe W3C.
const declarations map to variables in theirrespective scope(e.g. xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE);they must not be changed.
DOMException is currently not supported in
.
Instead,
uses standard Python exceptions suchas TypeError and AttributeError.
NodeList objects are implemented using Python's built-inlist type.
Starting with Python 2.2, these objects provide theinterface defined in the DOM specification, but with earlierversions of Python they do not support the official API.
Theyare, however, much more ``Pythonic'' than the interface definedin the W3C recommendations.
The following interfaces have no implementation in
:
Most of these reflect information in the XML document that is not ofgeneral utility to most DOM users.
6.29.3 Logging to multiple
The logging package provides a lot of flexibility, and itsconfiguration can appear daunting.
This section demonstrates that simpleuse of the logging package is possible.The simplest example shows logging to the console:
import logginglogging. debug('A debug message')logging.
If you run the above script, you'll see this:
Because no particular logger was specified, the system used the root logger.The debug and info messages didn't appear because by default, the rootlogger is configured to only handle messages with a severity of WARNINGor above.
The message format is also a configuration default, as is the outputdestination of the messages - sys.stderr.
The severity level,the message format and destination can be easily changed, as shown inthe example below: import logginglogging.
The basicConfig() method is used to change the configurationdefaults, which results in output (written to /tmp/myapp.log)which should look something like the following:
The format string takes the followingcommon specifiers.
For a complete list of specifiers, consult theFormatter documentation.
Format
Name of the logger (logging channel).
Text logging level for the message('DEBUG', 'INFO','WARNING', 'ERROR','CRITICAL').
Human-readable time when the LogRecordwas created.
By default this is of the form``2003-07-08 16:49:45,896'' (the numbers after thecomma are millisecond portion of the time).
The logged message.
To change the date/time format, you can pass an additional keyword parameter,datefmt, as in the following: import logginglogging.
which would result in output like
The date format string follows the requirements of strftime() -see the documentation for the
module.If, instead of sending logging output to the console or a file, you'd ratheruse a file-like object which you have created separately, you can pass itto basicConfig() using the stream keyword argument.
Notethat if both stream and filename keyword arguments are passed,the stream argument is ignored.Of course, you can put variable information in your output.
To do this,simply have the message be a format string and pass in additional argumentscontaining the variable information, as in the following example:
which would result in
6.6 Miscellaneous Text Markup In addition to the inline markup, some additional ``block'' markupis defined to make it easier to bring attention to various bits oftext.
The markup described here serves this purpose, and isintended to be used when marking one or more paragraphs or otherblock constructs (such as verbatim environments).
Label some paragraphs as being worthy of additional attention fromthe reader.
What sort of attention is warrented can be indicatedby specifying the type of the notice.
The only valuesdefined for type are note and warning; theseare equivalent in intent to the inline markup of the same name.If type is omitted, note is used.
Additional valuesmay be defined in the future.
6.7 Module-specific Markup
Miscellaneous Services
The modules described in this chapter provide miscellaneous servicesthat are available in all Python versions.
Here's an overview:
Documentation generator and online help system.
A framework for verifying interactive Python examples.
Unit testing framework for Python.
Regression tests package containing the testing suitefor Python.
Support for Python regression tests.
Implementation of the General Decimal Arithmetic Specification.
Mathematical functions (sin() etc.).
Mathematical functions for complex numbers.
Generate pseudo-random numbers with various commondistributions.
Floating point pseudo-random number generator.
Array bisection algorithms for binary searching.
Heap queue algorithm (a.k.a. priority queue).
Efficient arrays of uniformly typed numeric values.
Implementation of sets of unique elements.
Functions creating iterators for efficient looping.
Perl-like iteration over lines from multiple inputstreams, with ``save in place'' capability.
Functions for working with calendars,including some emulation of the Unix calprogram.
Build line-oriented command interpreters.
Simple lexical analysis for Unix shell-like languages.
The mixer object provides two file-like methods:
This method closes the open mixer device file.
Any further attempts touse the mixer after this file is closed will raise an IOError.
Returns the file handle number of the open mixer device file.
The remaining methods are specific to audio mixing:
This method returns a bitmask specifying the available mixer controls(``Control'' being a specific mixable ``channel'', such asSOUND_MIXER_PCM or SOUND_MIXER_SYNTH).
Thisbitmask indicates a subset of all available mixer controls--theSOUND_MIXER_* constants defined at module level.
To determine if,for example, the current mixer object supports a PCM mixer, use thefollowing Python code:
For most purposes, the SOUND_MIXER_VOLUME (master volume) andSOUND_MIXER_PCM controls should suffice--but code that uses themixer should be flexible when it comes to choosing mixer controls.
Onthe Gravis Ultrasound, for example, SOUND_MIXER_VOLUME does notexist.
Returns a bitmask indicating stereo mixer controls.
If a bit is set,the corresponding control is stereo; if it is unset, the control iseither monophonic or not supported by the mixer (use in combination withcontrols() to determine which).See the code example for the controls() function for an exampleof getting data from a bitmask.
Returns a bitmask specifying the mixer controls that may be used torecord.
See the code example for controls() for an example ofreading from a bitmask.
Returns the volume of a given mixer control.
The returned volume is a2-tuple (left_volume,right_volume).
Volumes are specified asnumbers from 0 (silent) to 100 (full volume).
Sets the volume for a given mixer control to (left,right).left and right must be ints and between 0 (silent) and 100(full volume).
On success, the new volume is returned as a 2-tuple.Note that this may not be exactly the same as the volume specified,because of the limited resolution of some soundcard's mixers.Raises OSSAudioError if an invalid mixer control wasspecified, or if the specified volumes were out-of-range.
get_recsrc
This method returns a bitmask indicating which control(s) arecurrently being used as a recording source.
Call this function to specify a recording source.
Returns a bitmaskindicating the new recording source (or sources) if successful; raisesIOError if an invalid source was specified.
To set the currentrecording source to the microphone input:
The modules described in this chapter implement various algorithms orinterfaces that are mainly useful for multimedia applications.
Theyare available at the discretion of the installation.
Manipulate raw audio data.
Manipulate raw image data.
Read and write audio files in AIFF or AIFC format.
Provide an interface to the Sun AU sound format.
Provide an interface to the WAV sound format.
Module to read IFF chunks.
Conversion functions between RGB and other color systems.
Read and write image files in ``SGI RGB'' format (the moduleis not SGI specific though!).
Determine the type of image contained in a file orbyte stream.
Determine type of a sound file.
Access to OSS-compatible audio devices.
10.46 Creating a new
22. MS Windows Specific
Availability: Windows.
These functions expose the Windows registry API to Python.
Establishes a connection to a predefined registry handle on another computer, and returns a handle object
computer_name is the name of the remote computer, of the form r"computername".
If None, the local computeris used.
Creates or opens the specified key, returning a handle object
key is an already open key, or one of the predefined HKEY_* constants.
Deletes the specified key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that must be a subkey of the key identified by the key parameter.
This value must not be None, and the key may not have subkeys.
This method can not delete keys with subkeys.
If the method succeeds, the entire key, including all of its values,is removed.
If the method fails, an EnvironmentError exception is raised.
Removes a named value from a registry key.
key is an already open key, or one of the predefined HKEY_* constants.
value is a string that identifies the value to remove.
Enumerates subkeys of an open registry key, returning a string.
key is an already open key, or any one of the predefined HKEY_* constants.
index is an integer that identifies the index of the key to retrieve.The function retrieves the name of one subkey each time it is called.
It is typically called repeatedly until an EnvironmentError exception is raised, indicating, no more values are available.
Enumerates values of an open registry key, returning a tuple.
index is an integer that identifies the index of the value to retrieve.The function retrieves the name of one subkey each time it is called.
It is typically called repeatedly, until an EnvironmentError exception is raised, indicating no more values.The result is a tuple of 3 items:
A string that identifies the value name
An object that holds the value data, and whosetype depends on the underlying registry type
An integer that identifies the type of the value data
Writes all the attributes of a key to the registry.
Registry changes are also flushed to disk at system shutdown.
Unlike CloseKey(), the FlushKey() method returns only when all the data has been written to the registry.An application should only call FlushKey() if it requires absolute certainty that registry changes are on disk.
If you don't know whether a FlushKey() call is required, it probably isn't.
Creates a subkey under the specified key and stores registration information from a specified file into that subkey.
key is an already open key, or any of the predefinedHKEY_* constants.
sub_key is a string that identifies the sub_key to load
Opens the specified key, returning a handle object
key is an already open key, or any one of the predefinedHKEY_* constants.
sub_key is a string that identifies the sub_key to open
res is a reserved integer, and must be zero.
The default is zero.
sam is an integer that specifies an access mask that describes the desired security access for the key.
Default is KEY_READ
The result is a new handle to the specified keyIf the function fails, EnvironmentError is raised.
The functionality of OpenKeyEx() is provided viaOpenKey(), by the use of default arguments.
Returns information about a key, as a tuple.
key is an already open key, or one of the predefined HKEY_* constants.The result is a tuple of 3 items:
Index
An integer giving the number of sub keys this key has.
An integer giving the number of values this key has.
A long integer giving when the key was last modified (ifavailable) as 100's of nanoseconds since Jan 1, 1600.
Retrieves the unnamed value for a key, as a string
sub_key is a string that holds the name of the subkey with which the value is associated.
If this parameter is None or empty, the function retrieves the value set by the SetValue() method for the key identified by key.Values in the registry have name, type, and data components.
Retrieves the type and data for a specified value name associated with an open registry key.
value_name is a string indicating the value to query.The result is a tuple of 2 items:
The value of the registry item.
An integer giving the registry type for this value.
Saves the specified key, and all its subkeys to the specified file.
file_name is the name of the file to save registry data to.This file cannot already exist.
Note that privileges are different than permissions - see the Win32 documentation for more details.This function passes NULL for security_attributes to the API.
Associates a value with a specified key.
sub_key is a string that names the subkey with which the value is associated.
type is an integer that specifies the type of the data.Currently this must be REG_SZ, meaning only strings aresupported.
Use the SetValueEx() function for support forother data types.
Long values (more than2048 bytes) should be stored as files with the filenames stored inthe configuration registry.
This helps the registry performefficiently.The key identified by the key parameter must have been opened with KEY_SET_VALUE access.
Stores data in the value field of an open registry key.
type is an integer that specifies the type of the data.
This should be one of the following constants defined in this module:
Binary data in any form.
A 32-bit number.
A 32-bit number in little-endian format.
A 32-bit number in big-endian format.
Null-terminated string containing referencesto environment variables ("%PATH%").
REG_LINK
A Unicode symbolic link.
A sequence of null-terminated strings, terminated by two null characters. (Python handles this termination automatically.)
No defined value type.
REG_SZ
A null-terminated string.
reserved can be anything - zero is always passed to the API.
value is a string that specifies the new value.This method can also set additional value and type information for thespecified key.
This helps the registry perform efficiently.
Subsections 22.2.1 Registry Handle Objects
11. Internet Protocols and
This module defines two classes for implementing HTTP servers(Web servers).
Usually, this module isn't used directly, but is usedas a basis for building functioning Web servers. See the
modules.The first class, HTTPServer, is aSocketServer.TCPServer subclass.
It creates and listens at theHTTP socket, dispatching the requests to a handler.
Code to create andrun the server looks like this:
classHTTPServer
This class builds on the TCPServer class bystoring the server address as instancevariables named server_name and server_port.
Theserver is accessible by the handler, typically through the handler'sserver instance variable.
classBaseHTTPRequestHandler
This class is usedto handle the HTTP requests that arrive at the server.
By itself,it cannot respond to any actual HTTP requests; it must be subclassedto handle each request method (e.g.
GET or POST).BaseHTTPRequestHandler provides a number of class and instancevariables, and methods for use by subclasses.The handler will parse the request and the headers, then call amethod specific to the request type.
The method name is constructedfrom the request.
For example, for the request method "SPAM", thedo_SPAM() method will be called with no arguments.
All ofthe relevant information is stored in instance variables of thehandler.
Subclasses should not need to override or extend the__init__() method.
BaseHTTPRequestHandler has the following instance variables:
Contains a tuple of the form (host, port) referringto the client's address.
Contains the command (request type).
For example, 'GET'.
Contains the request path.
Contains the version string from the request.
For example,'HTTP/1.0'.
Holds an instance of the class specified by the MessageClassclass variable.
This instance parses and manages the headers inthe HTTP request.
Contains an input stream, positioned at the start of the optionalinput data.
Contains the output stream for writing a response back to the client.Proper adherence to the HTTP protocol must be used when writingto this stream.
BaseHTTPRequestHandler has the following class variables:
Specifies the server software version.
You may want to overridethis.The format is multiple whitespace-separated strings,where each string is of the form name[/version].For example, 'BaseHTTP/0.2'.
sys_version
Contains the Python system version, in a form usable by theversion_string method and the server_version classvariable.
For example, 'Python/1.4'.
Specifies a format string for building an error response to theclient.
It uses parenthesized, keyed format specifiers, so theformat operand must be a dictionary.
Default messageand explain values can found in the responsesclass variable.
This specifies the HTTP protocol version used in responses.
If setto 'HTTP/1.1', the server will permit HTTP persistentconnections; however, your server must then include anaccurate Content-Length header (using send_header())in all of its responses to clients.
For backwards compatibility,the setting defaults to 'HTTP/1.0'.
Specifies a rfc822.Message-like class to parse HTTPheaders.
Typically, this is not overridden, and it defaults tomimetools.Message.
This variable contains a mapping of error code integers to two-elementtuples containing a short and long message.
For example,{code: (shortmessage, longmessage)}.
Theshortmessage is usually used as the message key in anerror response, and longmessage as the explain key(see the error_message_format class variable).
A BaseHTTPRequestHandler instance has the following methods:
Calls handle_one_request() once (or, if persistent connectionsare enabled, multiple times) to handle incoming HTTP requests.You should never need to override it; instead, implement appropriatedo_*() methods.
This method will parse and dispatchthe request to the appropriate do_*() method.
You shouldnever need to override it.
Sends and logs a complete error reply to the client.
The numericcode specifies the HTTP error code, with message asoptional, more specific text.
A complete set of headers is sent,followed by text composed using the error_message_formatclass variable.
Sends a response header and logs the accepted request.
The HTTPresponse line is sent, followed by Server and Dateheaders.
The values for these two headers are picked up from theversion_string() and date_time_string() methods,respectively.
Writes a specific HTTP header to the output stream.
keywordshould specify the header keyword, with value specifyingits value.
Sends a blank line, indicating the end of the HTTP headers inthe response.
Logs an accepted (successful) request. code should specifythe numeric HTTP code associated with the response.
If a size ofthe response is available, then it should be passed as thesize parameter.
Logs an error when a request cannot be fulfilled.
By default,it passes the message to log_message(), so it takes thesame arguments (format and additional values).
Logs an arbitrary message to sys.stderr.
This is typicallyoverridden to create custom error logging mechanisms.
Theformat argument is a standard printf-style format string,where the additional arguments to log_message() are appliedas inputs to the formatting.
The client address and current dateand time are prefixed to every message logged.
Returns the server software's version string.
This is a combinationof the server_version and sys_version class variables.
Returns the current date and time, formatted for a message header.
Returns the current date and time, formatted for logging.
Returns the client address, formatted for logging.
A name lookupis performed on the client's IP address.
See Also: Module
:
Extended request handler that supports CGIscripts.
Basic request handler that limits responseto files actually under the document root.
Changed in version 2.3:Disabled module.
Warning:The documentation has been left in place to help in reading old codethat uses the module.
According to the dictionary, a bastion is ``a fortified area orposition'', or ``something that is considered a stronghold.'' It's asuitable name for this module, which provides a way to forbid accessto certain attributes of an object.
It must always be used with the
module, in order to allow restricted-mode programsaccess to certain safe attributes of an object, while denying accessto other, unsafe attributes.
Protect the object object, returning a bastion for theobject.
Any attempt to access one of the object's attributes willhave to be approved by the filter function; if the access isdenied an AttributeError exception will be raised.If present, filter must be a function that accepts a stringcontaining an attribute name, and returns true if access to thatattribute will be permitted; if filter returns false, the accessis denied.
The default filter denies access to any function beginningwith an underscore ("_").
The bastion's string representationwill be "Bastion for name" if a value forname is provided; otherwise, "repr(object)" will beused.
class, if present, should be a subclass of BastionClass; see the code in bastion.py for the details.
Overriding thedefault BastionClass will rarely be required.
classBastionClass
Class which actually implements bastion objects.
This is the defaultclass used by Bastion().
The getfunc parameter is afunction which returns the value of an attribute which should beexposed to the restricted execution environment when called with thename of the attribute as the only parameter. name is used toconstruct the repr() of the BastionClass instance.
The CGIHTTPServer module defines a request-handler class,interface compatible withBaseHTTPServer.BaseHTTPRequestHandler and inherits behaviorfrom SimpleHTTPServer.SimpleHTTPRequestHandler but can alsorun CGI scripts.
Note:This module can run CGI scripts on Unix and Windows systems;on Mac OS it will only be able to run Python scripts within the sameprocess as itself.
The CGIHTTPServer module defines the following class:
classCGIHTTPRequestHandler
This class is used to serve either files or output of CGI scripts from the current directory and below.
Note that mapping HTTP hierarchicstructure to local directory structure is exactly as inSimpleHTTPServer.SimpleHTTPRequestHandler.The class will however, run the CGI script, instead of serving it as afile, if it guesses it to be a CGI script.
Only directory-based CGIare used -- the other common server configuration is to treat specialextensions as denoting CGI scripts.The do_GET() and do_HEAD() functions aremodified to run CGI scripts and serve the output, instead of servingfiles, if the request leads to somewhere below thecgi_directories path.
The CGIHTTPRequestHandler defines the following data member:
This defaults to ['/cgi-bin', '/htbin'] and describesdirectories to treat as containing CGI scripts.
The CGIHTTPRequestHandler defines the following methods:
This method serves the 'POST' request type, only allowed forCGI scripts.
Error 501, "Can only POST to CGI scripts", is outputwhen trying to POST to a non-CGI url.
Note that CGI scripts will be run with UID of user nobody, for securityreasons.
Problems with the CGI script will be translated to error 403.For example usage, see the implementation of the test()function.
See Also:
Module
Base class implementation for Web serverand request handler.
Availability: Macintosh.
TheCFBase, CFArray, CFData, CFDictionary,CFString and CFURL objects are supported, someonly partially.
The ColorPicker module provides access to the standard colorpicker dialog.
Show a standard color selection dialog and allow the user to selecta color.
This module defines the class ConfigParser.
The ConfigParser class implements a basic configuration fileparser language which provides a structure similar to what you wouldfind on Microsoft Windows INI files. You can use this to write Pythonprograms which can be customized by end users easily.
Warning:This library does not interpret or write the value-typeprefixes used in the Windows Registry extended version of INI syntax.
The configuration file consists of sections, led by a"[section]" header and followed by "name: value" entries,with continuations in the style of RFC 822; "name=value" isalso accepted.
Lines beginning with "#" or";" are ignored and may be used to provide comments.For example:
would resolve the "%(dir)s" to the value of"dir" ("frob" in this case).
All reference expansions aredone on demand.Default values can be specified by passing them into theConfigParser constructor as a dictionary.
Additional defaults may be passed into the get() method which will override allothers.
classRawConfigParser
The basic configuration object.
When defaults is given, it isinitialized into the dictionary of intrinsic defaults.
This classdoes not support the magical interpolation behavior.New in version 2.3.
classConfigParser
Derived class of RawConfigParser that implements the magicalinterpolation feature and adds optional arguments to the get()and items() methods.
The values in defaults must beappropriate for the "%()s" string interpolation.
Note that__name__ is an intrinsic default; its value is the section name,and will override any value provided in defaults.All option names used in interpolation will be passed through theoptionxform() method just like any other option namereference.
For example, using the default implementation ofoptionxform() (which converts option names to lower case),the values "foo %(bar)s" and "foo %(BAR)s" areequivalent.
classSafeConfigParser
Derived class of ConfigParser that implements a more-sanevariant of the magical interpolation feature.
Exception raised when a specified section is not found.
Exception raised if add_section() is called with the name ofa section that is already present.
Exception raised when a specified option is not found in the specified section.
Base class for exceptions raised when problems occur performing stringinterpolation.
Exception raised when string interpolation cannot be completed becausethe number of iterations exceeds MAX_INTERPOLATION_DEPTH.Subclass of InterpolationError.
Exception raised when an option referenced from a value does not exist.Subclass of InterpolationError.New in version 2.3.
Exception raised when the source text into which substitutions aremade does not conform to the required syntax.Subclass of InterpolationError.New in version 2.3.
Exception raised when attempting to parse a file which has no sectionheaders.
Exception raised when errors occur attempting to parse a file.
This is relevant only for theConfigParser class.
Support for a creating Unix shell-likemini-languages which can be used as an alternateformat for application configuration files. Subsections
The Cookie module defines classes for abstracting the concept of cookies, an HTTP state management mechanism.
It supports both simplestring-only cookies, and provides an abstraction for having any serializabledata-type as cookie value.The module formerly strictly applied the parsing rules described inthe RFC 2109 and RFC 2068 specifications.
It has since been discoveredthat MSIE 3.0x doesn't follow the character rules outlined in thosespecs. As a result, the parsing rules used are a bit less strict.
Exception failing because of RFC 2109 invalidity: incorrectattributes, incorrect Set-Cookie: header, etc.
classBaseCookie
This class is a dictionary-like object whose keys are strings andwhose values are Morsel instances.
Note that upon setting a key toa value, the value is first converted to a Morsel containingthe key and the value.If input is given, it is passed to the load() method.
classSimpleCookie
This class derives from BaseCookie and overridesvalue_decode() and value_encode() to be the identityand str() respectively.
classSerialCookie
This class derives from BaseCookie and overridesvalue_decode() and value_encode() to be thepickle.loads() and pickle.dumps().
Deprecated since release 2.3.Reading pickled values from untrustedcookie data is a huge security hole, as pickle strings can be craftedto cause arbitrary code to execute on your server.
It is supportedfor backwards compatibility only, and may eventually go away. classSmartCookie
This class derives from BaseCookie. It overridesvalue_decode() to be pickle.loads() if it is avalid pickle, and otherwise the value itself.
It overridesvalue_encode() to be pickle.dumps() unless it is astring, in which case it returns the value itself.
Deprecated since release 2.3.The same security warning from SerialCookieapplies here.
A further security note is warranted.
For backwards compatibility,the Cookie module exports a class named Cookie whichis just an alias for SmartCookie.
This is probably a mistakeand will likely be removed in a future version.
You should not usethe Cookie class in your applications, for the same reason whyyou should not use the SerialCookie class.
HTTP cookie handling for for webclients.
The cookielib and Cookiemodules do not depend on each other.
This is the statemanagement specification implemented by this module. Subsections
20. SGI IRIX Specific
Availability: IRIX.
This modules defines the constants used by the Silicon GraphicsGraphics Library that C programmers find in the header filegl/device.
h.Read the module source file for details.
The DocXMLRPCServer module extends the classes found inSimpleXMLRPCServer to serve HTML documentation in response toHTTP GET requests.
Servers can either be free standing, usingDocXMLRPCServer, or embedded in a CGI environment, usingDocCGIXMLRPCRequestHandler.
classDocXMLRPCServer
Create a new server instance.
All parameters have the same meaning asfor SimpleXMLRPCServer.SimpleXMLRPCServer;requestHandler defaults to DocXMLRPCRequestHandler.
classDocCGIXMLRPCRequestHandler
Create a new instance to handle XML-RPC requests in a CGI environment.
classDocXMLRPCRequestHandler
Create a new request handler instance.
This request handler supportsXML-RPC POST requests, documentation GET requests, and modifieslogging so that the logRequests parameter to theDocXMLRPCServer constructor parameter is honored. Subsections
The EasyDialogs module contains some simple dialogs for theMacintosh.
See sourcecode for details.The EasyDialogs module defines the following functions:
Displays a modal dialog with the message text str, which should beat most 255 characters long.
The button text defaults to ``OK'', but isset to the string argument ok if the latter is supplied.
Controlis returned when the user clicks the ``OK'' button.
)
Asks the user to input a string value via a modal dialog. promptis the prompt message, and the optional default supplies theinitial value for the string (otherwise "" is used).
The text ofthe ``OK'' and ``Cancel'' buttons can be changed with the ok andcancel arguments.
All strings can be at most 255 bytes long.AskString() returns the string entered or Nonein case the user cancelled.
Asks the user to input a string value via a modal dialog.
LikeAskString(), but with the text shown as bullets.
Thearguments have the same meaning as for AskString().
Presents a dialog with prompt question and three buttons labelled``Yes'', ``No'', and ``Cancel''.
Returns 1 for ``Yes'', 0for ``No'' and -1 for ``Cancel''.
The value of default (or0 if default is not supplied) is returned when theRETURN key is pressed.
The text of the buttons can be changed withthe yes, no, and cancel arguments; to prevent a buttonfrom appearing, supply "" for the corresponding argument.
Displays a modeless progress-bar dialog.
Displays a dialog which aids the user in constructing a command-lineargument list.
Whennonzero, they enable the user to insert into the command line paths toan existing file, a (possibly) not-yet-existent file, and a folder,respectively. (Note: Option arguments must appear in the command linebefore file and folder arguments in order to be recognized bygetopt.getopt().)
Arguments containing spaces can bespecified by enclosing them within single or double quotes.
ASystemExit exception is raised if the user presses the``Cancel'' button.
optionlist is a list that determines a popup menu from which theallowed options are selected.
Its items can take one of two forms:optstr or (optstr, descr).
When present,descr is a short descriptive string that is displayed in thedialog while this option is selected in the popup menu.
Thecorrespondence between optstrs and command-line arguments is:
-x (short option)
x: or x=
-x (short option with value)
--xyz (long option)
xyz: or xyz=
--xyz (long option with value)
commandlist is a list of items of the form cmdstr or(cmdstr, descr), where descr is as above.
Thecmdstrs will appear in a popup menu.
When chosen, the text ofcmdstr will be appended to the command line as is, except that atrailing ":" or "=" (if present) will be trimmedoff.
)
Post a dialog asking the user for a file to open, and return the fileselected or None if the user cancelled.
For a description of the other arguments please see the Apple NavigationServices documentation and the EasyDialogs source code.
)
Post a dialog asking the user for a file to save to, and return thefile selected or None if the user cancelled.
savedFileName is the default for the file name to save to (thereturn value).
See AskFileForOpen() for a description ofthe other arguments.
)
Post a dialog asking the user to select a folder, and return thefolder selected or None if the user cancelled.
Programmer's reference documentationfor the Navigation Services, a part of the Carbon framework.
Subsections 2.8.1 ProgressBar Objects
The FrameWork module contains classes that together provide aframework for an interactive Macintosh application.
The programmerbuilds an application by creating subclasses that override variousmethods of the bases classes, thereby implementing the functionalitywanted.
Examine the source or the examplesfor more details.
The following are some comments posted on theMacPython newsgroup about the strengths and limitations ofFrameWork:
The strong point of FrameWork is that it allows you to breakinto the control-flow at many different places.
W
, forinstance, uses a different way to enable/disable menus and that plugsright in leaving the rest intact.
The weak points ofFrameWork are that it has no abstract command interface (butthat shouldn't be difficult), that it's dialog support is minimal andthat it's control/toolbar support is non-existent.
The FrameWork module defines the following functions:
An object representing the complete application.
See below for adescription of the methods.
The default __init__() routinecreates an empty window dictionary and a menu bar with an apple menu.
An object representing the menubar.
This object is usually not createdby the user.
An object representing a menu.
Upon creation you pass theMenuBar the menu appears in, the title string and aposition (1-based) after where the menu should appear (default:at the end).
Create a menu item object.
The arguments are the menu to create, theitem title string and optionally the keyboard shortcutand a callback routine.
The callback is called with the argumentsmenu-id, item number within menu (1-based), current front window andthe event record.Instead of a callable object the callback can also be a string.
Inthis case menu selection causes the lookup of a method in the topmostwindow and the application.
The method name is the callback stringwith 'domenu_' prepended.Calling the MenuBar fixmenudimstate() method sets thecorrect dimming for all menu items based on the current front window.
Add a separator to the end of a menu.
Create a submenu named label under menu menu.
The menuobject is returned.
Creates a (modeless) window.
Parent is the application object towhich the window belongs.
The window is not displayed until later.
Creates a modeless dialog window.
Return a (left, top, right, bottom)tuple suitable for creation of a window of given width and height.
Thewindow will be staggered with respect to previous windows, and anattempt is made to keep the whole window on-screen.
However, the window willhowever always be the exact size given, so parts may be offscreen.
Set the mouse cursor to a watch.
Set the mouse cursor to an arrow.
Subsections 2.9.1 Application Objects
13. Structured Markup Processing
13.1.1 Example HTML Parser
This module defines a class HTMLParser which serves as thebasis for parsing text files formatted in HTML
(HyperTextMark-up Language) and XHTML.
Unlike the parser in
, this parser is not based on the SGML parser in
.
classHTMLParser
The HTMLParser class is instantiated without arguments.
An HTMLParser instance is fed HTML data and calls handler functionswhen tags begin and end.
The HTMLParser class is meant to beoverridden by the user to provide a desired behavior.Unlike the parser in
, this parser does not checkthat end tags match start tags or call the end-tag handler forelements which are closed implicitly by closing an outer element.
An exception is defined as well:
Exception raised by the HTMLParser class when it encounters anerror while parsing.
This exception provides three attributes:msg is a brief message explaining the error, linenois the number of the line on which the broken construct was detected,and offset is the number of characters into the line at whichthe construct starts.
HTMLParser instances have the following methods:
Reset the instance.
Loses all unprocessed data.
This is calledimplicitly at instantiation time.
Feed some text to the parser.
It is processed insofar as it consistsof complete elements; incomplete data is buffered until more data isfed or close() is called.
Force processing of all buffered data as if it were followed by anend-of-file mark.
This method may be redefined by a derived class todefine additional processing at the end of the input, but theredefined version should always call the HTMLParser base classmethod close().
Return current line number and offset.
Return the text of the most recently opened start tag.
This shouldnot normally be needed for structured processing, but may be useful indealing with HTML ``as deployed'' or for re-generating input withminimal changes (whitespace between attributes can be preserved,etc.).
This method is called to handle the start of a tag.
It is intended tobe overridden by a derived class; the base class implementation doesnothing.
The tag argument is the name of the tag converted tolower case.
The attrs argument is a list of (name,value) pairs containing the attributes found inside the tag's brackets.
The name will be translated to lower caseand double quotes and backslashes in the value have beeninterpreted.
For instance, for the tag AHREF="http://www.cwi.nl/", this method would be called as"handle_starttag('a', [('href', 'http://www.cwi.nl/')])".
Similar to handle_starttag(), but called when the parserencounters an XHTML-style empty tag (a .../).
This methodmay be overridden by subclasses which require this particular lexicalinformation; the default implementation simple callshandle_starttag() and handle_endtag().
This method is called to handle the end tag of an element.
It isintended to be overridden by a derived class; the base classimplementation does nothing.
The tag argument is the name ofthe tag converted to lower case.
This method is called to process arbitrary data.
It is intended to beoverridden by a derived class; the base class implementation doesnothing.
This method is called toprocess a character reference of the form "#ref;".
Itis intended to be overridden by a derived class; the base classimplementation does nothing.
This method is called to process a general entity reference of theform "name;" where name is an general entityreference.
It is intended to be overridden by a derived class; thebase class implementation does nothing.
This method is called when a comment is encountered.
Thecomment argument is a string containing the text between the"-" and "-" delimiters, but not the delimitersthemselves.
For example, the comment "!-text-" willcause this method to be called with the argument 'text'.
Method called when an SGML declaration is read by the parser.
Thedecl parameter will be the entire contents of the declarationinside the !... markup.It is intended to be overriddenby a derived class; the base class implementation does nothing.
Method called when a processing instruction is encountered.
Thedata parameter will contain the entire processing instruction.For example, for the processing instruction ?proc color='red',this method would be called as handle_pi("proc color='red'").
Itis intended to be overridden by a derived class; the base classimplementation does nothing.
Note:The HTMLParser class uses the SGML syntactic rules forprocessing instructions.
An XHTML processing instruction using thetrailing "?" will cause the "?" to be included indata.
This module provides access to MacOS specific functionality in thePython interpreter, such as how the interpreter eventloop functionsand the like.
Either'carbon' or 'macho'.
Thissignifies whether this Python uses the Mac OS X and Mac OS 9 compatible CarbonLib style or the Mac OSX-only Mach-O style.
In earlier versions of Python the value couldalso be 'ppc' for the classic Mac OS 8 runtime model.
The way the interpreter has been linked.
As extension modules may beincompatible between linking models, packages could use this information to givemore decent error messages.
The value is one of 'static' for astatically linked Python, 'framework' for Python in a Mac OS X framework,'shared' for Python in a standard unix shared library and'cfm' for the Mac OS 9-compatible Python.
This exception is raised on MacOS generated errors, either fromfunctions in this module or from other mac-specific modules like thetoolbox interfaces.
The arguments are the integer error code (theOSErr value) and a textual description of the error code.Symbolic names for all known error codes are defined in the standardmodule
.
In the inner interpreter loop Python will occasionally check for events,unless disabled with ScheduleParams().
With this function youcan pass a Python event-handler function that will be called if an eventis available.
Setting an event handler while one is already set is anerror.Availability: MacPython-OS9.
Influence the interpreter inner loop event handling.
Intervalspecifies how often (in seconds, floating point) the interpretershould enter the event processing code.
When true, doint causesinterrupt (command-dot) checking to be done. evtmask tells theinterpreter to do event processing for events in the mask (redraws,mouseclicks to switch to other applications, etc).
The besocialflag gives other processes a chance to run.
They are granted minimalruntime when Python is in the foreground and bgyield seconds perinterval when Python runs in the background.All parameters are optional, and default to the current value.
Pass the event record ev back to the Python event loop, orpossibly to the handler for the sys.stdout window (based on thecompiler used to build Python).
Return the textual description of MacOS error code errno.
This function will put a splash windowon-screen, with the contents of the DLOG resource specified byresid.
Calling with a zero argument will remove the splashscreen.
This function is useful if you want an applet to post a splash screenearly in initialization without first having to load numerousextension modules.Availability: MacPython-OS9.
On Mac OS 9, drop to the low-level debugger with message message.
Theoptional object argument is not used, but can easily beinspected from the debugger.
It is intended mainly for developers of Python extensionmodules.
Ring the bell.
Get the number of clock ticks (1/60th of a second) since system boot.
Return the file creator and file type as two four-character strings.The file parameter can be a pathname or an FSSpec or FSRef object.
Open the resource fork of a file.
Arguments are the same as for thebuilt-in function open().
The object returned has file-likesemantics, but it is not a Python file object, so there may be subtledifferences.
Checks whether the current process has access to the window manager.The method will return False if the window manager is not available,for instance when running on Mac OS X Server or when logged in via ssh,or when the current interpreter is not running from a fullblown applicationbundle.
A script runs from an application bundle either when it has beenstarted with pythonw instead of python or when running as an applet.On Mac OS 9 the method always returns True.
Deprecated since release 2.3.The
package should be used inpreference to the MimeWriter module.
Thismodule is present only to maintain backwardcompatibility.
This module defines the class MimeWriter.
TheMimeWriter class implements a basic formatter for creatingMIME multi-part files.
It doesn't seek around the output file nordoes it use large amounts of buffer space.
You must write the partsout in the order that they should occur in the finalfile.
MimeWriter does buffer the headers you add, allowing you to rearrange their order.
classMimeWriter
Return a new instance of the MimeWriter class.
The onlyargument passed, fp, is a file object to be used forwriting.
Note that a StringIO object could also be used.
Subsections 12.8.1 MimeWriter Objects
The module MiniAEFrame provides a framework for an applicationthat can function as an Open Scripting Architecture
(OSA) server, i.e. receive and processAppleEvents
.
It can be used in conjunction with
or standalone.
As anexample, it is used in PythonCGISlave.The MiniAEFrame module defines the following classes:
classAEServer
A class that handles AppleEvent dispatch.
Your application shouldsubclass this class together with eitherMiniApplication orFrameWork.Application.
Your __init__() method shouldcall the __init__() method for both classes.
classMiniApplication
A class that is more or less compatible withFrameWork.Application but with less functionality.
Subsections 3.5.1 AEServer Objects
A low-level interface to Navigation Services.
PixMapWrapper wraps a PixMap object with a Python object thatallows access to the fields by name.
It also has methods to convertto and from PIL images.
7. Optional Operating System
The Queue module implements a multi-producer, multi-consumerFIFO queue.
It is especially useful in threads programming wheninformation must be exchanged safely between multiple threads.
TheQueue class in this module implements all the required lockingsemantics.
It depends on the availability of thread support inPython.The Queue module defines the following class and exception:
classQueue
Constructor for the class. maxsize is an integer that sets theupperbound limit on the number of items that can be placed in thequeue.
Insertion will block once this size has been reached, untilqueue items are consumed.
If maxsize is less than or equal tozero, the queue size is infinite.
Exception raised when non-blocking get() (orget_nowait()) is called on a Queue object which isempty.
Exception raised when non-blocking put() (orput_nowait()) is called on a Queue object which isfull. Subsections
Availability: Tk.
The ScrolledText module provides a class of the same namewhich implements a basic text widget which has a vertical scroll barconfigured to do the ``right thing.'' Using the ScrolledTextclass is a lot easier than setting up a text widget and scroll bardirectly.
The constructor is the same as that of theTkinter.Text class.The text widget and scrollbar are packed together in a Frame,and the methods of the Grid and Pack geometry managersare acquired from the Frame object.
This allows theScrolledText widget to be used directly to achieve most normalgeometry management behavior.Should more specific control be necessary, the following attributesare available:
The frame which surrounds the text and scroll bar widgets.
The scroll bar widget.
classSimpleHTTPRequestHandler
This class is used to serve files from the current directory and below,directly mapping the directory structure to HTTP requests.A lot of the work, such as parsing the request, is done by the baseclass BaseHTTPServer.BaseHTTPRequestHandler.
This classimplements the do_GET() and do_HEAD() functions.
The SimpleHTTPRequestHandler defines the following membervariables:
server_version
This will be "SimpleHTTP/" + __version__, where __version__is defined in the module. extensions_map
A dictionary mapping suffixes into MIME types.
The default is signifiedby an empty string, and is considered to be application/octet-stream.The mapping is used case-insensitively, and so should contain onlylower-cased keys.
The SimpleHTTPRequestHandler defines the following methods:
This method serves the 'HEAD' request type: it sends theheaders it would send for the equivalent GET request.
See thedo_GET() method for a more complete explanation of the possibleheaders.
listdir() to scan the directory, andreturns a 404 error response if the listdir() fails.If the request was mapped to a file, it is opened and the contents arereturned.
Any IOError exception in opening the requestedfile is mapped to a 404, 'File not found'error.
Otherwise, the content type is guessed by calling theguess_type() method, which in turn uses theextensions_map variable.A 'Content-type:' header with the guessed content type isoutput, followed by a blank line signifying the end of the headers,and then the contents of the file are output.
If the file's MIME typestarts with text/ the file is opened in text mode; otherwisebinary mode is used.For example usage, see the implementation of the test()function.
See Also:
Base class implementation for Web serverand request handler.
11.22.9 Example of Client
The SimpleXMLRPCServer module provides a basic serverframework for XML-RPC servers written in Python.
Servers can eitherbe free standing, using SimpleXMLRPCServer, or embedded in aCGI environment, using CGIXMLRPCRequestHandler.
classSimpleXMLRPCServer
Create a new server instance.
The requestHandler parametershould be a factory for request handler instances; it defaults toSimpleXMLRPCRequestHandler.
The addr andrequestHandler parameters are passed to the
.TCPServer constructor.
IflogRequests is true (the default), requests will be logged;setting this parameter to false will turn off logging.
This classprovides methods for registration of functions that can be called bythe XML-RPC protocol.
classCGIXMLRPCRequestHandler
Create a new instance to handle XML-RPC requests in a CGIenvironment.
classSimpleXMLRPCRequestHandler
Create a new request handler instance.
This request handlersupports POST requests and modifies logging so that thelogRequests parameter to the SimpleXMLRPCServerconstructor parameter is honored. Subsections
The SocketServer module simplifies the task of writing networkservers.There are four basic server classes: TCPServer uses theInternet TCP protocol, which provides for continuous streams of databetween the client and server.
UDPServer uses datagrams, whichare discrete packets of information that may arrive out of order or belost while in transit.
The more infrequently usedUnixStreamServer and UnixDatagramServer classes aresimilar, but use Unix domain sockets; they're not available onnon-Unix platforms.
For more details on network programming, consulta book such as W. Richard Steven's UNIX Network Programmingor Ralph Davis's Win32 Network Programming.These four classes process requests synchronously; each requestmust be completed before the next request can be started.
This isn'tsuitable if each request takes a long time to complete, because itrequires a lot of computation, or because it returns a lot of datawhich the client is slow to process.
The solution is to create aseparate process or thread to handle each request; theForkingMixIn and ThreadingMixIn mix-in classes can beused to support asynchronous behaviour.Creating a server requires several steps.
First, you must create arequest handler class by subclassing the BaseRequestHandlerclass and overriding its handle() method; this method willprocess incoming requests.
Second, you must instantiate one of theserver classes, passing it the server's address and the requesthandler class.
Finally, call the handle_request() orserve_forever() method of the server object to process one ormany requests.When inheriting from ThreadingMixIn for threaded connectionbehavior, you should explicitly declare how you want your threadsto behave on an abrupt shutdown.
The ThreadingMixIn classdefines an attribute daemon_threads, which indicates whetheror not the server should wait for thread termination.
Return an integer file descriptor for the socket on which the serveris listening.
This function is most commonly passed toselect.select(), to allow monitoring multiple servers in thesame process.
Process a single request.
This function calls the following methodsin order: get_request(), verify_request(), andprocess_request().
If the user-provided handle()method of the handler class raises an exception, the server'shandle_error() method will be called.
Handle an infinite number of requests.
This simply callshandle_request() inside an infinite loop. address_family
The family of protocols to which the server's socket belongs.
socket.AF_INET and socket.AF_UNIX are twopossible values.
The user-provided request handler class; an instance of this class iscreated for each request. server_address
For Internet protocols, this is a tuplecontaining a string giving the address, and an integer port number:('127.0.0.1', 80), for example.
The socket object on which the server will listen for incoming requests.
The server classes support the following class variables:
Whether the server will allow the reuse of an address.
This defaultsto False, and can be set in subclasses to change the policy. request_queue_size
If it takes a long time to process asingle request, any requests that arrive while the server is busy areplaced into a queue, up to request_queue_size requests.
Oncethe queue is full, further requests from clients will get a``Connection denied'' error.
The default value is usually 5, but thiscan be overridden by subclasses.
The type of socket used by the server; socket.SOCK_STREAMand socket.SOCK_DGRAM are two possible values.
There are various server methods that can be overridden by subclassesof base server classes like TCPServer; these methods aren'tuseful to external users of the server object.
Actually processes the request by instantiatingRequestHandlerClass and calling its handle() method.
Must accept a request from the socket, and return a 2-tuple containingthe new socket object to be used to communicate with theclient, and the client's address.
This function is called if the RequestHandlerClass'shandle() method raises an exception.
If desired, this function can create anew process or thread to handle the request; the ForkingMixInand ThreadingMixIn classes do this.
Called by the server's constructor to activate the server.May be overridden.
verify_request (
The request handler class must define a new handle() method,and can override any of the following methods.
A new instance iscreated for each request.
Called after the handle() method to perform any clean-upactions required.
The default implementation does nothing.
Ifsetup() or handle() raise an exception, thisfunction will not be called.
This function must do all the work required to service a request.Several instance attributes are available to it; the request isavailable as self.
request is different for datagram or streamservices. For stream services, self.
request is a socketobject; for datagram services, self.
request is a string.However, this can be hidden by using the mix-in request handlerclassesStreamRequestHandler or DatagramRequestHandler, whichoverride the setup() and finish() methods, andprovides self.
rfile and self. wfile attributes.self.
rfile and self. wfile can be read or written,respectively, to get the request data or return data to the client.
Called before the handle() method to perform anyinitialization actions required.
The default implementation doesnothing.
This module implements a file-like class, StringIO,that reads and writes a string buffer (also known as memoryfiles).
See the description of file objects for operations (section2.3.9).
classStringIO
)
When a StringIO object is created, it can be initializedto an existing string by passing the string to the constructor.If no string is given, the StringIO will start empty.The StringIO object can accept either Unicode or 8-bitstrings, but mixing the two may take some care.
If both are used,8-bit strings that cannot be interpreted as 7-bit ASCII (thatuse the 8th bit) will cause a UnicodeError to be raisedwhen getvalue() is called.
The following methods of StringIO objects require specialmention:
Retrieve the entire contents of the ``file'' at any time before theStringIO object's close() method is called.
See thenote above for information about mixing Unicode and 8-bit strings;such mixing can cause this method to raise UnicodeError.
Free the memory buffer.
16.1.6.9 Images
The Tix (Tk Interface Extension) module provides anadditional rich set of widgets.
Although the standard Tk library hasmany useful widgets, they are far from complete.
The Tixlibrary provides most of the commonly needed widgets that are missingfrom standard Tk: HList, ComboBox, Control(a.k.a. SpinBox) and an assortment of scrollable widgets.
You can design your application by choosing the mostappropriate widgets to match the special needs of your application andusers.
The home page for Tix.
This includes links toadditional documentation and downloads.
On-line version of the man pages and reference material.
On-line version of the programmer's reference material.
Tix applications for development of Tix and Tkinter programs.Tide applications work under Tk or Tkinter, and includeTixInspect, an inspector to remotely modify anddebug Tix/Tk/Tkinter applications.
Subsections
16.2.2.1 Basic Widgets
16.2.2.2 File Selectors
16.2.2.3 Hierachical ListBox
16.2.2.4 Tabular ListBox
16.2.2.5 Manager Widgets
16.2.2.6 Image Types
16.2.2.7 Miscellaneous Widgets
16.2.2.8 Form Geometry Manager
The Tkinter module (``Tk interface'') is the standard Pythoninterface to the Tk GUI toolkit.
Both Tk and Tkinter areavailable on most Unix platforms, as well as on Windows andMacintosh systems.
(Tk itself is not part of Python; it is maintainedat ActiveState.)
See Also:
The Python Tkinter Topic Guide provides a greatdeal of information on using Tk from Python and links toother sources of information on Tk.
Fredrik Lundh's on-line reference material.
On-line reference material.
The Jython interface to Tkinter.
The book by John Grayson (ISBN 1-884777-81-3). Subsections
16.1.2 Tkinter Life Preserver
16.1.2.1 How To Use This Section
16.1.2.2 A Simple Hello World Program
16.1.3 A (Very) Quick Look at Tcl/Tk
16.1.6.1 Setting Options
16.1.6.3 Packer Options
16.1.6.4 Coupling Widget Variables
16.1.6.5 The Window Manager
16.1.6.6 Tk Option Data Types
16.1.6.7 Bindings and Events
16.1.6.8 The index Parameter
Note:This module is available for backward compatibility only.
Ifyou are writing code that does not need to work with versions ofPython earlier than Python 2.2, please consider subclassing directlyfrom the built-in dict type.
This module defines a class that acts as a wrapper arounddictionary objects.
It is a useful base class foryour own dictionary-like classes, which can inherit fromthem and override existing methods or add new ones.
In this way onecan add new behaviors to dictionaries.The module also defines a mixin defining all dictionary methods forclasses that already have a minimum mapping interface.
This greatlysimplifies writing classes that need to be substitutable fordictionaries (such as the shelve module).The UserDict module defines the UserDict classand DictMixin:
classUserDict
Class that simulates a dictionary.
The instance'scontents are kept in a regular dictionary, which is accessible via thedata attribute of UserDict instances.
Ifinitialdata is provided, data is initialized with itscontents; note that a reference to initialdata will not be kept, allowing it be used for other purposes.
In addition to supporting the methods and operations of mappings (seesection 2.3.8), UserDict instances provide thefollowing attribute:
A real dictionary used to store the contents of the UserDictclass.
classDictMixin
Mixin defining all dictionary methods for classes that already havea minimum dictionary interface including __getitem__(),__setitem__(), __delitem__(), and keys().This mixin should be used as a superclass.
Adding each of theabove methods adds progressively more functionality.
Ifyou are writing code that does not need to work with versions ofPython earlier than Python 2.2, please consider subclassing directlyfrom the built-in list type.
This module defines a class that acts as a wrapper aroundlist objects.
It is a useful base class foryour own list-like classes, which can inherit fromthem and override existing methods or add new ones.
In this way onecan add new behaviors to lists.The UserList module defines the UserList class:
classUserList
Class that simulates a list.
The instance'scontents are kept in a regular list, which is accessible via thedata attribute of UserList instances.
The instance'scontents are initially set to a copy of list, defaulting to theempty list []. list can be either a regular Python list,or an instance of UserList (or a subclass).
In addition to supporting the methods and operations of mutablesequences (see section 2.3.6), UserList instancesprovide the following attribute:
A real Python list object used to store the contents of theUserList class.
Subclassing requirements:Subclasses of UserList are expect to offer a constructor whichcan be called with either no arguments or one argument.
Listoperations which return a new sequence attempt to create an instanceof the actual implementation class.
Changed in version 2.0:Python versions 1.5.2 and 1.6 also required that theconstructor be callable with no parameters, and offera mutable data attribute.
Earlier versionsof Python did not attempt to create instances of thederived class.
Note:This UserString class from this module is available forbackward compatibility only.
If you are writing code that does notneed to work with versions of Python earlier than Python 2.2, pleaseconsider subclassing directly from the built-in str typeinstead of using UserString (there is no built-in equivalentto MutableString).
This module defines a class that acts as a wrapper around stringobjects.
It is a useful base class for your own string-like classes,which can inherit from them and override existing methods or add newones.
classUserString
Class that simulates a string or a Unicode stringobject.
The instance's content is kept in a regular string or Unicodestring object, which is accessible via the data attribute ofUserString instances.
The instance's contents are initiallyset to a copy of sequence. sequence can be either aregular Python string or Unicode string, an instance ofUserString (or a subclass) or an arbitrary sequence which canbe converted into a string using the built-in str() function.
classMutableString
This class is derived from the UserString above and redefinesstrings to be mutable.
Mutable strings can't be used asdictionary keys, because dictionaries require immutable objects askeys.
The main intention of this class is to serve as an educationalexample for inheritance and necessity to remove (override) the__hash__() method in order to trap attempts to use amutable object as dictionary key, which would be otherwise veryerror prone and hard to track down.
In addition to supporting the methods and operations of string andUnicode objects (see section 2.3.6, ``StringMethods''), UserString instances provide the followingattribute:
A real Python string or Unicode object used to store the content of theUserString class.
The W widgets are used extensively in the IDE.
The aepack module defines functions for converting (packing)Python variables to AppleEvent descriptors and back (unpacking).Within Python the AppleEvent descriptor is handled by Python objectsof built-in type AEDesc, defined in module
.The aepack module defines the following functions:
Returns an AEDesc object containing a conversion of Pythonvalue x.
If forcetype is provided it specifies the descriptortype of the result.
Otherwise, a default mapping of Python types toApple Event descriptor types is used, as follows:
If x is a Python instance then this function attempts to call an__aepack__() method.
This method should return anAEDesc object.If the conversion x is not defined above, this function returnsthe Python string representation of a value (the repr() function)encoded as a text descriptor.
x must be an object of type AEDesc.
This functionreturns a Python object representation of the data in the AppleEvent descriptor x.
Simple AppleEvent data types (integer,text, float) are returned as their obvious Python counterparts.Apple Event lists are returned as Python lists, and the listelements are recursively unpacked.
Object references(ex. line 3 of document 1) are returned as instances ofaetypes.ObjectSpecifier, unless formodulenameis specified.
AppleEvent descriptors withdescriptor type typeFSS are returned as FSSpecobjects.
AppleEvent record descriptors are returned as Pythondictionaries, with 4-character string keys and elements recursivelyunpacked.The optional formodulename argument is used by the stub packagesgenerated by gensuitemodule, and ensures that the OSA classesfor object specifiers are looked up in the correct module.
This ensuresthat if, say, the Finder returns an object specifier for a windowyou get an instance of Finder.Window and not a genericaetypes.Window.
The former knows about all the propertiesand elements a window has in the Finder, while the latter knowsno such things.
See Also:
Module
Python definitions of codes for Apple Eventdescriptor types.
Information about inter-processcommunications on the Macintosh.
The aetools module contains the basic functionalityon which Python AppleScript client support is built.
It alsoimports and re-exports the core functionality of theaetypes and aepack modules.
The stub packagesgenerated by gensuitemodule import the relevantportions of aetools, so usually you do not need toimport it yourself.
The exception to this is when youcannot use a generated suite package and need lower-levelaccess to scripting.The aetools module itself uses the AppleEvent supportprovided by the Carbon.AE module.
This has one drawback:you need access to the window manager, see section 1.1.2for details.
This restriction may be lifted in future releases.The aetools module defines the following functions:
Stores parameters and attributes in a pre-created Carbon.AE.AEDescobject. parameters and attributes are dictionaries mapping 4-character OSA parameter keys to Python objects.
Theobjects are packed using aepack.pack().
)
Recursively unpacks a Carbon.AE.AEDesc event to Python objects.The function returns the parameter dictionary and the attribute dictionary.The formodulename argument is used by generated stub packages tocontrol where AppleScript classes are looked up.
Converts a Python keyword argument dictionary arguments tothe format required by packevent by replacing the keys,which are Python identifiers, by the four-character OSA keys accordingto the mapping specified in keydict.
Used by the generated suitepackages.
The aetools module defines the following class:
classTalkTo
_start
Test whether the application is running, and attempt to start it if not.
Create the AppleEvent Carbon.AE.AEDesc for the verb withthe OSA designation code, subcode (which are the usual 4-characterstrings), pack the parameters and attributes into it, send itto the target application, wait for the reply, unpack the reply withunpackevent and return the reply appleevent, the unpacked return valuesas a dictionary and the return attributes.
The aetypes defines classes used to represent Apple Event datadescriptors and Apple Event object specifiers.Apple Event data is contained in descriptors, and these descriptorsare typed.
For many descriptors the Python representation is simply thecorresponding Python type: typeText in OSA is a Python string,typeFloat is a float, etc.
For OSA types that have no directPython counterpart this module declares classes.
Packing and unpackinginstances of these classes is handled automatically by aepack.An object specifier is essentially an address of an object implementedin a Apple Event server.
classUnknown
The representation of OSA descriptor data for which the aepackand aetypes modules have no support, i.e. anything that is notrepresented by the other classes here and that is not equivalent to asimple Python value.
classEnum
An enumeration value with the given 4-character string value.
classInsertionLoc
Position pos in object of.
classBoolean
A boolean.
classStyledText
Text with style information (font, face, etc) included.
classAEText
Text with script system and style information included.
classIntlText
Text with script system and language information included.
classIntlWritingCode
Script system and language information.
classQDPoint
A quickdraw point.
classQDRectangle
A quickdraw rectangle.
classRGBColor
A color.
classType
An OSA type value with the given 4-character name.
classKeyword
An OSA keyword with the given 4-character name.
classRange
A range.
classOrdinal
Non-numeric absolute positions, such as "firs", first, or "midd",middle.
classLogical
The logical expression of applying operator logc toterm.
classComparison
The comparison relo of obj1 to obj2.
The following classes are used as base classes by the generated stubpackages to represent AppleScript classes and properties in Python:
classComponentItem
Abstract baseclass for an OSA class.
The subclass should set the classattribute want to the 4-character OSA class code.
Instances ofsubclasses of this class are equivalent to AppleScript ObjectSpecifiers.
Upon instantiation you should pass a selector inwhich, and optionally a parent object in fr.
classNProperty
Abstract baseclass for an OSA property.
The subclass should set the classattributes want and which to designate which property weare talking about.
Instances of subclasses of this class are ObjectSpecifiers.
classObjectSpecifier
Base class of ComponentItem and NProperty, a generalOSA Object Specifier.
See the Apple Open Scripting Architecturedocumentation for the parameters.
Note that this class is not abstract.
This module provides support for reading and writing AIFF and AIFF-Cfiles.
AIFF is Audio Interchange File Format, a format for storingdigital audio samples in a file.
AIFF-C is a newer version of theformat that includes the ability to compress the audio data.
The number of channels indicate if the audio ismono, stereo, or quadro.
Each frame consists of one sample perchannel.
The sample size is the size in bytes of each sample.
Thus aframe consists of nchannels*samplesize bytes, and asecond's worth of audio consists ofnchannels*samplesize*framerate bytes.For example, CD quality audio has a sample size of two bytes (16bits), uses two channels (stereo) and has a frame rate of 44,100frames/second.
This gives a frame size of 4 bytes (2*2), and asecond's worth occupies 2*2*44100 bytes (176,400 bytes).Module aifc defines the following function:
Open an AIFF or AIFF-C file and return an object instance withmethods that are described below.
The argument file is either astring naming a file or a file object. mode must be 'r'or 'rb' when the file must be opened for reading, or 'w' or 'wb' when the file must be opened for writing.
If omitted,
file.mode is used if it exists, otherwise 'rb' isused.
When used for writing, the file object should be seekable,unless you know ahead of time how many samples you are going to writein total and use writeframesraw() and setnframes().
Objects returned by open() when a file is opened forreading have the following methods:
Return the number of audio channels (1 for mono, 2 for stereo).
Return the size in bytes of individual samples.
Return the sampling rate (number of audio frames per second).
Return the number of audio frames in the file.
Return a four-character string describing the type of compression usedin the audio file.
For AIFF files, the returned value is'NONE'.
Return a human-readable description of the type of compression used inthe audio file.
For AIFF files, the returned value is 'notcompressed'.
Return a tuple consisting of all of the above values in the aboveorder.
Return a list of markers in the audio file.
A marker consists of atuple of three elements.
The first is the mark ID (an integer), thesecond is the mark position in frames from the beginning of the data(an integer), the third is the name of the mark (a string).
Return the tuple as described in getmarkers() for the markwith the given id.
Read and return the next nframes frames from the audio file.
Thereturned data is a string containing for each frame the uncompressedsamples of all channels.
Rewind the read pointer.
The next readframes() will start fromthe beginning.
Seek to the specified frame number.
Return the current frame number.
Close the AIFF file.
After calling this method, the object can nolonger be used.
Objects returned by open() when a file is opened forwriting have all the above methods, except for readframes() andsetpos().
In addition the following methods exist.
Theget*() methods can only be called after the correspondingset*() methods have been called.
Before the firstwriteframes() or writeframesraw(), all parametersexcept for the number of frames must be filled in.
Create an AIFF file.
The default is that an AIFF-C file is created,unless the name of the file ends in '.aiff' in which case thedefault is an AIFF file.
Create an AIFF-C file.
Specify the number of channels in the audio file.
Specify the size in bytes of audio samples.
Specify the sampling frequency in frames per second.
Specify the number of frames that are to be written to the audio file.If this parameter is not set, or not set correctly, the file needs tosupport seeking.
Specify the compression type.
If not specified, the audio data willnot be compressed.
In AIFF files, compression is not possible.
Thename parameter should be a human-readable description of thecompression type, the type parameter should be a four-characterstring.
Currently the following compression types are supported:NONE, ULAW, ALAW, G722.
Set all the above parameters at once.
The argument is a tupleconsisting of the various parameters.
This means that it is possibleto use the result of a getparams() call as argument tosetparams().
Add a mark with the given id (larger than 0), and the given name atthe given position.
This method can be called at any time beforeclose().
Return the current write position in the output file.
Useful incombination with setmark().
Write data to the output file.
This method can only be called afterthe audio file parameters have been set.
Like writeframes(), except that the header of the audio fileis not updated.
The header of the file is updated to reflect theactual size of the audio data.
After calling this method, the objectcan no longer be used.
This module defines symbolic constants needed to use the built-inmodule
(see above); they are equivalent to those definedin the C header file audio.h except that the name prefix"AL_" is omitted.
Read the module source for a complete list ofthe defined names.
Suggested use:
This module provides access to the audio facilities of the SGI Indyand Indigo workstations.
See section 3A of the IRIX man pages fordetails.
You'll need to read those man pages to understand what thesefunctions do!
Some of the functions are not available in IRIXreleases before 4.0.5.
Again, see the manual to check whether aspecific function is available on your platform.All functions and methods defined in this module are equivalent tothe C functions with "AL" prefixed to their name.Symbolic constants from the C header file audio.h aredefined in the standard module
, see below.
Warning:The current version of the audio library may dump corewhen bad argument values are passed rather than returning an errorstatus.
The module defines the following functions:
The name and direction arguments are strings.
The optionalconfig argument is a configuration object as returned bynewconfig().
The return value is an audio portobject; methods of audio port objects are described below.
The return value is a new audio configuration object; methods ofaudio configuration objects are described below.
The device argument is an integer.
The return value is a list ofintegers containing the data returned by ALqueryparams().
The list argument is a listsuch as returned by queryparams(); it is modified in place(!).
The list argument is alist such as returned by queryparams().
Subsections 20.1.1 Configuration Objects
, or
.
If none of these modules isinstalled, the slow-but-simple implementation in module
will be used.
Open the database file filename and return a corresponding object.If the database file already exists, the
If notspecified, the default value is 'r'.The optional mode argument is the Unix mode of the file, usedonly when the database has to be created.
It defaults to octal0666 (and will be modified by the prevailing umask).
A tuple containing the exceptions that can be raised by each of thesupported modules, with a unique exception anydbm.error asthe first item -- the latter is used when anydbm.error israised.
The object returned by open() supports most of the samefunctionality as dictionaries; keys and their corresponding values canbe stored, retrieved, and deleted, and the has_key() andkeys() methods are available.
Keys and values must always bestrings. See Also:
BSD db database interface.
Standard Unix database interface.
Portable implementation of the dbm interface.
GNU database interface, based on the dbm interface.
General object persistence built on top of the Python dbm interface.
Utility module used to determine the type of anexisting database.
This module defines an object type which can efficiently representan array of basic values: characters, integers, floating pointnumbers.
Arrays
are sequence types and behave very muchlike lists, except that the type of objects stored in them isconstrained.
The type is specified at object creation time by using atype code, which is a single character.
The following typecodes are defined:
Type code
C Type
Python Type
Minimum size in bytes
character
int
Unicode character
long
float
The actual representation of values is determined by the machinearchitecture (strictly speaking, by the C implementation).
The actualsize can be accessed through the itemsize attribute.
The valuesstored for 'L' and 'I' items will be represented asPython long integers when retrieved, because Python's plain integertype cannot represent the full range of C's unsigned (long) integers.The module defines the following type:
Otherwise, the iterable initializer is passed to theextend() method.
Obsolete alias for array.
Array objects support the ordinary sequence operations ofindexing, slicing, concatenation, and multiplication.
The typecode character used to create the array.
The length in bytes of one array item in the internal representation.
Append a new item with value x to the end of the array.
Return a tuple (address, length) giving the currentmemory address and the length in elements of the buffer used to holdarray's contents.
The size of the memory buffer in bytes can becomputed as
array.buffer_info()[1] *array.itemsize.
This is occasionally useful when working withlow-level (and inherently unsafe) I/O interfaces that require memoryaddresses, such as certain ioctl() operations.
Thereturned numbers are valid as long as the array exists and nolength-changing operations are applied to it.
Note:When using array objects from code written in C orC++ (the only way to effectively make use of this information), itmakes more sense to use the buffer interface supported by arrayobjects.
This method is maintained for backward compatibility andshould be avoided in new code.
The buffer interface is documented inthe
Python/C API Reference Manual
``Byteswap'' all items of the array.
This is only supported forvalues which are 1, 2, 4, or 8 bytes in size; for other types ofvalues, RuntimeError is raised.
It is useful when readingdata from a file written on a machine with a different byte order.
Return the number of occurrences of x in the array.
Append items from iterable to the end of the array.
Ifiterable is another array, it must have exactly the sametype code; if not, TypeError will be raised.
Ifiterable is not an array, it must be iterable and itselements must be the right type to be appended to the array.Changed in version 2.4:Formerly, the argument could only be another array.
Read n items (as machine values) from the file object fand append them to the end of the array.
If less than n itemsare available, EOFError is raised, but the items that wereavailable are still inserted into the array.
f must be a realbuilt-in file object; something else with a read() method won'tdo.
Append items from the list.
This is equivalent to"for x in list: a.append(x)"except that if there is a type error, the array is unchanged.
s)
Appends items from the string, interpreting the string as anarray of machine values (as if it had been read from afile using the fromfile() method).
Extends this array with data from the given unicode string.The array must be a type 'u' array; otherwise a ValueErroris raised.
Return the smallest i such that i is the index ofthe first occurrence of x in the array.
Insert a new item with value x in the array before positioni.
Negative values are treated as being relative to the endof the array.
Removes the item with the index i from the array and returnsit.
The optional argument defaults to -1, so that by defaultthe last item is removed and returned.
f, n)
Deprecated since release 1.5.1.Use the fromfile() method.
Remove the first occurrence of x from the array.
Reverse the order of the items in the array.
Write all items (as machine values) to the file object f.
Convert the array to an ordinary list with the same items.
Convert the array to an array of machine values and return thestring representation (the same sequence of bytes that wouldbe written to a file by the tofile() method.)
Convert the array to a unicode string.
The array must bea type 'u' array; otherwise a ValueError is raised.
Usearray.tostring().decode(enc) to obtain a unicode stringfrom an array of some other type.
f)
Deprecated since release 1.5.1.Use the tofile() method.
Write all items (as machine values) to the file object f.
When an array object is printed or converted to a string, it isrepresented as array(typecode, initializer).
Theinitializer is omitted if the array is empty, otherwise it is astring if the typecode is 'c', otherwise it is a list ofnumbers.
The string is guaranteed to be able to be converted back toan array with the same type and value using reverse quotes(``), so long as the array() function has beenimported using from array import array.
Examples:
Packing and unpacking of heterogeneous binary data.
Packing and unpacking of External DataRepresentation (XDR) data as used in some remoteprocedure call systems.
The Numeric Python extension(NumPy) defines another array type; seehttp://numpy.sourceforge.net/ for further informationabout Numerical Python.
(A PDF version of the NumPy manualis available athttp://numpy.sourceforge.net/numdoc/numdoc.pdf).
11.25.1 asyncore Example basic
This module builds on the
, andthe two types of channel, asyncore. dispatcher andasynchat.async_chat, can freely be mixed in the channel map.Typically an asyncore.
dispatcher server channel generates newasynchat.async_chat channel objects as it receives incomingconnection requests.
classasync_chat
This class is an abstract subclass of asyncore. dispatcher.
To makepractical use of the code you must subclass async_chat, providingmeaningful collect_incoming_data() and found_terminator()methods.
The asyncore. dispatcher methods can beused, although not all make sense in a message/response context.
Like asyncore. dispatcher, async_chat defines a set of eventsthat are generated by an analysis of socket conditions after aselect() call.
Once the polling loop has been started theasync_chat object's methods are called by the event-processingframework with no action on the part of the programmer.Unlike asyncore.
dispatcher, async_chat allows you to definea first-in-first-out queue (fifo) of producers.
A producer need haveonly one method, more(), which should return data to be transmittedon the channel.
The producer indicates exhaustion (i.e. that it containsno more data) by having its more() method return the empty string.
Atthis point the async_chat object removes the producer from the fifoand starts using the next producer, if any.
When the producer fifo is emptythe handle_write() method does nothing.
You use the channel object'sset_terminator() method to describe how to recognize the endof, or an important breakpoint in, an incoming transmission from theremote endpoint.To build a functioning async_chat subclass your input methods collect_incoming_data() andfound_terminator() must handle the data that the channel receivesasynchronously.
The methods are described below.
Pushes a None on to the producer fifo.
When this producer ispopped off the fifo it causes the channel to be closed.
Called with data holding an arbitrary amount of received data.The default method, which must be overridden, raises a NotImplementedError exception.
In emergencies this method will discard any data held in the input and/oroutput buffers and the producer fifo.
Called when the incoming data stream matches the termination conditionset by set_terminator.
The default method, which must be overridden,raises a NotImplementedError exception.
The buffered input data shouldbe available via an instance attribute.
Returns the current terminator for the channel.
Called when the channel is closed.
The default method silently closesthe channel's socket.
Called when a read event fires on the channel's socket in theasynchronous loop.
The default method checks for the terminationcondition established by set_terminator(), which can be eitherthe appearance of a particular string in the input stream or the receiptof a particular number of characters.
When the terminator is found,handle_read calls the found_terminator() method aftercalling collect_incoming_data() with any data preceding theterminating condition.
Called when the application may write data to the channel.
The default method calls the initiate_send() method, which in turnwill call refill_buffer() to collect data from the producerfifo associated with the channel.
Creates a simple_producer object (see below) containing the data andpushes it on to the channel's producer_fifo to ensure itstransmission.
This is all you need to do to have the channel writethe data out to the network, although it is possible to use yourown producers in more complex schemes to implement encryption andchunking, for example.
Takes a producer object and adds it to the producer fifo associated withthe channel.
When all currently-pushed producers have been exhaustedthe channel will consume this producer's data by calling itsmore() method and send the data to the remote endpoint.
Should return True for the channel to be included in the set ofchannels tested by the select() loop for readability.
Refills the output buffer by calling the more() method of theproducer at the head of the fifo.
If it is exhausted then theproducer is popped off the fifo and the next producer is activated.If the current producer is, or becomes, None then the channelis closed.
Sets the terminating condition to be recognised on the channel. termmay be any of three types of value, corresponding to three different waysto handle incoming protocol data.
Will call found_terminator() when thestring is found in the input stream
Will call found_terminator() when theindicated number of characters have been received
The channel continues to collect data forever
Note that any data following the terminator will be available for reading bythe channel after found_terminator() is called.
Should return True as long as items remain on the producer fifo,or the channel is connected and the channel's output buffer is non-empty. Subsections
This module provides the basic infrastructure for writing asynchronous socket service clients and servers.There are only two ways to have a program on a single processor do ``more than one thing at a time.'' Multi-threaded programming is the simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of multi-threading, without actually using multiple threads.
It's really only practical if your program is largely I/O bound.
If your program is processor bound, then pre-emptive scheduled threads are probably what you really need.
The asyncore module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap.
For ``conversational'' applicationsand protocols the companion
module is invaluable.The basic idea behind both modules is to create one or more networkchannels, instances of class asyncore.
dispatcher andasynchat.async_chat.
Creating the channels adds them to a globalmap, used by the loop() function if you do not provide itwith your own map.Once the initial channel(s) is(are) created, calling the loop()function activates channel service, which continues until the lastchannel (including any that have been added to the map during asynchronousservice) is closed.
Enter a polling loop that terminates after count passes or all openchannels have been closed.
All arguments are optional.
The (count)parameter defaults to None, resulting in the loop terminating onlywhen all channels have been closed.
The map parameter is a dictionary whose items arethe channels to watch.
As channels are closed they are deleted from theirmap.
If map is omitted, a global map is used (this map is updatedby the default class __init__() - make sure you extend, ratherthan override, __init__() if you want to retain this behavior).Channels (instances of asyncore.
dispatcher, asynchat.async_chatand subclasses thereof) can freely be mixed in the map.
The dispatcher class is a thin wrapper around a low-level socket object.To make it more useful, it has a few methods for event-handling which are calledfrom the asynchronous loop.
Otherwise, it can be treated as a normal non-blocking socket object.Two class attributes can be modified, to improve performance,or possibly even to conserve memory.
The asynchronous input buffer size (default 4096).
The asynchronous output buffer size (default 4096).
The firing of low-level events at certain times or in certain connectionstates tells the asynchronous loop that certain higher-level events havetaken place.
For example, if we have asked for a socket to connect toanother host, we know that the connection has been made when the socketbecomes writable for the first time (at this point you know that you maywrite to it with the expectation of success).
The implied higher-levelevents are:
Event
Description
Implied by the first write event
Implied by a read event with no data available
Implied by a read event on a listening socket
During asynchronous processing, each mapped channel's readable()and writable() methods are used to determine whether the channel'ssocket should be added to the list of channels select()ed orpoll()ed for read and write events.
Thus, the set of channel events is larger than the basic socket events.The full set of methods that can be overridden in your subclass follows:
handle_read
Called when the asynchronous loop detects that a read()call on the channel's socket will succeed.
Called when the asynchronous loop detects that a writable socketcan be written.
Often this method will implement the necessary buffering for performance.
Called when there is out of band (OOB) data for a socket connection.
This will almost never happen, as OOB is tenuously supported and rarely used.
Called when the active opener's socket actually makes a connection.Might send a ``welcome'' banner, or initiate a protocolnegotiation with the remote endpoint, for example.
Called when the socket is closed.
Called when an exception is raised and not otherwise handled.
The defaultversion prints a condensed traceback.
Called on listening channels (passive openers) when a connection can be established with a new remote endpoint thathas issued a connect() call for the local endpoint.
Called each time around the asynchronous loop to determine whether achannel's socket should be added to the list on which read events canoccur.
The default method simply returns True, indicating that by default, all channels will be interested inread events.
Called each time around the asynchronous loop to determine whether achannel's socket should be added to the list on which write events canoccur.
The default method simply returns True, indicating that by default, all channels will be interested inwrite events.
In addition, each channel delegates or extends many of the socket methods.Most of these are nearly identical to their socket partners.
This is identical to the creation of a normal socket, and will use the same options for creation. Refer to the
documentation for information on creatingsockets.
As with the normal socket object, address is a tuple with the first element the host to connect to, and the second the port number.
Send data to the remote end-point of the socket.
Read at most buffer_size bytes from the socket's remote end-point.An empty string implies that the channel has been closed from the otherend.
Listen for connections made to the socket.
The backlogargument specifies the maximum number of queued connectionsand should be at least 1; the maximum value issystem-dependent (usually 5).
Bind the socket to address.
The socket must not alreadybe bound.
Accept a connection.
The socket must be bound to an addressand listening for connections.
The return value is a pair(conn, address) where conn is anew socket object usable to send and receive data onthe connection, and address is the address bound to thesocket on the other end of the connection.
Close the socket.
All future operations on the socket objectwill fail.
The remote end-point will receive no more data (afterqueued data is flushed).
Sockets are automatically closedwhen they are garbage-collected.
Subsections 11.25.1 asyncore Example basic HTTP client
The atexit module defines a single function to registercleanup functions.
Note: This module is unlikely to work correctly when used with other codethat sets sys.exitfunc.
In particular, other core Python modules arefree to use atexit without the programmer's knowledge.
Authors whouse sys.exitfunc should convert their code to useatexit instead.
The simplest way to convert code that setssys.exitfunc is to import atexit and register the functionthat had been bound to sys.exitfunc.
Register func as a function to be executed at termination.
Anyoptional arguments that are to be passed to func must be passedas arguments to register().At normal program termination (for instance, ifsys.exit() is called or the main module's executioncompletes), all functions registered are called in last in, first outorder.
The assumption is that lower level modules will normally beimported before higher level modules and thus must be cleaned uplater.If an exception is raised during execution of the exit handlers, atraceback is printed (unless SystemExit is raised) and theexception information is saved.
After all exit handlers have had achance to run the last exception to be raised is re-raised.
: Useful example of atexit to read andwrite
history files.
The audioop module contains some useful operations on soundfragments.
It operates on sound fragments consisting of signedinteger samples 8, 16 or 32 bits wide, stored in Python strings. Thisis the same format as used by the
modules.
All scalar items are integers, unless specified otherwise.This module provides support for u-LAW and Intel/DVI ADPCM encodings.
A few of the more complicated operations only take 16-bit samples,otherwise the sample size (in bytes) is always a parameter of theoperation.The module defines the following variables and functions:
This exception is raised on all errors, such as unknown number of bytesper sample, etc.
Return a fragment which is the addition of the two samples passed asparameters. width is the sample width in bytes, either1, 2 or 4.
Both fragments should have the samelength.
Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
Seethe description of lin2adpcm() for details on ADPCM coding.Return a tuple (sample, newstate) where the samplehas the width specified in width.
Decode an alternative 3-bit ADPCM code.
See lin2adpcm3()for details.
Return the average over all samples in the fragment.
Return the average peak-peak value over all samples in the fragment.No filtering is done, so the usefulness of this routine isquestionable.
Return a fragment that is the original fragment with a bias added toeach sample.
Return the number of zero crossings in the fragment passed as anargument.
Return a factor F such thatrms(add(fragment, mul(reference, -F))) isminimal, i.e., return the factor with which you should multiplyreference to make it match as well as possible tofragment.
The fragments should both contain 2-byte samples.The time taken by this routine is proportional tolen(fragment).
Try to match reference as well as possible to a portion offragment (which should be the longer fragment).
This is(conceptually) done by taking slices out of fragment, usingfindfactor() to compute the best match, and minimizing theresult.
The fragments should both contain 2-byte samples.
Return atuple (offset, factor) where offset is the(integer) offset into fragment where the optimal match startedand factor is the (floating-point) factor as perfindfactor().
Search fragment for a slice of length length samples (notbytes!) with maximum energy, i.e., return i for whichrms(fragment[i*2:(i+length)*2]) is maximal.
The fragmentsshould both contain 2-byte samples.The routine takes time proportional to len(fragment).
Return the value of sample index from the fragment.
Convert samples between 1-, 2- and 4-byte formats.
Convert samples to 4 bit Intel/DVI ADPCM encoding.
ADPCM coding is anadaptive coding scheme, whereby each 4 bit number is the differencebetween one sample and the next, divided by a (varying) step.
TheIntel/DVI ADPCM algorithm has been selected for use by the IMA, so itmay well become a standard.
state is a tuple containing the state of the coder.
The coderreturns a tuple (adpcmfrag, newstate), and thenewstate should be passed to the next call oflin2adpcm().
In the initial call, None can bepassed as the state. adpcmfrag is the ADPCM coded fragmentpacked 2 4-bit values per byte.
This is an alternative ADPCM coder that uses only 3 bits per sample.It is not compatible with the Intel/DVI ADPCM coder and its output isnot packed (due to laziness on the side of the author).
Its use isdiscouraged.
Convert samples in the audio fragment to u-LAW encoding and returnthis as a Python string.
u-LAW is an audio encoding format wherebyyou get a dynamic range of about 14 bits using only 8 bit samples.
Itis used by the Sun audio hardware, among others.
Return a tuple consisting of the minimum and maximum values of allsamples in the sound fragment.
Return the maximum of the absolute value of all samples in afragment.
Return the maximum peak-peak value in the sound fragment.
Return a fragment that has all samples in the original fragmentmultiplied by the floating-point value factor.
Overflow issilently ignored.
Convert the frame rate of the input fragment.
state is a tuple containing the state of the converter.
Theconverter returns a tuple (newfragment, newstate),and newstate should be passed to the next call ofratecv().
The initial call should pass Noneas the state.The weightA and weightB arguments are parameters for asimple digital filter and default to 1 and 0 respectively.
Reverse the samples in a fragment and returns the modified fragment.
Return the root-mean-square of the fragment, i.e.
This is a measure of the power in an audio signal.
Convert a stereo fragment to a mono fragment.
The left channel ismultiplied by lfactor and the right channel by rfactorbefore adding the two channels to give a mono signal.
Generate a stereo fragment from a mono fragment.
Each pair of samplesin the stereo fragment are computed from the mono sample, whereby leftchannel samples are multiplied by lfactor and right channelsamples by rfactor.
Convert sound fragments in u-LAW encoding to linearly encoded soundfragments.
u-LAW encoding always uses 8 bits samples, so widthrefers only to the sample width of the output fragment here.
Note that operations such as mul() or max() makeno distinction between mono and stereo fragments, i.e. all samplesare treated equal.
If this is a problem the stereo fragment should besplit into two mono fragments first and recombined later.
Here is anexample of how to do that:
If you use the ADPCM coder to build network packets and you want yourprotocol to be stateless (i.e. to be able to tolerate packet loss)you should not only transmit the data but also the state.
Note thatyou should send the initial state (the one you passed tolin2adpcm()) along to the decoder, not the final state (asreturned by the coder).
If you want to use struct.struct()to store the state in binary you can code the first element (thepredicted value) in 16 bits and the second (the delta index) in 8.The ADPCM coders have never been tried against other ADPCM coders,only against themselves.
A reasonablyfast way to do this is to pick the most energetic piece of the outputsample, locate that in the input sample and subtract the whole outputsample from the input sample:
def echocancel(outputdata, inputdata):pos = audioop.findmax(outputdata, 800) # one tenth secondout_test = outputdata[pos*2:]in_test = inputdata[pos*2:]ipos, factor = audioop.findfit(in_test, out_test)# Optional (for better cancellation):# factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)], # out_test)prefill = '\0'*(pos+ipos)*2postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfillreturn audioop.add(inputdata, outputdata, 2)
The autoGIL module provides a function installAutoGIL thatautomatically locks and unlocks Python's Global Interpreter Lockwhen running an event loop.
Raised if the observer callback cannot be installed, for example becausethe current thread does not have a run loop.
Install an observer callback in the event loop (CFRunLoop) for thecurrent thread, that will lock and unlock the Global Interpreter Lock(GIL) at appropriate times, allowing other Python threads to run whilethe event loop is idle.Availability: OSX 10.1 or later.
This module provides data encoding and decoding as specified inRFC 3548.
This standard defines the Base16, Base32, and Base64algorithms for encoding and decoding arbitrary binary strings intotext strings that can be safely sent by email, used as parts of URLs,or included as part of an HTTP POST request.
The encoding algorith isnot the same as the uuencode program.There are two interfaces provided by this module.
The moderninterface supports encoding and decoding string objects using allthree alphabets.
The legacy interface provides for encoding anddecoding to and from file-like objects as well as strings, but onlyusing the Base64 standard alphabet.The modern interface provides:
b64encode
Encode a string use Base64.
s is the string to encode.
Optional altchars must be astring of at least length 2 (additional characters are ignored) whichspecifies an alternative alphabet for the + and /characters.
This allows an application to e.g. generate URL orfilesystem safe Base64 strings.
The default is None, for whichthe standard Base64 alphabet is used.The encoded string is returned.
Decode a Base64 encoded string.
s is the string to decode.
Optional altchars must be astring of at least length 2 (additional characters are ignored) whichspecifies the alternative alphabet used instead of the + and/ characters.The decoded string is returned.
A TypeError is raised ifs were incorrectly padded or if there are non-alphabetcharacters present in the string.
Encode string s using the standard Base64 alphabet.
Decode string s using the standard Base64 alphabet.
Encode string s using a URL-safe alphabet, which substitutes- instead of + and _ instead of / in thestandard Base64 alphabet.
urlsafe_b64decode
Decode string s using a URL-safe alphabet, which substitutes- instead of + and _ instead of / in thestandard Base64 alphabet.
b32encode
Encode a string using Base32. s is the string to encode.
Theencoded string is returned.
Decode a Base32 encoded string.
s is the string to decode.
Optional casefold is a flagspecifying whether a lowercase alphabet is acceptable as input.
Forsecurity purposes, the default is False.
RFC 3548 allows for optional mapping of the digit 0 (zero) to theletter O (oh), and for optional mapping of the digit 1 (one) to eitherthe letter I (eye) or letter L (el).
The optional argumentmap01 when not None, specifies which letter the digit 1 shouldbe mapped to (when map01 is not None, the digit 0 is alwaysmapped to the letter O).
For security purposes the default isNone, so that 0 and 1 are not allowed in the input.The decoded string is returned.
The encoded string is returned.
Decode a Base16 encoded string.
Forsecurity purposes, the default is False.The decoded string is returned.
A TypeError is raised ifs were incorrectly padded or if there are non-alphabetcharacters present in the string.
The legacy interface:
input.read() returns an empty string.
Decode the string s, which must contain one or more lines ofbase64 encoded data, and return a string containing the resultingbinary data.
Encode the contents of the input file and write the resultingbase64 encoded data to the output file.input and output must either be file objects or objects thatmimic the file object interface. input will be read until
Encode the string s, which can contain arbitrary binary data,and return a string containing one or more lines ofbase64-encoded data. encodestring() returns astring containing one or more lines of base64-encoded dataalways including an extra trailing newline ('n').
See Also:
Support module containing ASCII-to-binaryand binary-to-ASCII conversions.
The binascii module contains a number of methods to convertbetween binary and various ASCII-encoded binaryrepresentations.
Normally, you will not use these functions directlybut use wrapper modules like
or
Convert a single line of uuencoded data back to binary and return thebinary data.
Lines normally contain 45 (binary) bytes, except for thelast line.
Line data may be followed by whitespace.
Convert binary data to a line of ASCII characters, the return valueis the converted line, including a newline char.
The length ofdata should be at most 45.
Convert a block of base64 data back to binary and return thebinary data.
More than one line may be passed at a time.
Convert binary data to a line of ASCII characters in base64 coding.The return value is the converted line, including a newline char.The length of data should be at most 57 to adhere to the base64standard.
a2b_qp
Convert a block of quoted-printable data back to binary and return thebinary data.
More than one line may be passed at a time.If the optional argument header is present and true, underscoreswill be decoded as spaces.
Convert binary data to a line(s) of ASCII characters inquoted-printable encoding.
The return value is the converted line(s).If the optional argument quotetabs is present and true, all tabsand spaces will be encoded.
Convert binhex4 formatted ASCII data to binary, without doingRLE-decompression.
The string should contain a complete number ofbinary bytes, or (in case of the last portion of the binhex4 data)have the remaining bits zero.
Perform RLE-decompression on the data, as per the binhex4standard.
The algorithm uses 0x90 after a byte as a repeatindicator, followed by a count.
A count of 0 specifies a bytevalue of 0x90.
The routine returns the decompressed data,unless data input data ends in an orphaned repeat indicator, in whichcase the Incomplete exception is raised.
Perform binhex4 style RLE-compression on data and return theresult.
Perform hexbin4 binary-to-ASCII translation and return theresulting string.
The argument should already be RLE-coded, and have alength divisible by 3 (except possibly the last fragment).
Compute the binhex4 crc value of data, starting with an initialcrc and returning the result.
crc32
Compute CRC-32, the 32-bit checksum of data, starting with an initialcrc.
This is consistent with the ZIP file checksum.
Since thealgorithm is designed for use as a checksum algorithm, it is notsuitable for use as a general hash algorithm.
Use as follows:
Return the hexadecimal representation of the binary data.
Everybyte of data is converted into the corresponding 2-digit hexrepresentation.
The resulting string is therefore twice as long asthe length of data.
Return the binary data represented by the hexadecimal stringhexstr.
Exception raised on errors.
These are usually programming errors.
Exception raised on incomplete data.
These are usually not programmingerrors, but may be handled by reading a little more data and tryingagain.
See Also:
Support for the binhex format used on the Macintosh.
Support for UU encoding used on Unix.
Support for quoted-printable encoding used in MIME email messages.
This module encodes and decodes files in binhex4 format, a formatallowing representation of Macintosh files in ASCII.
Convert a binary file with filename input to binhex fileoutput.
The output parameter can either be a filename or afile-like object (any object supporting a write() andclose() method).
The following exception is also defined:
Exception raised when something can't be encoded using the binhexformat (for example, a filename is too long to fit in the filenamefield), or when input is not properly encoded binhex data.
Support module containing ASCII-to-binaryand binary-to-ASCII conversions.
This module provides support for maintaining a list in sorted orderwithout having to sort the list after each insertion.
For long listsof items with expensive comparison operations, this can be animprovement over the more common approach.
The module is calledbisect because it uses a basic bisection algorithm to do itswork.
The source code may be most useful as a working example of thealgorithm (the boundary conditions are already right!).The following functions are provided:
Locate the proper insertion point for item in list tomaintain sorted order.
The parameters lo and hi may beused to specify a subset of the list which should be considered; bydefault the entire list is used.
If item is already presentin list, the insertion point will be before (to the left of)any existing entries.
The return value is suitable for use as thefirst parameter to
list.insert().
This assumes thatlist is already sorted.New in version 2.1.
Alias for bisect_right().
Insert item in list in sorted order.
This is equivalentto
list.insert(bisect.bisect_left(list, item,lo, hi), item).
This assumes that list isalready sorted.New in version 2.1.
Similar to insort_left(), but inserting item inlist after any existing entries of item.New in version 2.1.
Alias for insort_right(). Subsections
7.13.1 Hash, BTree and
Availability: Unix, Windows.
The bsddb module provides an interface to the Berkeley DBlibrary.
Users can create hash, btree or record based library filesusing the appropriate open call.
Bsddb objects behave generally likedictionaries.
Website with documentationfor the new python Berkeley DB interface that closely mirrors the sleepycat object oriented interface provided in Berkeley DB 3 and 4.
Sleepycat Software produces themodern Berkeley DB library.
The following is a description of the legacy bsddb interfacecompatible with the old python bsddb module.
For details about the moremodern Db and DbEnv object oriented interface see the above mentionedpybsddb URL.The bsddb module defines the following functions that createobjects that access the appropriate type of Berkeley DB file.
Thefirst two arguments of each function are the same.
For ease ofportability, only the first two arguments should be used in mostinstances.
Open the hash format file named filename.
Files never intendedto be preserved on disk may be created by passing None as the filename.
The optionalflag identifies the mode used to open the file.
It may be"r" (read only), "w" (read-write) ,"c" (read-write - create if necessary; the default) or"n" (read-write - truncate to zero length).
The otherarguments are rarely used and are just passed to the low-leveldbopen() function.
Consult the Berkeley DB documentationfor their use and interpretation.
Open the btree format file named filename.
Files never intended to be preserved on disk may be created by passing None as the filename.
It may be"r" (read only), "w" (read-write),"c" (read-write - create if necessary; the default) or"n" (read-write - truncate to zero length).
The otherarguments are rarely used and are just passed to the low-level dbopenfunction.
Consult the Berkeley DB documentation for their use andinterpretation.
Consult the Berkeley DB documentation for their use andinterpretation.
Note:Beginning in 2.3 some Unix versions of Python may have a bsddb185module.
This is present only to allow backwards compatibility withsystems which ship with the old Berkeley DB 1.85 database library.
Thebsddb185 module should never be used directly in new code.
DBM-style interface to the bsddb.
Subsections 7.13.1 Hash, BTree and Record Objects
This module provides direct access to all `built-in' identifiers ofPython; e.g.
__builtin__.open is the full name for the built-infunction open().
See section 2.1, ``Built-inFunctions.''
BZ2File class implements a complete file interface, includingreadline(), readlines(),writelines(), seek(), etc;
BZ2File class implements emulated seek() support;
BZ2File class implements universal newline support;
BZ2File class offers an optimized line iteration usingthe readahead algorithm borrowed from file objects;
Sequential (de)compression supported by BZ2Compressor andBZ2Decompressor classes;
One-shot (de)compression supported by compress() anddecompress() functions;
Thread safety uses individual locking mechanism;
Complete inline documentation;
Subsections 7.17.1 (De)compression of files
The cPickle module supports serialization andde-serialization of Python objects, providing an interface andfunctionality nearly identical to the
module.
This means thatyou cannot use them to derive custom pickling and unpicklingsubclasses.
Most applications have no need for this functionality andshould benefit from the greatly improved performance of thecPickle module.The pickle data stream produced by pickle andcPickle are identical, so it is possible to usepickle and cPickle interchangeably with existingpickles.
3.11
There are additional minor differences in API between cPickleand pickle, however for most applications, they areinterchangable.
3.11
Since the pickle data format is actually a tinystack-oriented programming language, and some freedom is taken in theencodings of certain objects, it is possible that the two modulesproduce different data streams for the same input objects.
However itis guaranteed that they will always be able to read each other'sdata streams.
The module cStringIO provides an interface similar to that ofthe
module.
Heavy use of StringIO.StringIOobjects can be made more efficient by using the functionStringIO() from this module instead.Since this module provides a factory function which returns objects ofbuilt-in types, there's no way to build your own version usingsubclassing.
Use the original
module in that case.Unlike the memory files implemented by the
module, those provided by this module are not able to accept Unicodestrings that cannot be encoded as plain ASCII strings.Another difference from the
StringIO module is that callingStringIO() with a string parameter creates a read-only object.Unlike an object created without a string parameter, it does not havewrite methods.
These objects are not generally visible.
They turn up intracebacks as StringI and StringO.The following data objects are provided as well:
The type object of the objects created by callingStringIO with a string parameter.
The type object of the objects returned by callingStringIO with no parameters.
There is a C API to the module as well; refer to the module source for more information.
This module allows you to output calendars like the Unix cal program, and provides additional useful functionsrelated to the calendar.
By default, these calendars have Monday asthe first day of the week, and Sunday as the last (the Europeanconvention).
Use setfirstweekday() to set the first day of theweek to Sunday (6) or to any other weekday.
Parameters that specifydates are given as integers.Most of these functions rely on the datetime module whichuses an idealized calendar, the current Gregorian calendar indefinitelyextended in both directions.
This matches the definition of the"proleptic Gregorian" calendar in Dershowitz and Reingold's book"Calendrical Calculations", where it's the base calendar for allcomputations.
Sets the weekday (0 is Monday, 6 is Sunday) to starteach week.
The values MONDAY, TUESDAY,WEDNESDAY, THURSDAY, FRIDAY,SATURDAY, and SUNDAY are provided forconvenience.
For example, to set the first weekday to Sunday:
Returns the current setting for the weekday to start each week.New in version 2.0.
Returns True if year is a leap year, otherwiseFalse.
y1, y2)
Returns the number of leap years in the range[y1...y2), where y1 and y2 are years.Changed in version 2.0:This function didn't work for ranges spanning a century change in Python 1.5.2.
Returns the day of the week (0 is Monday) for year(1970-...), month (1-12), day(1-31).
Returns weekday of first day of the month and number of days in month, for the specified year and month.
Returns a matrix representing a month's calendar.
Each row representsa week; days outside of the month a represented by zeros.Each week begins with Monday unless set by setfirstweekday().
Prints a month's calendar as returned by month().
Returns a month's calendar in a multi-line string.
If w isprovided, it specifies the width of the date columns, which arecentered.
If l is given, it specifies the number of lines thateach week will use.
Depends on the first weekday as set bysetfirstweekday().New in version 2.0.
Prints the calendar for an entire year as returned by calendar().
Returns a 3-column calendar for an entire year as a multi-line string.Optional parameters w, l, and c are for date columnwidth, lines per week, and number of spaces between month columns,respectively.
Depends on the first weekday as set bysetfirstweekday().
The earliest year for which a calendar canbe generated is platform-dependent.New in version 2.0.
An unrelated but handy function that takes a time tuple such asreturned by the gmtime() function in the
module, and returns the corresponding Unix timestamp value, assumingan epoch of 1970, and the POSIX encoding.
In fact,time.gmtime() and timegm() are each others' inverse.New in version 2.0.
: Object-oriented interface to dates and timeswith similar functionality to the
module.
Low-level time related functions.
A program opens the CD-ROMdevice with open() and creates a parser to parse the datafrom the CD with createparser().
The object returned byopen() can be used to read data from the CD, but also to getstatus information for the CD-ROM device, and to get information aboutthe CD, such as the table of contents.
Data from the CD is passed tothe parser, which parses the frames, and calls any callbackfunctions that have previously been added.An audio CD is divided into tracks or programs (the termsare used interchangeably).
Tracks can be subdivided intoindices.
An audio CD contains a table of contents whichgives the starts of the tracks on the CD.
Index 0 is usually thepause before the start of a track.
The start of the track as given bythe table of contents is normally the start of index 1.Positions on a CD can be represented in two ways.
Either a framenumber or a tuple of three values, minutes, seconds and frames.
Mostfunctions use the latter representation.
Positions can be bothrelative to the beginning of the CD, and to the beginning of thetrack.Module cd defines the following functions and constants:
Create and return an opaque parser object.
The methods of the parserobject are described below.
Converts a (minutes, seconds, frames) triplerepresenting time in absolute time code into the corresponding CDframe number.
Open the CD-ROM device.
The return value is an opaque player object;methods of the player object are described below.
The device is thename of the SCSI device file, e.g. '/dev/scsi/sc0d4l0', orNone.
If omitted or None, the hardware inventory isconsulted to locate a CD-ROM drive.
The mode, if not omited,should be the string 'r'.
The module defines the following variables:
Exception raised on various errors.
The size of one frame's worth of audio data.
This is the size of theaudio data as passed to the callback of type audio.
The size of one uninterpreted frame of audio data.
The following variables are states as returned bygetstatus():
The drive is ready for operation loaded with an audio CD.
The drive does not have a CD loaded.
The drive is loaded with a CD-ROM.
Subsequent play or read operationswill return I/O errors.
An error occurred while trying to read the disc or its table ofcontents.
The drive is in CD player mode playing an audio CD through its audiojacks.
The drive is in CD layer mode with play paused.
The equivalent of PAUSED on older (non 3301) model ToshibaCD-ROM drives.
Such drives have never been shipped by SGI.
cfmfile is a module that understands Code Fragments and theaccompanying ``cfrg'' resources.
It can parse them and merge them, and isused by BuildApplication to combine all plugin modules to a singleexecutable.
Support module for Common Gateway Interface (CGI) scripts.
This module defines a number of utilities for use by CGI scriptswritten in Python.
Subsections 11.2.1 Introduction
11.2.10 Common problems and
The cgitb module provides a special exception handler for Pythonscripts.
(Its name is a bit misleading.
It was originally designed todisplay extensive traceback information in HTML for CGI scripts.
It waslater generalized to also display this information in plain text.)
Afterthis module is activated, if an uncaught exception occurs, a detailed,formatted report will be displayed.
The reportincludes a traceback showing excerpts of the source code for each level,as well as the values of the arguments and local variables to currentlyrunning functions, to help you debug the problem.
Optionally, you cansave this information to a file instead of sending it to the browser.To enable this feature, simply add one line to the top of your CGI script:
The options to the enable() function control whether thereport is displayed in the browser and whether the report is loggedto a file for later analysis.
This function causes the cgitb module to take over theinterpreter's default handling for exceptions by setting thevalue of
.excepthook.
The optional argument display defaults to 1 and can be setto 0 to suppress sending the traceback to the browser.If the argument logdir is present, the traceback reports arewritten to files.
Any other value forces plain text output.
The defaultvalue is "html".
This function handles an exception using the default settings(that is, show a report in the browser, but don't log to a file).This can be used when you've caught an exception and want toreport it using cgitb.
The optional info argumentshould be a 3-tuple containing an exception type, exceptionvalue, and traceback object, exactly like the tuple returned by
.exc_info().
If the info argumentis not supplied, the current exception is obtained from
.exc_info().
This module provides an interface for reading files that use EA IFF 85chunks.
This format is usedin at least the Audio
Interchange File Format(AIFF/AIFF-C) and the Real
(RMFF).
The WAVE audio file format is closelyrelated and can also be read using this module.A chunk has the following structure:
Offset
Length
Chunk ID
Size of chunk in big-endian byte order, not including the header
Data bytes, where n is the size given inthe preceding field
Pad byte needed if n is odd andchunk alignment is used
The proposedusage of the Chunk class defined here is to instantiate aninstance at the start of each chunk and read from the instance untilit reaches the end, after which a new instance can be instantiated.At the end of the file, creating a new instance will fail with aEOFError exception.
classChunk
Class which represents a chunk.
The file argument is expectedto be a file-like object.
An instance of this class is specificallyallowed.
The only method that is needed is read().
If themethods seek() and tell() are present and don'traise an exception, they are also used.
If these methods are presentand raise an exception, they are expected to not have altered theobject.
If the optional argument align is true, chunks areassumed to be aligned on 2-byte boundaries.
If align isfalse, no alignment is assumed.
The default value is true.
If theoptional argument bigendian is false, the chunk size is assumedto be in little-endian order.
This is needed for WAVE audio files.The default value is true.
If the optional argument inclheaderis true, the size given in the chunk header includes the size of theheader.
The default value is false.
A Chunk object supports the following methods:
Returns the name (ID) of the chunk.
This is the first 4 bytes of thechunk.
Returns the size of the chunk.
Close and skip to the end of the chunk.
This does not close theunderlying file.
The remaining methods will raise IOError if called afterthe close() method has been called.
Returns False.
Set the chunk's current position.
The whence argument isoptional and defaults to 0 (absolute file positioning); othervalues are 1 (seek relative to the current position) and2 (seek relative to the file's end).
There is no return value.If the underlying file does not allow seek, only forward seeks areallowed.
Return the current position into the chunk.
Read at most size bytes from the chunk (less if the read hitsthe end of the chunk before obtaining size bytes).
If thesize argument is negative or omitted, read all data until theend of the chunk.
The bytes are returned as a string object.
Anempty string is returned when the end of the chunk is encounteredimmediately.
Skip to the end of the chunk.
All further calls to read()for the chunk will return ''.
If you are not interested in thecontents of the chunk, this method should be called so that the filepoints to the start of the next chunk.
Footnotes ...chunks.
This module is always available.
It provides access to mathematicalfunctions for complex numbers.
The functions are:
Return the hyperbolic arc cosine of x.There is one branch cut, extending left from 1 along the real axisto -, continuous from above.
Return the arc sine of x.This has the same branch cuts as acos().
Return the cosine of x.
Return the hyperbolic cosine of x.
, base
] )
Returns the logarithm of x to the given base.If the base is not specified, returns the natural logarithm of x.There is one branch cut, from 0 along the negative real axis to-, continuous from above.Changed in version 2.4:base argument added.
x)
Return the base-10 logarithm of x.This has the same branch cut as log().
Return the sine of x.
Return the hyperbolic sine of x.
x)
Return the square root of x.This has the same branch cut as log().
Return the tangent of x.
Return the hyperbolic tangent of x.
The module also defines two mathematical constants:
The mathematical constant pi, as a real.
The mathematical constant e, as a real. Note that the selection of functions is similar, but not identical, tothat in module
.
The reason for havingtwo modules is that some users aren't interested in complex numbers,and perhaps don't even know what they are.
They are a necessary feature of many complexfunctions.
It is assumed that if you need to compute with complexfunctions, you will understand about branch cuts.
Consult almost any(not too elementary) book on complex variables for enlightenment.
Forinformation of the proper choice of branch cuts for numericalpurposes, a good reference should be the following:
The Cmd class provides a simple framework for writingline-oriented command interpreters.
These are often useful fortest harnesses, administrative tools, and prototypes that willlater be wrapped in a more sophisticated interface.
classCmd
A Cmd instance or subclass instance is a line-orientedinterpreter framework.
nameof a completion key; it defaults to Tab.
If completekey isnot None and readline
is available, command completionis done automatically.The optional arguments stdin and stdout specify the input and output file objects that the Cmd instance or subclass instance will use for input and output.
If not specified, theywill default to sys.stdin and sys.stdout.
Changed in version 2.3:The stdin and stdout parameters were added.. Subsections
The code module provides facilities to implementread-eval-print loops in Python.
Two classes and conveniencefunctions are included which can be used to build applications whichprovide an interactive interpreter prompt.
classInteractiveInterpreter
)
This class deals with parsing and interpreter state (the user'snamespace); it does not deal with input buffering or prompting orinput file naming (the filename is always passed in explicitly).The optional locals argument specifies the dictionary inwhich code will be executed; it defaults to a newly createddictionary with key '__name__' set to '__console__'and key '__doc__' set to None.
classInteractiveConsole
Closely emulate the behavior of the interactive Python interpreter.This class builds on InteractiveInterpreter and addsprompting using the familiar sys.
ps1 and sys. ps2, andinput buffering.
Convenience function to run a read-eval-print loop.
This creates anew instance of InteractiveConsole and sets readfuncto be used as the raw_input() method, if provided.
Iflocal is provided, it is passed to theInteractiveConsole constructor for use as the defaultnamespace for the interpreter loop.
The interact() methodof the instance is then run with banner passed as the bannerto use, if provided.
The console object is discarded after use.
This function is useful for programs that want to emulate Python'sinterpreter main loop (a.k.a. the read-eval-print loop).
The trickypart is to determine when the user has entered an incomplete commandthat can be completed by entering more text (as opposed to acomplete command or a syntax error).
This functionalmost always makes the same decision as the real interpretermain loop.
Subsections
Register a codec search function.
Search functions are expected totake one argument, the encoding name in all lower case letters, andreturn a tuple of functions (encoder, decoder, stream_reader,stream_writer) taking the following arguments:
encoder and decoder: These must be functions or methodswhich have the same interface as theencode()/decode() methods of Codec instances (seeCodec Interface).
The functions/methods are expected to work in astateless mode.
stream_reader and stream_writer: These have to befactory functions providing the following interface:
The factory functions must return objects providing the interfacesdefined by the base classes StreamWriter andStreamReader, respectively.
Looks up a codec tuple in the Python codec registry and returns thefunction tuple as defined above.Encodings are first looked up in the registry's cache.
If not found,the list of registered search functions is scanned.
If no codecs tupleis found, a LookupError is raised. Otherwise, the codecstuple is stored in the cache and returned to the caller.
To simplify access to the various codecs, the module provides theseadditional functions which use lookup() for the codeclookup:
Lookup up the codec for the given encoding and return its encoderfunction.Raises a LookupError in case the encoding cannot be found.
Lookup up the codec for the given encoding and return its decoderfunction.Raises a LookupError in case the encoding cannot be found.
Lookup up the codec for the given encoding and return its StreamReaderclass or factory function.Raises a LookupError in case the encoding cannot be found.
Lookup up the codec for the given encoding and return its StreamWriterclass or factory function.Raises a LookupError in case the encoding cannot be found.
The error handler must either raise this ora different exception or return a tuple with a replacement for theunencodable part of the input and a position where encoding shouldcontinue.
The encoder will encode the replacement and continue encodingthe original input at the specified position.
Negative position valueswill be treated as being relative to the end of the input string.
If theresulting position is out of bound an IndexError will be raised.Decoding and translating works similar, except UnicodeDecodeErroror UnicodeTranslateError will be passed to the handler andthat the replacement from the error handler will be put into the outputdirectly.
Return the error handler previously register under the name name.Raises a LookupError in case the handler cannot be found.
strict_errors
Implements the strict error handling.
Implements the replace error handling.
Implements the ignore error handling.
Implements the xmlcharrefreplace error handling.
Implements the backslashreplace error handling.
To simplify working with encoded files or stream, the modulealso defines these utility functions:
Open an encoded file using the given mode and returna wrapped version providing transparent encoding/decoding.
Note:The wrapped version will only accept the object formatdefined by the codecs, i.e.
Unicode objects for most built-incodecs.
Output is also codec-dependent and will usually be Unicode aswell.
encoding specifies the encoding which is to be used for thefile.
errors may be given to define the error handling.
It defaultsto 'strict' which causes a ValueError to be raisedin case an encoding error occurs.
buffering has the same meaning as for the built-inopen() function.
It defaults to line buffered.
]
)
Return a wrapped version of file which provides transparentencoding translation.Strings written to the wrapped file are interpreted according to thegiven input encoding and then written to the original file asstrings using the output encoding.
The intermediate encoding willusually be Unicode but depends on the specified codecs.If output is not given, it defaults to input.
errors may be given to define the error handling.
It defaults to'strict', which causes ValueError to be raised in casean encoding error occurs.
The module also provides the following constants which are usefulfor reading and writing to platform dependent files:
These constants define various encodings of the Unicode byte order mark(BOM) used in UTF-16 and UTF-32 data streams to indicate the byte orderused in the stream or file and in UTF-8 as a Unicode signature.BOM_UTF16 is either BOM_UTF16_BE orBOM_UTF16_LE depending on the platform's native byte order,BOM is an alias for BOM_UTF16, BOM_LEfor BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.The others represent the BOM in UTF-8 and UTF-32 encodings.
4.9.1.3 StreamReader Objects
4.9.1.4 StreamReaderWriter Objects
4.9.1.5 StreamRecoder Objects
3.24 codeop --Compile Python code The codeop module provides utilities upon which the Pythonread-eval-print loop can be emulated, as is done in the
module.
As a result, you probably don't want to usethe module directly; if you want to include such a loop in yourprogram you probably want to use the
module instead.There are two parts to this job:
Being able to tell if a line of input completes a Python statement: in short, telling whether to print`' or `...' next.
Remembering which future statements the user has entered, so subsequent input can be compiled with these in effect.
]
)
Tries to compile source, which should be a string of Pythoncode and return a code object if source is validPython code.
Any other value will cause ValueError to be raised.
Caveat:It is possible (but not likely) that the parser stops parsingwith a successful outcome before reaching the end of the source;in this case, trailing symbols may be ignored instead of causing anerror.
For example, a backslash followed by two newlines may befollowed by arbitrary garbage.
This will be fixed once the APIfor the parser is better.
classCompile
Instances of this class have __call__() methods indentical insignature to the built-in function compile(), but with thedifference that if the instance compiles program text containing a__future__ statement, the instance 'remembers' and compilesall subsequent program texts with the statement in force.
classCommandCompiler
)
Instances of this class have __call__() methods identical insignature to compile_command(); the difference is that ifthe instance compiles program text containing a __future__statement, the instance 'remembers' and compiles all subsequentprogram texts with the statement in force.
A note on version compatibility: the Compile andCommandCompiler are new in Python 2.2.
If you want to enablethe future-tracking features of 2.2 but also retain compatibility with2.1 and earlier versions of Python you can either write
which is a low-impact change, but introduces possibly unwanted globalstate into your program, or you can write:
and then call CommandCompiler every time you need a freshcompiler object.
This module implements high-performance container datatypes.
Currently, theonly datatype is a deque.
Future additions may include B-treesand Fibonacci heaps.
Returns a new deque objected initialized left-to-right (usingappend()) with data from iterable.
If iterableis not specified, the new deque is empty.Deques are a generalization of stacks and queues (the name is pronounced``deck'' and is short for ``double-ended queue'').
Deque objects support the following methods:
Add x to the right side of the deque.
Add x to the left side of the deque.
Remove all elements from the deque leaving it with length 0.
Extend the right side of the deque by appending elements fromthe iterable argument.
Extend the left side of the deque by appending elements fromiterable.
Note, the series of left appends results inreversing the order of elements in the iterable argument.
Remove and return an element from the right side of the deque.If no elements are present, raises a IndexError.
Remove and return an element from the left side of the deque.If no elements are present, raises a IndexError.
Rotate the deque n steps to the right.
If n isnegative, rotate to the left.
Rotating one step to the rightis equivalent to: "d.appendleft(d.pop())".
The colorsys module defines bidirectional conversions ofcolor values between colors expressed in the RGB (Red Green Blue)color space used in computer monitors and three other coordinatesystems: YIQ, HLS (Hue Lightness Saturation) and HSV (Hue SaturationValue).
Coordinates in all of these color spaces are floating pointvalues.
In the YIQ space, the Y coordinate is between 0 and 1, butthe I and Q coordinates can be positive or negative.
Convert the color from RGB coordinates to YIQ coordinates.
Convert the color from YIQ coordinates to RGB coordinates.
Convert the color from RGB coordinates to HLS coordinates.
Convert the color from HLS coordinates to RGB coordinates.
Convert the color from RGB coordinates to HSV coordinates.
Convert the color from HSV coordinates to RGB coordinates.
Example:
Availability: Unix.
Execute the string cmd in a shell with os.
popen() andreturn a 2-tuple (status, output). cmd isactually run as { cmd ; } 21, so that the returnedoutput will contain output or error messages.
A trailing newline isstripped from the output.
The exit status for the command can beinterpreted according to the rules for the C functionwait().
Like getstatusoutput(), except the exit status is ignoredand the return value is a string containing the command's output.
Return the output of "ls -ld file
Example: import commands commands.
This module provides some utility functions to support installingPython libraries.
Recursively descend the directory tree named by dir, compilingall .py files along the way.
The maxlevels parameteris used to limit the depth of the recursion; it defaults to10.
If ddir is given, it is used as the base path from which the filenames used in error messages will be generated.
Ifforce is true, modules are re-compiled even if the timestampsare up to date.
If rx is given, it specifies a regular expression of filenames to exclude from the search; that expression is searched for inthe full path.If quiet is true, nothing is printed to the standard outputin normal operation.
Byte-compile all the .py files found along sys.
path.If skip_curdir is true (the default), the current directory isnot included in the search.
The maxlevels andforce parameters default to 0 and are passed to thecompile_dir() function.
See Also:
The compiler.ast module is generated from a text file thatdescribes each node type and its elements.
Each node type isrepresented as a class that inherits from the abstract base classcompiler.ast.Node and defines a set of named attributes forchild nodes.
classNode
The Node instances are created automatically by the parsergenerator.
The recommended interface for specific Nodeinstances is to use the public attributes to access child nodes.
Apublic attribute may be bound to a single node or to a sequence ofnodes, depending on the Node type.
For example, thebases attribute of the Class node, is bound to alist of base class nodes, and the doc attribute is bound toa single node.Each Node instance has a lineno attribute which maybe None.
XXX Not sure what the rules are for which nodeswill have a useful lineno.
All Node objects offer the following methods:
Returns a flattened list of the child nodes and objects in theorder they occur.
Specifically, the order of the nodes is theorder in which they appear in the Python grammar.
Not all of thechildren are Node instances.
The names of functions andclasses, for example, are plain strings.
Returns a flattened list of the child nodes in the order theyoccur.
This method is like getChildren(), except that itonly returns those children that are Node instances.
Two examples illustrate the general structure of Nodeclasses.
The while statement is defined by the followinggrammar production:
The While node has three attributes: test,body, and else_.
(If the natural name for anattribute is also a Python reserved word, it can't be used as anattribute name.
The If node only defines two attributes: tests andelse_.
The tests attribute is a sequence of testexpression, consequent body pairs.
There is one pair for eachif/elif clause.
The first element of the pair isthe test expression.
The second elements is a Stmt node thatcontains the code to execute if the test is true.The getChildren() method of If returns a flat list ofchild nodes.
If there are three if/elif clausesand no else clause, then getChildren() will returna list of six elements: the first test expression, the firstStmt, the second text expression, etc.The following table lists each of the Node subclasses definedin compiler.ast and each of the public attributes availableon their instances.
The values of most of the attributes arethemselves Node instances or sequences of instances.
When thevalue is something other than an instance, the type is noted in thecomment.
The attributes are listed in the order in which they arereturned by getChildren() and getChildNodes().
Node type
left operand
right operand
list of operands
attribute as target of assignment
expression on the left-hand side of the dot
the attribute name, a string
list of list elements being assigned to
name being assigned to
list of tuple elements being assigned to
the expression to be tested
the value of the AssertionError
a list of assignment targets, one per equal sign
the value being assigned
expression for the callee
a list of arguments
the extended *-arg value
the extended **-arg value
the name of the class, a string
a list of base classes
doc string, a string or None
the body of the class statement
List of function decorator expressions
Decorators or None
list of argument names, as strings
list of default values
the body of the function
body of the module, a Stmt
list of statements
The top-level of the package defines four functions.
If you importcompiler, you will get these functions and a collection ofmodules contained in the package.
Returns an abstract syntax tree for the Python source code in buf.The function raises SyntaxError if there is an error in the sourcecode.
The return value is a compiler.ast.Module instance thatcontains the tree.
Return an abstract syntax tree for the Python source code in the filespecified by path.
It is equivalent toparse(open(path).read()).
Do a pre-order walk over the abstract syntax tree ast.
Call theappropriate method on the visitor instance for each nodeencountered.
Compile the string source, a Python module, statement orexpression, into a code object that can be executed by the execstatement or eval().
Compiles the file source and generates a .pyc file.
The compiler package contains the following modules:
, consts, future,misc, pyassem, pycodegen, symbols,transformer, and
.
The visitor pattern is ... The
package uses avariant on the visitor pattern that takes advantage of Python'sintrospection features to elminiate the need for much of the visitor'sinfrastructure.The classes being visited do not need to be programmed to acceptvisitors.
The visitor need only define visit methods for classes itis specifically interested in; a default visit method can handle therest.
classASTVisitor
The ASTVisitor is responsible for walking over the tree in thecorrect order.
A walk begins with a call to preorder().
If the method exists, it is called with the node asits first argument.The visitor method for a particular node type can control how childnodes are visited during the walk.
The ASTVisitor modifiesthe visitor argument by adding a visit method to the visitor; thismethod can be used to visit a particular child node.
If no visitor isfound for a particular node type, the default() method iscalled.
ASTVisitor objects have the following methods:XXX describe extra arguments
The cookielib module defines classes for automatic handlingof HTTP cookies.
RFC 2965 handling is switched off by default.RFC 2109 cookies are parsed as Netscape cookies and subsequentlytreated as RFC 2965 cookies.
Note that the great majority of cookieson the Internet are Netscape cookies. cookielib attempts tofollow the de-facto Netscape cookie protocol (which differssubstantially from that set out in the original Netscapespecification), including taking note of the max-age andport cookie-attributes introduced with RFC 2109.
Instances of FileCookieJar raise this exception on failure toload cookies from a file.
The following classes are provided:
classCookieJar
)
policy is an object implementing the CookiePolicyinterface.The CookieJar class stores HTTP cookies.
It extracts cookiesfrom HTTP requests, and returns them in HTTP responses.CookieJar instances automatically expire contained cookieswhen necessary.
Subclasses are also responsible for storing andretrieving cookies from a file or database.
classFileCookieJar
policy is an object implementing the CookiePolicyinterface.
For the other arguments, see the documentation for thecorresponding attributes.A CookieJar which can load cookies from, and perhaps savecookies to, a file on disk.
Cookies are NOT loaded from thenamed file until either the load() or revert()method is called.
Subclasses of this class are documented in section11.20.2.
This class is responsible for deciding whether each cookie should beaccepted from / returned to the server.
classDefaultCookiePolicy
Constructor arguments should be passed as keyword arguments only.
blocked_domains is a sequence of domain names that we neveraccept cookies from, nor return cookies to. allowed_domains ifnot None, this is a sequence of the only domains for whichwe accept and return cookies.
For all other arguments, see thedocumentation for CookiePolicy and DefaultCookiePolicyobjects.
DefaultCookiePolicy implements the standard accept / rejectrules for Netscape and RFC 2965 cookies.
RFC 2109 cookies(ie. cookies received in a Set-Cookie: header with aversion cookie-attribute of 1) are treated according to the RFC 2965rules.
DefaultCookiePolicy also provides some parameters toallow some fine-tuning of policy.
classCookie
This class represents Netscape, RFC 2109 and RFC 2965 cookies.
It isnot expected that users of cookielib construct their ownCookie instances.
Instead, if necessary, callmake_cookies() on a CookieJar instance.
See Also:
HTTP cookie classes, principally useful forserver-side code.
The cookielib and Cookie modulesdo not depend on each other.
Extensions to thismodule, including a class for reading Microsoft Internet Explorercookies on Windows.
Thespecification of the original Netscape cookie protocol.
Though thisis still the dominant protocol, the 'Netscape cookie protocol'implemented by all the major browsers (and cookielib) onlybears a passing resemblance to the one sketched out incookie_spec.html.
Obsoleted by RFC 2965.Uses Set-Cookie: with version=1.
The Netscape protocolwith the bugs fixed.
Uses Set-Cookie2: in place ofSet-Cookie:. Not widely used.
Unfinished errata toRFC 2965.
Subsections 11.20.1 CookieJar and FileCookieJar Objects
This module provides generic (shallow and deep) copying operations.
Interface summary:
For module specific errors, copy.error is raised.The difference between shallow and deep copying is only relevant forcompound objects (objects that contain other objects, like lists orclass instances):
A shallow copy constructs a new compound object and then (to theextent possible) inserts references into it to the objects foundin the original.
A deep copy constructs a new compound object and then,recursively, inserts copies into it of the objects found in theoriginal.
Two problems often exist with deep copy operations that don't existwith shallow copy operations:
Recursive objects (compound objects that, directly or indirectly,contain a reference to themselves) may cause a recursive loop.
Because deep copy copies everything it may copy too much,e.g., administrative data structures that should be shared evenbetween copies.
The deepcopy() function avoids these problems by:
keeping a ``memo'' dictionary of objects already copied during the currentcopying pass; and
letting user-defined classes override the copying operation or theset of components copied.
This version does not copy types like module, class, function, method,stack trace, stack frame, file, socket, window, array, or any similartypes.Classes can use the same interfaces to control copying that they useto control pickling.
See the description of module
for information on thesemethods.
The copy module does not use the
copy_reg
registration module.In order for a class to define its own copy implementation, it candefine special methods __copy__() and__deepcopy__().
The former is called to implement theshallow copy operation; no additional arguments are passed.
Thelatter is called to implement the deep copy operation; it is passedone argument, the memo dictionary.
If the __deepcopy__()implementation needs to make a deep copy of a component, it shouldcall the deepcopy() function with the component as firstargument and the memo dictionary as second argument.
Discussion of the special methods used tosupport object state retrieval and restoration.
The copy_reg module provides support for the
and
modules.
The
module is likely to use this in thefuture as well.
It provides configuration information about objectconstructors which are not classes.
Such constructors may be factoryfunctions or class instances.
Declares object to be a valid constructor.
If object isnot callable (and hence not valid as a constructor), raisesTypeError.
)
Declares that function should be used as a ``reduction''function for objects of type type; type must not be a``classic'' class object.
(Classic classes are handled differently;see the documentation for the
TypeError will be raised ifobject is a class or constructor is not callable.See the
module for moredetails on the interface expected of function andconstructor.
This module implements an interface to the
routine, which is a one-way hashfunction based upon a modified DES
algorithm; seethe Unix man page for further details.
Possible uses includeallowing Python scripts to accept typed passwords from the user, orattempting to crack Unix passwords with a dictionary.Notice that the behavior of this module depends on the actual implementation of the
routine in the running system.
Therefore, any extensions available on the current implementation will also be available on this module.
word will usually be a user's password as typed at a prompt or in a graphical interface. salt is usually a randomtwo-character string which will be used to perturb the DES algorithmin one of 4096 ways.
The characters in salt must be in theset [./a-zA-Z0-9].
Returns the hashed password as astring, which will be composed of characters from the same alphabetas the salt (the first two characters represent the salt itself).Since a few
extensions allow differentvalues, with different sizes in the salt, it is recommended to use the full crypted password as salt when checking for a password.
A simple example illustrating typical use:
The so-called CSV (Comma Separated Values) format is the most common importand export format for spreadsheets and databases.
There is no ``CSVstandard'', so the format is operationally defined by the many applicationswhich read and write it.
The lack of a standard means that subtledifferences often exist in the data produced and consumed by differentapplications.
These differences can make it annoying to process CSV filesfrom multiple sources.
Still, while the delimiters and quoting charactersvary, the overall format is similar enough that it is possible to write asingle module which can efficiently manipulate such data, hiding the detailsof reading and writing the data from the programmer.The csv module implements classes to read and write tabular data inCSV format.
It allows programmers to say, ``write this data in the formatpreferred by Excel,'' or ``read data from this file which was generated byExcel,'' without knowing the precise details of the CSV format used byExcel.
Programmers can also describe the CSV formats understood by otherapplications or define their own special-purpose CSV formats.The csv module's reader and writer objects read andwrite sequences.
Programmers can also read and write data in dictionaryform using the DictReader and DictWriter classes.
Note:This version of the csv module doesn't support Unicodeinput.
Also, there are currently some issues regarding ASCII NULcharacters.
Accordingly, all input should generally be printableASCII to be safe.
These restrictions will be removed in the future.
The Python Enhancement Proposal which proposed this additionto Python. Subsections
6.18 curses. ascii -- Utilities for ASCII characters
6. Generic Operating System
6.18 curses. ascii --Utilities for ASCII characters
New in version 1.6.
The curses. ascii module supplies name constants forASCII characters and functions to test membership in variousASCII character classes.
The constants supplied are names forcontrol characters as follows:
NUL
Start of heading, console interrupt
Start of text
End of text
End of transmission
Enquiry, goes with ACK flow control
Acknowledgement
Bell
Backspace
Tab
Alias for TAB: ``Horizontal tab''
Line feed
Alias for LF: ``New line''
Vertical tab
Form feed
Carriage return
Shift-out, begin alternate character set
Shift-in, resume default character set
Data-link escape
XON, for flow control
Device control 2, block-mode flow control
XOFF, for flow control
Device control 4
Negative acknowledgement
Synchronous idle
End transmission block
Cancel
End of medium
Substitute
Escape
File separator
Group separator
Record separator, block-mode terminator
Unit separator
Space
Delete
Note that many of these have little practical significance in modernusage.
The mnemonics derive from teleprinter conventions that predatedigital computers.The module supplies the following functions, patterned on those in thestandard C library:
Checks for an ASCII alphanumeric character; it is equivalent to"isalpha(c) or isdigit(c)".
Checks for an ASCII alphabetic character; it is equivalent to"isupper(c) or islower(c)".
Checks for a character value that fits in the 7-bit ASCII set.
Checks for an ASCII whitespace character.
Checks for an ASCII control character (in the range 0x00 to 0x1f).
Checks for an ASCII decimal digit, "0" through"9".
c in string. digits".
Checks for ASCII any printable character except space.
Checks for an ASCII lower-case character.
Checks for any ASCII printable character including space.
Checks for any printable ASCII character which is not a space or analphanumeric character.
Checks for ASCII white-space characters; space, line feed,carriage return, form feed, horizontal tab, vertical tab.
Checks for an ASCII uppercase letter.
Checks for an ASCII hexadecimal digit.
c in string.hexdigits".
Checks for an ASCII control character (ordinal values 0 to 31).
Checks for a non-ASCII character (ordinal values 0x80 and above).
These functions accept either integers or strings; when the argumentis a string, it is first converted using the built-in functionord().Note that all these functions check ordinal bit values derived from the first character of the string you pass in; they do not actually knowanything about the host machine's character encoding.
For functions that know about the character encoding (and handleinternationalization properly) see the
module.The following two functions take either a single-character string orinteger byte value; they return a value of the same type.
Return the ASCII value corresponding to the low 7 bits of c.
Return the control character corresponding to the given character(the character bit value is bitwise-anded with 0x1f).
Return the 8-bit character corresponding to the given ASCII character(the character bit value is bitwise-ored with 0x80).
The following function takes either a single-character string orinteger value; it returns a string.
Return a string representation of the ASCII character c.
Ifc is printable, this string is the character itself.
If thecharacter is a control character (0x00-0x1f) the string consists of acaret ("^") followed by the corresponding uppercase letter.If the character is an ASCII delete (0x7f) the string is'^?'.
If the character has its meta bit (0x80) set, the metabit is stripped, the preceding rules applied, and"!" prepended to the result.
A 33-element string array that contains the ASCII mnemonics for thethirty-two ASCII control characters from 0 (NUL) to 0x1f (US), inorder, plus the mnemonic "SP" for the space character.
Changed in version 1.6:Added support for the ncurses library andconverted to a package.
The curses module provides an interface to the curseslibrary, the de-facto standard for portable advanced terminalhandling.While curses is most widely used in the Unix environment, versionsare available for DOS, OS/2, and possibly other systems as well.
Thisextension module is designed to match the API of ncurses, anopen-source curses library hosted on Linux and the BSD variants ofUnix.
Utilities for working with ASCIIcharacters, regardless of your localesettings.
A panel stack extension that adds depth to curses windows.
Editable text widget for curses supporting Emacs-like bindings.
Convenience function to ensure properterminal setup and resetting onapplication entry and exit.
Tutorial material on using curseswith Python, by Andrew Kuchling and Eric Raymond, isavailable on the Python Web site.
The Demo/curses/ directory in the Python sourcedistribution contains some example programs using thecurses bindings provided by this module. Subsections
6.19 curses. panel -- A panel stack extension for curses.
6.19.1 Functions 6.19 curses.
Panels are windows with the added feature of depth, so they can bestacked on top of each other, and only the visible portions ofeach window will be displayed.
Panels can be added, moved upor down in the stack, and removed. Subsections
6.16 curses. textpad -- Text input widget for curses programs
6.16 curses. textpad --Text input widget for curses programs
The curses. textpad module provides a Textbox classthat handles elementary text editing in a curses window, supporting aset of keybindings resembling those of Emacs (thus, also of NetscapeNavigator, BBedit 6.x, FrameMaker, and many other programs).
Themodule also provides a rectangle-drawing function useful for framingtext boxes or for other purposes.The module curses.
textpad defines the following function:
Draw a rectangle.
The first argument must be a window object; theremaining arguments are coordinates relative to that window.
Thesecond and third arguments are the y and x coordinates of the upperleft hand corner of the rectangle to be drawn; the fourth and fiftharguments are the y and x coordinates of the lower right hand corner.The rectangle will be drawn using VT100/IBM PC forms characters onterminals that make this possible (including xterm and most othersoftware terminal emulators).
Otherwise it will be drawn with ASCII dashes, vertical bars, and plus signs. Subsections
6.17 curses. wrapper -- Terminal handler for curses programs
6.17 curses. wrapper --Terminal handler for curses programs
This module supplies one function, wrapper(), which runsanother function which should be the rest of your curses-usingapplication.
If the application raises an exception,wrapper() will restore the terminal to a sane state beforere-raising the exception and generating a traceback.
Before calling the hook function, wrapper() turns on cbreakmode, turns off echo, enables the terminal keypad, and initializescolors if the terminal has color support.
On exit (whether normallyor by exception) it restores cooked mode, turns on echo, and disablesthe terminal keypad.
The datetime module supplies classes for manipulating datesand times in both simple and complex ways.
Whether a naive datetime object representsCoordinated Universal Time (UTC), local time, or time in some othertimezone is purely up to the program, just like it's up to the programwhether a particular number represents meters, miles, or mass.
These tzinfo objectscapture information about the offset from UTC time, the time zonename, and whether Daylight Saving Time is in effect.
Note that noconcrete tzinfo classes are supplied by the datetimemodule.
Supporting timezones at whatever level of detail is requiredis up to the application.
The rules for time adjustment across theworld are more political than rational, and there is no standardsuitable for every application.The datetime module exports the following constants:
The smallest year number allowed in a date ordatetime object.
MINYEARis 1.
The largest year number allowed in a date or datetimeobject.
MAXYEAR is 9999.
General calendar related functions.
Time access and conversions.
The dbhash module provides a function to open databases usingthe BSD db library.
This module mirrors the interface of theother Python database modules that provide access to DBM-styledatabases.
The
module is required to use dbhash.This module provides an exception and a function:
Exception raised on database errors other thanKeyError.
It is a synonym for bsddb.error.
Open a db database and return the database object.
See Also:
Generic interface to dbm-style databases.
Lower-level interface to the BSD db library.
Utility module used to determine the type of anexisting database.
The dbm module provides an interface to the Unix(n)dbm library.
Raised on dbm-specific errors, such as I/O errors.KeyError is raised for general mapping errors likespecifying an incorrect key.
Name of the ndbm implementation library used.
Open a dbm database and return a dbm object.
Open existing database for reading only (default)
'w'
Open existing database for reading and writing
Open database for reading and writing, creating it ifit doesn't exist
'n'
It defaults to octal0666.
Generic interface to dbm-style databases. Module
Similar interface to the GNU GDBM library. Module
Utility module used to determine the type of anexisting database.
The decimal module provides support for decimal floating pointarithmetic.
It offers several advantages over the float() datatype:
Decimal numbers can be represented exactly.
In contrast, numbers like1.1 do not have an exact representation in binary floating point.End users typically would not expect 1.1 to display as1.1000000000000001 as it does with binary floating point.
The exactness carries over into arithmetic.
In decimal floating point,"0.1 + 0.1 + 0.1 - 0.3" is exactly equal to zero.
In binary floatingpoint, result is 5.5511151231257827e-017.
The decimal module incorporates notion of significant places so that"1.30 + 1.20" is 2.50.
The trailing zero is kept to indicatesignificance.
This is the customary presentation for monetary applications.
Formultiplication, the ``schoolbook'' approach uses all the figures in themultiplicands.
For instance, "1.3 * 1.2" gives 1.56 while"1.30 * 1.20" gives 1.5600.
Unlike hardware based binary floating point, the decimal module has a usersettable precision (defaulting to 28 places) which can be as large as needed fora given problem:
Both binary and decimal floating point are implemented in terms of publishedstandards.
While the built-in float type exposes only a modest portion of itscapabilities, the decimal module exposes all required parts of the standard.When needed, the programmer has full control over rounding and signal handling.
The module design is centered around three concepts: the decimal number, thecontext for arithmetic, and signals.A decimal number is immutable.
It has a sign, coefficient digits, and anexponent.
To preserve significance, the coefficient digits do not truncatetrailing zeroes.
Decimals also include special values such asInfinity, -Infinity, and NaN.
Rounding options include ROUND_CEILING,ROUND_DOWN, ROUND_FLOOR, ROUND_HALF_DOWN,ROUND_HALF_EVEN, ROUND_HALF_UP, and ROUND_UP.Signals are groups of exceptional conditions arising during the course ofcomputation.
Depending on the needs of the application, signals may beignored, considered as informational, or treated as exceptions.
The signals inthe decimal module are: Clamped, InvalidOperation,DivisionByZero, Inexact, Rounded,Subnormal, Overflow, and Underflow.For each signal there is a flag and a trap enabler.
When a signal isencountered, its flag incremented from zero and, then, if the trap enableris set to one, an exception is raised.
Flags are sticky, so the userneeds to reset them before monitoring a calculation.
IBM's General Decimal Arithmetic Specification,
IEEE standard 854-1987,
Unofficial IEEE 854 Text
. Subsections
This is a flexible class for comparing pairs of sequences of anytype, so long as the sequence elements are hashable.
The basicalgorithm predates, and is a little fancier than, an algorithmpublished in the late 1980's by Ratcliff and Obershelp under thehyperbolic name ``gestalt pattern matching.'' The idea is to findthe longest contiguous matching subsequence that contains no``junk'' elements (the Ratcliff and Obershelp algorithm doesn'taddress junk).
The same idea is then applied recursively to thepieces of the sequences to the left and to the right of the matchingsubsequence.
This does not yield minimal edit sequences, but doestend to yield matches that ``look right'' to people.
Timing: The basic Ratcliff-Obershelp algorithm is cubictime in the worst case and quadratic time in the expected case.SequenceMatcher is quadratic time for the worst case and hasexpected-case behavior dependent in a complicated way on how manyelements the sequences have in common; best case time is linear.
This is a class for comparing sequences of lines of text, andproducing human-readable differences or deltas.
Code
line unique to sequence 1
line unique to sequence 2
line common to both sequences
line not present in either input sequence
Lines beginning with `?' attempt to guide the eye tointraline differences, and were not present in either inputsequence.
These lines can be confusing if the sequences contain tabcharacters.
This class can be used to create an HTML table (or a complete HTML filecontaining the table) showing a side by side, line by line comparisonof text with inter-line and intra-line change highlights.
The table canbe generated in either full or contextual difference mode.The constructor for this class is:
Initializes instance of HtmlDiff.
tabsize is an optional keyword argument to specify tab stop spacingand defaults to 8.
wrapcolumn is an optional keyword to specify column number wherelines are broken and wrapped, defaults to None where lines are notwrapped.
linejunk and charjunk are optional keyword arguments passedinto ndiff() (used by HtmlDiff to generate theside by side HTML differences).
See ndiff() documentation forargument default values and descriptions.
The following methods are public:
Compares fromlines and tolines (lists of strings) and returnsa string which is a complete HTML file containing a table showing line byline differences with inter-line and intra-line changes highlighted.
fromdesc and todesc are optional keyword arguments to specifyfrom/to file column header strings (both default to an empty string).
context and numlines are both optional keyword arguments.Set context to True when contextual differences are to beshown, else the default is False to show the full files.
When context is False numlinescontrols the number of lines which are shown before a differencehighlight when using the "next" hyperlinks (setting to zero would causethe "next" hyperlinks to place the next difference highlight at the top ofthe browser without any leading context).
Compares fromlines and tolines (lists of strings) and returnsa string which is a complete HTML table showing line by line differenceswith inter-line and intra-line changes highlighted.The arguments for this method are the same as those for themake_file() method.
Tools/scripts/diff.py is a command-line front-end to this classand contains a good example of its use.
Compare a and b (lists of strings); return adelta (a generator generating the delta lines) in context diffformat.Context diffs are a compact way of showing just the lines that havechanged plus a few lines of context.
The changes are shown in abefore/after style.
This is helpful so that inputs createdfrom file.readlines() result in diffs that are suitable for usewith file.writelines() since both the inputs and outputs havetrailing newlines.For inputs that do not have trailing newlines, set the linetermargument to "" so that the output will be uniformly newline free.The context diff format normally has a header for filenames andmodification times.
Any or all of these may be specified using strings forfromfile, tofile, fromfiledate, and tofiledate.The modification times are normally expressed in the format returned bytime.ctime().
If not specified, the strings default to blanks.
Tools/scripts/diff.py is a command-line front-end for thisfunction.
)
Possibilities that don't score at least thatsimilar to word are ignored.The best (no more than n) matches among the possibilities arereturned in a list, sorted by similarity score, most similar first.
Compare a and b (lists of strings); return aDiffer-style delta (a generator generating the delta lines).Optional keyword parameters linejunk and charjunk arefor filter functions (or None):
linejunk: A function that accepts a single stringargument, and returns true if the string is junk, or false if not.The default is (None), starting with Python 2.3.
charjunk: A function that accepts a character (a string oflength 1), and returns if the character is junk, or false if not.The default is module-level function IS_CHARACTER_JUNK(),which filters out whitespace characters (a blank or tab; note: badidea to include newline in this!).
Tools/scripts/ndiff. py is a command-line front-end to thisfunction.
sequence, which)
Return one of the two sequences that generated a delta.Given a sequence produced by Differ.compare() orndiff(), extract lines originating from file 1 or 2(parameter which), stripping off line prefixes.Example:
diff = ndiff('one\ntwo\nthree\n'.splitlines(1),... 'ore\ntree\nemu\n'.splitlines(1)) diff = list(diff) # materialize the generated delta into a list print ''.join(restore(diff, 1)),onetwothree print ''.join(restore(diff, 2)),oretreeemu
Compare a and b (lists of strings); return adelta (a generator generating the delta lines) in unified diffformat.Unified diffs are a compact way of showing just the lines that havechanged plus a few lines of context.
The changes are shown in ainline style (instead of separate before/after blocks).
This is helpful sothat inputs created from file.readlines() result in diffsthat are suitable for use with file.writelines() since boththe inputs and outputs have trailing newlines.For inputs that do not have trailing newlines, set the linetermargument to "" so that the output will be uniformly newline free.The context diff format normally has a header for filenames andmodification times.
Tools/scripts/diff.py is a command-line front-end for thisfunction.
Return true for ignorable lines.
The line line is ignorableif line is blank or contains a single "#",otherwise it is not ignorable.
Used as a default for parameterlinejunk in ndiff() before Python 2.3.
Return true for ignorable characters.
The character ch isignorable if ch is a space or tab, otherwise it is notignorable.
Used as a default for parameter charjunk inndiff().
Pattern Matching: The Gestalt Approach
Discussion of asimilar algorithm by John W. Ratcliff and D. E. Metzener.This was published in
inJuly, 1988. Subsections
Return a directory listing of path, as gotten fromos. listdir().
Note that unless path changes, further callto listdir() will not re-read the directory structure.Note that the list returned should be regarded as read-only.
(Perhapsa future version should change it to return a tuple?)
Same as listdir().
Defined for backwards compatibility.
Assume list is a list of paths relative to head, and append,in place, a "/" to each path which points to a directory.
18.10.1 Python Byte Code
The dis module supports the analysis of Python byte code bydisassembling it.
Since there is no Python assembler, this moduledefines the Python assembly language.
The Python byte code whichthis module takes as an input is defined in the file Include/opcode.h and used by the compiler and the interpreter.Example: Given the function myfunc:
the following command can be used to get the disassembly ofmyfunc():
(The ``2'' is a line number).The dis module defines the following functions and constants:
)
Disassemble the bytesource object. bytesource can denoteeither a module, a class, a method, a function, or a code object.
For a module, it disassembles all functions.
For a class,it disassembles all methods.
For a single code sequence, it printsone line per byte code instruction.
If no object is provided, itdisassembles the last traceback.
Disassembles the top-of-stack function of a traceback, using the lasttraceback if none was passed.
The instruction causing the exceptionis indicated.
Disassembles a code object, indicating the last instruction if lastiwas provided.
The output is divided in the following columns:
the line number, for the first instruction of each line
the current instruction, indicated as "-",
the address of the instruction,
the operation code name,
operation parameters, and
interpretation of the parameters in parentheses.
The parameter interpretation recognizes local and globalvariable names, constant values, branch targets, and compareoperators.
A synonym for disassemble.
It is more convenient to type, and keptfor compatibility with earlier Python releases.
Sequence of operation names, indexable using the byte code.
Sequence of all compare operation names.
Sequence of byte codes that have a constant parameter.
Sequence of byte codes that access a free variable.
Sequence of byte codes that access an attribute by name.
Sequence of byte codes that have a relative jump target.
Sequence of byte codes that have an absolute jump target.
Sequence of byte codes that access a local variable.
Sequence of byte codes of Boolean operations.
Subsections 18.10.1 Python Byte Code Instructions
This module provides a few functions for creating archive files, such as tarballs or zipfiles.
)
Create an archive file (eg. zip or tar). base_name is the name of the file to create, minus any format-specific extension; format is the archive format: one of zip, tar, ztar, or gztar.
Returns the name of the archive file.
Warning:This should be changed to support bz2 files
'Create an (optional compressed) archive as a tar file from all files in and under base_dir. compress must be 'gzip' (the default), 'compress', 'bzip2', or None.
Both 'tar'and the compression utility named by 'compress' must be on the default program search path, so this is probably Unix-specific.
The output tar file will be named
base_dir.tar, possibly plusthe appropriate compression extension (.gz, .bz2 or.Z).
Return the output filename.
Warning:This should be replaced with calls to the tarfile module.
Create a zip file from all files in and under base_dir.
The outputzip file will be named base_dir + .zip.
Uses either the zipfile Python module (if available) or the InfoZIP zip utility (if installed and found on the default search path).
If neither tool is available, raises DistutilsExecError.
Returns the name of the output zip file.
This module provides BorlandCCompiler, an subclass of the abstract CCompiler class for the Borland C++ compiler.
This module provides the abstract base class for the CCompiler classes.
A CCompiler instance can be used for all the compile and link steps needed to build a single project.
Methods are provided to set options for the compiler -- macro definitions, include directories, link path, libraries and the like.This module provides the following functions.
Generate linker options for searching library directories andlinking with specific libraries. libraries and library_dirs are,respectively, lists of library names (not filenames!) and searchdirectories.
Returns a list of command-line options suitable for usewith some compiler (depending on the two format strings passed in).
Returns a listof command-line options suitable for either Unix compilers or VisualC++.
Determine the default compiler to use for the given platform.
osname should be one of the standard Python OS names (i.e. theones returned by os. name) and platform the common valuereturned by sys.
platform for the platform in question.The default values are os. name and sys.
Factory function to generate an instance of some CCompiler subclassfor the supplied platform/compiler combination. plat defaultsto os.
name (eg. 'posix', 'nt'), and compiler defaults to the default compiler for that platform.
Currently only'posix' and 'nt' are supported, and the defaultcompilers are ``traditional Unix interface'' (UnixCCompilerclass) and Visual C++(MSVCCompiler class).
Note that it'sperfectly possible to ask for a Unix compiler object under Windows,and a Microsoft compiler object under Unix--if you supply a valuefor compiler, plat is ignored.
Print list of available compilers (used by the--help-compiler options to build,build_ext, build_clib).
classCCompiler
The abstract base class CCompiler defines the interface that must be implemented by real compiler classes.
The class also has some utility methods used by several compiler classes.The basic idea behind a compiler abstraction class is that eachinstance can be used for all the compile/link steps in building asingle project.
Thus, attributes common to all of those compile andlink steps -- include directories, macros to define, libraries to linkagainst, etc.
Flags are verbose (show verbose output), dry_run(don't actually execute the steps) and force (rebuildeverything, regardless of dependencies).
All of these flags default to0 (off).
Note that you probably don't want to instantiateCCompiler or one of it's subclasses directly - use thedistutils.CCompiler.new_compiler() factory functioninstead.The following methods allow you to manually alter compiler options for the instance of the Compiler class.
Add dir to the list of directories that will be searched forheader files.
The compiler is instructed to search directories inthe order in which they are supplied by successive calls toadd_include_dir().
Set the list of directories that will be searched to dirs (alist of strings).
Overrides any preceding calls toadd_include_dir(); subsequent calls toadd_include_dir() add to the list passed toset_include_dirs().
This does not affect any list ofstandard include directories that the compiler may search by default.
Add libname to the list of libraries that will be included inall links driven by this compiler object.
Note that libnameshould *not* be the name of a file containing a library, but thename of the library itself: the actual filename will be inferred bythe linker, the compiler, or the compiler class (depending on theplatform).The linker will be instructed to link against libraries in theorder they were supplied to add_library() and/orset_libraries().
It is perfectly valid to duplicate librarynames; the linker will be instructed to link against libraries asmany times as they are mentioned.
Set the list of libraries to be included in all links driven bythis compiler object to libnames (a list of strings).
This doesnot affect any standard system libraries that the linker mayinclude by default.
Add dir to the list of directories that will be searched forlibraries specified to add_library() andset_libraries().
The linker will be instructed to search forlibraries in the order they are supplied to add_library_dir()and/or set_library_dirs().
Set the list of library search directories to dirs (a list ofstrings).
This does not affect any standard library search paththat the linker may search by default.
Add dir to the list of directories that will be searched forshared libraries at runtime.
Set the list of directories to search for shared libraries atruntime to dirs (a list of strings).
This does not affect anystandard search path that the runtime linker may search bydefault.
Define a preprocessor macro for all compilations driven by thiscompiler object.
Undefine a preprocessor macro for all compilations driven bythis compiler object.
If the same macro is defined bydefine_macro() and undefined by undefine_macro() the last call takes precedence (including multiple redefinitions orundefinitions).
If the macro is redefined/undefined on aper-compilation basis (ie. in the call to compile()), then thattakes precedence.
Add object to the list of object files (or analogues, such asexplicitly named library files or the output of ``resourcecompilers'') to be included in every link driven by this compilerobject.
Set the list of object files (or analogues) to be included inevery link to objects.
This does not affect any standard objectfiles that the linker may include by default (such as systemlibraries).
The following methods implement methods for autodetection of compiler options, providing some functionality similar to GNU autoconf.
Detect the language of a given file, or list of files.
Uses the instance attributes language_map (a dictionary), and language_order (a list) to do the job.
Search the specified list of directories for a static or sharedlibrary file lib and return the full path to that file.
Ifdebug is true, look for a debugging version (if that makes sense onthe current platform).
Return None if lib wasn't found in any ofthe specified directories.
Return a boolean indicating whether funcname is supported onthe current platform.
The optional arguments can be used toaugment the compilation environment by providing additional includefiles and paths and libraries and paths.
Return the compiler option to add dir to the list ofdirectories searched for libraries.
Return the compiler option to add dir to the list of librarieslinked into the shared library or executable.
Return the compiler option to add dir to the list ofdirectories searched for runtime libraries.
Define the executables (and options for them) that will be runto perform the various stages of compilation.
The exact set ofexecutables that may be specified here depends on the compilerclass (via the 'executables' class attribute), but most will have:
the C/C++ compiler
linker used to create shared objects and libraries
linker used to create binary executables
static library creator
On platforms with a command-line (Unix, DOS/Windows), each of theseis a string that will be split into executable name and (optional)list of arguments.
(Splitting the string is done similarly to howUnix shells operate: words are delimited by spaces, but quotes andbackslashes can override this.
Seedistutils.util.split_quoted().)
The following methods invoke stages in the build process.
Compile one or more source files.
Generates object files (e.g. transforms a .c file to a .o file.)
sources must be a list of filenames, most likely C/C++files, but in reality anything that can be handled by aparticular compiler and compiler class (eg.
MSVCCompiler canhandle resource files in sources).
Return a list of objectfilenames, one per source filename in sources.
macros, if given, must be a list of macro definitions.
A macrodefinition is either a (name, value) 2-tuple or a (name,) 1-tuple.The former defines a macro; if the value is None, the macro isdefined without an explicit value.
The 1-tuple case undefines amacro.
Later definitions/redefinitions/undefinitions takeprecedence.
debug is a boolean; if true, the compiler will be instructed tooutput debug symbols in (or alongside) the object file(s).
extra_preargs and extra_postargs are implementation- dependent.On platforms that have the notion of a command-line (e.g.
Unix,DOS/Windows), they are most likely lists of strings: extracommand-line arguments to prepand/append to the compiler commandline.
On other platforms, consult the implementation classdocumentation.
In any event, they are intended as an escape hatchfor those occasions when the abstract compiler framework doesn'tcut the mustard.
depends, if given, is a list of filenames that all targetsdepend on.
If a source file is older than any file independs, then the source file will be recompiled.
Thissupports dependency tracking, but only at a coarsegranularity.Raises CompileError on failure.
]
)
output_libname should be a library name, not a filename; thefilename will be inferred from the library name. output_dir isthe directory where the library file will be put.
XXX defaults to what?
debug is a boolean; if true, debugging information will beincluded in the library (note that on most platforms, it is thecompile step where this matters: the debug flag is included herejust for consistency).
target_lang is the target language for which the given objectsare being compiled.
This allows specific linkage time treatment ofcertain languages.Raises LibError on failure.
Ifoutput_dir is supplied, output_filename is relative to it(i.e. output_filename can provide directory components ifneeded).
libraries is a list of libraries to link against.
However, they can include adirectory component, which means the linker will look in thatspecific directory rather than searching all the normal locations.
library_dirs, if supplied, should be a list of directories tosearch for libraries that were specified as bare library names(ie. no directory component).
export_symbols is a list of symbols that the shared library willexport.
(This appears to be relevant only on Windows.)
debug is as for compile() and create_static_lib(), with the slight distinction that it actually matters on most platforms (asopposed to create_static_lib(), which includes a debug flagmostly for form's sake).
extra_preargs and extra_postargs are as for compile() (except of course that they supply command-line arguments for theparticular linker being used).
target_lang is the target language for which the given objectsare being compiled.
This allows specific linkage time treatment ofcertain languages.Raises LinkError on failure.
]
)
Link an executable. output_progname is the name of the file executable,while objects are a list of object filenames to link in.
Other arguments are as for the link method.
)
Link a shared library. output_libname is the name of the output library, while objects is a list of object filenames to link in.
objects, output_filename
Link a shared object. output_filename is the name of the shared objectthat will be created, while objects is a list of object filenames to link in.
)
The following utility methods are defined by the CCompiler class,for use by the various concrete subclasses.
Returns the filename of the executable for the given basename.
Typically for non-Windows platforms this is the same as the basename, while Windows will get a .exe added.
Returns the filename for the given library name on the current platform.On Unix a library with lib_type of 'static' will typically be of the form liblibname.a, while a lib_type of 'dynamic' will be of the form liblibname.so.
Returns the name of the object files for the given source files. source_filenames should be a list of filenames.
shared_object_filename
Returns the name of a shared object file for the given file name basename.
Invokes distutils.util.execute()
This method invokes a Python function func with the given arguments args, after logging and taking into account the dry_run flag. XXX see also.
Invokes distutils.util.spawn().
This invokes an external process to run the given command. XXX see also.
Invokes distutils.dir_util.mkpath().
This creates a directory and any missing ancestor directories.
Invokes distutils.file_util.move_file().
Renames src to dst. XXX see also.
Write a message using distutils.log.debug(). XXX see also.
Write a warning message msg to standard error.
If the debug flag is set on this CCompiler instance, print msg to standard output, otherwise do nothing.
This module supplies the abstract base class Command.
classCommand
Abstract base class for defining command classes, the ``worker bees''of the Distutils.
A useful analogy for command classes is to think ofthem as subroutines with local variables called options.
Theoptions are declared in initialize_options() and defined(given their final values) in finalize_options(), both ofwhich must be defined by every command class.
The body of thesubroutine, where it does all its work based on the values of itsoptions, is the run() method, which must also be implementedby every command class.The class constructor takes a single argument dist, a Distribution instance.
10.29 distutils.command.bdist_dumb -- Build a ``dumb'' installer
10.30 distutils.command.bdist_rpm -- Build a binary distribution as a Redhat RPM and SRPM
10.31 distutils.command.bdist_wininst -- Build a Windows installer
10.33 distutils.command.build -- Build all files of a package
10.40 distutils.command.install -- Install a package
10.41 distutils.command.install_data -- Install data files from a package
10.42 distutils.command.install_headers -- Install C/C++ header files from a package
10.43 distutils.command.install_lib -- Install library files from a package
10.44 distutils.command.install_scripts -- Install script files from a package
10.45 distutils.command.register -- Register a module with the Python Package Index
The register command registers the package with the Python Package Index.
This is described in more detail in PEP 301.
The distutils.core module is the only module that needs to beinstalled to use the Distutils.
It provides the setup() (whichis called from the setup script).
Indirectly provides the distutils.dist.Distribution and distutils.cmd.Command class.
The basic do-everything function that does most everything you could everask for from a Distutils method.
See XXXXXThe setup function takes a large number of arguments.
Theseare laid out in the following table.
The name of the package
a string
The version number of the package
A single line describing the package
Longer description of the package
The name of the package author
The email address of the package author
The name of the current maintainer, if different from the author
a string maintainer_email
The email address of the current maintainer, if different from the author
A URL for the package (homepage)
A URL to download the package
A list of Python packages that distutils will manipulate
a list of strings
A list of Python modules that distutils will manipulate
A list of standalone script files to be built and installed
A list of Python extensions to be built
A list of instances of distutils.core.Extension
A list of Trove categories for the package
XXX link to better definition
the Distribution class to use
A subclass of distutils.core.Distribution script_name
argv[0]
Arguments to supply to the setup script
default options for the setup script
The license for the package
Descriptive meta-data.
See PEP 314
A mapping of command names to Command subclasses
a dictionary
Run a setup script in a somewhat controlled environment, and return the distutils.dist.Distribution instance that drives things.
This is useful if you need to find out the distribution meta-data (passed as keyword args from script to setup()), or the contents of the config files or command-line.
script_name is a file that will be run with execfile()
stop_after tells setup() when to stop processing; possible values:
value
description
Stop after the Distribution instance has been created and populated with the keyword arguments to setup()
Stop after config files have been parsed (and their datastored in the Distribution instance)
Stop after the command-line (sys.argv[1:] or script_args) have been parsed (and the data stored in the Distribution instance.)
Stop after all commands have been run (the same as if setup() had been called in the usual way).
This is the default value.
In addition, the distutils.core module exposed a number of classes that live elsewhere.
Extension from
distutils.extension
Command from
distutils.cmd
Distribution from
A short description of each of these follows, but see the relevantmodule for the full reference.
The Extension class describes a single C or C++extension module in asetup script.
It accepts the following keyword arguments in it'sconstructor
the full name of the extension, including any packages-- ie. not a filename or pathname, but Python dotted name
list of source filenames, relative to the distributionroot (where the setup script lives), in Unix form (slash-separated) forportability.
Source files may be C, C++, SWIG (.i), platform-specificresource files, or whatever else is recognized by the build_extcommand as source for a Python extension.
list of directories to search for C/C++ headerfiles (in Unix form for portability)
list of macros to define; each macro is definedusing a 2-tuple, where 'value' is either the string to define it to orNone to define it without a particular value (equivalent of#define FOO in source or -DFOO on Unix Ccompiler command line)
(string,string) tuple or (name,None)
list of macros to undefine explicitly
list of directories to search for C/C++ librariesat link time
list of library names (not filenames or paths) tolink against
list of directories to search for C/C++libraries at run time (for shared extensions, this is when the extensionis loaded)
list of extra files to link with (eg. objectfiles not implied by 'sources', static library that must be explicitlyspecified, binary resource files, etc.)
Forplatforms and compilers where a command line makes sense, this istypically a list of command-line arguments, but for other platforms itcould be anything.
any extra platform- and compiler-specificinformation to use when linking object files together to create theextension (or to create a new static Python interpreter). Similarinterpretation as for 'extra_compile_args'.
list of symbols to be exported from a sharedextension.
Not used on all platforms, and not generally necessary forPython extensions, which typically export exactly one symbol: init +extension_name.
list of files that the extension depends on
extension language (i.e. 'c', 'c++', 'objc').
Will be detected from the source extensions if not provided.
A Distribution describes how to build, install and package up aPython software package.
See the setup() function for a list of keyword arguments accepted by the Distribution constructor. setup() creates a Distributioninstance.
A Command class (or rather, an instance of one of it's subclasses)implement a single distutils command.
This module provides the CygwinCCompiler class, a subclass of UnixCCompiler thathandles the Cygwin port of the GNU C compiler to Windows.
It also containsthe Mingw32CCompiler class which handles the mingw32 port of GCC (same ascygwin in no-cygwin mode).
This module provides the DEBUG flag.
This module provides functions for performing simple, timestamp-based dependency of files and groups of files; also, functions based entirely on such timestamp dependency analysis.
Return true if source exists and is more recently modified thantarget, or if source exists and target doesn't.Return false if both exist and target is the same age or newer than source.Raise DistutilsFileError if source does not exist.
newer_pairwise
Walk two filename lists in parallel, testing if each source is newerthan its corresponding target.
Return a pair of lists (sources,targets) where source is newer than target, according to the semanticsof newer()
)
stat();if it is 'ignore', we silently drop any missing source files; if it is'newer', any missing source files make us assume that target isout-of-date (this is handy in ``dry-run'' mode: it'll make you pretend tocarry out commands that wouldn't work because inputs are missing, butthat doesn't matter because you're not actually going to run thecommands).
This module provides functions for operating on directories and treesof directories.
Create a directory and any missing ancestor directories.
If thedirectory already exists (or if name is the empty string, whichmeans the current directory, which of course exists), then donothing.
Raise DistutilsFileError if unable to create somedirectory along the way (eg. some sub-path exists, but is a filerather than a directory).
If verbose is true, print a one-linesummary of each mkdir to stdout.
Return the list of directoriesactually created.
Copy an entire directory tree src to a new location dst.
Bothsrc and dst must be directory names.
If src is not adirectory, raise DistutilsFileError.
If dst does not exist, it is created with mkpath().
The end result of the copy is that every file in src is copied to dst, and directories under src are recursively copied to dst.
Return the list of files that were copied or might have been copied,using their output name.
The return value is unaffected by updateor dry_run: it is simply the list of all files under src,with the names changed to be under dst.
preserve_mode and preserve_times are the same as forcopy_file in
;note that they only apply to regular files, not to directories.
Ifpreserve_symlinks is true, symlinks will be copied as symlinks(on platforms that support them!); otherwise (the default), thedestination of the symlink will be copied. update andverbose are the same as forcopy_file().
Recursively remove directory and all files and directories underneathit.
Any errors are ignored (apart from being reported to stdout if verbose is true). Some of this could be replaced with the shutil module?
This module provides the Distribution class, which representsthe module distribution being built/installed/distributed.
This module provides the EMXCCompiler class, a subclass of UnixCCompiler that handles the EMX port of the GNU C compiler to OS/2.
Provides exceptions used by the Distutils modules.
10.16 distutils.debug
10.15 distutils.extension -- The Extension class
This module provides the Extension class, used to describeC/C++ extension modules in setup scripts.
10.18 distutils.fancy_getopt -- Wrapper around the standard getopt module
This module provides the FileList class, used for poking aboutthe filesystem and building lists of files.
This module contains some utility functions for operating on individual files.
Copy file src to dst.
If dst is a directory, thensrc is copied there with the same name; otherwise, it must be afilename.
(If the file exists, it will be ruthlessly clobbered.)
Ifpreserve_mode is true (the default), the file's mode (type andpermission bits, or whatever is analogous on the current platform) iscopied.
If preserve_times is true (the default), the last-modifiedand last-access times are copied as well.
If update is true,src will only be copied if dst does not exist, or ifdst does exist but is older than src.
link allows you to make hard links (using os. link) orsymbolic links (using os.
symlink) instead of copying: set itto 'hard' or 'sym'; if it is None (the default),files are copied.
Don't set link on systems that don't supportit: copy_file() doesn't check if hard or symbolic linking isavailable.
It uses _copy_file_contents() to copy file contents.Return a tuple "(dest_name, copied)": dest_name is the actual name of the output file, and copied is true if the file was copied (or would have been copied, if dry_run true).
Move file src to dst.
If dst is a directory, the file willbe moved into it with the same name; otherwise, src is just renamedto dst.
Returns the new full name of the file.
Warning:Handles cross-device moves on Unix using copy_file().
What about other systems?
Create a file called filename and write contents (asequence of strings without line terminators) to it.
18.11 pickletools
The distutils package provides support for building andinstalling additional modules into a Python installation.
The newmodules may be either 100%-pure Python, or may be extension moduleswritten in C, or may be collections of Python packages which includemodules coded in both Python and C.This package is discussed in two separate documents which are includedin the Python documentation package.
To learn about distributing newmodules using the distutils facilities, read
Distributing Python Modules
; thisincludes documentation needed to extend distutils.
To learnabout installing Python modules, whether or not the author made use ofthe distutils package, read
Installing Python Modules
.
The manualfor developers and packagers of Python modules.
Thisdescribes how to prepare distutils-based packagesso that they may be easily installed into an existingPython installation.
An``administrators'' manual which includes information oninstalling modules into an existing Python installation.You do not need to be a Python programmer to read thismanual.
10.20 distutils.log -- Simple PEP 282-style logging
Warning:Should be replaced with standard logging module.
This module provides MSVCCompiler, an implementation of the abstract CCompiler class for Microsoft Visual Studio.
It should also work usingthe freely available compiler provided as part of the .Net SDK download. XXXdownload link.
10.8 distutils.mwerkscompiler -- Metrowerks CodeWarrior support
Contains MWerksCompiler, an implementation of the abstract CCompiler class for MetroWerks CodeWarrior on the Macintosh.
Needs work to support CW on Windows.
10.22 distutils.sysconfig -- System configuration information
The distutils.sysconfig module provides access to Python'slow-level configuration information.
The specific configurationvariables available depend heavily on the platform and configuration.The specific variables depend on the build process for the specificversion of Python being run; the variables are those found in theMakefile and configuration header that are installed withPython on Unix systems.
The configuration header is calledpyconfig.h for Python versions starting with 2.2, andconfig.h for earlier versions of Python.Some additional functions are provided which perform some usefulmanipulations for other parts of the distutils package.
The result of os.
The result of os.
Return the value of a single variable.
This is equivalent toget_config_vars().get(name).
Return a set of variable definitions.
If there are no arguments,this returns a dictionary mapping names of configuration variablesto values.
If arguments are provided, they should be strings, andthe return value will be a sequence giving the associated values.If a given name does not have a corresponding value, Nonewill be included for that variable.
get_config_h_filename
Return the full path name of the configuration header.
For Unix,this will be the header generated by the configure script;for other platforms the header will have been supplied directly bythe Python source distribution.
The file is a platform-specifictext file.
Return the full path name of the Makefile used to buildPython.
For Unix, this will be a file generated by theconfigure script; the meaning for other platforms willvary.
The file is a platform-specific text file, if it exists.This function is only useful on POSIX platforms.
Return the directory for either the general or platform-dependent Cinclude files.
If plat_specific is true, theplatform-dependent include directory is returned; if false oromitted, the platform-independent directory is returned.
Ifprefix is given, it is used as either the prefix instead ofPREFIX, or as the exec-prefix instead ofEXEC_PREFIX if plat_specific is true.
get_python_lib
Return the directory for either the general or platform-dependentlibrary installation.
If plat_specific is true, theplatform-dependent include directory is returned; if false oromitted, the platform-independent directory is returned.
Ifprefix is given, it is used as either the prefix instead ofPREFIX, or as the exec-prefix instead ofEXEC_PREFIX if plat_specific is true.
Ifstandard_lib is true, the directory for the standard libraryis returned rather than the directory for the installation ofthird-party extensions.
The following function is only intended for use within thedistutils package.
Do any platform-specific customization of adistutils.ccompiler.CCompiler instance.This function is only needed on Unix at this time, but should becalled consistently to support forward-compatibility.
It insertsthe information that varies across Unix flavors and is stored inPython's Makefile.
This information includes the selectedcompiler, compiler and linker options, and the extension used by thelinker for shared objects.
This function is even more special-purpose, and should only be usedfrom Python's own build procedures.
Inform the distutils.sysconfig module that it is being usedas part of the build process for Python.
This changes a lot ofrelative locations for files, allowing them to be located in thebuild area rather than in an installed Python.
10.24 distutils.version
10.23 distutils.text_file -- The TextFile class
This module provides the TextFile class, which gives an interface to text files that (optionally) takes care of stripping comments, ignoring blank lines, and joining lines with backslashes.
This class provides a file-like object that takes care of all the things you commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as # is your comment character), skip blank lines, join adjacent lines byescaping the newline (ie. backslash at end of line), stripleading and/or trailing whitespace.
Also provides unreadline() for implementing line-at-a-time lookahead.
TextFile instances are create with either filename, file,or both.
RuntimeError is raised if both are None.filename should be a string, and file a file object (orsomething that provides readline() and close() methods).
It is recommended that you supply at least filename, so that TextFile can include it in warning messages.
If file is not supplied, TextFile creates its own using the open() builtin.The options are all boolean, and affect the values returned byreadline()
option name
default
strip leading whitespace from each line before returning it
strip trailing whitespace (including line terminator!) fromeach line before returning it.
skip lines that are empty *after* stripping comments andwhitespace.
if a backslash is the last non-newline character on a lineafter stripping comments and whitespace, join the following lineto it to form one logical line; if N consecutive lines endwith a backslash, then N+1 physical lines will be joined toform one logical line.
strip leading whitespace from lines that are joined to theirpredecessor; only matters if "(join_lines and not lstrip_ws)"
Note that since rstrip_ws can strip the trailing newline, thesemantics of readline() must differ from those of the builtin fileobject's readline() method! In particular, readline() returns None for end-of-file: an empty string might just be a blank line (or an all-whitespace line), if rstrip_ws is true but skip_blanks is not.
Open a new file filename.
This overrides any file or filename constructor arguments.
Close the current file and forget everything we know about it (includingthe filename and the current line number).
Print (to stderr) a warning message tied to the current logicalline in the current file.
If the current logical line in thefile spans multiple physical lines, the warning refers to thewhole range, such as ""lines 3-5"".
If line is supplied, it overrides the current line number; it may be a list or tuple to indicate a range of physical lines, or an integer for a single physical line.
Read and return a single logical line from the current file (orfrom an internal buffer if lines have previously been ``unread''with unreadline()).
If the join_lines option is true, this may involve reading multiple physical lines concatenated into a single string.
Updates the current line number, so calling warn() after readline() emits a warning about the physical line(s) just read.
Returns None on end-of-file, since the empty string can occur if rstrip_ws is true but strip_blanks is not.
Read and return the list of all logical lines remaining in the current file.This updates the current line number to the last line of the file.
Push line (a string) onto an internal buffer that will bechecked by future readline() calls.
Handy for implementinga parser with line-at-a-time lookahead.
Note that lines that are ``unread''with unreadline are not subsequently re-cleansed (whitespace stripped, or whatever) when read with readline.
If multiplecalls are made to unreadline before a call to readline,the lines will be returned most in most recent first order.
This module provides the UnixCCompiler class, a subclass of CCompiler that handles the typical Unix-style command-line C compiler:
macros defined with -Dname
macros undefined with -Uname
libraries specified with -llib
library search directories specified with -Ldir
compile handled by cc (or similar) executable with-c option: compiles .c to .o
link static library handled by ar command (possiblywith ranlib)
link shared library handled by cc -shared
This module contains other assorted bits and pieces that don't fit into any other utility module.
Return a string that identifies the current platform.
This is usedmainly to distinguish platform-specific build directories andplatform-specific built distributions.
For non-POSIX platforms, currently just returns sys.
Return 'pathname' as a name that will work on the native filesystem,i.e. split it on '/' and put it back together again using the currentdirectory separator.
Needed because filenames in the setup script arealways supplied in Unix style, and have to be converted to the localconvention before we can actually use them in the filesystem.
RaisesValueError on non-Unix-ish systems if pathname either starts or ends with a slash.
Return pathname with new_root prepended.
Ensure that 'os.environ' has all the environment variables weguarantee that users can use in config files, command-line options,etc.
Currently this includes:
HOME - user's home directory (Unix only)
PLAT - description of the current platform, includinghardware and OS (see get_platform())
subst_vars
Perform shell/Perl-style variable substitution on s.
Everyoccurrence of $ followed by a name is considered a variable, andvariable is substituted by the value found in the local_varsdictionary, or in os.
environ if it's not in local_vars.os.environ is first checked/augmented to guarantee that it containscertain values: see check_environ().
Raise ValueError for any variables not found in either local_vars or os.
environ.Note that this is not a fully-fledged string interpolation function.
Avalid $variable can consist only of upper and lower case letters,numbers and an underscore.
No { } or
style quoting is available.
Generate a useful error message from an EnvironmentError (IOError or OSError) exception object.
Handles Python 1.5.1 and later styles, and does what it can to deal with exception objects that don't have a filename (which happens when the error is due to a two-file operation, such as rename() or link()).
Returns the error message as a string prefixed with prefix.
Split a string up according to Unix shell-like rules for quotes andbackslashes.
The backslash is stripped from any two-characterescape sequence, leaving only the escaped character.
The quotecharacters are stripped from any quoted string.
Returns a list ofwords.
Perform some action that affects the outside world (for instance,writing to the filesystem).
Such actions are special because theyare disabled by the dry_run flag.
This method takes care of all that bureaucracy for you; all you have to do is supply thefunction to call and an argument tuple for it (to embody the``external action'' being performed), and an optional message toprint.
Raises ValueError if val is anything else.
0 - don't optimize (generate .pyc)
1 - normal optimization (like "python -O")
2 - extra optimization (like "python -OO")
Normally, you should letbyte_compile() figure out to use direct compilation or not (seethe source for details).
The direct flag is used by the scriptgenerated in indirect mode; unless you know what you're doing, leaveit set to None.
The dl module defines an interface to thedlopen() function, which is the most common interface onUnix platforms for handling dynamically linked libraries.
It allowsthe program to call arbitrary functions in such a library.
Note:This module will not work unlesssizeof(int) == sizeof(long)
== sizeof(char *)If this is not the case, SystemError will be raised onimport.
The dl module defines the following function:
Open a shared object file, and return a handle.
Modesignifies late binding (RTLD_LAZY) or immediate binding(RTLD_NOW).
Default is RTLD_LAZY.
Note that somesystems do not support RTLD_NOW.Return value is a dlobject.
The dl module defines the following constants:
Useful as an argument to open().
Note that on systemswhich do not support immediate binding, this constant will not appearin the module.
For maximum portability, use hasattr() todetermine if the system supports immediate binding.
The dl module defines the following exception:
Exception raised when an error has occurred inside the dynamic loadingand linking routines.
Example:
This example was tried on a Debian GNU/Linux system, and is a goodexample of the fact that using this module is usually a bad alternative. Subsections
5.2 doctest --Test interactive Python examples The
module searches for pieces of text that look likeinteractive Python sessions, and then executes those sessions toverify that they work exactly as shown.
There are several common ways touse doctest:
To check that a module's docstrings are up-to-date by verifyingthat all interactive examples still work as documented.
To perform regression testing by verifying that interactiveexamples from a test file or a test object work as expected.
To write tutorial documentation for a package, liberallyillustrated with input-output examples.
Depending on whetherthe examples or the expository text are emphasized, this hasthe flavor of "literate testing" or "executable documentation".
Here's a complete but small example module:
"""This is the "example" module.The example module supplies one function, factorial().
If you run example.py directly from the command line,
works its magic:
There's no output! That's normal, and it means all the examplesworked.
Pass -v to the script, and
prints a detailed log of what it's trying, and prints a summary at theend:
And so on, eventually ending with:
The following sections provide fulldetails.
Note that there are many examples of doctests inthe standard Python test suite and libraries.
Especially useful examplescan be found in the standard test file Lib/test/test_doctest.py.
Subsections
5.2.3.3 What's the Execution Context?
Note:The dumbdbm module is intended as a last resort fallback forthe
module when no more robust module is available.The dumbdbm module is not written for speed and is not nearly asheavily used as the other database modules.
The dumbdbm module provides a persistent dictionary-like interfacewhich is written entirely in Python. Unlike other modules such as
and
, no external library is required.
Aswith other persistent mappings, the keys and values must always be strings.The module defines the following:
Raised on dumbdbm-specific errors, such as I/O errors.
KeyErroris raised for general mapping errors like specifying an incorrect key.
Open a dumbdbm database and return a dumbdbm object.
The filenameargument is the basename of the database file (without any specificextensions).
It defaults to octal0666 (and will be modified by the prevailing umask).Changed in version 2.2:The mode argument was ignored in earlierversions.
Generic interface to dbm-style databases.
Similar interface to the DBM/NDBM library.
Similar interface to the GNU GDBM library.
Persistence module which stores non-string data.
Utility module used to determine the type of anexisting database.
This module provides a duplicate interface to the
module. It is meant to be imported when the
moduleis not provided on a platform.Suggested usage is:
Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created.
This often occurs with blocking I/O.
module.
module is not provided on a platform.Suggested usage is:
This module provides a class Charset for representingcharacter sets and character set conversions in email messages, aswell as a character set registry and several convenience methods formanipulating this registry.
Instances of Charset are used inseveral other modules within the email package.
New in version 2.2.2.
classCharset
)
Map character sets to their email properties.This class provides information about the requirements imposed onemail for a specific character set.
It also provides convenienceroutines for converting between character sets, given the availabilityof the applicable codecs.
Certain character sets must beconverted outright, and are not allowed in email.Optional input_charset is as described below; it is alwayscoerced to lower case.
After being alias normalized it is also usedas a lookup into the registry of character sets to find out the headerencoding, body encoding, and output conversion codec to be used forthe character set.
For example, ifinput_charset is iso-8859-1, then headers and bodies willbe encoded using quoted-printable and no output conversion codec isnecessary.
If input_charset is euc-jp, then headers willbe encoded with base64, bodies will not be encoded, but output textwill be converted from the euc-jp character set to theiso-2022-jp character set.
Charset instances have the following data attributes:
The initial character set specified.
Common aliases are converted totheir official email names (e.g. latin_1 is converted toiso-8859-1).
Defaults to 7-bit us-ascii.
If the character set must be encoded before it can be used in anemail header, this attribute will be set to Charset.QP (forquoted-printable), Charset.BASE64 (for base64 encoding), orCharset.SHORTEST for the shortest of QP or BASE64 encoding.Otherwise, it will be None.
Same as header_encoding, but describes the encoding for themail message's body, which indeed may be different than the headerencoding.
Charset.SHORTEST is not allowed forbody_encoding.
Some character sets must be converted before they can be used inemail headers or bodies.
If the input_charset is one ofthem, this attribute will contain the name of the character setoutput will be converted to.
Otherwise, it will be None.
The name of the Python codec used to convert the input_charset toUnicode.
If no conversion codec is necessary, this attribute will beNone.
The name of the Python codec used to convert Unicode to theoutput_charset.
If no conversion codec is necessary, thisattribute will have the same value as the input_codec.
Charset instances also have the following methods:
Convert the string s from the input_codec to theoutput_codec.
Convert a possibly multibyte string to a safely splittable format.s is the string to split.Uses the input_codec to try and convert the string to Unicode,so it can be safely split on character boundaries (even for multibytecharacters).Returns the string as-is if it isn't known how to convert s toUnicode with the input_charset.Characters that could not be converted to Unicode will be replacedwith the Unicode replacement character "U+FFFD".
]
)
Convert a splittable string back into an encoded string. ustris a Unicode string to ``unsplit''.This method uses the proper codec to try and convert the string fromUnicode back into an encoded format.
If to_output is False, it usesinput_codec.
Return the output character set.This is the output_charset attribute if that is not None,otherwise it is input_charset.
encoded_header_len
Return the length of the encoded header string, properly calculatingfor quoted-printable or base64 encoding.
header_encode
)
Header-encode the string s.If convert is True, the string will be converted from theinput charset to the output charset automatically.
This is not usefulfor multibyte character sets, which have line length issues (multibytecharacters must be split on a character, not a byte boundary); use thehigher-level Header class to deal with these issues (see
email.Header
). convert defaults to False.The type of encoding (base64 or quoted-printable) will be based onthe header_encoding attribute.
)
The Charset class also provides a number of methods to supportstandard operations and built-in functions.
Returns input_charset as a string coerced to lower case.__repr__() is an alias for __str__().
This method allows you to compare two Charset instances for equality.
This method allows you to compare two Charset instances for inequality.
The email.Charset module also provides the followingfunctions for adding new entries to the global character set, alias,and codec registries:
Add character properties to the global registry.
The default isNone for no encoding.Optional output_charset is the character set that the outputshould be in.
Conversions will proceed from input charset, toUnicode, to the output charset when the methodCharset.convert() is called.
The default is to output in thesame character set as the input.Both input_charset and output_charset must have Unicodecodec entries in the module's character set-to-codec mapping; useadd_codec() to add codecs the module doesnot know about.
module's documentation formore information.The global character set registry is kept in the module globaldictionary CHARSETS.
Add a codec that map characters in the given character set to and fromUnicode.
charset is the canonical name of a character set.codecname is the name of a Python codec, as appropriate for thesecond argument to the unicode() built-in, or to theencode() method of a Unicode string.
12.2.8 Exception and Defect
These encoders are actually used by theMIMEAudio and MIMEImage class constructors to provide defaultencodings.
All encoder functions take exactly one argument, the messageobject to encode.
They usually extract the payload, encode it, and reset thepayload to this newly encoded value.
They should also set theContent-Transfer-Encoding: header as appropriate.Here are the encoding functions provided:
encode_quopri
12.2 .This is a good encoding to use when most of your payload is normalprintable data, but contains a few unprintable characters.
Encodes the payload into base64 form and sets theContent-Transfer-Encoding: header tobase64.
This is a good encoding to use when most of your payloadis unprintable data since it is a more compact form thanquoted-printable.
The drawback of base64 encoding is that itrenders the text non-human readable.
This doesn't actually modify the message's payload, but it does setthe Content-Transfer-Encoding: header to either 7bit or8bit as appropriate, based on the payload data.
This does nothing; it doesn't even set theContent-Transfer-Encoding: header.
Note that encoding withencode_quopri() also encodes all tabs and space characters inthe data.
The following exception classes are defined in theemail.Errors module:
exceptionMessageError
This is the base class for all exceptions that the emailpackage can raise.
It is derived from the standardException class and defines no additional methods.
exceptionMessageParseError
This is the base class for exceptions thrown by the Parserclass.
It is derived from MessageError.
exceptionHeaderParseError
Raised under some error conditions when parsing the RFC 2822 headers ofa message, this class is derived from MessageParseError.It can be raised from the Parser.parse() orParser.parsestr() methods.Situations where it can be raised include finding an envelopeheader after the first RFC 2822 header of the message, finding acontinuation line before the first RFC 2822 header is found, or findinga line in the headers which is neither a header or a continuationline.
Raised under some error conditions when parsing the RFC 2822 headers ofa message, this class is derived from MessageParseError.It can be raised from the Parser.parse() orParser.parsestr() methods.Situations where it can be raised include not being able to find thestarting or terminating boundary in a multipart/* messagewhen strict parsing is used.
Raised when a payload is added to a Message object usingadd_payload(), but the payload is already a scalar and themessage's Content-Type: main type is not eithermultipart or missing.
MultipartConversionErrormultiply inherits from MessageError and the built-inTypeError.Since Message.add_payload() is deprecated, this exception israrely raised in practice.
However the exception may also be raisedif the attach() method is called on an instance of a classderived from MIMENonMultipart (e.g. MIMEImage).
Here's the list of the defects that the FeedParser can find whileparsing messages.
Note that the defects are added to the message where theproblem was found, so for example, if a message nested inside amultipart/alternative had a malformed header, that nested messageobject would have a defect, but the containing messages would not.All defect classes are subclassed from email.Errors.MessageDefect, butthis class is not an exception!
New in version 2.4:All the defect classes were added.
NoBoundaryInMultipartDefect - A message claimed to be amultipart, but had no boundary parameter.
StartBoundaryNotFoundDefect - The start boundary claimed in theContent-Type: header was never found.
FirstHeaderLineIsContinuationDefect - The message had acontinuation line as its first header line.
MisplacedEnvelopeHeaderDefect - A ``Unix From'' header was foundin the middle of a header block.
MalformedHeaderDefect - A header was found that was missing acolon, or was otherwise malformed.
MultipartInvariantViolationDefect - A message claimed to be amultipart, but no subparts were found.
Note that when amessage has this defect, its is_multipart() method may returnfalse even though its content type claims to be multipart.
12.2.2.3 Additional notes
One of the most common tasks is to generate the flat text of the emailmessage represented by a message object structure.
You will need to dothis if you want to send your message via the
module or the
module, or print the message on theconsole.
Taking a message object structure and producing a flat textdocument is the job of the Generator class.Again, as with the
email.Parser
module, you aren't limitedto the functionality of the bundled generator; you could write onefrom scratch yourself.
classGenerator
From followed by a space at the beginning of theline.
This is the only guaranteed portable way to avoid having suchlines be mistaken for a Unix mailbox format envelope header separator (seeWHY THE CONTENT-LENGTH FORMAT IS BADfor details). mangle_from_ defaults to True, but youmight want to set this to False if you are not writing Unixmailbox format files.Optional maxheaderlen specifies the longest length for anon-continued header.
When a header line is longer thanmaxheaderlen (in characters, with tabs expanded to 8 spaces),the header will be split as defined in the email.Headerclass.
Set to zero to disable header wrapping.
The default is 78, asrecommended (but not required) by RFC 2822.
The other public Generator methods are:
Print the textual representation of the message object structure rooted atmsg to the output file specified when the Generatorinstance was created.
Subparts are visited depth-first and theresulting text will be properly MIME encoded.Optional unixfrom is a flag that forces the printing of theenvelope header delimiter before the first RFC 2822 header of theroot message object.
If the root object has no envelope header, astandard one is crafted.
By default, this is set to False toinhibit the printing of the envelope delimiter.Note that for subparts, no envelope header is ever printed.
Return an independent clone of this Generator instance withthe exact same options.
s)
Write the string s to the underlying file object,i.e. outfp passed to Generator's constructor.
Thisprovides just enough file-like API for Generator instances tobe used in extended print statements.
As a convenience, see the methods Message.as_string() andstr(aMessage), a.k.a. Message.__str__(), whichsimplify the generation of a formatted string representation of amessage object.
For more detail, see
.The email.Generator module also provides a derived class,called DecodedGenerator which is like the Generatorbase class, except that non-text parts are substituted witha format string representing the part.
classDecodedGenerator
This class, derived from Generator walks through all thesubparts of a message.
type - Full MIME type of the non-text part
maintype - Main MIME type of the non-text part
subtype - Sub-MIME type of the non-text part
filename - Filename of the non-text part
description - Description associated with thenon-text part
encoding - Content transfer encoding of thenon-text part
The default value for fmt is None, meaning
[Non-text (%(type)s) part of message omitted, filename %(filename)s]
12.2.3.1 Deprecated methods
12.2.4 Creating email and
RFC 2822 is the base standard that describes the format of emailmessages.
It derives from the older RFC 822 standard which cameinto widespread use at a time when most email was composed of ASCIIcharacters only.
For example:
from email.Message import Message from email.Header import Header msg = Message() h = Header('p\xf6stal', 'iso-8859-1') msg['Subject'] = h print msg.as_string()Subject: ptal
Notice here how we wanted the Subject: field to contain anon-ASCII character?
We did this by creating a Headerinstance and passing in the character set that the byte string wasencoded in.
When the subsequent Message instance wasflattened, the Subject: field was properly RFC 2047encoded.
MIME-aware mail readers would show this header using theembedded ISO-8859-1 character.
Here is the Header class description:
classHeader
)
Create a MIME-compliant header that can contain strings in differentcharacter sets.Optional s is the initial header value.
If None (thedefault), the initial header value is not set.
It alsosets the default character set for all subsequent append()calls that omit the charset argument.
If charset is notprovided in the constructor (the default), the us-asciicharacter set is used both as s's initial charset and as thedefault for subsequent append() calls.The maximum line length can be specified explicit viamaxlinelen.
For splitting the first line to a shorter value (toaccount for the field header which isn't included in s,e.g. Subject:) pass in the name of the field inheader_name.
Optional errors is passed straight through to theappend() method.
Append the string s to the MIME header.Optional charset, if given, should be a Charset instance(see
email.Charset
) or the name of a character set, whichwill be converted to a Charset instance.
A value ofNone (the default) means that the charset given in theconstructor is used.
s may be a byte string or a Unicode string.
If it is a bytestring (i.e. isinstance(s, str) is true), thencharset is the encoding of that byte string, and aUnicodeError will be raised if the string cannot bedecoded with that character set.If s is a Unicode string, then charset is a hintspecifying the character set of the characters in the string.
In thiscase, when producing an RFC 2822-compliant header using RFC 2047rules, the Unicode string will be encoded using the following charsetsin order: us-ascii, the charset hint, utf-8.
Thefirst character set to not provoke a UnicodeError is used.Optional errors is passed through to any unicode() orustr.encode() call, and defaults to ``strict''.
Encode a message header into an RFC-compliant format, possiblywrapping long lines and encapsulating non-ASCII parts in base64 orquoted-printable encodings.
Optional splitchars is a stringcontaining characters to split long ASCII lines on, in rough supportof RFC 2822's highest level syntactic breaks.
This doesn'taffect RFC 2047 encoded lines.
The Header class also provides a number of methods to supportstandard operators and built-in functions.
A synonym for Header.encode().
Useful forstr(aHeader).
A helper for the built-in unicode() function.
Returns theheader as a Unicode string.
This method allows you to compare two Header instances for equality.
This method allows you to compare two Header instances for inequality.
The email.Header module also provides the followingconvenient functions.
)
Create a Header instance from a sequence of pairs as returnedby decode_header().
decode_header() takes a header value string and returns asequence of pairs of the format (decoded_string, charset) wherecharset is the name of the character set.This function takes one of those sequence of pairs and returns aHeader instance.
Optional maxlinelen,header_name, and continuation_ws are as in theHeader constructor.
Iterating over a message object tree is fairly easy with theMessage.walk() method.
The email.Iterators moduleprovides some useful higher level iterations over message objecttrees.
This iterates over all the payloads in all the subparts of msg,returning the string payloads line-by-line.
It skips over all thesubpart headers, and it skips over any subpart with a payload thatisn't a Python string.
This is somewhat equivalent to reading theflat text representation of the message from a file usingreadline(), skipping over all the intervening headers.Optional decode is passed through to Message.get_payload().
typed_subpart_iterator
The following function has been added as a useful debugging tool. Itshould not be considered part of the supported public interfacefor the package.
Prints an indented representation of the content types of themessage object structure.
For example:
12.2.1.1 Deprecated methods
The central class in the email package is theMessage class; it is the base class for the emailobject model.
Message provides the core functionality forsetting and querying header fields, and for accessing message bodies.Conceptually, a Message object consists of headers andpayloads.
Headers are RFC 2822 style field names andvalues where the field name and value are separated by a colon.
Thecolon is not part of either the field name or the field value.Headers are stored and returned in case-preserving form but arematched case-insensitively.
There may also be a single envelopeheader, also known as the Unix-From header or theFrom_ header.
The payload is either a string in the case ofsimple message objects or a list of Message objects forMIME container documents (e.g. multipart/* andmessage/rfc822).
Message objects provide a mapping style interface foraccessing the message headers, and an explicit interface for accessingboth the headers and the payload.
It provides convenience methods forgenerating a flat text representation of the message object tree, foraccessing commonly used header parameters, and for recursively walkingover the object tree.Here are the methods of the Message class:
classMessage
The constructor takes no arguments.
Return the entire message flatten as a string.
For example, by default it mangles lines thatbegin with From .
For more flexibility, instantiate aGenerator instance and use itsflatten() method directly.
Equivalent to as_string(unixfrom=True).
Return True if the message's payload is a list ofsub-Message objects, otherwise return False.
Whenis_multipart() returns False, the payload should be a stringobject.
Set the message's envelope header to unixfrom, which should be a string.
get_unixfrom
Return the message's envelope header.
Defaults to None if theenvelope header was never set.
If you want to set the payload to a scalar object (e.g. astring), use set_payload() instead.
Return a reference the current payload, which will be a list ofMessage objects when is_multipart() is True, or astring when is_multipart() is False.
If thepayload is a list and you mutate the list object, you modify themessage's payload in place.With optional argument i, get_payload() will return thei-th element of the payload, counting from zero, ifis_multipart() is True.
An IndexErrorwill be raised if i is less than 0 or greater than or equal tothe number of items in the payload.
If some other encoding is used, orContent-Transfer-Encoding: header ismissing, or if the payload has bogus base64 data, the payload isreturned as-is (undecoded).
If the message is a multipart and thedecode flag is True, then None is returned.
Thedefault for decode is False.
Set the entire message object's payload to payload.
It is theclient's responsibility to ensure the payload invariants.
Optionalcharset sets the message's default character set; seeset_charset() for details.
Changed in version 2.2.2:charset argument added.
Set the character set of the payload to charset, which caneither be a Charset instance (see
), astring naming a character set,or None.
If it is a string, it will be converted to aCharset instance.
If charset is None, thecharset parameter will be removed from theContent-Type: header.
Anything else will generate aTypeError.The message will be assumed to be of type text/* encoded withcharset.input_charset.
It will be converted tocharset.output_charsetand encoded properly, if needed, when generating the plain textrepresentation of the message.
MIME headers(MIME-Version:, Content-Type:,Content-Transfer-Encoding:) will be added as needed.
Return the Charset instance associated with the message's payload.New in version 2.2.2.
The following methods implement a mapping-like interface for accessingthe message's RFC 2822 headers.
Note that there are somesemantic differences between these methods and a normal mapping(i.e. dictionary) interface.
For example, in a dictionary there areno duplicate keys, but here there may be duplicate message headers.
Also,in dictionaries there is no guaranteed order to the keys returned bykeys(), but in a Message object, headers are alwaysreturned in the order they appeared in the original message, or wereadded to the message later.
Return the total number of headers, including duplicates.
Used for the in operator,e.g.:
Return the value of the named header field. name should notinclude the colon field separator.
If the header is missing,None is returned; a KeyError is never raised.Note that if the named field appears more than once in the message'sheaders, exactly which of those field values will be returned isundefined.
Use the get_all() method to get the values of allthe extant named headers.
Add a header to the message with field name name and valueval.
The field is appended to the end of the message's existingfields.Note that this does not overwrite or delete any existing headerwith the same name.
If you want to ensure that the new header is theonly one present in the message with field namename, delete the field first, e.g.:
del msg['subject']msg['subject'] = 'Python roolz!'
Delete all occurrences of the field with name name from themessage's headers.
No exception is raised if the named field isn'tpresent in the headers.
Return true if the message contains a header field named name,otherwise return false.
Return a list of all the message's header field names.
Return a list of all the message's field values.
Return a list of 2-tuples containing all the message's field headersand values.
Return the value of the named header field.
This is identical to__getitem__() except that optional failobj is returnedif the named header is missing (defaults to None).
Here are some additional useful methods:
)
Return a list of all the values for the field named name.If there are no such named headers in the message, failobj isreturned (defaults to None).
Extended header setting.
This method is similar to__setitem__() except that additional header parameters can beprovided as keyword arguments.
Normally,the parameter will be added as key="value" unless the value isNone, in which case only the key will be added.Here's an example:
This will add a header that looks like
Replace a header.
Replace the first header found in the message thatmatches _name, retaining header order and field name case.
Ifno matching header was found, a KeyError is raised.
Return the message's content type.
The returned string is coerced tolower case of the form maintype/subtype.
If there was noContent-Type: header in the message the default type asgiven by get_default_type() will be returned.
Sinceaccording to RFC 2045, messages always have a default type,get_content_type() will always return a value.
RFC 2045 defines a message's default type to betext/plain unless it appears inside amultipart/digest container, in which case it would bemessage/rfc822.
If the Content-Type: headerhas an invalid type specification, RFC 2045 mandates that thedefault type be text/plain.
Return the message's main content type.
This is themaintype part of the string returned byget_content_type().
Return the message's sub-content type.
This is the subtypepart of the string returned by get_content_type().
Return the default content type.
Most messages have a default contenttype of text/plain, except for messages that are subpartsof multipart/digest containers. Such subparts have adefault content type of message/rfc822.
Set the default content type. ctype should either betext/plain or message/rfc822, although this isnot enforced.
The default content type is not stored in theContent-Type: header.
Return the message's Content-Type: parameters, as a list.
Theelements of the returned list are 2-tuples of key/value pairs, assplit on the "=" sign.
The left hand side of the"=" is the key, while the right hand side is the value.
Ifthere is no "=" sign in the parameter the value is the emptystring, otherwise the value is as described in get_param() and isunquoted if optional unquote is True (the default).Optional failobj is the object to return if there is noContent-Type: header.
Optional header is the header tosearch instead of Content-Type:.
Changed in version 2.2.2:unquote argument added.
Return the value of the Content-Type: header's parameterparam as a string.
The returnvalue can either be a string, or a 3-tuple if the parameter wasRFC 2231 encoded.
When it's a 3-tuple, the elements of the value are ofthe form (CHARSET, LANGUAGE, VALUE).
Note that both CHARSET andLANGUAGE can be None, in which case you should considerVALUE to be encoded in the us-ascii charset.
You canusually ignore LANGUAGE.If your application doesn't care whether the parameter was encoded as inRFC 2231, you can collapse the parameter value by callingemail.Utils.collapse_rfc2231_value(), passing in the return valuefrom get_param().
This will return a suitably decoded Unicode stringwhn the value is a tuple, or the original string unquoted if it isn't.
Forexample:
In any case, the parameter value (either the returned string, or theVALUE item in the 3-tuple) is always unquoted, unlessunquote is set to False.
Changed in version 2.2.2:unquote argument added, and 3-tuple return valuepossible.
Set a parameter in the Content-Type: header.
If theparameter already exists in the header, its value will be replacedwith value.
Optional language specifies the RFC2231 language, defaulting to the empty string.
Both charset andlanguage should be strings.
Remove the given parameter completely from theContent-Type: header.
The header will be re-written inplace without the parameter or its value.
All values will be quotedas necessary unless requote is False (the default isTrue).
Optional header specifies an alternative toContent-Type:.
)
Set the main type and subtype for the Content-Type:header. type must be a string in the formmaintype/subtype, otherwise a ValueError israised.This method replaces the Content-Type: header, keeping allthe parameters in place.
Return the value of the filename parameter of theContent-Disposition: header of the message, or failobj ifeither the header is missing, or has no filename parameter.The returned string will always be unquoted as perUtils.unquote().
get_boundary
)
Return the value of the boundary parameter of theContent-Type: header of the message, or failobj if eitherthe header is missing, or has no boundary parameter.
Thereturned string will always be unquoted as perUtils.unquote().
Set the boundary parameter of the Content-Type:header to boundary. set_boundary() will always quoteboundary if necessary.
Return the charset parameter of the Content-Type:header, coerced to lower case.
Return a list containing the character set names in the message.
However, if the subpart has noContent-Type: header, no charset parameter, or is not ofthe text main MIME type, then that item in the returned listwill be failobj.
The walk() method is an all-purpose generator which can beused to iterate over all the parts and subparts of a message objecttree, in depth-first traversal order.
Message objects can also optionally contain two instanceattributes, which can be used when generating the plain text of a MIMEmessage.
The format of a MIME document allows for some text between the blankline following the headers, and the first multipart boundary string.Normally, this text is never visible in a MIME-aware mail readerbecause it falls outside the standard MIME armor.
However, whenviewing the raw text of the message, or when viewing the message in anon-MIME aware reader, this text can become visible.The preamble attribute contains this leading extra-armor textfor MIME documents.
When the Parser discovers some text afterthe headers but before the first boundary string, it assigns this textto the message's preamble attribute.
See
The epilogue attribute acts the same way as the preambleattribute, except that it contains text that appears between the lastboundary and the end of the message.One note: when generating the flat text for a multipartmessage that has no epilogue (using the standardGenerator class), no newline is added after the closingboundary line.
If the message object has an epilogue and itsvalue does not start with a newline, a newline is printed after theclosing boundary.
This seems a little clumsy, but it makes the mostpractical sense.
The upshot is that if you want to ensure that anewline get printed after your closing multipart boundary,set the epilogue to the empty string.
Subsections 12.2.1.1 Deprecated methods
You canpass the parser a string or a file object, and the parser will returnto you the root Message instance of the object structure.
Forsimple, non-MIME messages the payload of this root object will likelybe a string containing the text of the message.
The classicParser API is fine if you have the entire text of the message inmemory as a string, or if the entire message lives in a file on the filesystem.
FeedParser is more appropriate for when you're reading themessage from a stream which might block waiting for more input (e.g. readingan email message from a socket).
The FeedParser can consume and parsethe message incrementally, and only returns the root object when you close theparser
12.1
.Note that the parser can be extended in limited ways, and of courseyou can implement your own parser completely from scratch.
There isno magical connection between the email package's bundledparser and the Message class, so your custom parser can createmessage object trees any way it finds necessary.
Footnotes
...parser 12.1
As of email package version 3.0, introduced inPython 2.4, the classic Parser was re-implemented in terms of theFeedParser, so the semantics and results are identical between the twoparsers. Subsections
12.2.2.2 Parser class API
There are several useful utilities provided in the email.Utilsmodule:
Return a new string with backslashes in str replaced by twobackslashes, and double quotes replaced by backslash-double quote.
Return a new string which is an unquoted version of str.If str ends and begins with double quotes, they are strippedoff.
Likewise if str ends and begins with angle brackets, theyare stripped off.
address)
Parse address - which should be the value of some address-containingfield such as To: or Cc: - into its constituentrealname and email address parts.
Returns a tuple of thatinformation, unless the parse fails, in which case a 2-tuple of('', '') is returned.
The inverse of parseaddr(), this takes a 2-tuple of the form(realname, email_address) and returns the string value suitablefor a To: or Cc: header.
If the first element ofpair is false, then the second element is returned unmodified.
This method returns a list of 2-tuples of the form returned byparseaddr(). fieldvalues is a sequence of header fieldvalues as might be returned by Message.get_all().
Here's asimple example that gets all the recipients of a message:
If it succeeds in parsingthe date, parsedate() returns a 9-tuple that can be passeddirectly to time. mktime(); otherwise None will bereturned.
Note that fields 6, 7, and 8 of the result tuple are notusable.
Performs the same function as parsedate(), but returnseither None or a 10-tuple; the first 9 elements make up a tuplethat can be passed directly to time.
mktime(), and the tenthis the offset of the date's timezone from UTC (which is the officialterm for Greenwich Mean Time)
If the inputstring has no timezone, the last element of the tuple returned isNone.
Note that fields 6, 7, and 8 of the result tuple are notusable.
Turn a 10-tuple as returned by parsedate_tz() into a UTCtimestamp.
It the timezone item in the tuple is None, assumelocal time.
Minor deficiency: mktime_tz() interprets thefirst 8 elements of tuple as a local time and then compensatesfor the timezone difference.
This may yield a slight error aroundchanges in daylight savings time, though not worth worrying about forcommon use.
Returns a date string as per RFC 2822, e.g.:
Fri, 09 Nov 2001 01:08:47 -0000
Optional timeval if given is a floating point time value asaccepted by time.
gmtime() and time.
This is needed for some protocols (suchas HTTP).
This only applies when localtime is False
Returns a string suitable for an RFC 2822-compliantMessage-ID: header.
Optional idstring if given, isa string used to strengthen the uniqueness of the message id.
Decode the string s according to RFC 2231.
Encode the string s according to RFC 2231.
Optionalcharset and language, if given is the character set nameand language name to use.
If neither is given, s is returnedas-is.
If charset is given but language is not, thestring is encoded using the empty string for language.
Optional errors is passed to the errorsargument of the built-in unicode() function; it defaults toreplace.
Optional fallback_charset specifies the character setto use if the one in the RFC 2231 header is not known by Python; it defaultsto us-ascii.For convenience, if the value passed tocollapse_rfc2231_value() is not a tuple, it should be a string andit is returned unquoted.
Decode parameters list according to RFC 2231. params is asequence of 2-tuples containing elements of the form(content-type, string-value).
Changed in version 2.4:The dump_address_pair() function has been removed;use formataddr() instead..
Changed in version 2.4:The decode() function has been removed; use theHeader.decode_header() method instead..
Changed in version 2.4:The encode() function has been removed; use theHeader.encode() method instead..
Footnotes ...
Time)
Note that the sign of the timezoneoffset is the opposite of the sign of the time.
timezonevariable for the same timezone; the latter variable follows thePOSIX standard while this module follows RFC 2822.
12.2.1 Representing an email
The email package is a library for managing email messages,including MIME and other RFC 2822-based message documents.
Itsubsumes most of the functionality in several older standard modulessuch as
, and other non-standard packages such asmimecntl.
It is specifically not designed to do anysending of email messages to SMTP (RFC 2821) servers; that is thefunction of the
module.
The emailpackage attempts to be as RFC-compliant as possible, supporting inaddition to RFC 2822, such MIME-related RFCs asRFC 2045, RFC 2046, RFC 2047, and RFC 2231.The primary distinguishing feature of the email package isthat it splits the parsing and generating of email messages from theinternal object model representation of email.
Applicationsusing the email package deal primarily with objects; you canadd sub-objects to messages, remove sub-objects from messages,completely re-arrange the contents, etc.
There is a separate parserand a separate generator which handles the transformation from flattext to the object model, and then back to flat text again.
Thereare also handy subclasses for some common MIME object types, and a fewmiscellaneous utilities that help with such common tasks as extractingand parsing message field values, creating RFC-compliant dates, etc.The following sections describe the functionality of theemail package.
From there, a similarprogression can be taken as above.Also included are detailed specifications of all the classes andmodules that the email package provides, the exceptionclasses you might encounter while using the email package,some auxiliary utilities, and a few examples.
For users of the oldermimelib package, or previous versions of the emailpackage, a section on differences and porting is provided.
SMTP protocol client.
Subsections 12.2.1 Representing an email message
This module implements RFC 3490 (Internationalized Domain Names inApplications) and RFC 3492 (Nameprep: A Stringprep Profile forInternationalized Domain Names (IDN)).
It builds upon thepunycode encoding and stringprep
.These RFCs together define a protocol to support non-ASCII charactersin domain names.
A domain name containing non-ASCII characters (suchas ``www.Alliancefranaise.nu'') is converted into anASCII-compatible encoding (ACE, such as``www.xn-alliancefranaise-npb.nu'').
The ACE form of the domain nameis then used in all places where arbitrary characters are not allowedby the protocol, such as DNS queries, HTTP Host: fields, and soon.
This conversion is carried out in the application; if possibleinvisible to the user: The application should transparently convertUnicode domain labels to IDNA on the wire, and convert back ACE labelsto Unicode before presenting them to the user.Python supports this conversion in several ways: The idna codecallows to convert between Unicode and the ACE. Furthermore, the
socket module transparently converts Unicode host names toACE, so that applications need not be concerned about converting hostnames themselves when they pass them to the socket module.
On top ofthat, modules that have host names as function parameters, such as httplib
When receiving host names from the wire (such as in reverse namelookup), no automatic conversion to Unicode is performed: Applicationswishing to present such host names to the user should decode them toUnicode.The module encodings.
idna also implements the nameprepprocedure, which performs certain normalizations on host names, toachieve case-insensitivity of international domain names, and to unifysimilar characters.
The nameprep functions can be used directly ifdesired.
Return the nameprepped version of label.
The implementationcurrently assumes query strings, so AllowUnassigned istrue.
Convert a label to ASCII, as specified in RFC 3490.UseSTD3ASCIIRules is assumed to be false.
Convert a label to Unicode, as specified in RFC 3490.
Dictionary providing a mapping from the errno value to the stringname in the underlying system.
For instance,errno.errorcode[errno.EPERM] maps to 'EPERM'.
To translate a numeric error code to an error message, useos.
strerror().Of the following list, symbols that are not used on the currentplatform are not defined by the module.
The specific list of definedsymbols is available as errno.errorcode.keys().
Symbolsavailable can include:
Operation not permitted
No such file or directory
No such process
Interrupted system call
I/O error
No such device or address
Arg list too long
Exec format error
Bad file number
No child processes
Try again
Out of memory
Permission denied
Bad address
Block device required
Device or resource busy
File exists
Cross-device link
No such device
Not a directory
Is a directory
Invalid argument
File table overflow
Too many open files
Not a typewriter
Text file busy
File too large
No space left on device
Illegal seek
Read-only file system
Too many links
Broken pipe
Math argument out of domain of func
Math result not representable
Resource deadlock would occur
File name too long
No record locks available
Function not implemented
Directory not empty
Too many symbolic links encountered
Operation would block
No message of desired type
Identifier removed
Channel number out of range
Level 2 not synchronized
Level 3 halted
Level 3 reset
Link number out of range
Protocol driver not attached
No CSI structure available
Level 2 halted
Invalid exchange
Invalid request descriptor
Exchange full
No anode
Invalid request code
Invalid slot
File locking deadlock error
Bad font file format
Device not a stream
No data available
Timer expired
Out of streams resources
Machine is not on the network
Package not installed
Object is remote
Link has been severed
Advertise error
Srmount error
Communication error on send
Protocol error
Multihop attempted
RFS specific error
Not a data message
Value too large for defined data type
Name not unique on network
File descriptor in bad state
Remote address changed
Can not access a needed shared library
Accessing a corrupted shared library
.lib section in a.out corrupted
Attempting to link in too many shared libraries
Cannot exec a shared library directly
Illegal byte sequence
Interrupted system call should be restarted
Streams pipe error
Too many users
Socket operation on non-socket
Destination address required
Message too long
Protocol wrong type for socket
Protocol not available
Protocol not supported
Socket type not supported
Operation not supported on transport endpoint
Protocol family not supported
Address family not supported by protocol
Address already in use
Cannot assign requested address
Network is down
Network is unreachable
Network dropped connection because of reset
Software caused connection abort
Connection reset by peer
No buffer space available
Transport endpoint is already connected
Transport endpoint is not connected
Cannot send after transport endpoint shutdown
Too many references: cannot splice
Connection timed out
Connection refused
Host is down
No route to host
Operation already in progress
Operation now in progress
Stale NFS file handle
Not a XENIX named type file
No XENIX semaphores available
Is a named type file
Remote I/O error
Quota exceeded
Exceptions should be class objects.
The exceptions are defined in the module exceptions.
Thismodule never needs to be imported explicitly: the exceptions areprovided in the built-in namespace as well as the exceptionsmodule.
Note:In past versions of Python string exceptions were supported.
This is done to force programmers to use exception namesrather than their string value when specifying exception handlers.The string value of all built-in exceptions is their name, but this isnot a requirement for user-defined exceptions or exceptions defined bylibrary modules.
statement withan except
clause that mentions a particularclass, that clause also handles any exception classes derived fromthat class (but not exception classes from which it isderived).
Two exception classes that are not related via subclassingare never equivalent, even if they have the same name.The built-in exceptions listed below can be generated by theinterpreter or built-in functions.
statement.
For string exceptions, theassociated value itself will be stored in the variable named as thesecond argument of the except clause (if any).
For classexceptions, that variable receives the exception instance.
If theexception class is derived from the standard root classException, the associated value is present as theexception instance's args attribute, and possibly on otherattributes as well.User code can raise built-in exceptions.
Moreinformation on defining exceptions is available in the
under the heading``User-defined Exceptions.''
The following exceptions are only used as base classes for otherexceptions.
The root class for exceptions.
All built-in exceptions are derivedfrom this class.
All user-defined exceptions should also be derivedfrom this class, but this is not (yet) enforced.
The str()function, when applied to an instance of this class (or most derivedclasses) returns the string value of the argument or arguments, or anempty string if no arguments were given to the constructor.
When usedas a sequence, this accesses the arguments given to the constructor(handy for backward compatibility with old code).
The arguments arealso available on the instance's args attribute, as a tuple.
The base class for all built-in exceptions exceptStopIteration and SystemExit.StandardError itself is derived from the root classException.
The base class for those built-in exceptions that are raised forvarious arithmetic errors: OverflowError,ZeroDivisionError, FloatingPointError.
The base class for the exceptions that are raised when a key orindex used on a mapping or sequence is invalid: IndexError,KeyError.
This can be raised directly bysys.setdefaultencoding().
The base class for exceptions thatcan occur outside the Python system: IOError,OSError.
When exceptions of this type are created with a2-tuple, the first item is available on the instance's errnoattribute (it is assumed to be an error number), and the second itemis available on the strerror attribute (it is usually theassociated error message).
The tuple itself is also available on theargs attribute.New in version 1.5.2.
When an EnvironmentError exception is instantiated with a3-tuple, the first two items are available as above, while the thirditem is available on the filename attribute.
However, forbackwards compatibility, the args attribute contains only a2-tuple of the first two constructor arguments.The filename attribute is None when this exception iscreated with other than 3 arguments.
The errno andstrerror attributes are also None when the instance wascreated with other than 2 or 3 arguments.
In this last case,args contains the verbatim constructor arguments as a tuple.
The following exceptions are the exceptions that are actually raised.
Raised when an assert statement fails.
Raised when an attribute reference or assignment fails.
(When anobject does not support attribute references or attribute assignmentsat all, TypeError is raised.)
Raised when a floating point operation fails.
This exception isalways defined, but can only be raised when Python is configuredwith the --with-fpectl option, or theWANT_SIGFPE_HANDLER symbol is defined in thepyconfig.h file.
Raised when an I/O operation (such as a print statement,the built-in open() function or a method of a fileobject) fails for an I/O-related reason, e.g., ``file not found'' or``disk full''.This class is derived from EnvironmentError.
See thediscussion above for more information on exception instanceattributes.
Raised when an import statement fails to find the moduledefinition or when a from ... import fails to find aname that is to be imported.
Raised when a sequence subscript is out of range.
(Slice indices aresilently truncated to fall in the allowed range; if an index is not aplain integer, TypeError is raised.)
Raised when a mapping (dictionary) key is not found in the set ofexisting keys.
Raised when the user hits the interrupt key (normallyControl-C or Delete).
During execution, a check forinterrupts is made regularly.Interrupts typed when a built-in function input() orraw_input() is waiting for input also raise thisexception.
Raised when an operation runs out of memory but the situation maystill be rescued (by deleting some objects).
The associated value isa string indicating what kind of (internal) operation ran out of memory.Note that because of the underlying memory management architecture(C's malloc() function), the interpreter may notalways be able to completely recover from this situation; itnevertheless raises an exception so that a stack traceback can beprinted, in case a run-away program was the cause.
Raised when a local or global name is not found.
This applies onlyto unqualified names.
The associated value is an error message thatincludes the name that could not be found.
This exception is derived from RuntimeError.
In userdefined base classes, abstract methods should raise this exceptionwhen they require derived classes to override the method.New in version 1.5.2.
This class is derived from EnvironmentError and is usedprimarily as the
module's os.
error exception.See EnvironmentError above for a description of thepossible associated values.New in version 1.5.2.
Raised when the result of an arithmetic operation is too large to berepresented.
This cannot occur for long integers (which would ratherraise MemoryError than give up).
Because of the lack ofstandardization of floating point exception handling in C, mostfloating point operations also aren't checked.
For plain integers,all operations that can overflow are checked except left shift, wheretypical applications prefer to drop bits than raise an exception.
.proxy() function, is used to accessan attribute of the referent after it has been garbage collected.For more information on weak references, see the
module.New in version 2.2:Previously known as the
.ReferenceErrorexception.
Raised when an error is detected that doesn't fall in any of theother categories.
The associated value is a string indicating whatprecisely went wrong.
(This exception is mostly a relic from aprevious version of the interpreter; it is not used very much anymore.)
Raised when the parser encounters a syntax error.
Raised when the interpreter finds an internal error, but thesituation does not look so serious to cause it to abandon all hope.The associated value is a string indicating what went wrong (inlow-level terms).You should report this to the author or maintainer of your Pythoninterpreter.
This exception is raised by the sys.exit() function.
When itis not handled, the Python interpreter exits; no stack traceback isprinted.
The os._exit() functioncan be used if it is absolutely positively necessary to exitimmediately (for example, in the child process after a call tofork()).
Raised when an operation or function is applied to an objectof inappropriate type.
The associated value is a string givingdetails about the type mismatch.
Raised when a reference is made to a local variable in a function ormethod, but no value has been bound to that variable.
This is asubclass of NameError.New in version 2.0.
Raised when a Unicode-related encoding or decoding error occurs.
Itis a subclass of ValueError.New in version 2.0.
Raised when a Unicode-related error occurs during encoding.
Itis a subclass of UnicodeError.New in version 2.3.
Raised when a Unicode-related error occurs during decoding.
Raised when a Unicode-related error occurs during translating.
Raised when a built-in operation or function receives an argumentthat has the right type but an inappropriate value, and thesituation is not described by a more precise exception such asIndexError.
Raised when a Windows-specific error occurs or when the error numberdoes not correspond to an errno value.
Raised when the second argument of a division or modulo operation iszero.
The associated value is a string indicating the type of theoperands and the operation.
The following exceptions are used as warning categories; see the
module for more information.
Base class for warning categories.
Base class for warnings generated by user code.
Base class for warnings about deprecated features.
Base class for warnings about features which will be deprecated in the future.
Base class for warnings about dubious syntax
Base class for warnings about dubious runtime behavior.
Base class for warnings about constructs that will change semanticallyin the future.
The class hierarchy for built-in exceptions is:
Exception+-- SystemExit+-- StopIteration+-- StandardError| +-- KeyboardInterrupt| +-- ImportError| +-- EnvironmentError| | +-- IOError| | +-- OSError| | +-- WindowsError| +-- EOFError| +-- RuntimeError| | +-- NotImplementedError| +-- NameError| | +-- UnboundLocalError| +-- AttributeError| +-- SyntaxError| | +-- IndentationError| | +-- TabError| +-- TypeError| +-- AssertionError| +-- LookupError| | +-- IndexError| | +-- KeyError| +-- ArithmeticError| | +-- OverflowError| | +-- ZeroDivisionError| | +-- FloatingPointError| +-- ValueError| | +-- UnicodeError| | +-- UnicodeEncodeError| | +-- UnicodeDecodeError| | +-- UnicodeTranslateError| +-- ReferenceError| +-- SystemError| +-- MemoryError+---Warning+-- UserWarning+-- DeprecationWarning+-- PendingDeprecationWarning+-- SyntaxWarning+-- OverflowWarning (not generated in 2.4; won't exist in 2.5)+-- RuntimeWarning+-- FutureWarning
This module performs file control and I/O control on file descriptors.It is an interface to the fcntl() and ioctl()
Unix routines.All functions in this module take a file descriptor fd as theirfirst argument.
This can be an integer file descriptor, such asreturned by sys.stdin.fileno(), or a file object, such assys.stdin itself, which provides a fileno() whichreturns a genuine file descriptor.The module defines the following functions:
Perform the requested operation on file descriptor fd (fileobjects providing a fileno() method are accepted as well).The operation is defined by op and is operating systemdependent.
These codes are also found in the fcntlmodule.
The argument arg is optional, and defaults to theinteger value 0.
When present, it can either be an integervalue, or a string.
With the argument missing or an integer value,the return value of this function is the integer return value of theC fcntl() call.
When the argument is a string itrepresents a binary structure, e.g. created by
.pack().
The binary data is copied to a bufferwhose address is passed to the C fcntl() call.
Thereturn value after a successful call is the contents of the buffer,converted to a string object.
The length of the returned stringwill be the same as the length of the arg argument.
This islimited to 1024 bytes.
If the information returned in the buffer bythe operating system is larger than 1024 bytes, this is most likelyto result in a segmentation violation or a more subtle datacorruption.If the fcntl() fails, an IOError israised.
Perform the lock operation op on file descriptor fd (fileobjects providing a fileno() method are accepted as well).See the Unix manual
flock(3) for details.
(On somesystems, this function is emulated using fcntl().)
)
This is essentially a wrapper around the fcntl() lockingcalls. fd is the file descriptor of the file to lock or unlock,and operation is one of the following values:
LOCK_UN - unlock
LOCK_SH - acquire a shared lock
LOCK_EX - acquire an exclusive lock
When operation is LOCK_SH or LOCK_EX, itcan also be bit-wise OR'd with LOCK_NB to avoid blocking onlock acquisition.
If LOCK_NB is used and the lock cannotbe acquired, an IOError will be raised and the exceptionwill have an errno attribute set to EACCES orEAGAIN (depending on the operating system; for portability,check for both values).
On at least some systems, LOCK_EXcan only be used if the file descriptor refers to a file opened forwriting.
length is the number of bytes to lock, start is the byteoffset at which the lock starts, relative to whence, andwhence is as with fileobj.seek(), specifically:
0 - relative to the start of the file(SEEK_SET)
1 - relative to the current buffer position(SEEK_CUR)
2 - relative to the end of the file(SEEK_END)
The default for start is 0, which means to start at thebeginning of the file.
The default for length is 0 which meansto lock to the end of the file. The default for whence is also0.
Examples (all on a SVR4 compliant system):
Note that in the first example the return value variable rv willhold an integer value; in the second example it will hold a stringvalue.
The structure lay-out for the lockdata variable issystem dependent -- therefore using the flock() call may bebetter.
The filecmp module defines functions to compare files anddirectories, with various optional time/correctness trade-offs.The filecmp module defines the following functions:
Compare the files named f1 and f2, returning True ifthey seem equal, False otherwise.Unless shallow is given and is false, files with identicalos.
stat() signatures are taken to be equal.Changed in version 2.3:use_statcache is obsolete and ignored..
stat() signature changes.Note that no external programs are called from this function, giving itportability and efficiency.
Returns three lists of file names: match, mismatch,errors. match contains the list of files match in bothdirectories, mismatch includes the names of those that don't,and errros lists the names of files which could not becompared.
This module implements a helper class and functions to quickly write aloop over standard input or a list of files.The typical use is:
This iterates over the lines of all files listed insys.argv[1:], defaulting to sys.stdin if the list isempty.
If a filename is '-', it is also replaced bysys.stdin.
To specify an alternative list of filenames, passit as the first argument to input().
Create an instance of the FileInput class.
The instancewill be used as global state for the functions of this module, andis also returned to use during iteration.
The parameters to thisfunction will be passed along to the constructor of theFileInput class.
The following functions use the global state created byinput(); if there is no active state,RuntimeError is raised.
Return the name of the file currently being read.
Before the firstline has been read, returns None.
Return the cumulative line number of the line that has just beenread.
Before the first line has been read, returns 0.
Afterthe last line of the last file has been read, returns the linenumber of that line.
Return the line number in the current file.
Before the first linehas been read, returns 0.
After the last line of the lastfile has been read, returns the line number of that line within thefile.
Returns true if the line just read is the first line of its file,otherwise returns false.
Returns true if the last line was read from sys.stdin,otherwise returns false.
The filename isnot changed until after the first line of the next file has beenread.
Before the first line has been read, this function has noeffect; it cannot be used to skip the first file.
After the lastline of the last file has been read, this function has no effect.
Close the sequence.
The class which implements the sequence behavior provided by themodule is available for subclassing as well:
classFileInput
Class FileInput is the implementation; its methodsfilename(), lineno(), fileline(),isfirstline(), isstdin(), nextfile() andclose() correspond to the functions of the same name in themodule.
In addition it has a readline() method whichreturns the next input line, and a __getitem__() methodwhich implements the sequence behavior.
The sequence must beaccessed in strictly sequential order; random access andreadline() cannot be mixed.
Optional in-place filtering: if the keyword argument
inplace=1 is passed to input() or to theFileInput constructor, the file is moved to a backup file andstandard output is directed to the input file (if a file of the samename as the backup file already exists, it will be replaced silently).This makes it possible to write a filter that rewrites its input filein place.
If the keyword argument
In-placefiltering is disabled when standard input is read.
Caveat: The current implementation does not work for MS-DOS8+3 filesystems.
This module contains routines that give Python programs access to somefunctionality provided by the finder.
They are implemented as wrappersaround the AppleEvent
Tell the finder to launch file.
What launching means depends on the file:applications are started, folders are opened and documents are openedin the correct application.
Tell the finder to print a file.
The behaviour is identical to selecting the file and usingthe print command in the finder's file menu.
Tell the finder to copy a file or folder file to folderdestdir.
The function returns an Alias object pointing tothe new file.
Tell the finder to move a file or folder file to folderdestdir.
Tell the finder to put the Macintosh to sleep, if your machinesupports it.
Tell the finder to perform an orderly restart of the machine.
Tell the finder to perform an orderly shutdown of the machine.
(see above); they are equivalent to those defined inthe C header file forms. h except that the name prefix"FL_" is omitted.
Read the module source for a complete list ofthe defined names.
Suggested use:
.
The source for thelibrary can be retrieved by anonymous ftp from host"ftp.cs.ruu.nl", directory SGI/FORMS.
It was last testedwith version 2.0b.Most functions are literal translations of their C equivalents,dropping the initial "fl_" from their name.
Constants used bythe library are defined in module
The FORMSinterface to GL event handling is available, though, so you can mixFORMS with pure GL windows.
Please note: importing fl implies a call to the GLfunction foreground() and to the FORMS routinefl_init(). Subsections
This module defines functions that can read form definitions createdby the `form designer' (fdesign) program that comes with theFORMS library (see module
This module provides access to the IRIS Font Manager library.
Return a font handle object.Calls fmfindfont(fontname).
Returns a list of available font names.This is an interface to fmenumerate().
Render a string using the current font (see the setfont() fonthandle method below).Calls fmprstr(string).
Returns the current font search path.
Font handle objects support the following operations:
scalefont (
Returns a handle for a scaled version of this font.Calls fmscalefont(fh, factor).
setfont
getfontname
Returns this font's name.Calls fmgetfontname(fh).
getcomment
)
Returns the comment string associated with this font.Raises an exception if there is none.Calls fmgetcomment(fh).
getfontinfo
)
Returns a tuple giving some pertinent data about this font.This is an interface to fmgetfontinfo().The returned tuple contains the following numbers:(
printermatched, fixed_width, xorig,yorig, xsize, ysize, height,nglyphs
).
getstrwidth (
Returns the width, in pixels, of string when drawn in this font.Calls fmgetstrwidth(fh, string).
This module provides support for Unix shell-style wildcards, whichare not the same as regular expressions (which are documentedin the
module).
The specialcharacters used in shell-style wildcards are:
matches everything
matches any single character
matches any character in seq
matches any character not in seq
Note that the filename separator ('/' on Unix) is notspecial to this module.
See module
for pathname expansion(
uses fnmatch() to match pathnamesegments).
Similarly, filenames starting with a period arenot special for this module, and are matched by the * and? patterns.
Test whether the filename string matches the patternstring, returning true or false.
If the operating system iscase-insensitive, then both parameters will be normalized to alllower- or upper-case before the comparison is performed.
If yourequire a case-sensitive comparison regardless of whether that'sstandard for your operating system, use fnmatchcase()instead.
Test whether filename matches pattern, returning true orfalse; the comparison is case-sensitive.
Return the subset of the list of names that match pattern.It is the same as [n for n in names if fnmatch(n, pattern)], butimplemented more efficiently.New in version 2.2.
See Also:
Unix shell-style path expansion.
This module supports two interface definitions, each with multipleimplementations.
The formatter interface is used by theHTMLParser class of the
module, and thewriter interface is required by the formatter interface.
Formatter objects transform an abstract flow of formatting events intospecific output events on writer objects.
Formatters manage severalstack structures to allow various properties of a writer object to bechanged and restored; writers need not be able to handle relativechanges nor any sort of ``change back'' operation.
Specific writerproperties which may be controlled via formatter objects arehorizontal alignment, font, and left margin indentations.
A mechanismis provided which supports providing arbitrary, non-exclusive stylesettings to a writer as well.
Additional interfaces facilitateformatting events which are not reversible, such as paragraphseparation.Writer objects encapsulate device interfaces.
Abstract devices, suchas file formats, are supported as well as physical devices.
Theprovided implementations all work with abstract devices.
Theinterface makes available mechanisms for setting the properties whichformatter objects manage and inserting data into the output. Subsections
3.3.3 Weak References in
Most computers carry out floating point operations
(The example above will work on many platforms.
Turn on the generation of SIGFPE,and set up an appropriate signal handler.
Reset default handling of floating point exceptions.
After turnon_sigfpe() has been executed,a floating point operation that raises one of theIEEE-754 exceptionsDivision by Zero, Overflow, or Invalid operationwill in turn raise this standard Python exception. Subsections
The fpformat module defines functions for dealing withfloating point numbers representations in 100% purePython.
Note:This module is unneeded: everything here couldbe done via the % string interpolation operator.
The fpformat module defines the following functions and anexception:
Format x as [-]ddd.ddd with digs digits after thepoint and at least one digit before.If
digs = 0, the decimal point is suppressed.
Format x as [-]d.dddE[+-]ddd with digs digits after the point and exactly one digit before.If
digs = 0, one digit is kept and the point is suppressed.
Exception raised when a string passed to fix() orsci() as the x parameter does not look like a number.This is a subclass of ValueError when the standardexceptions are strings.
The exception value is the improperlyformatted string that caused the exception to be raised.
This module defines the class FTP and a few related items.The FTP class implements the client side of the FTPprotocol.
to handle URLs that use FTP.
For more informationon FTP (File Transfer Protocol), see Internet RFC 959.Here's a sample session using the ftplib module:
from ftplib import FTP ftp = FTP('ftp.cwi.nl') # connect to host, default port ftp.login() # user anonymous, passwd anonymous@ ftp.retrlines('LIST') # list directory contentstotal 24418drwxrwsr-x 5 ftp-usr pdmaint 1536 Mar 20 09:48 .dr-xr-srwt 105 ftp-usr pdmaint 1536 Mar 21 14:32 ..-rw-r--r-- 1 ftp-usr pdmaint 5305 Mar 20 09:48 INDEX... ftp.retrbinary('RETR README', open('README', 'wb').write)'226 Transfer complete.' ftp.quit()
The module defines the following items:
classFTP
Return a new instance of the FTP class.
Whenhost is given, the method call connect(host) ismade.
When user is given, additionally the method calllogin(user, passwd, acct) is made (wherepasswd and acct default to the empty string when not given).
The set of all exceptions (as a tuple) that methods of FTPinstances may raise as a result of problems with the FTP connection(as opposed to programming errors made by the caller).
This setincludes the four exceptions listed below as well assocket.error and IOError.
Exception raised when an unexpected reply is received from the server.
Exception raised when an error code in the range 400-499 is received.
Exception raised when an error code in the range 500-599 is received.
Exception raised when a reply is received from the server that doesnot begin with a digit in the range 1-5.
Parser for the .netrc file format.
The file.netrc is typically used by FTP clients toload user authentication information before promptingthe user.
The file Tools/scripts/ftpmirror. py
__future__ is a real module, and serves three purposes:
To avoid confusing existing tools that analyze import statementsand expect to find the modules they're importing.
To document when incompatible changes were introduced, and when theywill be -- or were -- made mandatory.
This is a form of executabledocumentation, and can be inspected programatically via importing__future__ and examining its contents.
Each statement in __future__.py is of the form:
where, normally, OptionalRelease is less thanMandatoryRelease, and both are 5-tuples of the same form assys.version_info:
CompilerFlag is the (bitfield) flag that should be passed in thefourth argument to the builtin function compile() to enablethe feature in dynamically compiled code.
This flag is stored in thecompiler_flag attribute on _Future instances.No feature description will ever be deleted from __future__.
The gc module is only available if the interpreter was builtwith the optional cyclic garbage detector (enabled by default).
Ifthis was not enabled, an ImportError is raised by attemptsto import this module.This module provides an interface to the optional garbage collector.
Itprovides the ability to disable the collector, tune the collectionfrequency, and set debugging options.
It also provides access tounreachable objects that the collector found but cannot free.
Since thecollector supplements the reference counting already used in Python, youcan disable the collector if you are sure your program does not createreference cycles.
Automatic collection can be disabled by callinggc.disable().
To debug a leaking program callgc.set_debug(gc.DEBUG_LEAK).The gc module provides the following functions:
Enable automatic garbage collection.
Disable automatic garbage collection.
Returns true if automatic collection is enabled.
Run a full collection.
All generations are examined and thenumber of unreachable objects found is returned.
Set the garbage collection debugging flags.Debugging information will be written to sys.stderr.
See belowfor a list of debugging flags which can be combined using bitoperations to control debugging.
Return the debugging flags currently set.
Returns a list of all objects tracked by the collector, excluding thelist returned.New in version 2.2.
)
Set the garbage collection thresholds (the collection frequency).Setting threshold0 to zero disables collection.The GC classifies objects into three generations depending on how manycollection sweeps they have survived.
New objects are placed in theyoungest generation (generation 0).
If an object survives acollection it is moved into the next older generation.
Sincegeneration 2 is the oldest generation, objects in thatgeneration remain there after a collection.
In order to decide whento run, the collector keeps track of the number object allocations anddeallocations since the last collection.
When the number ofallocations minus the number of deallocations exceedsthreshold0, collection starts.
Initially only generation0 is examined.
If generation 0 has been examined morethan threshold1 times since generation 1 has beenexamined, then generation 1 is examined as well.
Similarly,threshold2 controls the number of collections of generation1 before collecting generation 2.
Return the current collection thresholds as a tuple of(threshold0, threshold1, threshold2).
Return the list of objects that directly refer to any of objs.
To get only currently liveobjects, call collect() before callingget_referrers().Care must be taken when using objects returned byget_referrers() because some of them could still be underconstruction and hence in a temporarily invalid state.
Avoid usingget_referrers() for any purpose other than debugging.
*objs)
Return a list of objects directly referred to by any of the arguments.The referents returned are those objects visited by the arguments'C-level tp_traverse methods (if any), and may not be allobjects actually directly reachable. tp_traverse methodsare supported only by objects that support garbage collection, and areonly required to visit objects that may be involved in a cycle.
So,for example, if an integer is directly reachable from an argument, thatinteger object may or may not appear in the result list.
A list of objects which the collector found to be unreachablebut could not be freed (uncollectable objects).
By default, this listcontains only objects with __del__() methods.
Objects that have__del__() methods and are part of a reference cycle causethe entire reference cycle to be uncollectable, including objectsnot necessarily in the cycle but reachable only from it.
Python doesn'tcollect such cycles automatically because, in general, it isn't possiblefor Python to guess a safe order in which to run the __del__()methods.
If you know a safe order, you can force the issue by examiningthe garbage list, and explicitly breaking cycles due to yourobjects within the list.
Note that these objects are kept alive evenso by virtue of being in the garbage list, so they should beremoved from garbage too.
For example, after breaking cycles, dodel gc.garbage[:] to empty the list.
It's generally betterto avoid the issue by not creating cycles containing objects with__del__() methods, and garbage can be examined in thatcase to verify that no such cycles are being created.If DEBUG_SAVEALL is set, then all unreachable objects willbe added to this list rather than freed.
The following constants are provided for use withset_debug():
Print statistics during collection.
This information canbe useful when tuning the collection frequency.
These objectswill be added to the garbage list.
When DEBUG_COLLECTABLE or DEBUG_UNCOLLECTABLE isset, print information about instance objects found.
When DEBUG_COLLECTABLE or DEBUG_UNCOLLECTABLE isset, print information about objects other than instance objects found.
When set, all unreachable objects found will be appended togarbage rather than being freed.
This can be useful for debugginga leaking program.
... methods.
Prior toPython 2.2, the list contained all instance objects in unreachablecycles, not only those with __del__() methods.
This module is quite similar to the
module, but uses gdbm instead to provide some additionalfunctionality.
Raised on gdbm-specific errors, such as I/O errors.KeyError is raised for general mapping errors likespecifying an incorrect key.
Open a gdbm database and return a gdbm object.
'f' -- Open the database in fast mode.
Writes to the databasewill not be syncronized.
's' -- Synchronized mode.
This will cause changes to the databasewill be immediately written to the file.
'u' -- Do not lock database.
Not all flags are valid for all versions of gdbm.
Themodule constant open_flags is a string of supported flagcharacters.
The exception error is raised if an invalidflag is specified.The optional mode argument is the Unix mode of the file, usedonly when the database has to be created.
It defaults to octal0666.
In addition to the dictionary-like methods, gdbm objects have thefollowing methods:
It's possible to loop over every key in the database using this method and the nextkey() method.
The traversal is ordered bygdbm's internal hash values, and won't be sorted by the keyvalues.
Returns the key that follows key in the traversal.
Thefollowing code prints every key in the database db, withouthaving to create a list in memory that contains them all:
)
If you have carried out a lot of deletions and would like to shrinkthe space used by the gdbm file, this routine will reorganizethe database. gdbm will not shorten the length of a databasefile except by using this reorganization; otherwise, deleted filespace will be kept and reused as new (key, value) pairs are added.
When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk.
The gensuitemodule module creates a Python package implementingstub code for the AppleScript suites that are implemented by a specificapplication, according to its AppleScript dictionary.It is usually invoked by the user through the PythonIDE, butit can also be run as a script from the command line (pass--help for help on the options) or imported from Pythoncode.
For an example of its use see Mac/scripts/genallsuites.pyin a source distribution, which generates the stub packages that areincluded in the standard library.It defines the following public functions:
Returns true if application, which should be passed as a pathname,appears to be scriptable.
Take the return value with a grain of salt:Internet Explorer appears not to be scriptable but definitely is.
Create a stub package for application, which should be passed asa full pathname.
When dump isgiven it should refer to a file object, and processfile will stopafter decoding the resources and dump the Python representation of theterminology resources to this file. verbose should also be a fileobject, and specifying it will cause processfile to tell you whatit is doing.
processfile_fromresource
This function does the same as processfile, except that it uses adifferent method to get the terminology resources.
It opens applicationas a resource file and reads all "aete" and "aeut" resourcesfrom this file.
-').Long options similar to those supported byGNU software may be used as well via an optional third argument.This module provides a single function and an exception:
Parses command line options and parameter list. args is theargument list to be parsed, without the leading reference to therunning program.
Typically, this means "sys.argv[1:]".options is the string of option letters that the script wants torecognize, with options that require an argument followed by a colon(":"; i.e., the same format that Unix
getopt() uses).
Note:Unlike GNU getopt(), after a non-optionargument, all further arguments are considered also non-options.This is similar to the way non-GNU Unix systems work.
long_options, if specified, must be a list of strings with thenames of the long options which should be supported.
The leading'-
-' characters should not be included in the optionname.
Long options which require an argument should be followed by anequal sign ("=").
To accept only long options,options should be an empty string.
Long options on the commandline can be recognized so long as they provide a prefix of the optionname that matches exactly one of the accepted options.
Each option-and-value pair returnedhas the option as its first element, prefixed with a hyphen for shortoptions (e.g., '-x') or two hyphens for long options (e.g.,'-
-long-option'), and the option argument as its secondelement, or an empty string if the option has no argument.
Theoptions occur in the list in the same order in which they were found,thus allowing multiple occurrences.
Long and short options may bemixed.
This function works like getopt(), except that GNU stylescanning mode is used by default.
This means that option andnon-option arguments may be intermixed.
The getopt()function stops processing options as soon as a non-option argument isencountered.If the first character of the option string is `+', or if theenvironment variable POSIXLY_CORRECT is set, then option processingstops as soon as a non-option argument is encountered.
This is raised when an unrecognized option is found in the argumentlist or when an option requiring an argument is given none.The argument to the exception is a string indicating the cause of theerror.
For long options, an argument given to an option which doesnot require one will also cause this exception to be raised.
Changed in version 1.6:Introduced GetoptError as a synonym forerror.
Alias for GetoptError; for backward compatibility.
An example using only Unix style options:
Using long option names is equally easy:
In a script, typical usage is something like this:
import getopt, sysdef main():try:opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])except getopt.GetoptError:# print help information and exit:usage()sys.exit(2)output = Noneverbose = Falsefor o, a in opts:if o == "-v":verbose = Trueif o in ("-h", "--help"):usage()sys.exit()if o in ("-o", "--output"):output = a# ...if __name__ == "__main__":main()
More object-oriented command line option parsing.
The getpass module provides two functions:
Prompt the user for a password without echoing.
The user isprompted using the string prompt, which defaults to'Password: '.Availability: Macintosh, Unix, Windows.
)
Return the ``login name'' of the user.Availability: Unix, Windows.This function checks the environment variables LOGNAME,USER, LNAME and USERNAME, in order, andreturns the value of the first one which is set to a non-emptystring.
If none are set, the login name from the password databaseis returned on systems which support the pwd
module,otherwise, an exception is raised.
The gettext module provides internationalization (I18N) andlocalization (L10N) services for your Python modules and applications.It supports both the GNU gettext message catalog API and ahigher level, class-based API that may be more appropriate for Pythonfiles.
The interface described below allows you to write yourmodule and application messages in one natural language, and provide acatalog of translated messages for running under different naturallanguages.Some hints on localizing your Python modules and applications are alsogiven.
Subsections
6.28.2.1 The NullTranslations class
6.28.2.2 The GNUTranslations class
6.28.2.3 Solaris message catalog support
6.28.2.4 The Catalog constructor
6.28.3.1 Localizing your module
6.28.3.2 Localizing your application
6.28.3.3 Changing languages on the fly
6.28.3.4 Deferred translations
This module contains constants used by the Silicon GraphicsGraphics Library from the C header file gl/gl.h.Read the module source file for details.
This module provides access to the Silicon GraphicsGraphics Library.It is available only on Silicon Graphics machines.
Warning:Some illegal calls to the GL library cause the Pythoninterpreter to dump core.In particular, the use of most GL calls is unsafe before the firstwindow is opened.
The module is too large to document here in its entirety, but thefollowing should help you to get started.The parameter conventions for the C functions are translated to Python asfollows:
All (short, long, unsigned) int values are represented by Pythonintegers.
All float and double values are represented by Python floating pointnumbers.In most cases, Python integers are also allowed.
All arrays are represented by one-dimensional Python lists.In most cases, tuples are also allowed.
All string and character arguments are represented by Python strings,for instance,winopen('Hi There!')androtate(900, 'z').
All (short, long, unsigned) integer arguments or return values that areonly used to specify the length of an array argument are omitted.For example, the C call
is translated to Python as
is translated to Python as
The following functions are non-standard or have special argumentconventions:
z = 0.0 if necessary (as indicated in the man page),and for each pointv3d()is called.
)
Equivalent to but faster than a number ofn3fandv3fcalls.The argument is an array (list or tuple) of pairs of normals and points.Each pair is a tuple of a point and a normal for that point.Each point or normal must be a tuple of coordinates(x, y, z).Three coordinates must be given.Float and int values may be mixed.For each pair,n3f()is called for the normal, and thenv3f()is called for the point.
Similar to nvarray()but the pairs have the point first and the normal second.
Defines a nurbs surface.The dimensions of
ctl[][]are computed as follows:[len(s_k) - s_ord],[len(t_k) - t_ord].
Defines a nurbs curve.The length of ctlpoints islen(knots) - order
Defines a piecewise-linear curve.pointsis a list of points.
typemust beN_ST.
The only argument to these functions specifies the desired size of thepick or select buffer.
)
These functions have no arguments.They return a list of integers representing the used part of thepick/select buffer.No method is provided to detect buffer overrun.
Here is a tiny but complete example GL program in Python:
PyOpenGL: The Python OpenGL Binding
is also available;see information about thePyOpenGL
project online athttp://pyopengl.sourceforge.net/.
This may be abetter option if support for SGI hardware from beforeabout 1996 is not required.
The glob module finds all the pathnames matching a specifiedpattern according to the rules used by the Unix shell.
No tildeexpansion is done, but *, ?, and character rangesexpressed with [] will be correctly matched.
(Fortilde and shell variable expansion, use os.
/../Tools/*/*.gif), and can contain shell-style wildcards.Broken symlinks are included in the results (as in the shell).
For example, consider a directory containing only the following files:1.gif, 2.txt, and card.gif. glob()will produce the following results.
Notice how any leading componentsof the path are preserved.
Shell-style filename (not path) expansion.
This module provides a minimal implementation of client side of theGopher protocol.
It is used by the module
tohandle URLs that use the Gopher protocol.The module defines the following functions:
Send a selector string to the gopher server at host andport (default 70).
Returns an open file object fromwhich the returned document can be read.
Send a selector string and a query string to a gopherserver at host and port (default 70).
Returns anopen file object from which the returned document can be read.
Note that the data returned by the Gopher server can be of any type,depending on the first character of the selector string.
If the datais text (first character of the selector is "0"), lines areterminated by CRLF, and the data is terminated by a line consisting ofa single ".", and a leading "." should be stripped fromlines that begin with "..".
Directory listings (first characterof the selector is "1") are transferred using the same protocol.
the name of the group
the (encrypted) group password; often empty
the numerical group ID
all the group member's user names
The gid is an integer, name and password are strings, and the memberlist is a list of strings.(Note that most users are not explicitly listed as members of thegroup they are in according to the password database.
Check bothdatabases to get complete membership information.)It defines the following items:
Return the group database entry for the given numeric group ID.KeyError is raised if the entry asked for cannot be found.
Return the group database entry for the given group name.KeyError is raised if the entry asked for cannot be found.
Return a list of all available group entries, in arbitrary order.
An interface to the user database, similar to this.
Note that additional file formats which can bedecompressed by the gzip and gunzip programs, such as those produced by compress and pack, are notsupported by this module.The module defines the following items:
classGzipFile
Constructor for the GzipFile class, which simulates most ofthe methods of a file object, with the exception of the readinto()and truncate() methods.
It defaults to None, in which casefilename is opened to provide a file object.When fileobj is not None, the filename argument isonly used to be included in the gzip file header, which mayincludes the original filename of the uncompressed file.
The default is 9.Calling a GzipFile object's close() method does notclose fileobj, since you might wish to append more materialafter the compressed data.
This also allows you to pass aStringIO object opened for writing as fileobj, andretrieve the resulting memory buffer using the StringIOobject's getvalue() method.
compresslevel).
The filenameargument is required; mode defaults to 'rb' andcompresslevel defaults to 9.
The basic data compression module needed to supportthe gzip file format.
This module provides an implementation of the heap queue algorithm,also known as the priority queue algorithm.Heaps are arrays for which
heap[k] = heap[2*k+1] and
heap[k] = heap[2*k+2]for all k, counting elements from zero.
Theinteresting property of a heap is that
heap[0] is alwaysits smallest element.The API below differs from textbook heap algorithms in two aspects:(a)
We use zero-based indexing.
This makes the relationship between theindex for a node and the indexes for its children slightly lessobvious, but is more suitable since Python uses zero-based indexing.(b) Our pop method returns the smallest item, not the largest (called a"min heap" in textbooks; a "max heap" is more common in texts becauseof its suitability for in-place sorting).These two make it possible to view the heap as a regular Python listwithout surprises:
heap[0] is the smallest item, and
heap.sort() maintains the heap invariant!To create a heap, use a list initialized to [], or you cantransform a populated list into a heap via function heapify().The following functions are provided:
Push the value item onto the heap, maintaining theheap invariant.
Pop and return the smallest item from the heap, maintaining theheap invariant.
If the heap is empty, IndexError is raised.
Transform list x into a heap, in-place, in linear time.
Pop and return the smallest item from the heap, and also pushthe new item.
Note that the value returned may be largerthan item! That constrains reasonable uses of this routineunless written as part of a conditional replacement:
Example of use:
The module also offers two general purpose functions based on heaps.
Return a list with the n largest elements from the dataset definedby iterable.
Equivalent to: sorted(iterable, reverse=True)[:n] New in version 2.4.
Return a list with the n smallest elements from the dataset definedby iterable.
Equivalent to: sorted(iterable)[:n]
Both functions perform best for smaller values of n.
For largervalues, it is more efficient to use the sorted() function.
Also,when n==1, it is more efficient to use the builtin min()and max() functions. Subsections
This module implements the HMAC algorithm as described by RFC 2104.
Return a new hmac object.
It defaults to the
module.
An HMAC object has the following methods:
Update the hmac object with the string msg.
Repeated callsare equivalent to a single call with the concatenation of all thearguments: m.update(a); m.update(b) is equivalent tom. update(a + b).
Return the digest of the strings passed to the update()method so far.
This is a 16-byte string (for
) or a20-byte string (for
) which may contain non-ASCIIcharacters, including NUL bytes.
Like digest() except the digest is returned as a string oflength 32 for
(40 for
), containingonly hexadecimal digits.
This may be used to exchange the valuesafely in email or other non-binary environments.
Return a copy (``clone'') of the hmac object.
This can be used toefficiently compute the digests of strings that share a commoninitial substring.
10.8 Extensions
This module provides a nicer interface to the _hotshot C module.Hotshot is a replacement for the existing
module.
As it'swritten mostly in C, it should result in a much smaller performance impactthan the existing
module.
Warning:The hotshot profiler does not yet work well with threads.It is useful to use an unthreaded script to run the profiler overthe code you're interested in measuring if at all possible.
classProfile
The profiler object.
The argument logfile is the name of a logfile to use for logged profile data.
The argument lineeventsspecifies whether to generate events for every source line, or just onfunction call/return.
It defaults to 0 (only log functioncall/return).
The argument linetimings specifies whether torecord timing information.
It defaults to 1 (store timinginformation). Subsections
This module loads hotshot profiling data into the standard pstatsStats objects.
Load hotshot data from filename. Returns an instanceof the pstats.Stats class.
The profile module's Stats class.
This module defines three dictionaries, name2codepoint,codepoint2name, and entitydefs. entitydefs isused by the
module to provide theentitydefs member of the HTMLParser class.
Thedefinition provided here contains all the entities defined by XHTML 1.0 that can be handled using simple textual substitution in the Latin-1character set (ISO-8859-1).
A dictionary mapping XHTML 1.0 entity definitions to theirreplacement text in ISO Latin-1.
A dictionary that maps HTML entity names to the Unicode codepoints.New in version 2.3.
codepoint2name
A dictionary that maps Unicode codepoints to HTML entity names.New in version 2.3.
This module defines a class which can serve as a base for parsing textfiles formatted in the HyperText Mark-up Language (HTML).
The classis not directly concerned with I/O -- it must be provided with inputin string form via a method, and makes calls to methods of a``formatter'' object in order to produce output.
TheHTMLParser class is designed to be used as a base class forother classes in order to add functionality, and allows most of itsmethods to be extended or overridden.
In turn, this class is derivedfrom and extends the SGMLParser class defined in module
.
The HTMLParserimplementation supports the HTML 2.0 language as described inRFC 1866.
Two implementations of formatter objects are provided inthe
module; refer to thedocumentation for that module for information on the formatterinterface.
The following is a summary of the interface defined bysgmllib.SGMLParser:
The interface to feed data to an instance is through the feed()method, which takes a string argument.
This can be called with aslittle or as much text at a time as desired; "p.feed(a);p.feed(b)" has the same effect as "p.feed(a+b)".
When the datacontains complete HTML markup constructs, these are processed immediately;incomplete constructs are saved in a buffer.
To force processing of allunprocessed data, call the close() method.For example, to parse the entire contents of a file, use:
parser.feed(open('myfile.html').read())parser.close()
The interface to define semantics for HTML tags is very simple: derivea class and define methods called start_tag(),end_tag(), or do_tag().
The parser willcall these at appropriate moments: start_tag
ordo_tag() is called when an opening tag of the formtag ... is encountered; end_tag() is calledwhen a closing tag of the form tag is encountered.
Ifan opening tag requires a corresponding closing tag, like H1... /H1, the class should define the start_tag()method; if a tag requires no closing tag, like P, the classshould define the do_tag() method.
The module defines a parser class and an exception:
This is the basic HTML parser class.
It supports all entity namesrequired by the XHTML 1.0 Recommendation (http://www.w3.org/TR/xhtml1). It also defines handlers for all HTML 2.0 and many HTML 3.0 and 3.2 elements.
Exception raised by the HTMLParser class when it encounters anerror while parsing.New in version 2.4.
See Also:
Interface definition for transforming anabstract flow of formatting events intospecific output events on writer objects.
Alternate HTML parser that offers a slightlylower-level view of the input, but isdesigned to work with XHTML, and does notimplement some of the SGML syntax not used in``HTML as deployed'' and which isn't legalfor XHTML.
Module
Definition of replacement text for XHTML 1.0 entities.
Base class for HTMLParser.
This module defines classes which implement the client side of theHTTP and HTTPS protocols.
It is normally not used directly -- themodule
uses it to handle URLsthat use HTTP and HTTPS.
Note:HTTPS support is only available if the
The module provides the following classes:
classHTTPConnection
An HTTPConnection instance represents one transaction with an HTTPserver.
It should be instantiated passing it a host and optional port number.If no port number is passed, the port is extracted from the host string if ithas the form
, else the default HTTP port (80) isused.
For example, the following calls all create instances that connect tothe server at the same host and port:
New in version 2.0. classHTTPSConnection
A subclass of HTTPConnection that uses SSL for communication withsecure servers.
Default port is 443.key_file isthe name of a PEM formatted file that contains your privatekey. cert_file is a PEM formatted certificate chain file.
The base class of the other exceptions in this module.
It is asubclass of Exception.New in version 2.0.
A subclass of HTTPException.New in version 2.0.
A subclass of HTTPException, raised if a port is given and iseither non-numeric or empty.New in version 2.3.
A subclass of HTTPException.New in version 2.0.
A subclass of ImproperConnectionState.New in version 2.0.
A subclass of HTTPException.
Raised if a server responds with aHTTP status code that we don't understand.New in version 2.0.
The constants defined in this module are:
The default port for the HTTP protocol (always 80).
The default port for the HTTPS protocol (always 443).
and also the following constants for integer status codes:
Subsections 11.6.1 HTTPConnection Objects
This module provides access to Macintosh InternetConfig
package,which stores preferences for Internet programs such as mail address,default homepage, etc.
Also, Internet Config contains an elaborate setof mappings from Macintosh creator/type codes to foreign filenameextensions plus information on how to transfer files (binary, ascii,etc.).
Since MacOS 9, this module is a control panel named Internet.There is a low-level companion moduleicglue
which provides the basicInternet Config access functionality.
Exception raised on errors in the ic module.
The ic module defines the following class and function:
classIC
Create an Internet Config object.
The signature is a 4-character creatorcode of the current application (default 'Pyth') which mayinfluence some of ICs settings.
The optional ic argument is alow-level icglue.icinstance created beforehand, this may beuseful if you want to get preferences from a different config file,etc.
These functions are ``shortcuts'' to the methods of the same name,described below. Subsections
Importing icopen will replace the builtin open()with a version that uses Internet Config to set file type and creatorfor new files.
The imageop module contains some useful operations on images.It operates on images consisting of 8 or 32 bit pixels stored inPython strings.
This is the same format as used bygl.lrectwrite() and the
module.The module defines the following variables and functions:
This exception is raised on all errors, such as unknown number of bitsper pixel, etc.
image, psize, width, height, x0, y0, x1, y1)
Return the selected part of image, which should bywidth by height in size and consist of pixels ofpsize bytes. x0, y0, x1 and y1 are likethe gl.lrectread() parameters, i.e. the boundary isincluded in the new image.
The new boundaries need not be inside thepicture.
Pixels that fall outside the old image will have their valueset to zero.
If x0 is bigger than x1 the new image ismirrored.
The same holds for the y coordinates.
Therefore, computer-generated images ordithered images will not look nice after scaling.
Run a vertical low-pass filter over an image.
It does so by computingeach destination pixel as the average of two vertically-aligned sourcepixels.
The main use of this routine is to forestall excessiveflicker if the image is displayed on a video device that usesinterlacing, hence the name.
Convert a 8-bit deep greyscale image to a 1-bit deep image bythresholding all the pixels.
The resulting image is tightly packed andis probably only useful as an argument to mono2grey().
Convert an 8-bit greyscale image to a 1-bit monochrome image using a(simple-minded) dithering algorithm.
Convert a 1-bit monochrome image to an 8 bit greyscale or color image.All pixels that are zero-valued on input get value p0 on outputand all one-value input pixels get value p1 on output.
Toconvert a monochrome black-and-white image to greyscale pass thevalues 0 and 255 respectively.
Convert an 8-bit greyscale image to a 4-bit greyscale image withoutdithering.
Convert an 8-bit greyscale image to a 2-bit greyscale image withoutdithering.
Convert an 8-bit greyscale image to a 2-bit greyscale image withdithering.
As for dither2mono(), the dithering algorithmis currently very simple.
Convert a 4-bit greyscale image to an 8-bit greyscale image.
Convert a 2-bit greyscale image to an 8-bit greyscale image.
If set to 0, the functions in this module use a non-backwardcompatible way of representing multi-byte pixels on little-endiansystems.
This module defines three classes, IMAP4, IMAP4_SSLand IMAP4_stream, which encapsulate aconnection to an IMAP4 server and implement a large subset of theIMAP4rev1 client protocol as defined in RFC 2060.
It is backwardcompatible with IMAP4 (RFC 1730) servers, but note that the"STATUS" command is not supported in IMAP4.Three classes are provided by the imaplib module,IMAP4 is the base class:
classIMAP4
This class implements the actual IMAP4 protocol.
Three exceptions are defined as attributes of the IMAP4 class:
Exception raised on any errors.
The reason for the exception ispassed to the constructor as a string.
IMAP4 server errors cause this exception to be raised.
This is asub-class of IMAP4.error.
Note that closing the instanceand instantiating a new one will usually allow recovery from thisexception.
This exception is raised when a writable mailbox has its statuschanged by the server.
This is a sub-class ofIMAP4.error.
Some other client now has write permission,and the mailbox will need to be re-opened to re-obtain writepermission.
There's also a subclass for secure connections:
classIMAP4_SSL
This is a subclass derived from IMAP4 that connects over anSSL encrypted socket (to use this class you need a socket module thatwas compiled with SSL support).
If host is not specified,'' (the local host) is used.
If port is omitted, thestandard IMAP4-over-SSL port (993) is used.
keyfile andcertfile are also optional - they can contain a PEM formattedprivate key and certificate chain file for the SSL connection.
The second subclass allows for connections created by a child process:
classIMAP4_stream
This is a subclass derived from IMAP4 that connectsto the stdin/stdout file descriptors created by passingcommand to os.
popen2().New in version 2.3.
The following utility functions are defined:
Converts an IMAP4 INTERNALDATE string to Coordinated UniversalTime. Returns a
module tuple.
Converts an integer into a string representation using charactersfrom the set [A .. P].
Converts an IMAP4 "FLAGS" response to a tuple of individualflags.
module tuple to an IMAP4"INTERNALDATE" representation.
Returns a string in the form:"DD-Mmm-YYYY HH:MM:SS +HHMM" (including double-quotes).
Note that IMAP4 message numbers change as the mailbox changes; inparticular, after an "EXPUNGE" command performs deletions theremaining messages are renumbered.
So it is highly advisable to useUIDs instead, with the UID command.At the end of the module, there is a test section that contains a moreextensive example of usage.
Documents describing the protocol, and sources and binaries for servers implementing it, can all be found at theUniversity of Washington's IMAP Information Center(http://www.cac.washington.edu/imap/). Subsections
The imgfile module allows Python programs to access SGI imglib imagefiles (also known as .rgb files).
The module is far fromcomplete, but is provided anyway since the functionality that there isenough in some cases.
Currently, colormap files are not supported.The module defines the following variables and functions:
This exception is raised on all errors, such as unsupported file type, etc.
This function returns a tuple (x, y, z) wherex and y are the size of the image in pixels andz is the number ofbytes per pixel.
Only 3 byte RGB pixels and 1 byte greyscale pixelsare currently supported.
This function reads and decodes the image on the specified file, andreturns it as a Python string.
The string has either 1 byte greyscalepixels or 4 byte RGBA pixels.
The bottom left pixel is the first inthe string.
This format is suitable to pass to gl.lrectwrite(),for instance.
This function is identical to read but it returns an image that isscaled to the given x and y sizes.
If the filter andblur parameters are omitted scaling is done bysimply dropping or duplicating pixels, so the result will be less thanperfect, especially for computer-generated images.Alternatively, you can specify a filter to use to smoothen the imageafter scaling.
The filter forms supported are 'impulse','box', 'triangle', 'quadratic' and'gaussian'.
If a filter is specified blur is an optionalparameter specifying the blurriness of the filter.
It defaults to 1.0.
readscaled() makes no attempt to keep the aspect ratiocorrect, so that is the users' responsibility.
This function sets a global flag which defines whether the scan linesof the image are read or written from bottom to top (flag is zero,compatible with SGI GL) or from top to bottom(flag is one,compatible with X).
This function writes the RGB or greyscale data in data to imagefile file.
x and y give the size of the image,z is 1 for 1 byte greyscale images or 3 for RGB images (which arestored as 4 byte values of which only the lower three bytes are used).These are the formats returned by gl.lrectread().
The imghdr module determines the type of image contained in afile or byte stream.The imghdr module defines the following function:
Tests the image data contained in the file named by filename,and returns a string describing the image type.
If optional his provided, the filename is ignored and h is assumed tocontain the byte stream to test.
The following image types are recognized, as listed below with thereturn value from what():
You can extend the list of file types imghdr can recognize byappending to this variable:
A list of functions performing the individual tests.
This
module provides an interface to the mechanismsused to implement the import statement.
It defines thefollowing constants and functions:
Return the magic string value used to recognize byte-compiled codefiles (.pyc files).
(This value may be different for eachPython version.)
(
)
Return a list of triples, each describing a particular type of module.Each triple has the form (suffix, mode,type), where suffix is a string to be appended to themodule name to form the filename to search for, mode is the modestring to pass to the built-in open() function to open thefile (this can be 'r' for text files or 'rb' for binaryfiles), and type is the file type, which has one of the valuesPY_SOURCE, PY_COMPILED, orC_EXTENSION, described below.
Try to find the module name on the search path path.
Ifpath is a list of directory names, each directory is searchedfor files with any of the suffixes returned by get_suffixes()above.
Invalid names in the list are silently ignored (but all listitems must be strings).
If path is omitted or None, thelist of directory names given by sys.
Otherexceptions indicate problems with the arguments or environment.This function does not handle hierarchical module names (namescontaining dots).
In order to find P.M, that is, submoduleM of package P, use find_module() andload_module() to find and load package P, and then usefind_module() with the path argument set to
P.__path__.
When P itself has a dotted name, applythis recipe recursively.
Load a module that was previously found by find_module() (or byan otherwise conducted search yielding compatible results).
The name argumentindicates the full module name (including the package name, if this isa submodule of a package).
The file argument is an open file,and filename is the corresponding file name; these can beNone and '', respectively, when the module is not beingloaded from a file.
Important: the caller is responsible for closing thefile argument, if it was not None, even when an exceptionis raised.
This is best done using a try... finally statement.
Return a new empty module object called name.
This object isnot inserted in sys.modules.
acquire_lock
Acquires the interpreter's import lock for the current thread.
This lockshould be used by import hooks to ensure thread-safety when importing modules.On platforms without threads, this function does nothing.New in version 2.3.
release_lock
The following constants with integer values, defined in this module,are used to indicate the search result of find_module().
The module was found as a source file.
The module was found as a compiled code object file.
The module was found as dynamically loadable shared library.
The module was found as a Macintosh resource.
This value can only bereturned on a Macintosh.
The module was found as a package directory.
The module was found as a built-in module.
The module was found as a frozen module (see init_frozen()).
Unused.
Initialize the built-in module called name and return its moduleobject.
If the module was already initialized, it will be initializedagain.
A few modules cannot be initialized twice -- attemptingto initialize these again will raise an ImportErrorexception.
If there is nobuilt-in module called name, None is returned.
Initialize the frozen module called name and return its moduleobject.
If there is no frozen module called name,None is returned.
(Frozen modules are modules written inPython whose compiled byte-code object is incorporated into acustom-built Python interpreter by Python's freeze utility.See Tools/freeze/ for now.)
Return 1 if there is a built-in module called name whichcan be initialized again.
Return -1 if there is a built-inmodule called name which cannot be initialized again (seeinit_builtin()).
Return 0 if there is no built-inmodule called name.
Return True if there is a frozen module (seeinit_frozen()) called name, or False if there isno such module.
Load and initialize a module implemented as a byte-compiled code fileand return its module object.
If the module was already initialized,it will be initialized again.
The name argument is usedto create or access a module object.
The pathname argumentpoints to the byte-compiled code file.
The fileargument is the byte-compiled code file, open for reading in binarymode, from the beginning.It must currently be a real file object, not auser-defined class emulating a file.
Load and initialize a module implemented as a dynamically loadableshared library and return its module object.
If the module wasalready initialized, it will be initialized again.
Some modulesdon't like that and may raise an exception.
The pathnameargument must point to the shared library.
The name argument isused to construct the name of the initialization function: an externalC function called "initname()" in the shared library iscalled.
The optional file argument is ignored.
(Note: usingshared libraries is highly system dependent, and not all systemssupport it.)
Load and initialize a module implemented as a Python source file andreturn its module object.
If the module was already initialized, itwill be initialized again.
The name argument is used tocreate or access a module object.
The pathname argument pointsto the source file.
The file argument is the sourcefile, open for reading as text, from the beginning.It must currently be a real fileobject, not a user-defined class emulating a file.
Note that if aproperly matching byte-compiled file (with suffix .pyc or.pyo) exists, it will be used instead of parsing the givensource file. Subsections
3.10.1 Mapping Operators to
The inspect module provides several useful functionsto help get information about live objects such as modules,classes, methods, functions, tracebacks, frame objects, andcode objects.
For example, it can help you examine thecontents of a class, retrieve the source code of a method,extract and format the argument list for a function, orget all the information you need to display a detailed traceback.There are four main kinds of services provided by this module:type checking, getting source code, inspecting classesand functions, and examining the interpreter stack. Subsections
5.15.3 Protocol for automatic
This module implements a number of iterator building blocks inspiredby constructs from the Haskell and SML programming languages.
Eachhas been recast in a form suitable for Python.The module standardizes a core set of fast, memory efficient toolsthat are useful by themselves or in combination.
Standardization helpsavoid the readability and reliability problems which arise when manydifferent individuals create their own slightly varying implementations,each with their own quirks and naming conventions.The tools are designed to combine readily with one another.
This makesit easy to construct more specialized tools succinctly and efficientlyin pure Python.For instance, SML provides a tabulation tool: tabulate(f)which produces a sequence f(0), f(1), ....
This toolboxprovides imap() and count() which can be combinedto form imap(f, count()) and produce an equivalent result.Likewise, the functional tools are designed to work well with thehigh-speed functions provided by the
The module jpeg provides access to the jpeg compressor anddecompressor written by the Independent JPEG Group
(IJG).
JPEG is a standard forcompressing pictures; it is defined in ISO 10918.
For details on JPEGor the Independent JPEG Group software refer to the JPEG standard orthe documentation provided with the software.A portable interface to JPEG image files is available with the PythonImaging Library (PIL) by Fredrik Lundh.
Information on PIL isavailable at http://www.pythonware.com/products/pil/.
The jpeg module defines an exception and some functions.
Exception raised by compress() and decompress()in case of errors.
Treat data as a pixmap of width w and height h, withb bytes per pixel.
The data is in SGI GL order, so the firstpixel is in the lower-left corner.
format.
Data is a string containing a picture in JFIF
format. Itreturns a tuple (data, width, height,bytesperpixel).
Again, the data is suitable to pass togl.lrectwrite().
Set various options. Subsequent compress() anddecompress() calls will use these options.
The followingoptions are available:
Option
Effect
Force output to be grayscale, even if input is RGB.
Set the quality of the compressed image to a value between0 and 100 (default is 75).
This only affectscompression.
Perform Huffman table optimization.
Takes longer, but results insmaller compressed image.
This only affects compression.
Perform inter-block smoothing on uncompressed image.
Only usefulfor low-quality images.
This only affects decompression.
This module allows a Python program to determine if a string is akeyword.
Return true if s is a Python keyword.
Sequence containing all the keywords defined for the interpreter.
Ifany keywords are defined to only be active when particular__future__ statements are in effect, these will be includedas well.
The linecache module allows one to get any line from any file,while attempting to optimize internally, using a cache, the common casewhere many lines are read from a single file.
This is used by the
module to retrieve source lines for inclusion in the formatted traceback.The linecache module defines the following functions:
Get line lineno from file named filename.
search path,sys.path.
Clear the cache.
Use this function if you no longer need lines fromfiles previously read using getline().
Check the cache for validity.
Use this function if files in the cache may have changed on disk, and you require the updated version.
Iffilename is omitted, it will check the whole cache entries.
Example:
The locale module opens access to the POSIX localedatabase and functionality.
The POSIX locale mechanism allowsprogrammers to deal with certain cultural issues in an application,without requiring the programmer to know all the specifics of eachcountry where the software is executed.The locale module is implemented on top of the_locale
module, which in turn uses anANSI C locale implementation if available.The locale module defines the following exception andfunctions:
Exception raised when setlocale() fails.
If locale is specified, it may be a string, a tuple of theform (language code, encoding), or None.If it is a tuple, it is converted to a string using the localealiasing engine.
If locale is given and not None,setlocale() modifies the locale setting for thecategory.
The available categories are listed in the datadescription below. The value is the name of a locale.
An emptystring specifies the user's default settings.
If the modification ofthe locale fails, the exception Error is raised.
Ifsuccessful, the new locale setting is returned.If locale is omitted or None, the current setting forcategory is returned.
setlocale() is not thread safe on most systems.Applications typically start with a call of
This sets the locale for all categories to the user's defaultsetting (typically specified in the LANG environmentvariable).
If the locale is not changed thereafter, usingmultithreading should not cause problems.
Changed in version 2.0:Added support for tuple values of the localeparameter.
Returns the database of the local conventions as a dictionary.This dictionary has the following strings as keys:
Key
Category
Decimal point character.
Sequence of numbers specifying which relative positionsthe 'thousands_sep' is expected.
If the sequence isterminated with CHAR_MAX, no further groupingis performed.
If the sequence terminates with a 0, the last group size is repeatedly used.
Character used between groups.
International currency symbol.
Local currency symbol.
Decimal point used for monetary values.
Group separator used for monetary values.
Equivalent to 'grouping', used for monetaryvalues.
Symbol used to annotate a positive monetary value.
Symbol used to annotate a negative monetary value.
Number of fractional digits used in local formattingof monetary values.
Number of fractional digits used in internationalformatting of monetary values.
The possible values for 'p_sign_posn' and'n_sign_posn' are given below.
Explanation
Currency and value are surrounded by parentheses.
The sign should precede the value and currency symbol.
The sign should follow the value and currency symbol.
The sign should immediately precede the value.
The sign should immediately follow the value.
Nothing is specified in this locale.
Return some locale-specific information as a string.
This function isnot available on all systems, and the set of possible options mightalso vary across platforms.
The possible argument values are numbers,for which symbolic constants are available in the locale module.
Tries to determine the default locale settings and returnsthem as a tuple of the form (language code,encoding).According to POSIX, a program which has not calledsetlocale(LC_ALL, '') runs using the portable 'C'locale.
Calling setlocale(LC_ALL, '') lets it use thedefault locale as defined by the LANG variable.
Since wedo not want to interfere with the current locale setting we thusemulate the behavior in the way described above.To maintain compatibility with other platforms, not only theLANG variable is tested, but a list of variables given asenvvars parameter.
The first found to be defined will beused. envvars defaults to the search path used in GNU gettext;it must always contain the variable name "LANG".
Returns the current setting for the given locale category assequence containing language code, encoding.category may be one of the LC_* values exceptLC_ALL.
Return the encoding used for text data, according to userpreferences.
Returns a normalized locale code for the given locale name.
Thereturned locale code is formatted for use withsetlocale().
)
Compares two strings according to the currentLC_COLLATE setting.
As any other compare function,returns a negative, or a positive value, or 0, depending onwhether string1 collates before or after string2 or isequal to it.
Transforms a string to one that can be used for the built-infunction cmp()
, and still returnslocale-aware results.
This function can be used when the samestring is compared repeatedly, e.g. when collating a sequence ofstrings.
Formats a number val according to the currentLC_NUMERIC setting.
The format follows the conventionsof the % operator.
For floating point values, the decimalpoint is modified if appropriate.
If grouping is true, alsotakes the grouping into account.
Formats a floating point number using the same format as thebuilt-in function str(float), but takes the decimalpoint into account.
Converts a string to a floating point number, following theLC_NUMERIC settings.
Converts a string to an integer, following theLC_NUMERIC conventions.
Locale category for the character type functions.
Depending on thesettings of this category, the functions of module
dealing with case change their behaviour.
Locale category for sorting strings.
The functionsstrcoll() and strxfrm() of thelocale module are affected.
Locale category for the formatting of time.
The functiontime. strftime() follows these conventions.
The availableoptions are available from the localeconv() function.
Locale category for message display.
Python currently does notsupport application specific locale-aware messages.
Messagesdisplayed by the operating system, like those returned byos. strerror() might be affected by this category.
Locale category for formatting numbers.
The functionsformat(), atoi(), atof() andstr() of the locale module are affected by thatcategory.
All other numeric formatting operations are notaffected.
Combination of all locale settings.
If this flag is used when thelocale is changed, setting the locale for all categories isattempted.
If that fails for any category, no category is changed atall.
When the locale is retrieved using this flag, a stringindicating the setting for all categories is returned.
This stringcan be later used to restore the settings.
This is a symbolic constant used for different values returned bylocaleconv().
The nl_langinfo function accepts one of the following keys.Most descriptions are taken from the corresponding description in theGNU C library.
Return a string with the name of the character encoding used in theselected locale.
Return a string that can be used as a format string for strftime(3) torepresent time and date in a locale-specific way.
Return a string that can be used as a format string for strftime(3) torepresent a date in a locale-specific way.
Return a string that can be used as a format string for strftime(3) torepresent a time in a locale-specific way.
The return value can be used as a format string for `strftime' torepresent time in the am/pm format.
Return name of the n-th day of the week.
Warning:Thisfollows the US convention of DAY_1 being Sunday, not theinternational convention (ISO 8601) that Monday is the first day ofthe week.
Return abbreviated name of the n-th day of the week.
Return name of the n-th month.
Return abbreviated name of the n-th month.
Return radix character (decimal dot, decimal comma, etc.)
Return separator character for thousands (groups of three digits).
Return a regular expression that can be used with the regexfunction to recognize a positive response to a yes/no question.
Warning:The expression is in the syntax suitable for theregex() function from the C library, which might differfrom the syntax used in
.
Return a regular expression that can be used with the regex(3)function to recognize a negative response to a yes/no question.
Return the currency symbol, preceded by "-" if the symbol shouldappear before the value, "+" if the symbol should appear after thevalue, or "." if the symbol should replace the radix character.
The return value represents the era used in the current locale.Most locales do not define this value.
An example of a locale whichdoes define this value is the Japanese one.
The format of thereturned string is not specified, and therefore you should not assumeknowledge of it on different systems.
The return value gives the year in the relevant era of the locale.
This return value can be used as a format string forstrftime to represent dates and times in a locale-specificera-based way.
This return value can be used as a format string forstrftime to represent time in a locale-specific era-basedway.
The return value is a representation of up to 100 values used torepresent the values 0 to 99.
Each instance has aname, and they are conceptually arranged in a name space hierarchyusing dots (periods) as separators.
As aconvenience, you indicate the importance of a logged message by callingan appropriate method of Logger.
The methods aredebug(), info(), warning(), error() andcritical(), which mirror the default levels.
You are notconstrained to use these levels: you can specify your own and use amore general Logger method, log(), which takes anexplicit level argument.Levels can also be associated with loggers, being set either by thedeveloper or through loading a saved logging configuration.
When alogging method is called on a logger, the logger compares its ownlevel with the level associated with the method call.
If the logger'slevel is higher than the method call's, no logging message is actuallygenerated.
Handlers are responsible for ensuring that a loggedmessage (in the form of a LogRecord) ends up in a particularlocation (or set of locations) which is useful for the target audience forthat message (such as end users, support desk staff, system administrators,developers).
Handlers are passed LogRecord instances intended forparticular destinations.
Most user-defined subclassesof Handler will need to override this emit().In addition to the base Handler class, many useful subclassesare provided:
StreamHandler instances send error messages tostreams (file-like objects).
FileHandler instances send error messages to diskfiles.
BaseRotatingHandler is tha base class for handlers thatrotate log files at a certain point.
It is not meant to be instantiateddirectly.
Instead, use RotatingFileHandler orTimedRotatingFileHandler.
RotatingFileHandler instances send error messages to diskfiles, with support for maximum log file sizes and log file rotation.
TimedRotatingFileHandler instances send error messages todisk files rotating the log file at certain timed intervals.
SocketHandler instances send error messages toTCP/IP sockets.
DatagramHandler instances send error messages to UDPsockets.
SMTPHandler instances send error messages to adesignated email address.
SysLogHandler instances send error messages to aUnix syslog daemon, possibly on a remote machine.
NTEventLogHandler instances send error messages to aWindows NT/2000/XP event log.
MemoryHandler instances send error messages to abuffer in memory, which is flushed whenever specific criteria aremet.
HTTPHandler instances send error messages to anHTTP server using either "GET" or "POST" semantics.
The StreamHandler and FileHandler classes are definedin the core logging package.
The other handlers are defined in a sub-module, logging.
handlers.
(There is also another sub-module,logging.config, for configuration functionality.)Logged messages are formatted for presentation through instances of theFormatter class.
They are initialized with a format stringsuitable for use with the % operator and a dictionary.For formatting multiple messages in a batch, instances ofBufferingFormatter can be used.
If any filter returns a falsevalue, the message is not processed further.The basic Filter functionality allows filtering by specific loggername.
If this feature is used, messages sent to the named logger and itschildren are allowed through the filter, and all others dropped.In addition to the classes described above, there are a number of module-level functions.
)
Return a logger with the specified name or, if no name is specified, returna logger which is the root logger of the hierarchy.
If specified, the nameis typically a dot-separated hierarchical name like "a", "a.b"or "a.b.c.d".
Choice of these names is entirely up to the developerwho is using logging.All calls to this function with a given name return the same logger instance.This means that logger instances never need to be passed between differentparts of an application.
Return either the standard Logger class, or the last class passed tosetLoggerClass().
This function may be called from within a newclass definition, to ensure that installing a customised Logger classwill not undo customisations already applied by other code.
Logs a message with level DEBUG on the root logger.The msg is the message format string, and the args are thearguments which are merged into msg.
The only keyword argument inkwargs which is inspected is exc_info which, if it does notevaluate as false, causes exception information to be added to the loggingmessage.
If an exception tuple (in the format returned bysys.exc_info()) is provided, it is used; otherwise,sys.exc_info() is called to get the exception information.
Logs a message with level INFO on the root logger.The arguments are interpreted as for debug().
Logs a message with level WARNING on the root logger.The arguments are interpreted as for debug().
Logs a message with level ERROR on the root logger.The arguments are interpreted as for debug().
Logs a message with level CRITICAL on the root logger.The arguments are interpreted as for debug().
Exception infois added to the logging message.
This function should only be calledfrom an exception handler.
Logs a message with level level on the root logger.The other arguments are interpreted as for debug().
Provides an overriding level lvl for all loggers which takesprecedence over the logger's own level.
When the need arises totemporarily throttle logging output down across the whole application,this function can be useful.
The onlyconstraints are that all levels used must be registered using thisfunction, levels should be positive integers and they should increasein increasing order of severity.
Returns the textual representation of logging level lvl.
If thelevel is one of the predefined levels CRITICAL,ERROR, WARNING, INFO or DEBUGthen you get the corresponding string.
If you have associated levelswith names using addLevelName() then the name you have associatedwith lvl is returned.
If a numeric value corresponding to one of thedefined levels is passed in, the corresponding string representation isreturned.
Otherwise, the string "Level %s" % lvl is returned.
Creates and returns a new LogRecord instance whose attributes aredefined by attrdict.
This function is useful for taking a pickledLogRecord attribute dictionary, sent over a socket, and reconstitutingit as a LogRecord instance at the receiving end.
Does basic configuration for the logging system by creating aStreamHandler with a default Formatter and adding it tothe root logger.
The functions debug(), info(),warning(), error() and critical() will callbasicConfig() automatically if no handlers are defined for theroot logger.
Informs the logging system to perform an orderly shutdown by flushing andclosing all handlers.
Tells the logging system to use the class klass when instantiating alogger.
The class should define __init__() such that only a nameargument is required, and the __init__() should callLogger.__init__().
This function is typically called before anyloggers are instantiated by applications which need to use custom loggerbehavior.
The proposal which described this feature for inclusion inthe Python standard library.
Original Python logging package
This is the original source for the loggingpackage.
The version of the package available from thissite is suitable for use with Python 1.5.2, 2.1.x and 2.2.x,which do not include the logging package in the standardlibrary. Subsections
This module implements the Mac OS 9 operating system dependent functionalityprovided by the standard module os
.
It isbest accessed through the os module.
This module is only available inMacPython-OS9, on MacPython-OSX posix is used.The following functions are available in this module:chdir(),close(),dup(),fdopen(),getcwd(),lseek(),listdir(),mkdir(),open(),read(),rename(),rmdir(),stat(),sync(),unlink(),write(),as well as the exception error.
Note that the timesreturned by stat() are floating-point values, like all timevalues in MacPython-OS9.
macerrors cotains constant definitions for many Mac OS errorcodes.
Deprecated since release 2.3.The macfs module should be considered obsolete.
ForFSSpec, FSRef and Alias handling use theCarbon.File or
module. For filedialogs use the
module.
Also, this module isknown to not work correctly with UFS partitions.
This module provides access to Macintosh FSSpec handling, theAlias Manager, finder aliases and the Standard File package.
Whenever a function or method expects a file argument, thisargument can be one of three things: (1) a full or partial Macintoshpathname, (2) an FSSpec object or (3) a 3-tuple(wdRefNum, parID, name) as described inInside Macintosh: Files.
An FSSpec can point toa non-existing file, as long as the folder containing the file exists.Under MacPython the same is true for a pathname, but not under unix-Pytonbecause of the way pathnames and FSRefs works.
See Apple's documentationfor details.A description of aliases and theStandard File package can also be found there.
Create an FSSpec object for the specified file.
Create an FSSpec object given the raw data for the Cstructure for the FSSpec as a string.
This is mainly usefulif you have obtained an FSSpec structure over a network.
Create an Alias object given the raw data for the Cstructure for the alias as a string.
This is mainly useful if youhave obtained an FSSpec structure over a network.
Create a zero-filled FInfo object.
Resolve an alias file.
Present the user with a standard ``open input file''dialog.
Optionally, you can pass up to four 4-character file types to limitthe files the user can choose from.
The function returns an FSSpecobject and a flag indicating that the user completed the dialogwithout cancelling.
Similar to StandardGetFile() but allows you to specify aprompt which will be displayed at the top of the dialog.
The functionreturns an FSSpec object and a flag indicating that the usercompleted the dialog without cancelling.
Present the user with a non-standard ``select a directory'' dialog.
Youhave to first open the directory before clicking on the ``select currentdirectory'' button. prompt is the prompt string which will bedisplayed at the top of the dialog.
Return an FSSpec object anda success-indicator.
Set the folder that is initially presented to the user when one ofthe file selection dialogs is presented. fsspec should point toa file in the folder, not the folder itself (the file need not exist,though).
If no argument is passed the folder will be set to thecurrent directory, i.e. what os.
getcwd() returns.Note that starting with System 7.5 the user can change Standard Filebehaviour with the ``general controls'' control panel, thereby makingthis call inoperative.
Locates one of the ``special'' folders that Mac OS knows about, such asthe trash or the Preferences folder. where is the disk tosearch, which is the 4-character string specifying which folder tolocate.
Setting create causes the folder to be created if itdoes not exist.
Returns a (vrefnum, dirid) tuple.The constants for where and which can be obtained from thestandard module Carbon.Folders.
Return a minimal alias object that points to the given file, whichmust be specified as a full pathname.
This is the only way to create anAlias pointing to a non-existing file.
Locate the application with 4-character creator code creator.
Thefunction returns an FSSpec object pointing to the application.
Subsections 2.3.1 FSSpec Objects
This module contains some convenience routines for file-manipulationon the Macintosh.
All file parameters can be specified aspathnames, FSRef or FSSpec objects.
This moduleexpects a filesystem which supports forked files, so it should notbe used on UFS partitions.The macostools module defines the following functions:
Copy file src to dst.
Custom icons, comments and icon position are not copied.
Recursively copy a file tree from src to dst, creatingfolders as needed. src and dst should be specified aspathnames.
Create a finder alias dst pointing to src.
Tell the finder that some bits of finder-information such as creatoror type for file dst has changed.
The file can be specified bypathname or fsspec.
This call should tell the finder to redraw thefiles icon.
The buffer size for copy, default 1 megabyte.
Note that the process of creating finder aliases is not specified inthe Apple documentation. Hence, aliases created with mkalias()could conceivably have incompatible behaviour in some cases.
This module is the Macintosh implementation of the os.
pathmodule.
It is most portably accessed asos.
fordocumentation of os.
path.The following functions are available in this module:normcase(),normpath(),isabs(),join(),split(),isdir(),isfile(),walk(),exists().For other functions available in os.
path dummy counterpartsare available.
macresource helps scripts finding their resources, such asdialogs and menus, without requiring special case code for when thescript is run under MacPython, as a MacPython applet or under OSX Python.
This module defines a number of classes that allow easy and uniformaccess to mail messages in a (Unix) mailbox.
classUnixMailbox
Access to a classic Unix-style mailbox, where all messages arecontained in a single file and separated by "From "(a.k.a. "From_") lines.
The file object fp points to themailbox file.
The optional factory parameter is a callable thatshould create new message objects. factory is called with oneargument, fp by the next() method of the mailboxobject.
The default is the rfc822.Message class (see the
module - and the note below).
Note:For reasons of this module's internal implementation, you willprobably want to open the fp object in binary mode.
This isespecially important on Windows.
For maximum portability, messages in a Unix-style mailbox areseparated by any line that begins exactly with the string 'From' (note the trailing space) if preceded by exactly two newlines.Because of the wide-range of variations in practice, nothing else onthe From_ line should be considered.
However, the currentimplementation doesn't check for the leading two newlines.
This isusually fine for most applications.The UnixMailbox class implements a more strict version ofFrom_ line checking, using a regular expression that usually correctlymatched From_ delimiters.
It considers delimiter line to be separatedby "From name time
" lines.
For maximum portability,use the PortableUnixMailbox class instead.
This class isidentical to UnixMailbox except that individual messages areseparated by only "From " lines.For more information, see
classPortableUnixMailbox
A less-strict version of UnixMailbox, which considers only the"From " at the beginning of the line separating messages.
The``name time'' portion of the From line is ignored, toprotect against some variations that are observed in practice.
Thisworks since lines in the message which begin with 'From ' arequoted by mail handling software at delivery-time.
classMmdfMailbox
Access an MMDF-style mailbox, where all messages are containedin a single file and separated by lines consisting of 4 control-Acharacters.
The file object fp points to the mailbox file.Optional factory is as with the UnixMailbox class.
classMHMailbox
Access an MH mailbox, a directory with each message in a separatefile with a numeric name.The name of the mailbox directory is passed in dirname.
factory is as with the UnixMailbox class.
classMaildir
Access a Qmail mail directory.
All new and current mail for themailbox specified by dirname is made available.
classBabylMailbox
Access a Babyl mailbox, which is similar to an MMDF mailbox.
InBabyl format, each message has two sets of headers, theoriginal headers and the visible headers.
The originalheaders appear before a line containing only '*** EOOH ***'(End-Of-Original-Headers) and the visible headers appear after theEOOH line.
Babyl-compliant mail readers will show you only thevisible headers, and BabylMailbox objects will return messagescontaining only the visible headers.
You'll have to do your ownparsing of the mailbox file to get at the original headers.
Mailmessages start with the EOOH line and end with a line containing only'037014'. factory is as with theUnixMailbox class.
module is deprecated, it isrecommended that you use the
package to createmessage objects from a mailbox.
(The default can't be changed forbackwards compatibility reasons.)
The safest way to do this is withbit of code:
The above wrapper is defensive against ill-formed MIME messages in themailbox, but you have to be prepared to receive the empty string fromthe mailbox's next() method.
On the other hand, if youknow your mailbox contains only well-formed MIME messages, you cansimplify this to:
Description of thetraditional ``mbox'' mailbox format.
Description of the``maildir'' mailbox format.
A description of problems with relying on theContent-Length: header for messages stored inmailbox files. Subsections
Mailcap files are used to configure how MIME-aware applications suchas mail readers and Web browsers react to files with different MIMEtypes. (The name ``mailcap'' is derived from the phrase ``mailcapability''.)
For example, a mailcap file might contain a line like"video/mpeg; xmpeg %s".
Then, if the user encounters an emailmessage or Web document with the MIME type video/mpeg,"%s" will be replaced by a filename (usually one belonging to atemporary file) and the xmpeg program can be automaticallystarted to view the file.The mailcap format is documented in RFC 1524, ``A User AgentConfiguration Mechanism For Multimedia Mail Format Information,'' butis not an Internet standard.
However, mailcap files are supported onmost Unix systems.
Return a 2-tuple; the first element is a string containing the commandline to be executed(which can be passed to os.
system()), and the second element isthe mailcap entry for a given MIME type.
If no matching MIMEtype can be found, (None, None) is returned.
key is the name of the field desired, which represents the typeof activity to be performed; the default value is 'view', since in the most common case you simply want to view the body of the MIME-typeddata.
Other possible values might be 'compose' and 'edit', if youwanted to create a new body of the given MIME type or alter theexisting body data.
See RFC 1524 for a complete list of thesefields.
filename is the filename to be substituted for "%s" in thecommand line; the default value is'/dev/null' which is almost certainly not what you want, sousually you'll override it by specifying a filename.
plist can be a list containing named parameters; the defaultvalue is simply an empty list.
Each entry in the list must be astring containing the parameter name, an equals sign ("="),and the parameter's value.
Mailcap entries can contain named parameters like %{foo}, which will be replaced by thevalue of the parameter named 'foo'.
For example, if the command line"showpartial %{id} %{number} %{total}"was in a mailcap file, and plist was set to ['id=1','number=2', 'total=3'], the resulting command line would be 'showpartial 1 2 3'.
In a mailcap file, the ``test'' field can optionally be specified totest some external condition (such as the machine architecture, or thewindow system in use) to determine whether or not the mailcap lineapplies. findmatch() will automatically check suchconditions and skip the entry if the check fails.
Returns a dictionary mapping MIME types to a list of mailcap fileentries.
This dictionary must be passed to the findmatch()function.
An entry is stored as a list of dictionaries, but itshouldn't be necessary to know the details of this representation.The information is derived from all of the mailcap files found on thesystem.
Settings in the user's mailcap file $HOME/.mailcapwill override settings in the system mailcap files/etc/mailcap, /usr/etc/mailcap, and/usr/local/etc/mailcap.
An example usage:
Itis this environment in which the idiomatic ``conditional script''stanza causes a script to run:
6.8 Library-level Markup 6.7 Module-specific Markup
The markup described in this section is used to provide informationabout a module being documented.
A typical use of this markupappears at the top of the section used to document a module.
Atypical example might look like this:
\section{\module{spam} ---Access to the SPAM facility}\declaremodule{extension}{spam}\platform{Unix}\modulesynopsis{Access to the SPAM facility of \UNIX.}\moduleauthor{Jane Doe}{jane.doe@frobnitz.org}
Python packages
-- collections of modules that canbe described as a unit -- are documented using the same markup asmodules.
The name for a module in a package should be typed in``fully qualified'' form (it should include the package name).For example, a module ``foo'' in package ``bar'' should be marked asmodule{bar.foo}, and the beginning of the referencesection would appear as:
\section{\module{bar.foo} ---Module from the \module{bar} package}\declaremodule{extension}{bar.foo}\modulesynopsis{Nifty module from the \module{bar} package.}\moduleauthor{Jane Doe}{jane.doe@frobnitz.org}
Note that the name of a package is also marked usingmodule.
Requires two parameters: module type ("standard","builtin", "extension", or "
"), and the modulename.
An optional parameter should be given as the basis for themodule's ``key'' used for linking to or referencing the section.The ``key'' should only be given if the module's name contains anyunderscores, and should be the name with the underscores stripped.Note that the type parameter must be one of the valueslisted above or an error will be printed.
For modules which arecontained in packages, the fully-qualified name should be given asname parameter.
This should be the first thing after thesection used to introduce the module.
}
Specifies the portability of the module. specifier is acomma-separated list of keys that specify what platforms themodule is available on.
The keys are short identifiers;examples that are in use include "IRIX", "Mac","Windows", and "Unix".
It is important to use a keywhich has already been used when applicable.
This is used toprovide annotations in the Module Index and the HTML and GNU infooutput.
}
The text is a short, ``one line'' description of themodule that can be used as part of the chapter introduction.This is must be placed after declaremodule.The synopsis is used in building the contents of the tableinserted as the localmoduletable.
No text isproduced at the point of the markup.
This macro is used to encode information about who authored amodule.
This is currently not used to generate output, but can beused to help determine the origin of the module.
6.8 Library-level Markup
This module contains functions that can read and write Pythonvalues in a binary format.
The format is specific to Python, butindependent of machine architecture issues (e.g., you can write aPython value to a file on a PC, transport the file to a Sun, and readit back there).
Details of the format are undocumented on purpose;it may change between Python versions (although it rarelydoes).
This is not a general ``persistence'' module.
For general persistenceand transfer of Python objects through RPC calls, see the modules
The marshal module existsmainly to support reading and writing the ``pseudo-compiled'' code forPython modules of .pyc files.
Therefore, the Pythonmaintainers reserve the right to modify the marshal format in backwardincompatible ways should the need arise.
If you're serializing andde-serializing Python objects, use the pickle module instead.
Warning:The marshal module is not intended to be secure againsterroneous or maliciously constructed data.
Never unmarshal datareceived from an untrusted or unauthenticated source.
Not all Python object types are supported; in general, only objectswhose value is independent from a particular invocation of Python canbe written and read by this module.
The following types are supported:None, integers, long integers, floating point numbers,strings, Unicode objects, tuples, lists, dictionaries, and codeobjects, where it should be understood that tuples, lists anddictionaries are only supported as long as the values containedtherein are themselves supported; and recursive lists and dictionariesshould not be written (they will cause infinite loops).
Caveat: On machines where C's long int type has more than32 bits (such as the DEC Alpha), it is possible to create plain Pythonintegers that are longer than 32 bits.If such an integer is marshaled and read back in on a machine whereC's long int type has only 32 bits, a Python long integer objectis returned instead.
While of a different type, the numeric value isthe same.
(This behavior is new in Python 2.2.
Write the value on the open file.
The value must be a supportedtype.
The file must be an open file object such assys.stdout or returned by open() orposix.popen().
It must be opened in binary mode('wb' or 'w+b').If the value has (or contains an object that has) an unsupported type,a ValueError exception is raised -- but garbage datawill also be written to the file.
The object will not be properlyread back by load().
New in version 2.4:The version argument indicates the dataformat that dumps should use..
Read one value from the open file and return it.
If no valid valueis read, raise EOFError, ValueError orTypeError.
The file must be an open file object openedin binary mode ('rb' or 'r+b').
Warning:If an object containing an unsupported type wasmarshalled with dump(), load() will substituteNone for the unmarshallable type.
Return the string that would be written to a file bydump(value, file).
The value must be a supportedtype.
Raise a ValueError exception if value has (orcontains an object that has) an unsupported type.
Convert the string to a value.
If no valid value is found, raiseEOFError, ValueError orTypeError.
Extra characters in the string are ignored.
In addition, the following constants are defined:
Indicates the format that the module uses.
Version 0 is thehistorical format, version 1 (added in Python 2.4) sharesinterned strings.
The current version is 1.
Footnotes ...does).
The name of this module stems from a bit ofterminology used by the designers of Modula-3 (amongst others), whouse the term ``marshalling'' for shipping of data around in aself-contained form.
Strictly speaking, ``to marshal'' means toconvert some data from internal to external form (in an RPC buffer forinstance) and ``unmarshalling'' for the reverse process.
This module is always available.
module if you requiresupport for complex numbers.
The distinction between functions whichsupport complex numbers and those which don't is made since most usersdo not want to learn quite as much mathematics as required tounderstand complex numbers.
Exceptwhen explicitly noted otherwise, all return values are floats.Number-theoretic and representation functions:
Return the ceiling of x as a float, the smallest integer valuegreater than or equal to x.
Return the absolute value of x.
Return the floor of x as a float, the largest integer valueless than or equal to x.
Return fmod(x, y), as defined by the platform C library.Note that the Python expression
may not returnthe same result.
The intent of the C standard is thatfmod(x, y) be exactly (mathematically; to infiniteprecision) equal to
for some integern such that the result has the same sign as x andmagnitude less than abs(y).
Python's
returns a result with the sign ofy instead, and may not be exactly computable for float arguments.For example, fmod(-1e-100, 1e100) is -1e-100, but theresult of Python's -1e-100 % 1e100 is 1e100-1e-100, whichcannot be represented exactly as a float, and rounds to the surprising1e100.
For this reason, function fmod() is generallypreferred when working with floats, while Python's
is preferred when working with integers.
Return the mantissa and exponent of x as the pair(m, e). m is a float and e is aninteger such that
exactly.If x is zero, returns (0.0, 0), otherwise0.5 = abs(m) 1.
This is used to "pick apart" theinternal representation of a float in a portable way.
Return the fractional and integer parts of x.
Both resultscarry the sign of x, and both are floats.
Python floats typically carry no morethan 53 bits of precision (the same as the platform C double type), inwhich case any float x with abs(x) = 2**52necessarily has no fractional bits.Power and logarithmic functions:
Return e**x .
)
Return the logarithm of x to the given base.If the base is not specified, return the natural logarithm of x(that is, the logarithm to base e).Changed in version 2.3:base argument added.
Return the base-10 logarithm of x.
Return the square root of x.
Trigonometric functions:
Return the arc cosine of x, in radians.
Return the arc sine of x, in radians.
Return the arc tangent of x, in radians.
y, x)
Return the cosine of x radians.
Return the Euclidean norm, sqrt(x*x + y*y).This is the length of the vector from the origin to point(x, y).
Return the sine of x radians.
Return the tangent of x radians.
Angular conversion:
Converts angle x from radians to degrees.
Converts angle x from degrees to radians.
Hyperbolic functions:
Return the hyperbolic sine of x.
The module also defines two mathematical constants:
The mathematical constant pi.
The mathematical constant e.
Note:The math module consists mostly of thin wrappers aroundthe platform C math library functions.
Behavior in exceptional cases isloosely specified by the C standards, and Python inherits much of itsmath-function error-reporting behavior from the platform Cimplementation.
As a result,the specific exceptions raised in error cases (and even whether somearguments are considered to be exceptional at all) are not defined in anyuseful cross-platform or cross-release way.
For example, whethermath.log(0) returns -Inf or raises ValueError orOverflowError isn't defined, and incases where math.log(0) raises OverflowError,math.log(0L) may raise ValueError instead.
This module implements the interface to RSA's MD5 message digest
algorithm (see also Internet RFC 1321).
Its use is quitestraightforward: use new() to create an md5 object.You can now feed this object with arbitrary strings using theupdate() method, and at any point you can ask it for thedigest (a strong kind of 128-bit checksum,a.k.a.
``fingerprint'') of the concatenation of the strings fed to itso far using the digest() method.
For example, to obtain the digest of the string 'Nobody inspectsthe spammish repetition':
More condensed:
The following values are provided as constants in the module and asattributes of the md5 objects returned by new(): digest_size
The size of the resulting digest in bytes.
This is always16.
md5 objects support the following methods:
Return a new md5 object.
If arg is present, the method callupdate(arg) is made.
For backward compatibility reasons, this is an alternative name for thenew() function.
An md5 object has the following methods:
Update the md5 object with the string arg.
Repeated calls areequivalent to a single call with the concatenation of all thearguments: m.update(a); m.update(b) is equivalent tom. update(a+b).
Return the digest of the strings passed to the update()method so far.
This is a 16-byte string which may containnon-ASCII characters, including null bytes.
Like digest() except the digest is returned as a string oflength 32, containing only hexadecimal digits.
This may be used to exchange the value safely in email or other non-binaryenvironments.
Return a copy (``clone'') of the md5 object.
This can be used toefficiently compute the digests of strings that share a common initialsubstring. See Also:
Similar module implementing the Secure HashAlgorithm (SHA).
The SHA algorithm is considered amore secure hash.
The mhlib module provides a Python interface to MH folders andtheir contents.The module contains three basic classes, MH, which represents aparticular collection of folders, Folder, which represents a singlefolder, and Message, which represents a single message.
classMH
MH represents a collection of MH folders.
The Folder class represents a single folder and its messages.
classMessage
Message objects represent individual messages in a folder.
TheMessage class is derived from mimetools.Message. Subsections
12.6.1 Additional Methods of
package should be used inpreference to the mimetools module.
Thismodule is present only to maintain backwardcompatibility.
This module defines a subclass of the
module'sMessage class and a number of utility functions that areuseful for the manipulation for MIME multipart or encoded message.It defines the following items:
Return a new instance of the Message class.
This is asubclass of the rfc822.Message class, with some additionalmethods (see below).
The seekable argument has the same meaningas for rfc822.Message.
Return a unique string that has a high likelihood of being usable as apart boundary.
The string has the form'hostipaddr.uid.pid.timestamp.random'.
Read data encoded using the allowed MIME encoding from open fileobject input and write the decoded data to open file objectoutput.
Valid values for encoding include'base64', 'quoted-printable', 'uuencode','x-uuencode', 'uue', 'x-uue', '7bit', and '8bit'.
Decoding messages encoded in '7bit' or '8bit'has no effect.
The input is simply copied to the output.
Read data from open file object input and write it encoded usingthe allowed MIME encoding to open file object output.Valid values for encoding are the same as for decode().
Read lines from open file input until EOF and write them toopen file output.
Read blocks until EOF from open file input and write them toopen file output.
The block size is currently fixed at 8192.
Support for reading files which containdistinct parts, such as MIME data.
The MIME Frequently Asked Questions document.
For anoverview of MIME, see the answer to question 1.1 in Part 1of this document. Subsections
The mimetypes module converts between a filename or URL andthe MIME type associated with the filename extension.
If the module has not been initialized, they will callinit() if they rely on the information init()sets up.
Guess the type of a file based on its filename or URL, given byfilename.
The return value is a tuple (type,encoding) where type is None if the type can't beguessed (missing or unknown suffix) or a string of the form'type/subtype', usable for a MIMEcontent-type: header
.
Encoding suffixes are case sensitive;type suffixes are first tried case sensitively, then caseinsensitively.Optional strict is a flag specifying whether the list of knownMIME types is limited to only the official types registeredwith IANAare recognized.
When strict is true (the default), only theIANA types are supported; when strict is false, some additionalnon-standard but commonly used MIME types are also recognized.
)
Guess the extensions for a file based on its MIME type, given bytype.The return value is a list of strings giving all possible filename extensions,including the leading dot (".").
The extensions are not guaranteedto have been associated with any particular data stream, but would be mappedto the MIME type type by guess_type().Optional strict has the same meaning as with theguess_type() function.
Guess the extension for a file based on its MIME type, given bytype.The return value is a string giving a filename extension, including theleading dot (".").
The extension is not guaranteed to have beenassociated with any particular data stream, but would be mapped to the MIME type type by guess_type().
If no extension canbe guessed for type, None is returned.Optional strict has the same meaning as with theguess_type() function.
Some additional functions and data items are available for controllingthe behavior of the module.
Initialize the internal data structures.
If given, files mustbe a sequence of file names which should be used to augment thedefault type map.
If omitted, the file names to use are taken fromknownfiles.
Each file named in files orknownfiles takes precedence over those named before it.Calling init() repeatedly is allowed.
Load the type map given in the file filename, if it exists.
The type map is returned as a dictionary mapping filename extensions,including the leading dot ("."), to strings of the form'type/subtype'.
If the file filename doesnot exist or cannot be read, None is returned.
)
Add a mapping from the mimetype type to the extension ext.When the extension is already known, the new type will replace the oldone.
When the type is already known the extension will be addedto the list of known extensions.When strict is the mapping will added to the officialMIME types, otherwise to the non-standard ones.
Flag indicating whether or not the global data structures have beeninitialized.
This is set to true by init().
List of type map file names commonly installed.
These files aretypically named mime. types and are installed in differentlocations by different packages.
This is used to allowrecognition of encoded files for which the encoding and the type areindicated by the same extension.
For example, the .tgzextension is mapped to .tar.gz to allow the encoding and typeto be recognized separately.
Dictionary mapping filename extensions to encoding types.
Dictionary mapping filename extensions to MIME types.
Dictionary mapping filename extensions to non-standard, but commonlyfound MIME types.
The MimeTypes class may be useful for applications which maywant more than one MIME-type database:
classMimeTypes
This class represents a MIME-types database.
By default, itprovides access to the same database as the rest of this module.The initial database is a copy of that provided by the module, andmay be extended by loading additional mime.
types-style filesinto the database using the read() or readfp()methods.
The mapping dictionaries may also be cleared beforeloading additional data if the default data is not desired.The optional filenames parameter can be used to causeadditional files to be loaded ``on top'' of the default database.
Subsections 12.7.1 MimeTypes Objects
Deprecated since release 2.3.The
package should be used inpreference to the mimify module.
Thismodule is present only to maintain backwardcompatibility.
The mimify module defines two functions to convert mail messages toand from MIME format.
The mail message can be either a simple messageor a so-called multipart message.
Each part is treated separately.Mimifying (a part of) a message entails encoding the message asquoted-printable if it contains any characters that cannot berepresented using 7-bit ASCII. Unmimifying (a part of) a messageentails undoing the quoted-printable encoding.
Mimify and unmimifyare especially useful when a message has to be edited before beingsent.
Typical use would be:
The modules defines the following user-callable functions anduser-settable variables:
infile, outfile)
If infile and outfile are both strings,they may have the same value.If the decode_base64 argument is provided and tests true, anyparts that are coded in the base64 encoding are decoded as well.
Return a decoded version of the encoded header line in line.This only supports the ISO 8859-1 charset (Latin-1).
mime_encode_header
Return a MIME-encoded version of the header line in line.
By default, a part will be encoded as quoted-printable when itcontains any non-ASCII characters (characters with the 8th bitset), or if there are any lines longer than MAXLEN characters(default value 200).
When not specified in the mail headers, a character set must be filledin.
The string used is stored in CHARSET, and the defaultvalue is ISO-8859-1 (also known as Latin1 (latin-one)).
This module can also be used from the command line.
Usage is asfollows:
See Also:
Encode and decode MIME quoted-printable files.
mkcwproject creates project files for the Metrowerks CodeWarriordevelopment environment.
It is a helper module fordistutils but can be used separately for morecontrol.
Memory-mapped file objects behave like both strings and likefile objects.
Unlike normal string objects, however, these aremutable.
You can use mmap objects in most places where stringsare expected; for example, you can use the re module tosearch through a memory-mapped file.
Since they're mutable, you canchange a single character by doing obj[index] = 'a', orchange a substring by assigning to a slice:obj[i1:i2] = '...'.
You can also read and writedata starting at the current file position, and seek()through the file to different positions.A memory-mapped file is created by the mmap() function,which is different on Unix and on Windows.
In either case you mustprovide a file descriptor for a file opened for update.If you wish to map an existing Python file object, use itsfileno() method to obtain the correct value for thefileno parameter.
Otherwise, you can open the file using theos.
Ifaccess is not specified, Windows mmap returns a write-throughmapping.
The initial memory values for all three access types aretaken from the specified file.
Assignment to anACCESS_READ memory map raises a TypeErrorexception.
Assignment to an ACCESS_WRITE memory mapaffects both memory and the underlying file.
Assigment to anACCESS_COPY memory map affects memory but does not updatethe underlying file.
(Windows version) Maps length bytes from the filespecified by the file handle fileno, and returns a mmapobject.
If length is larger than the current size of the file,the file is extended to contain length bytes.
If lengthis 0, the maximum length of the map is the current sizeof the file, except that if the file is empty Windows raises anexception (you cannot create an empty mapping on Windows).
tagname, if specified and not None, is a string givinga tag name for the mapping.
Windows allows you to have manydifferent mappings against the same file.
If you specify the nameof an existing tag, that tag is opened, otherwise a new tag of thisname is created.
If this parameter is omitted or None, themapping is created without a name.
Avoiding the use of the tagparameter will assist in keeping your code portable between Unixand Windows.
(Unix version) Maps length bytes from the filespecified by the file descriptor fileno, and returns a mmapobject.
Thedefault value is MAP_SHARED.
access may be specified in lieu of flags and protas an optional keyword parameter.
It is an error to specify bothflags, prot and access.
See the description ofaccess above for information on how to use this parameter.
Memory-mapped file objects support the following methods:
Subsequent calls to other methods of the objectwill result in an exception being raised.
Returns the lowest index in the object where the substringstring is found.
Returns -1 on failure. startis the index at which the search begins, and defaults to zero.
Flushes changes made to the in-memory copy of a file back to disk.Without use of this call there is no guarantee that changes arewritten back before the object is destroyed.
If offset andsize are specified, only changes to the given range of byteswill be flushed to disk; otherwise, the whole extent of the mappingis flushed.
Copy the count bytes starting at offset src to thedestination index dest.
If the mmap was created withACCESS_READ, then calls to move will throw aTypeError exception.
)
Return a string containing up to num bytes starting from thecurrent file position; the file position is updated to point after thebytes that were returned.
Returns a string of length 1 containing the character at the currentfile position, and advances the file position by 1.
Returns a single line, starting at the current file position and up tothe next newline.
If the mmap was created with ACCESS_READ orACCESS_COPY, resizing the map will throw a TypeError exception.
)
Set the file's current position. whence argument is optionaland defaults to 0 (absolute file positioning); other valuesare 1 (seek relative to the current position) and 2(seek relative to the file's end).
Return the length of the file, which can be larger than the size ofthe memory-mapped area.
Returns the current position of the file pointer.
Write the bytes in string into memory at the current positionof the file pointer; the file position is updated to point after thebytes that were written.
If the mmap was created withACCESS_READ, then writing to it will throw aTypeError exception.
These functions provide access to some useful capabilities on Windowsplatforms.
Some higher-level modules use these functions to build the Windows implementations of their services.
For example, the
module uses this in the implementation of thegetpass() function.Further documentation on these functions can be found in the PlatformAPI documentation.
Subsections
The MultiFile object enables you to treat sections of a textfile as file-like input objects, with '' being returned byreadline() when a given delimiter pattern is encountered.
Thedefaults of this class are designed to make it useful for parsingMIME multipart messages, but by subclassing it and overriding methods it can be easily adapted for more general use.
classMultiFile
Create a multi-file.
You must instantiate this class with an inputobject argument for the MultiFile instance to get lines from,such as a file object returned by open().
MultiFile only ever looks at the input object'sreadline(), seek() and tell() methods, andthe latter two are only needed if you want random access to theindividual MIME parts.
To use MultiFile on a non-seekablestream object, set the optional seekable argument to false; thiswill prevent using the input object's seek() andtell() methods.
It will be useful to know that in MultiFile's view of the world, textis composed of three kinds of lines: data, section-dividers, andend-markers.
MultiFile is designed to support parsing ofmessages that may have multiple nested message parts, each with itsown pattern for section-divider and end-marker lines.
Comprehensive email handling package; supercedesthe multifile module.
The mutex module defines a class that allows mutual-exclusionvia acquiring and releasing locks.
It does not require (or imply)threading or multi-tasking, though it could be useful forthose purposes.The mutex module defines the following class:
(
)
function(argument) pair called,implying it now has the lock.Of course, no multi-threading is implied - hence the funny interfacefor lock(), where a function is called once the lock isacquired.
Subsections
New in version 1.5.2.
The netrc class parses and encapsulates the netrc file formatused by the Unix ftp program and other FTP clients.
classnetrc
A netrc instance or subclass instance encapsulates data from a netrc file.
The initialization argument, if present, specifies thefile to parse.
If no argument is given, the file .netrc in theuser's home directory will be read.
Parse errors will raiseNetrcParseError with diagnostic information including thefile name, line number, and terminating token.
Exception raised by the netrc class when syntactical errorsare encountered in source text.
Instances of this exception providethree interesting attributes: msg is a textual explanationof the error, filename is the name of the source file, andlineno gives the line number on which the error was found. Subsections
The new module allows an interface to the interpreter objectcreation functions.
This is for use primarily in marshal-type functions,when a new object needs to be created ``magically'' and not by using theregular creation functions.
This function creates an instance of class with dictionarydict without calling the __init__() constructor.
Ifdict is omitted or None, a new, empty dictionary iscreated for the new instance.
Note that there are no guarantees thatthe object will be in a consistent state.
This function will return a method object, bound to instance, orunbound if instance is None. function must becallable.
Returns a (Python) function with the given code and globals.
Ifname is given, it must be a string or None.
If it is astring, the function will have the given name, otherwise the functionname will be taken from
code.co_name.
Ifargdefs is given, it must be a tuple and will be used todetermine the default values of parameters.
This function is an interface to the PyCode_New() Cfunction.
This function returns a new module object with name name.
name must be a string.
This function returns a new class object, with name name, derivedfrom baseclasses (which should be a tuple of classes) and withnamespace dict.
Availability: UNIX.
Return a dictionary mapping key to value such thatmatch(key, mapname)==value
.Note that both keys and values of the dictionary are arbitraryarrays of bytes.Note that mapname is first checked if it is an alias to anothername.
Return a list of all valid maps.
The nis module defines the following exception:
An error raised when a NIS function returns an error code.
This module defines the class NNTP which implements the clientside of the NNTP protocol.
It can be used to implement a news readeror poster, or automated news processors.
For more information on NNTP(Network News Transfer Protocol), see Internet RFC 977.Here are two small examples of how it can be used.
To list somestatistics about a newsgroup and print the subjects of the last 10articles:
To post an article from a file (this assumes that the article hasvalid headers):
The module itself defines the following items:
classNNTP
Return a new instance of the NNTP class, representing aconnection to the NNTP server running on host host, listening atport port.
The default port is 119.
If the optionaluser and password are provided, or if suitable credentials are present in /.netrc and theoptional flag usenetrc is true (the default),the "AUTHINFO USER" and "AUTHINFO PASS" commands are used toidentify and authenticate the user to the server.
If the optionalflag readermode is true, then a "mode reader" command issent before authentication is performed.
Reader mode is sometimesnecessary if you are connecting to an NNTP server on the local machineand intend to call reader-specific commands, such as "group".
Changed in version 2.4:usenetrc argument added.
classNNTPError
Derived from the standard exception Exception, this is the baseclass for all exceptions raised by the nntplib module.
classNNTPReplyError
Exception raised when an unexpected reply is received from theserver.
For backwards compatibility, the exception error_replyis equivalent to this class.
classNNTPTemporaryError
Exception raised when an error code in the range 400-499 isreceived.
For backwards compatibility, the exceptionerror_temp is equivalent to this class.
classNNTPPermanentError
Exception raised when an error code in the range 500-599 isreceived.
For backwards compatibility, the exceptionerror_perm is equivalent to this class.
classNNTPProtocolError
Exception raised when a reply is received from the server that doesnot begin with a digit in the range 1-5.
For backwardscompatibility, the exception error_proto is equivalent to thisclass.
classNNTPDataError
Exception raised when there is some error in the response data.
Forbackwards compatibility, the exception error_data isequivalent to this class. Subsections
nsremote is a wrapper around the Netscape OSA modules thatallows you to easily send your browser to a given URL.
. Macintosh Library Modules
The operator module exports a set of functions implemented in Ccorresponding to the intrinsic operators of Python.
For example,operator.add(x, y) is equivalent to the expression x+y.
Perform ``rich comparisons'' between a and b.
Specifically,lt(a, b) is equivalent to
,le(a, b) is equivalent to
,eq(a, b) is equivalent to
,ne(a, b) is equivalent to
,gt(a, b) is equivalent to
a b
a = b
.Note that unlike the built-in cmp(), these functions canreturn any value, which may or may not be interpretable as a Booleanvalue.
See the
for more informations about rich comparisons.New in version 2.2.
The logical operations are also generally applicable to all objects,and support truth tests, identity tests, and boolean operations:
Return the outcome of not o.
(Note that there is no__not__() method for object instances; only the interpretercore defines this operation.
The result is affected by the__nonzero__() and __len__() methods.)
Return True if o is true, and Falseotherwise.
This is equivalent to using the boolconstructor.
Return
The mathematical and bitwise operations are the most numerous:
Return the absolute value of o.
Return a + b, for a and b numbers.
Return the bitwise and of a and b.
Return a / b when __future__.division is notin effect.
This is also known as ``classic'' division.
Return a // b.New in version 2.2.
(
Return the bitwise inverse of the number o.
Return a shifted left by b.
Return a % b.
Return a * b, for a and b numbers.
Return o negated.
Return the bitwise or of a and b.
Return o positive.
Return a ** b, for a and b numbers.New in version 2.3.
Return a shifted right by b.
Return a - b.
Return a / b when __future__.division is ineffect.
This is also known as division.New in version 2.2.
Return the bitwise exclusive or of a and b.
Operations which work with sequences include:
Return a + b for a and b sequences.
Return the outcome of the test b in a.Note the reversed operands.
The name __contains__() wasadded in Python 2.0.
Return the number of occurrences of b in a.
Remove the value of a at index b.
a, b, c)
Delete the slice of a from index b to index c -1.
a, b)
Return the slice of a from index b to index c -1.
Return the index of the first of occurrence of b in a.
Return a * b where a is a sequence andb is an integer.
Deprecated since release 2.0.Use contains() instead.
Alias for contains().
Set the value of a at index b to c.
The operator module also defines a few predicates to test thetype of objects.
Note:Be careful not to misinterpret theresults of these functions; only isCallable() has anymeasure of reliability with instance objects.
For example:
Deprecated since release 2.0.Use the callable() built-in function instead.
Returns true if the object o can be called like a function,otherwise it returns false.
True is returned for functions, bound andunbound methods, class objects, and instance objects which support the__call__() method.
Returns true if the object o supports the mapping interface.This is true for dictionaries and all instance objects.
Warning:There is no reliable way to test if an instancesupports the complete mapping protocol since the interface itself isill-defined.
This makes this test less useful than it otherwise mightbe.
Returns true if the object o represents a number.
This is truefor all numeric types implemented in C, and for all instance objects.
Warning:There is no reliable way to test if an instancesupports the complete numeric interface since the interface itself isill-defined.
Returns true if the object o supports the sequence protocol.This returns true for all objects which define sequence methods in C,and for all instance objects.
Warning:There is no reliableway to test if an instance supports the complete sequence interfacesince the interface itself is ill-defined.
This makes this test lessuseful than it otherwise might be.
Example: Build a dictionary that maps the ordinals from 0 to256 to their character equivalents.
The operator module also defines tools for generalized attributeand item lookups.
These are useful for making fast field extractorsas arguments for map(), sorted(),itertools. groupby(), or other functions that expect afunction argument.
Examples:
optparse is a more convenient, flexible, and powerful library forparsing command-line options than getopt. optparse uses a moredeclarative style of command-line parsing: you create an instance ofOptionParser, populate it with options, and parse the command line.
optparse allows users to specify options in the conventional GNU/POSIXsyntax, and additionally generates usage and help messages for you.Here's an example of using optparse in a simple script:
With these few lines of code, users of your script can now do the``usual thing'' on the command-line, for example:
As it parses the command line, optparse sets attributes of theoptions object returned by parse_args() based on user-suppliedcommand-line values.
When parse_args() returns from parsing thiscommand line, options. filename will be "outfile" andoptions.
verbose will be False. optparse supports both longand short options, allows short options to be merged together, andallows options to be associated with their arguments in a variety ofways.
Thus, the following command lines are all equivalent to the aboveexample:
Additionally, users can run one of
and optparse will print out a brief summary of your script'soptions:
6.21.1.2 What are options for?
6.21.1.3 What are positional arguments for?
6.21.2.1 Understanding option actions
6.21.2.2 The store action
6.21.2.3 Handling boolean (flag) options
6.21.2.4 Other actions
6.21.2.5 Default values
6.21.2.6 Generating help
6.21.2.7 Printing a version string
6.21.2.8 How optparse handles errors
6.21.2.9 Putting it all together
6.21.3.1 Populating the parser
6.21.3.2 Defining options
6.21.3.3 Standard option actions
6.21.3.5 Querying and manipulating your option parser
6.21.3.6 Conflicts between options
6.21.4.1 Defining a callback option
6.21.4.2 How callbacks are called
6.21.4.3 Raising errors in a callback
6.21.4.4 Callback example 1: trivial callback
6.21.4.5 Callback example 2: check option order
6.21.4.6 Callback example 3: check option order (generalized)
6.21.4.7 Callback example 4: check arbitrary condition
6.21.4.8 Callback example 5: fixed arguments
6.21.4.9 Callback example 6: variable arguments
This module provides a more portable way of using operating systemdependent functionality than importing a operating system dependentbuilt-in module like
or nt.This module searches for an operating system dependent built-in module likemac or
and exports the same functions and dataas found there.
The design of all Python's built-in operating system dependentmodules is such that as long as the same functionality is available,it uses the same interface; for example, the functionos.
This exception is raised when a function returns a system-relatederror (not for illegal argument types or other incidental errors).This is also known as the built-in exception OSError.
Theaccompanying value is a pair containing the numeric error code fromerrno and the corresponding string, as would be printed by theC function perror().
See the module
, which contains names for theerror codes defined by the underlying operating system.When exceptions are classes, this exception carries two attributes,errno and strerror.
The first holds the value ofthe C errno variable, and the latter holds the correspondingerror message from strerror().
For exceptions thatinvolve a file system path (such as chdir() orunlink()), the exception instance will contain a thirdattribute, filename, which is the file name passed to thefunction.
The name of the operating system dependent module imported.
Thefollowing names have currently been registered: 'posix','nt', 'mac', 'os2', 'ce','java', 'riscos'.
The corresponding operating system dependent standard module for pathnameoperations, such as posixpath or macpath.
Thus,given the proper imports, os.path.split(file) isequivalent to but more portable thanposixpath.split(file).
Note that this is also animportable module: it may be imported directly as
Subsections
This module implements some useful functions on pathnames.
Warning:On Windows, many of these functions do not properlysupport UNC pathnames. splitunc() and ismount()do handle them correctly.
Return the base name of pathname path.
This is the second halfof the pair returned by split(path).
Note that theresult of this function is different from theUnix basename program; where basename for'/foo/bar/' returns 'bar', the basename()function returns an empty string ('').
Return the longest path prefix (taken character-by-character) that is aprefix of all paths in list.
If list is empty, return the empty string('').
Note that this may return invalid paths because it works acharacter at a time.
Return the directory name of pathname path.
This is the firsthalf of the pair returned by split(path).
Return True if path refers to an existing path.Returns False for broken symbolic links.
Return True if path refers to an existing path.Returns True for broken symbolic links.
Equivalent to exists() on platforms lackingos.
lstat().New in version 2.4.
Return the argument with an initial component of "~" or"~user
" replaced by that user's home directory.
Aninitial "~" is replaced by the environment variableHOME; an initial "~user
" is looked up in thepassword directory through the built-in module
.
If the expansion fails, or if thepath does not begin with a tilde, the path is returned unchanged.
Onthe Macintosh, this always returns path unchanged.
Return the argument with environment variables expanded.
Substringsof the form "$name
" or "${name}" arereplaced by the value of environment variable name.
Malformedvariable names and references to non-existing variables are leftunchanged.
On the Macintosh, this always returns pathunchanged.
Return the time of last access of path. The returnvalue is a number giving the number of seconds since the epoch (see the
module).
Raise os. error if the file doesnot exist or is inaccessible.New in version 1.5.2.
Return the time of last modification of path. The returnvalue is a number giving the number of seconds since the epoch (see the
Return the system's ctime which, on some systems (like Unix) is thetime of the last change, and, on others (like Windows), is thecreation time for path.
The returnvalue is a number giving the number of seconds since the epoch (see the
module).
Return the size, in bytes, of path.
Return True if path is an absolute pathname (begins with aslash).
Return True if path is an existing regular file.
This followssymbolic links, so both islink() and isfile()can be true for the same path.
Return True if path is an existing directory.
This followssymbolic links, so both islink() and isdir() canbe true for the same path.
Return True if path refers to a directory entry that is asymbolic link.
Always False if symbolic links are not supported.
Return True if pathname path is a mount point: a point ina file system where a different file system has been mounted. Thefunction checks whether path's parent,
path/.., ison a different device than path, or whether
path/..and path point to the same i-node on the same device -- thisshould detect mount points for all Unix and POSIX variants.
Joins one or more path components intelligently.
If any component isan absolute path, all previous components are thrown away, and joiningcontinues.
The return value is the concatenation of path1, andoptionally path2, etc., with exactly one directory separator(os.sep) inserted between components, unless path2 isempty.
Note that on Windows, since there is a current directory foreach drive, os.path.join("c:", "foo") represents a pathrelative to the current directory on drive C: (c:foo), notc:foo.
Normalize the case of a pathname.
On Unix, this returns the pathunchanged; on case-insensitive filesystems, it converts the path tolowercase.
On Windows, it also converts forward slashes to backwardslashes.
Normalize a pathname.
This collapses redundant separators andup-level references, e.g.
A//B, A/./B andA/foo/../B all become A/B.
It does not normalize thecase (use normcase() for that).
On Windows, it convertsforward slashes to backward slashes.
It should be understood that this maychange the meaning of the path if it contains symbolic links!
Return True if both pathname arguments refer to the same file ordirectory (as indicated by device number and i-node number).Raise an exception if a os.
stat() call on either pathnamefails.Availability: Macintosh, Unix.
Return True if the file objects fp1 and fp2 refer to thesame file.
The two file objects may represent different filedescriptors.Availability: Macintosh, Unix.
Return True if the stat tuples stat1 and stat2 refer tothe same file.
These structures may have been returned byfstat(), lstat(), or stat().
Thisfunction implements the underlying comparison used bysamefile() and sameopenfile().Availability: Macintosh, Unix.
Split the pathname path into a pair, (head,tail) where tail is the last pathname component andhead is everything leading up to that.
The tail part willnever contain a slash; if path ends in a slash, tail willbe empty.
If there is no slash in path, head will beempty.
If path is empty, both head and tail areempty.
Trailing slashes are stripped from head unless it is theroot (one or more slashes only).
In nearly all cases,join(head, tail) equals path (the onlyexception being when there were multiple slashes separating headfrom tail).
Split the pathname path into a pair (drive,tail) where drive is either a drive specification or theempty string.
On systems which do not use drive specifications,drive will always be the empty string.
In all cases,
will be the same as path.New in version 1.3.
Split the pathname path into a pair (root, ext) such that
,and ext is empty or begins with a period and containsat most one period.
Calls the function visit with arguments(arg, dirname, names) for each directory in thedirectory tree rooted at path (including path itself, if itis a directory).
The argument dirname specifies the visiteddirectory, the argument names lists the files in the directory(gotten from os.
listdir(dirname)).The visit function may modify names toinfluence the set of directories visited below dirname, e.g., toavoid visiting certain parts of the tree.
(The object referred to bynames must be modified in place, using del or sliceassignment.)
Note:Symbolic links to directories are not treated as subdirectories, andthat walk() therefore will not visit them.
Note:The newer
.walk() generator suppliessimilar functionality and can be easier to use.
listdir() returns Unicode strings for a Unicodeargument.New in version 2.3.
Availability: Linux, FreeBSD.
This module allows you to access the OSS (Open Sound System) audiointerface.
OSS is available for a wide range of open-source andcommercial Unices, and is the standard audio interface for Linux andrecent versions of FreeBSD.
the officialdocumentation for the OSS C API
The module defines a large number of constants supplied bythe OSS device driver; see sys/soundcard.h on eitherLinux or FreeBSD for a listing .
ossaudiodev defines the following variables and functions:
This exception is raised on certain errors.
The argument is a stringdescribing what went wrong.(If ossaudiodev receives an error from a system call such asopen(), write(), or ioctl(), itraises IOError.
Open an audio device and return an OSS audio device object.
Thisobject supports many file-like methods, such as read(),write(), and fileno() (although there are subtledifferences between conventional Unix read/write semantics and those ofOSS audio devices).
It also supports a number of audio-specificmethods; see below for the complete list of methods.
device is the audio device filename to use.
If it is notspecified, this module first looks in the environment variableAUDIODEV for a device to use.
If not found, it falls back to/dev/dsp.
mode is one of 'r' for read-only (record) access,'w' for write-only (playback) access and 'rw' for both.Since many sound cards only allow one process to have the recorder orplayer open at a time, it is a good idea to open the device only for theactivity needed.
Further, some sound cards are half-duplex: they can beopened for reading or writing, but not both at once.Note the unusual calling syntax: the first argument is optional,and the second is required.
This is a historical artifact forcompatibility with the older linuxaudiodev module whichossaudiodev supersedes.
Open a mixer device and return an OSS mixer device object. device is the mixer device filename to use.
If it isnot specified, this module first looks in the environment variableMIXERDEV for a device to use.
If not found, it falls back to/dev/mixer.
Subsections 14.11.1 Audio Device Objects
The parser module provides an interface to Python's internalparser and byte-code compiler.
The primary purpose for this interfaceis to allow Python code to edit the parse tree of a Python expressionand create executable code from this.
It is also faster.There are a few things to note about this module which are importantto making use of the data structures created.
This is not a tutorialon editing the parse trees for Python code, but some examples of usingthe parser module are presented.Most importantly, a good understanding of the Python grammar processedby the internal parser is required.
For full information on thelanguage syntax, refer to the
PythonLanguage Reference
The parser itself is created from a grammarspecification defined in the file Grammar/Grammar in thestandard Python distribution.
The parse trees stored in the ASTobjects created by this module are the actual output from the internalparser when created by the expr() or suite()functions, described below.
The AST objects created bysequence2ast() faithfully simulate those structures.
Beaware that the values of the sequences which are considered``correct'' will vary from one version of Python to another as theformal grammar for the language is revised.
However, transportingcode from one Python version to another as source text will alwaysallow correct parse trees to be created in the target version, withthe only restriction being that migrating to an older version of theinterpreter will not support more recent language constructs.
Theparse trees are not typically compatible from one version to another,whereas source code has always been forward-compatible.Each element of the sequences returned by ast2list() orast2tuple() has a simple form.
Sequences representingnon-terminal elements in the grammar always have a length greater thanone.
The first element is an integer which identifies a production inthe grammar.
These integers are given symbolic names in the C headerfile Include/graminit.h and the Python module
.
Each additional element of the sequence representsa component of the production as recognized in the input string: theseare always sequences which have the same form as the parent.
Animportant aspect of this structure which should be noted is thatkeywords used to identify the parent node type, such as the keywordif in an if_stmt, are included in the node tree withoutany special treatment.
For example, the if keyword isrepresented by the tuple (1, 'if'), where 1 is thenumeric value associated with all NAME tokens, includingvariable and function names defined by the user.
The example of the if keyword above isrepresentative.
The various types of terminal symbols are defined inthe C header file Include/token.h and the Python module
.The AST objects are not required to support the functionality of thismodule, but are provided for three purposes: to allow an applicationto amortize the cost of processing complex parse trees, to provide aparse tree representation which conserves memory space when comparedto the Python list or tuple representation, and to ease the creationof additional modules in C which manipulate parse trees.
A simple``wrapper'' class may be created in Python to hide the use of ASTobjects.The parser module defines functions for a few distinctpurposes.
The most important purposes are to create AST objects andto convert AST objects to other representations such as parse treesand compiled code objects, but there are also functions which serve toquery the type of parse tree represented by an AST object.
See Also:
Useful constants representing internal nodes ofthe parse tree.
Useful constants representing leaf nodes of theparse tree and functions for testing node values.
18.1.6.1 Emulation of compile()
18.1.6.2 Information Discovery
It supports setting(conditional) breakpoints and single stepping at the source linelevel, inspection of stack frames, source code listing, and evaluationof arbitrary Python code in the context of any stack frame.
.This is currently undocumented but easily understood by reading thesource.
The extension interface uses the modulesbdb
(undocumented) and
pdb.py can also be invoked asa script to debug other scripts.
When invoked as a script, pdb will automatically enter post-mortem debuggingif the program being debugged exits abnormally.
Typical usage to inspect a crashed program is:
The module defines the following functions; each enters the debuggerin a slightly different way:
Execute the statement (given as a string) under debuggercontrol.
The optional globals and localsarguments specify the environment in which the code is executed; bydefault the dictionary of the module
isused.
(See the explanation of the exec statement or theeval() built-in function.)
Evaluate the expression (given as a string) under debuggercontrol.
When runeval() returns, it returns the value of theexpression.
Otherwise this function is similar torun().
Call the function (a function or method object, not a string)with the given arguments.
When runcall() returns, it returnswhatever the function call returned.
The debugger prompt appears assoon as the function is entered.
Enter the debugger at the calling stack frame.
This is useful tohard-code a breakpoint at a given point in a program, even if the codeis not otherwise being debugged (e.g. when an assertion fails).
Enter post-mortem debugging of the given traceback object.
Enter post-mortem debugging of the traceback found insys.last_traceback. Subsections
3.14.1 Relationship to other
The pickle module implements a fundamental, but powerfulalgorithm for serializing and de-serializing a Python objectstructure.
``Pickling'' is the process whereby a Python objecthierarchy is converted into a byte stream, and ``unpickling'' is theinverse operation, whereby a byte stream is converted back into anobject hierarchy.
Pickling (and unpickling) is alternatively known as``serialization'', ``marshalling,''
or ``flattening'',however, to avoid confusion, the terms used here are ``pickling'' and``unpickling''.This documentation describes both the pickle module and the
module.
module
Subsections 3.14.1 Relationship to other Python modules
3.14.5.1 Pickling and unpickling normal classinstances
3.14.5.2 Pickling and unpickling extension types
3.14.5.3 Pickling and unpickling external objects
The pipes module defines a class to abstract the concept ofa pipeline -- a sequence of convertors from one file to another.Because the module uses /bin/sh command lines, a POSIX orcompatible shell for os.
system() and os.
popen()is required.The pipes module defines the following class:
classTemplate
An abstraction of a pipeline.
Example:
This module provides a single function:
Extend the search path for the modules which comprise a package.Intended use is to place the following code in a package's__init__.py:
from pkgutil import extend_path__path__ = extend_path(__path__, __name__)
This will add to the package's __path__ all subdirectories ofdirectories on sys. path named after the package.
This isuseful if one wants to distribute different parts of a singlelogical package as multiple directories.It also looks for *.pkg files beginning where *matches the name argument.
This feature is similar to*.pth files (see the
module for moreinformation), except that it doesn't special-case lines startingwith import.
(This is a feature.)If the input path is not a list (as is the case for frozenpackages) it is returned unchanged.
The input path is notmodified; an extended copy is returned. Items are only appendedto the copy at the end.It is assumed that sys.
path is a sequence.
Items ofsys.path that are not (Unicode or 8-bit) strings referring toexisting directories are ignored. Unicode items on sys.
paththat cause errors when used as filenames may cause this function toraise an exception (in line with os. path.isdir() behavior).
6.30.3.1 Win95/98 specific
6.8.3.6 Replacing popen2.*
6.9.1 Popen3 and Popen4
module which have the samenames as the factory functions here, but the order of the returnvalues is more intuitive in the
module variants.The primary interface offered by this module is a trio of factoryfunctions.
For each of these, if bufsize is specified, it specifies the buffer size for the I/O pipes. mode, ifprovided, should be the string 'b' or 't'; on Windowsthis is needed to determine whether the file objects should be openedin binary or text mode.
If cmd is a string it will be passed to theshell (as with os.
system()).The only way to retrieve the return codes for the child processes isby using the poll() or wait() methods on thePopen3 and Popen4 classes; these are only available onUnix.
This information is not available when using thepopen2(), popen3(), and popen4()functions, or the equivalent functions in the
module.(Note that the tuples returned by the
module's functionsare in a different order from the ones returned by the popen2module.)
Executes cmd as a sub-process.
Returns the file objects(child_stdout, child_stdin).
Returns the file objects(child_stdout, child_stdin, child_stderr).
Returns the file objects(child_stdout_and_stderr, child_stdin).New in version 2.0.
On Unix, a class defining the objects returned by the factoryfunctions is also available.
These are not used for the Windowsimplementation, and are not available on that platform.
classPopen3
This class represents a child process.
Normally, Popen3instances are created using the popen2() andpopen3() factory functions described above.If not using one of the helper functions to create Popen3objects, the parameter cmd is the shell command to execute in asub-process.
The capturestderr flag, if true, specifies thatthe object should capture standard error output of the child process.The default is false.
If the bufsize parameter is specified, itspecifies the size of the I/O buffers to/from the child process.
classPopen4
Similar to Popen3, but always captures standard error into thesame file object as standard output.
This module defines a class, POP3, which encapsulates aconnection to a POP3 server and implements the protocol as defined inRFC 1725.
The POP3 class supports both the minimal andoptional command sets.
Theimplementation quality of POP3 servers varies widely, and too many arequite poor.
If your mailserver supports IMAP, you would be better offusing the
class, as IMAPservers tend to be better implemented.A single class is provided by the poplib module:
classPOP3
This class implements the actual POP3 protocol.
The connection iscreated when the instance is initialized.If port is omitted, the standard POP3 port (110) is used.
classPOP3_SSL
This is a subclass of POP3 that connects to the server over anSSL encrypted socket.
If port is not specified, 995, thestandard POP3-over-SSL port is used.
keyfile and certfileare also optional - they can contain a PEM formatted private key andcertificate chain file for the SSL connection.
One exception is defined as an attribute of the poplib module:
Exception raised on any errors.
The reason for the exception ispassed to the constructor as a string. See Also:
This module provides access to operating system functionality that isstandardized by the C Standard and the POSIX standard (a thinlydisguised Unix interface).
Do not import this module directly.
Instead, import themodule
, which provides a portable version of thisinterface.
On Unix, the
module provides a superset ofthe posix interface.
On non-Unix operating systems theposix module is not available, but a subset is alwaysavailable through the
interface. Once
isimported, there is no performance penalty in using it insteadof posix.
In addition,
provides some additional functionality, such as automatically callingputenv() when an entry in os.
Subsections
Deprecated since release 1.5.The locking operation that this module provides isdone better and more portably by the
.lockf() call.
This module implements some additional functionality over the built-infile objects.
In particular, it implements file locking, control overthe file flags, and an easy interface to duplicate the file object.The module defines a new file object, the posixfile object.
Ithas all the standard file object methods and adds the methodsdescribed below.
This module only works for certain flavors ofUnix, since it uses fcntl.fcntl() for file locking.
To instantiate a posixfile object, use the open() functionin the posixfile module.
The resulting object looks andfeels roughly the same as a standard file object.The posixfile module defines the following constants:
Offset is calculated from the start of the file.
Offset is calculated from the current position in the file.
Offset is calculated from the end of the file.
The posixfile module defines the following functions:
Create a new posixfile object with the given filename and mode.
Thefilename, mode and bufsize arguments areinterpreted the same way as by the built-in open()function.
Create a new posixfile object with the given standard file object.The resulting object has the same filename and mode as the originalfile object.
The posixfile object defines the following additional methods:
Lock the specified section of the file that the file object isreferring to.
The format is explainedbelow in a table.
The len argument specifies the length of thesection that should be locked.
The default is 0. startspecifies the starting offset of the section, where the default is0.
The whence argument specifies where the offset isrelative to.
It accepts one of the constants SEEK_SET,SEEK_CUR or SEEK_END.
The default isSEEK_SET.
For more information about the arguments referto the
fcntl(2) manual page on your system.
Set the specified flags for the file that the file object is referringto.
The new flags are ORed with the old flags, unless specifiedotherwise.
The format is explained below in a table.
Withoutthe flags argumenta string indicating the current flags is returned (this isthe same as the "?" modifier).
For more information about theflags refer to the
Duplicate the file object and the underlying file pointer and filedescriptor.
The resulting object behaves as if it were newlyopened.
The new object will have the given file descriptor.Otherwise the resulting object behaves as if it were newly opened.
Return the standard file object that the posixfile object is basedon.
This is sometimes necessary for functions that insist on astandard file object.
All methods raise IOError when the request fails.Format characters for the lock() method have the followingmeaning:
Format
unlock the specified region
request a read lock for the specified section
request a write lock for the specified section
In addition the following modifiers can be added to the format:
Modifier
wait until the lock has been granted
return the first lock conflicting with the requested lock, orNone if there is no conflict.
Note:
The lock returned is in the format (mode, len,start, whence, pid) where mode is a characterrepresenting the type of lock ('r' or 'w').
This modifier prevents arequest from being granted; it is for query purposes only.
Format characters for the flags() method have the followingmeanings:
append only flag
close on exec flag
no delay flag (also called non-blocking flag)
synchronization flag
turn the specified flags 'off', instead of the default 'on'
replace the flags, instead of the default 'OR' operation
return a string in which the characters represent the flags thatare set.
The "!" and "=" modifiers are mutually exclusive.
This string represents the flags after they may have been alteredby the same call.
Examples:
The pprint module provides a capability to ``pretty-print''arbitrary Python data structures in a form which can be used as inputto the interpreter.
If the formatted structures include objects whichare not fundamental Python types, the representation may not beloadable.
This may be the case if objects such as files, sockets,classes, or instances are included, as well as many other builtinobjects which are not representable as Python constants.The formatted representation keeps objects on a single line if it can,and breaks them onto multiple lines if they don't fit within theallowed width.
Construct PrettyPrinter objects explicitly ifyou need to adjust the width constraint.The pprint module defines one class:
classPrettyPrinter
Construct a PrettyPrinter instance.
This constructorunderstands several keyword parameters.
An output stream may be setusing the stream keyword; the only method used on the streamobject is the file protocol's write() method.
If notspecified, the PrettyPrinter adopts sys.stdout.
Threeadditional parameters may be used to control the formattedrepresentation.
The keywords are indent, depth, andwidth.
The amount of indentation added for each recursive levelis specified by indent; the default is one.
Other values cancause output to look a little odd, but can make nesting easier tospot.
The number of levels which may be printed is controlled bydepth; if the data structure being printed is too deep, the nextcontained level is replaced by "...".
By default, there is noconstraint on the depth of the objects being formatted.
The desiredoutput width is constrained using the width parameter; thedefault is eighty characters.
If a structure cannot be formattedwithin the constrained width, a best effort will be made.
The PrettyPrinter class supports several derivative functions:
Prints the formatted representation of object on stream,followed by a newline.
If stream is omitted, sys.stdoutis used.
Changed in version 2.4:The parameters indent, width and depthwere added.
This always returns false forrecursive objects.
Determine if object requires a recursive representation.
One more support function is also defined:
Return a string representation of object, protected againstrecursive data structures.
If the representation of objectexposes a recursive entry, the recursive reference will be representedas "Recursion on typename with id=number".
Therepresentation is not otherwise formatted.
The preferences module allows storage of user preferences inthe system-wide preferences folder, with defaults coming from theapplication itself and the possibility to override preferences forspecific situations.
10.4 What Is Deterministic
The primary entry point for the profiler is the global functionprofile.run().
It is typically used to create any profileinformation.
The reports are formatted and printed using methods ofthe class pstats.Stats.
The following is a description of allof these standard entry points and functions.
For a more in-depthview of some of the code, consider reading the later section onProfiler Extensions, which includes discussion of how to derive``better'' profilers from the classes presented, or reading the sourcecode for these modules.
This function takes a single argument that has can be passed to theexec statement, and an optional file name.
In all cases thisroutine attempts to exec its first argument, and gather profilingstatistics from the execution.
If no file name is present, then thisfunction automatically prints a simple profiling report, sorted by thestandard name string (file/line/function-name) that is presented ineach line.
The following is a typical output from such a call:
The first line indicates that this profile was generated by the call: profile.run('main()'), and hence the exec'ed string is'main()'.
The second line indicates that 2706 calls weremonitored.
Of those calls, 2004 were primitive.
for the number of calls,
for the total time spent in the given function (and excluding timemade in calls to sub-functions),
is the quotient of tottime divided by ncalls
is the total time spent in this and all subfunctions (from invocationtill exit).
This figure is accurate even for recursivefunctions.
is the quotient of cumtime divided by primitive calls
provides the respective data of each function
When there are two numbers in the first column (for example,"43/3"), then the latter is the number of primitive calls, andthe former is the actual number of calls.
Note that when the functiondoes not recurse, these two values are the same, and only the singlefigure is printed.
This function is similar to profile.run(), with addedarguments to supply the globals and locals dictionaries for thecommand string.
Analysis of the profiler data is done using this class from thepstats module:
This class constructor creates an instance of a ``statistics object''from a filename (or set of filenames).
Stats objects aremanipulated by methods, in order to print useful reports.The file selected by the above constructor must have been created bythe corresponding version of profile.
To be specific, there isno file compatibility guaranteed with future versions of thisprofiler, and there is no compatibility with files produced by otherprofilers (such as the old system profiler).If several files are provided, all the statistics for identicalfunctions will be coalesced, so that an overall view of severalprocesses can be considered in a single report.
If additional filesneed to be combined with data in an existing Stats object, theadd() method can be used. Subsections
Availability: IRIX, Linux.
The pty module defines operations for handling thepseudo-terminal concept: starting another process and being able towrite to and read from its controlling terminal programmatically.Because pseudo-terminal handling is highly platform dependant, thereis code to do it only for SGI and Linux.
Fork.
Connect the child's controlling terminal to a pseudo-terminal.Return value is (pid, fd).
Note that the child gets pid 0, and the fd is invalid.
The parent'sreturn value is the pid of the child, and fd is a filedescriptor connected to the child's controlling terminal (and alsoto the child's standard input and output).
Open a new pseudo-terminal pair, using os.
openpty() ifpossible, or emulation code for SGI and generic Unix systems.Return a pair of file descriptors (master, slave),for the master and the slave end, respectively.
Spawn a process, and connect its controlling terminal with the current process's standard io.
This is often used to baffle programs whichinsist on reading from the controlling terminal.The functions master_read and stdin_read should befunctions which read from a file-descriptor.
The defaults try to read1024 bytes each time they are called.
This module provides access to the Unix user account and passworddatabase.
It is available on all Unix versions.Password database entries are reported as a tuple-like object, whoseattributes correspond to the members of the passwd structure(Attribute field below, see pwd.h):
Index
Login name
Optional encrypted password
Numerical user ID
Numerical group ID
User name or comment field
User home directory
User command interpreter
The uid and gid items are integers, all others are strings.KeyError is raised if the entry asked for cannot be found.
Note:In traditional Unix the field pw_passwd usuallycontains a password encrypted with a DES derived algorithm (see module
).
However most modern unices use a so-called shadow password system.
On those unices thefield pw_passwd only contains a asterisk ('*') or the letter "x" where the encrypted password is stored in a file/etc/shadow which is not world readable.
It defines the following items:
Return the password database entry for the given numeric user ID.
Return the password database entry for the given user name.
Return a list of all available password database entries, in arbitrary order.
An interface to the group database, similar to this.
The pyclbr can be used to determine some limited informationabout the classes, methods and top-level functionsdefined in a module.
The informationprovided is sufficient to implement a traditional three-pane classbrowser.
The information is extracted from the source code ratherthan by importing the module, so this module is safe to use withuntrusted source code.
This restriction makes it impossible to usethis module with modules not implemented in Python, including manystandard and optional extension modules.
Read a module and return a dictionary mapping class names to classdescriptor objects.
The parameter module should be the nameof a module as a string; it may be the name of a module within apackage.
The path parameter should be a sequence, and is usedto augment the value of sys. path, which is used to locatemodule source code.
Like readmodule(), but the returned dictionary, in additionto mapping class names to class descriptor objects, also mapstop-level function names to function descriptor objects.
Moreover, ifthe module being read is a package, the key '__path__' in thereturned dictionary has as its value a list which contains the packagesearch path. Subsections
18.7.2 Function Descriptor Objects
The py_compile module provides a function to generate abyte-code file from a source file, and another function used when themodule source file is invoked as a script.Though not often needed, this function can be useful when installingmodules for shared use, especially if some of the users may not havepermission to write the byte-code cache files in the directorycontaining the source code.
Exception raised when an error occurs while attempting to compile the file.
Compile a source file to byte-code and write out the byte-code cache file.
The source code is loaded from the file name file.
The byte-code is written to cfile, which defaults to file
+ 'c' ('o' if optimization is enabled in thecurrent interpreter).
If dfile is specified, it is used asthe name of the source file in error messages instead of file.
If doraise = True, a PyCompileError is raised when an error is encountered while compiling file.
If doraise = False (the default), an error string is written to sys.stderr, but no exception is raised.
Compile several source files.
The files named in args (or onthe command line, if args is not specified) are compiled andthe resulting bytecode is cached in the normal manner.
Thisfunction does not search a directory structure to locate sourcefiles; it only compiles files named explicitly.
When this module is run as a script, the main() is used tocompile all the files named on the command line.
Utilities to compile all Python source filesin a directory tree.
The pydoc module automatically generates documentation fromPython modules.
The same text documentationcan also be viewed from outside the Python interpreter by runningpydoc as a script at the operating system's command prompt.For example, running
module, in a style similar to the manual pages shown by the Unix man command.
The argument to pydoc can be the nameof a function, module, or package, or a dotted reference to a class,method, or function within a module or module in a package.
Tkinter
-based graphical interface to helpyou search for documentation pages.When pydoc generates documentation, it uses the currentenvironment and path to locate modules.
Thus, invokingpydoc spam documents precisely the version ofthe module you would get if you started the Python interpreter andtyped "import spam".Module docs for core modules are assumed to reside inhttp://www.python.org/doc/current/lib/.
This can be overridden bysetting the PYTHONDOCS environment variable to a different URL orto a local directory containing the Library Reference Manual pages.
This module is primarily used as a help module forBuildApplet and BuildApplication.
It is able tostore compiled Python code as 'PYC' resources in a file.
This module is a specialization of the
modulethat allows reading and writing of the preferences for the Pythoninterpreter.
quietconsole allows you to keep stdio output in a bufferwithout displaying it (or without displaying the stdout windowaltogether, if set with EditPythonPrefs) until you try to read fromstdin or disable the buffering, at which point all the saved output issent to the window.
Good for programs with graphical user interfacesthat do want to display their output at a crash.
This module performs quoted-printable transport encoding and decoding,as defined in RFC 1521: ``MIME (Multipurpose Internet MailExtensions) Part One: Mechanisms for Specifying and Describing theFormat of Internet Message Bodies''.
The quoted-printable encoding isdesigned for data where there are relatively few nonprintablecharacters; the base64 encoding scheme available via the
module is more compact if there are many suchcharacters, as when sending a graphics file.
input.readline() returns an empty string.If the optional argument header is present and true, underscorewill be decoded as space.
This is used to decode``Q''-encoded headers as described in RFC 1522: ``MIME (Multipurpose Internet Mail Extensions)Part Two: Message Header Extensions for Non-ASCII Text''.
input.readline() returns an empty string.
quotetabs is a flag which controls whether to encode embeddedspaces and tabs; when true it encodes such embedded whitespace, andwhen false it leaves them unencoded.
Note that spaces and tabsappearing at the end of lines are always encoded, as per RFC 1521.
Like decode(), except that it accepts a source string andreturns the corresponding decoded string.
Python uses the Mersenne Twister asthe core generator.
It produces 53-bit precision floats and has aperiod of 2**19937-1. The underlying implementation in C is both fast and threadsafe.
The Mersenne Twister is one of the mostextensively tested random number generators in existence.
However, beingcompletely deterministic, it is not suitable for all purposes, and iscompletely unsuitable for cryptographic purposes.The functions supplied by this module are actually bound methods of ahidden instance of the random.Random class.
You caninstantiate your own instances of Random to get generatorsthat don't share state.
As an example of subclassing, the random module providesthe WichmannHill class which implements an alternative generatorin pure Python.
The class provides a backward compatible way toreproduce results from earlier versions of Python which used theWichmann-Hill algorithm as the core generator.Changed in version 2.3:Substituted MersenneTwister for Wichmann-Hill.
Bookkeeping functions:
]
)
Initialize the basic random number generator.Optional argument x can be any hashable object.If x is omitted or None, current system time is used;current system time is also used to initialize the generator when themodule is first imported.
If randomness sources are provided by theoperating system, they are used instead of the system time (see theos. urandom()function for details on availability).
Return an object capturing the current internal state of thegenerator.
This object can be passed to setstate() torestore the state.New in version 2.1.
Change the internal state to one different from and likely far away fromthe current state.
n is a non-negative integer which is used toscramble the current state vector.
This is most useful in multi-threadedprograms, in conjuction with multiple instances of the Randomclass: setstate() or seed() can be used to force allinstances into the same internal state, and then jumpahead()can be used to force the instances' states far apart.New in version 2.1.
Changed in version 2.3:Instead of jumping to a specific state, n stepsahead, jumpahead(n) jumps to another state likely to beseparated by many steps..
Functions for integers:
Return a randomly selected element from range(start,stop, step).
This is equivalent tochoice(range(start, stop, step)),but doesn't actually build a range object.New in version 1.5.2.
Return a random integer N such that
Return a random element from the non-empty sequence seq.If seq is empty, raises IndexError.
)
Shuffle the sequence x in place.The optional argument random is a 0-argument functionreturning a random float in [0.0, 1.0); by default, this is thefunction random().Note that for even rather small len(x), the totalnumber of permutations of x is larger than the period of mostrandom number generators; this implies that most permutations of along sequence can never be generated.
Return a k length list of unique elements chosen from thepopulation sequence.
Used for random sampling without replacement.New in version 2.3.
Returns a new list containing elements from the population whileleaving the original population unchanged.
The resulting list isin selection order so that all sub-slices will also be valid randomsamples.
This allows raffle winners (the sample) to be partitionedinto grand prize and second place winners (the subslices).Members of the population need not be hashable or unique.
If thepopulation contains repeats, then each occurrence is a possibleselection in the sample.To choose a sample from a range of integers, use xrangeas an argument.
This is especially fast and space efficient forsampling from a large population: sample(xrange(10000000), 60).
The following functions generate specific real-valued distributions.Function parameters are named after the corresponding variables in thedistribution's equation, as used in common mathematical practice; most ofthese equations can be found in any statistics text.
Return the next random floating point number in the range [0.0, 1.0).
Beta distribution.
Conditions on the parameters are
alpha -1 and
beta -1.Returned values range between 0 and 1.
Exponential distribution. lambd is 1.0 divided by the desiredmean.
(The parameter would be called ``lambda'', but that is areserved word in Python.)
Returned values range from 0 topositive infinity.
Gamma distribution.
(Not the gamma function!) Conditions onthe parameters are
alpha 0 and
beta 0.
Gaussian distribution. mu is the mean, and sigma is thestandard deviation.
This is slightly faster than thenormalvariate() function defined below.
Log normal distribution.
If you take the natural logarithm of thisdistribution, you'll get a normal distribution with mean muand standard deviation sigma. mu can have any value,and sigma must be greater than zero.
Normal distribution. mu is the mean, and sigma is thestandard deviation.
mu is the mean angle, expressed in radians between 0 and2*pi, and kappa is the concentration parameter, whichmust be greater than or equal to zero.
If kappa is equal tozero, this distribution reduces to a uniform random angle over therange 0 to 2*pi.
Pareto distribution. alpha is the shape parameter.
Weibull distribution. alpha is the scale parameter andbeta is the shape parameter.
Alternative Generators
classWichmannHill
)
Class that implements the Wichmann-Hill algorithm as the core generator.Has all of the same methods as Random plus the whseedmethod described below.
Because this class is implemented in purePython, it is not threadsafe and may require locks between calls.
Theperiod of the generator is 6,953,607,871,644 which is small enough torequire care that two independent random sequences do not overlap.
classSystemRandom
Class that uses the os.
The getstate() andsetstate() methods raise NotImplementedError ifcalled.New in version 2.4.
M.
This module provides regular expression matching operations similar tothose found in Perl.
Regular expression pattern strings may notcontain null bytes, but can specify the null byte using thenumber
notation.
Both patterns and strings to besearched can be Unicode strings as well as 8-bit strings.
There module is always available.Regular expressions use the backslash character ("") toindicate special forms or to allow special characters to be usedwithout invoking their special meaning.
So r"n" is atwo-character string containing "" and "n",while "n" is a one-character string containing a newline.Usually patterns will be expressed in Python code using this rawstring notation.
Mastering Regular Expressions
Book on regular expressionsby Jeffrey Friedl, published by O'Reilly.
The second edition of the book no longer covers Python at all, but the first edition covered writing good regular expressionpatterns in great detail. Subsections
The readline module defines a number of functions used eitherdirectly or from the
module to facilitatecompletion and history file read and write from the Pythoninterpreter.The readline module defines the following functions:
Parse and execute single line of a readline init file.
Return the current contents of the line buffer.
Insert text into the command line.
Parse a readline initialization file.The default filename is the last filename used.
Load a readline history file.The default filename is ~/.history.
Save a readline history file.The default filename is ~/.history.
Clear the current history.
(Note: this function is not available ifthe installed version of GNU readline doesn't support it.)New in version 2.4.
Return the desired length of the history file.
Negative values implyunlimited history file size.
Set the number of lines to save in the history file.write_history_file() uses this value to truncate thehistory file when saving.
Negative values imply unlimited historyfile size.
Return the number of lines currently in the history.
(This is differentfrom get_history_length(), which returns the maximum number oflines that will be written to a history file.)
Return the current contents of history item at index.New in version 2.3.
remove_history_item
Replace history item specified by its position with the given line.New in version 2.4.
Change what's displayed on the screen to reflect the current contentsof the line buffer.
Set or remove the startup_hook function.
If function is specified,it will be used as the new startup_hook function; if omitted orNone, any hook function already installed is removed.
Thestartup_hook function is called with no arguments justbefore readline prints the first prompt.
Set or remove the pre_input_hook function.
If function is specified,it will be used as the new pre_input_hook function; if omitted orNone, any hook function already installed is removed.
Thepre_input_hook function is called with no arguments after the first prompthas been printed and just before readline starts reading input characters.
Set or remove the completer function.
If function is specified,it will be used as the new completer function; if omitted orNone, any completer function already installed is removed.
Thecompleter function is called as
function(text,state), for state in 0, 1, 2, ...,until it returns a non-string value.
It should return the nextpossible completion starting with text.
)
Get the completer function, or None if no completer functionhas been set.
Get the beginning index of the readline tab-completion scope.
Get the ending index of the readline tab-completion scope.
Set the readline word delimiters for tab-completion.
Get the readline word delimiters for tab-completion.
Append a line to the history buffer, as if it was the last line typed.
Completion of Python identifiers at theinteractive prompt.
classRepr
Class which provides formatting services useful in implementingfunctions similar to the built-in repr(); size limits for different object types are added to avoid the generation ofrepresentations which are excessively long.
This is an instance of Repr which is used to provide therepr() function described below.
Changing the attributesof this object will affect the size limits used by repr()and the Python debugger.
This is the repr() method of aRepr.
It returns astring similar to that returned by the built-in function of the same name, but with limits on most sizes. Subsections
The functions described below may raise this error if the underlyingsystem call failures unexpectedly. Subsections
Warning:The documentation has been left in place to help in reading old codethat uses the module.
Warning:While the rexec module is designed to perform as describedbelow, it does have a few known vulnerabilities which could beexploited by carefully written code.
Thus it should not be reliedupon in situations requiring ``production ready'' security.
In suchsituations, execution via sub-processes or very careful``cleansing'' of both code and data to be processed may benecessary.
Alternatively, help in patching known rexecvulnerabilities would be welcomed.
Note:The RExec class can prevent code from performing unsafeoperations like reading or writing disk files, or using TCP/IPsockets.
However, it does not protect against code using extremelylarge amounts of memory or processor time.
classRExec
Returns an instance of the RExec class.
Rather, it calls methods of an RHooksinstance that was passed to or created by its constructor.
(Actually,the RExec object doesn't make these calls -- they are made bya module loader object that's part of the RExec object.
For instance, we could substitute an RHooks object thatpasses all filesystem requests to a file server elsewhere, via someRPC mechanism such as ILU.
Grail's applet loader uses this to supportimporting applets from a URL for a directory.If verbose is true, additional debugging output may be sent tostandard output.
It is important to be aware that code running in a restrictedenvironment can still call the sys.exit() function.
Todisallow restricted code from exiting the interpreter, always protectcalls that cause restricted code to run with atry/except statement that catches theSystemExit exception.
Removing the sys.exit()function from the restricted environment is not sufficient -- therestricted code could still use raise SystemExit.
RemovingSystemExit is not a reasonable option; some library codemakes use of this and would break were it not available.
Grail Home Page
Grail is aWeb browser written entirely in Python.
It uses therexec module as a foundation for supportingPython applets, and can be used as an example usage ofthis module. Subsections
Deprecated since release 2.3.The
package should be used inpreference to the rfc822 module.
12.6 Such messagesconsist of a collection of message headers, and a message body.
Thismodule also defines a helper classAddressList for parsing RFC 2822 addresses.
Please refer tothe RFC for information on the specific syntax of RFC 2822 messages.The
module provides classes to read mailboxes produced by various end-user mail programs.
A Message instance is instantiated with an input object asparameter.
Message relies only on the input object having areadline() method; in particular, ordinary file objectsqualify.
Instantiation reads headers from the input object up to adelimiter line (normally a blank line) and stores them in theinstance.
The message body, following the headers, is not consumed.This class can work with any input object that supports areadline() method.
If the input object has seek and tellcapability, the rewindbody() method will work; also, illegallines will be pushed back onto the input stream.
If the input objectlacks seek but has an unread() method that can push back aline of input, Message will use that to push back illegallines.
Thus this class can be used to parse messages coming from abuffered stream.The optional seekable argument is provided as a workaround forcertain stdio libraries in which tell() discards buffereddata before discovering that the lseek() system calldoesn't work.
m['From'],
m['from'] and
m['FROM'] all yield the same result.
classAddressList
You may instantiate the AddressList helper class using a singlestring parameter, a comma-separated list of RFC 2822 addresses to beparsed.
(The parameter None yields an empty list.)
Return a new string with backslashes in str replaced by twobackslashes and double quotes replaced by backslash-double quote.
Return a new string which is an unquoted version of str.If str ends and begins with double quotes, they are strippedoff.
Likewise if str ends and begins with angle brackets, theyare stripped off.
The inverse of parseaddr(), this takes a 2-tuple of the form(realname, email_address) and returns the stringvalue suitable for a To: or Cc: header.
Ifthe first element of pair is false, then the second element isreturned unmodified.
If it succeeds in parsingthe date, parsedate() returns a 9-tuple that can be passeddirectly to time. mktime(); otherwise None will bereturned.
Note that fields 6, 7, and 8 of the result tuple are notusable.
Performs the same function as parsedate(), but returnseither None or a 10-tuple; the first 9 elements make up a tuplethat can be passed directly to time. mktime(), and the tenthis the offset of the date's timezone from UTC (which is the officialterm for Greenwich Mean Time).
(Note that the sign of the timezoneoffset is the opposite of the sign of the time. timezonevariable for the same timezone; the latter variable follows thePOSIX standard while this module follows RFC 2822.)
If the inputstring has no timezone, the last element of the tuple returned isNone.
Turn a 10-tuple as returned by parsedate_tz() into a UTCtimestamp.
If the timezone item in the tuple is None, assumelocal time.
Minor deficiency: this first interprets the first 8elements as a local time and then compensates for the timezonedifference; this may yield a slight error around daylight savings timeswitch dates.
Not enough to worry about for common use. See Also:
: Comprehensive email handling package; supercedesthe rfc822 module.
Module
Classes to read various mailbox formats produced by end-user mail programs.
Subclass of rfc822.Message thathandles MIME encoded messages.
This module originally conformed to RFC 822,hence the name.
Since then, RFC 2822 has been released as anupdate to RFC 822.
This module should be consideredRFC 2822-conformant, especially in cases where thesyntax or semantics have changed since RFC 822. Subsections
The rgbimg module allows Python programs to access SGI imglib imagefiles (also known as .rgb files).
The module is far fromcomplete, but is provided anyway since the functionality that there isenough in some cases.
Currently, colormap files are not supported.
Note:This module is only built by default for 32-bit platforms; it isnot expected to work properly on other systems.
The module defines the following variables and functions:
This exception is raised on all errors, such as unsupported file type, etc.
This function reads and decodes the image on the specified file, andreturns it as a Python string.
The string has 4 byte RGBA pixels.The bottom left pixel is the first inthe string.
This format is suitable to pass to gl.lrectwrite(),for instance.
This function writes the RGBA data in data to imagefile file.
x and y give the size of the image.z is 1 if the saved image should be 1 byte greyscale, 3 if thesaved image should be 3 byte RGB data, or 4 if the saved images shouldbe 4 byte RGBA data.
The input data always contains 4 bytes per pixel.These are the formats returned by gl.lrectread().
This function sets a global flag which defines whether the scan linesof the image are read or written from bottom to top (flag is zero,compatible with SGI GL) or from top to bottom(flag is one,compatible with X).
The default is zero.
The rlcompleter module defines a completion function forthe
module by completing valid Python identifiersand keywords.This module is Unix-specific due to its dependence on the
module.The rlcompleter module defines the Completer class.Example:
import rlcompleter import readline readline.
The rlcompleter module is designed for use with Python'sinteractive mode.
A user can add the following lines to his or herinitialization file (identified by the PYTHONSTARTUPenvironment variable) to get automatic Tab completion:
This module provides a single class, RobotFileParser, which answersquestions about whether or not a particular user agent can fetch a URL onthe Web site that published the robots.
txt file.
For more details on the structure of robots. txt files, seehttp://www.robotstxt.org/wc/norobots.html.
classRobotFileParser
Sets the URL referring to a robots. txt file.
Reads the robots. txt URL and feeds it to the parser.
Parses the lines argument.
Returns True if the useragent is allowed to fetch the urlaccording to the rules contained in the parsed robots. txt file.
Returns the time the robots. txt file was last fetched.
This isuseful for long-running web spiders that need to check for newrobots. txt files periodically.
Sets the time the robots. txt file was last fetched to the currenttime.
The following example demonstrates basic use of the RobotFileParser class.
The sched module defines a class which implements a generalpurpose event scheduler:
The scheduler class defines a generic interface to schedulingevents.
It needs two functions to actually deal with the ``outside world''-- timefunc should be callable without arguments, and return a number (the ``time'', in any units whatsoever).
The delayfuncfunction should be callable with one argument, compatible with the outputof timefunc, and should delay that many time units.
delayfunc will also be called with the argument 0 aftereach event is run to allow other threads an opportunity to run inmulti-threaded applications.
This module provides access to the select()and poll() functionsavailable in most operating systems.
Note that on Windows, it onlyworks for sockets; on other operating systems, it also works for otherfile types (in particular, on Unix, it works on pipes).
It cannotbe used on regular files to determine whether a file has grown sinceit was last read.The module defines the following:
The exception raised when an error occurs.
The accompanying value isa pair containing the numeric error code from errno and thecorresponding string, as would be printed by the C functionperror().
(Not supported by all operating systems.)
Returns a polling object,which supports registering and unregistering file descriptors, andthen polling them for I/O events;see section7.3.1 below for the methods supported bypolling objects.
This is a straightforward interface to the Unix select()system call.
The first three arguments are sequences of `waitableobjects': either integers representing file descriptors orobjects with a parameterless method named fileno() returningsuch an integer.
The three sequences of waitable objects are for input,output and `exceptional conditions', respectively.
Empty sequences areallowed, but acceptance of three empty sequences is platform-dependent.(It is known to work on Unix but not on Windows.)
The optionaltimeout argument specifies a time-out as a floating point numberin seconds.
When the timeout argument is omitted the functionblocks until at least one file descriptor is ready.
A time-out valueof zero specifies a poll and never blocks.The return value is a triple of lists of objects that are ready:subsets of the first three arguments.
When the time-out is reachedwithout a file descriptor becoming ready, three empty lists arereturned.Among the acceptable object types in the sequences are Python fileobjects (e.g. sys.stdin, or objects returned byopen() or os.
popen()), socket objectsreturned by socket.socket().
You may also define a wrapper class yourself, as long as it hasan appropriate fileno() method (that really returns a filedescriptor, not just a random integer).
Note:File objects on Windows are not acceptable, but socketsare.
The sets module provides classes for constructing and manipulatingunordered collections of unique elements.
Common uses include membershiptesting, removing duplicates from a sequence, and computing standard mathoperations on sets such as intersection, union, difference, and symmetricdifference.Like other collections, sets support
.
Being anunordered collection, sets do not record element position or order ofinsertion.
Accordingly, sets do not support indexing, slicing, orother sequence-like behavior.Most set applications use the Set class which provides every setmethod except for __hash__().
For advanced applications requiringa hash method, the ImmutableSet class adds a __hash__()method but omits methods which alter the contents of the set.
BothSet and ImmutableSet derive from BaseSet, anabstract class useful for determining whether something is a set:isinstance(obj, BaseSet).The set classes are implemented using dictionaries.
As a result, setscannot contain mutable elements such as lists or dictionaries.However, they can contain immutable collections such as tuples orinstances of ImmutableSet.
For convenience in implementingsets of sets, inner sets are automatically converted to immutableform, for example, Set([Set(['dog'])]) is transformed toSet([ImmutableSet(['dog'])]).
classSet
Constructs a new empty Set object.
If the optional iterableparameter is supplied, updates the set with elements obtained from iteration.All of the elements in iterable should be immutable or be transformableto an immutable using the protocol described insection5.15.3.
classImmutableSet
Constructs a new empty ImmutableSet object.
If the optionaliterable parameter is supplied, updates the set with elements obtainedfrom iteration.
All of the elements in iterable should be immutable orbe transformable to an immutable using the protocol described insection5.15.3.Because ImmutableSet objects provide a __hash__() method,they can be used as set elements or as dictionary keys.
ImmutableSetobjects do not have methods for adding or removing elements, so all of theelements must be known when the constructor is called.
Subsections
This module defines a class SGMLParser which serves as thebasis for parsing text files formatted in SGML (Standard GeneralizedMark-up Language).
In fact, it does not provide a full SGML parser-- it only parses SGML insofar as it is used by HTML, and the moduleonly exists as a base for the
module.
AnotherHTML parser which supports XHTML and offers a somewhat differentinterface is available in the
module.
classSGMLParser
The SGMLParser class is instantiated without arguments.The parser is hardcoded to recognize the followingconstructs:
Opening and closing tags of the form"tag attr="value" ..." and"/tag", respectively.
Numeric character references of the form "#name;".
Entity references of the form "name;".
SGML comments of the form "!-text-".
Note thatspaces, tabs, and newlines are allowed between the trailing"" and the immediately preceding "-".
A single exception is defined as well:
Exception raised by the SGMLParser class when it encounters anerror while parsing.New in version 2.1.
SGMLParser instances have the following methods:
This is calledimplicitly at instantiation time.
Stop processing tags.
Treat all following input as literal input(CDATA).
(This is only provided so the HTML tagPLAINTEXT can be implemented.)
Enter literal mode (CDATA mode).
Feed some text to the parser.
It is processed insofar as it consistsof complete elements; incomplete data is buffered until more data isfed or close() is called.
Force processing of all buffered data as if it were followed by anend-of-file mark.
This method may be redefined by a derived class todefine additional processing at the end of the input, but theredefined version should always call close().
Return the text of the most recently opened start tag.
This shouldnot normally be needed for structured processing, but may be useful indealing with HTML ``as deployed'' or for re-generating input withminimal changes (whitespace between attributes can be preserved,etc.).
This method is called to handle start tags for which either astart_tag() or do_tag() method has beendefined.
The name has been translated to lower caseand double quotes and backslashes in the value have been interpreted.For instance, for the tag A HREF="http://www.cwi.nl/", thismethod would be called as "unknown_starttag('a', [('href','http://www.cwi.nl/')])".
The base implementation simply callsmethod with attributes as the only argument.
This method is called to handle endtags for which anend_tag() method has been defined.
Thetag argument is the name of the tag converted to lower case, andthe method argument is the bound method which should be used tosupport semantic interpretation of the end tag.
If noend_tag() method is defined for the closing element,this handler is not called.
The base implementation simply callsmethod.
This method is called to process arbitrary data.
This method is called to process a character reference of the form"#ref;".
In the base implementation, ref mustbe a decimal number in therange 0-255.
It translates the character to ASCII and calls themethod handle_data() with the character as argument.
Ifref is invalid or out of range, the methodunknown_charref(ref) is called to handle the error.
Asubclass must override this method to provide support for namedcharacter entities.
This method is called to process a general entity reference of theform "ref;" where ref is an general entityreference.
It looks for ref in the instance (or class)variable entitydefs which should be a mapping from entitynames to corresponding translations.
If a translation is found, itcalls the method handle_data() with the translation;otherwise, it calls the method unknown_entityref(ref).The default entitydefs defines translations foramp;, apos, gt;, lt;, andquot;.
Thecomment argument is a string containing the text between the"!-" and "-" delimiters, but not the delimitersthemselves.
For example, the comment "!-text-" willcause this method to be called with the argument 'text'.
Thedefault method does nothing.
Inpractice, the DOCTYPE declaration is the only thing observed inHTML, but the parser does not discriminate among different (or broken)declarations.
Internal subsets in a DOCTYPE declaration arenot supported.
The data parameter will be the entire contentsof the declaration inside the !... markup.
Thedefault implementation does nothing.
This method is called when an end tag is found which does notcorrespond to any open element.
This method is called to process an unknown start tag.
It is intendedto be overridden by a derived class; the base class implementationdoes nothing.
This method is called to process an unknown end tag.
This method is called to process unresolvable numeric characterreferences.
Refer to handle_charref() to determine what ishandled by default.
It is intended to be overridden by a derivedclass; the base class implementation does nothing.
This method is called to process an unknown entity reference.
Apart from overriding or extending the methods listed above, derivedclasses may also define methods of the following form to defineprocessing of specific tags.
Tag names in the input stream are caseindependent; the tag occurring in method names must be in lowercase:
This method is called to process an opening tag tag.
It haspreference over do_tag().
Theattributes argument has the same meaning as described forhandle_starttag() above.
This method is called to process an opening tag tag that doesnot come with a matching closing tag.
The attributes argumenthas the same meaning as described for handle_starttag() above.
This method is called to process a closing tag tag.
Note that the parser maintains a stack of open elements for which noend tag has been found yet.
Only tags processed bystart_tag() are pushed on this stack.
Definition of anend_tag() method is optional for these tags.
For tagsprocessed by do_tag() or by unknown_tag(), noend_tag() method must be defined; if defined, it willnot be used.
If both start_tag() anddo_tag() methods exist for a tag, thestart_tag() method takes precedence.
This module implements the interface to NIST's
SHA-1 is animproved version of the original SHA hash algorithm.
It is used inthe same way as the
md5 module: use new()to create an sha object, then feed this object with arbitrary stringsusing the update() method, and at any point you can ask itfor the digest of the concatenation of the strings fed to itso far.
SHA-1 digests are 160 bits instead ofMD5's 128 bits.
Return a new sha object.
If string is present, the methodcall update(string) is made.
The following values are provided as constants in the module and asattributes of the sha objects returned by new():
Size of the blocks fed into the hash function; this is always1.
This size is used to allow an arbitrary string to behashed.
digest_size
The size of the resulting digest in bytes.
This is always20.
An sha object has the same methods as md5 objects:
Update the sha object with the string arg.
Repeated calls areequivalent to a single call with the concatenation of all thearguments: m.update(a); m.update(b) is equivalent tom.
update(a+b).
Return the digest of the strings passed to the update()method so far.
This is a 20-byte string which may containnon-ASCII characters, including null bytes.
Like digest() except the digest is returned as a string oflength 40, containing only hexadecimal digits.
This may be used to exchange the value safely in email or other non-binaryenvironments.
Return a copy (``clone'') of the sha object.
Secure Hash Standard
The Secure Hash Algorithm is defined by NIST document FIPSPUB 180-2:
Secure Hash Standard
, published in August 2002.
Cryptographic Toolkit (Secure Hashing)
Links from NIST to various information on secure hashing.
A ``shelf'' is a persistent, dictionary-like object.
The differencewith ``dbm'' databases is that the values (not the keys!) in a shelfcan be essentially arbitrary Python objects -- anything that the
module can handle.
This includes most classinstances, recursive data types, and objects containing lots of shared sub-objects.
The keys are ordinary strings.
Open a persistent dictionary.
The filename specified is the base filenamefor the underlying database.
As a side-effect, an extension may be added tothe filename and more than one file may be created.
By default, theunderlying database file is opened for reading and writing.
The optionalflag pararameter has the same interpretation as the flagparameter of anydbm.open.
By default, version 0 pickles are used to serialize values.
The version of the pickle protocol can be specified with theprotocol parameter.
Changed in version 2.3:The protocolparameter was added.
The binary parameter is deprecatedand provided for backwards compatibility only.
By default, mutations to persistent-dictionary mutable entries are notautomatically written back.
If the optional writeback parameteris set to True, all entries accessed are cached in memory, andwritten back at close time; this can make it handier to mutate mutableentries in the persistent dictionary, but, if many entries areaccessed, it can consume vast amounts of memory for the cache, and itcan make the close operation very slow since all accessed entries arewritten back (there is no way to determine which accessed entries aremutable, nor which ones were actually mutated).
Shelve objects support all methods supported by dictionaries.
This easesthe transition from dictionary based scripts to those requiring persistentstorage.
Subsections 3.17.1 Restrictions
5.21.1 shlex Objects
5.21.1 shlex Objects
The shutil module offers a number of high-level operations onfiles and collections of files.
In particular, functions are provided which support file copying and removal.
Caveat: On MacOS, the resource fork and other metadata arenot used.
For file copies, this means that resources will be lost and file type and creator codes will not be correct.
Copy the contents of the file named src to a file nameddst.
Special files such as character or block devicesand pipes cannot be copied with this function. src anddst are path names given as strings.
Copy the contents of the file-like object fsrc to thefile-like object fdst.
The integer length, if given,is the buffer size.
In particular, a negative length valuemeans to copy the data without looping over the source data inchunks; by default the data is read in chunks to avoid uncontrolledmemory consumption.
Copy the permission bits from src to dst.
The filecontents, owner, and group are unaffected. src and dstare path names given as strings.
Copy the permission bits, last access time, and last modificationtime from src to dst.
The file contents, owner, andgroup are unaffected. src and dst are path names givenas strings.
Copy the file src to the file or directory dst.
Ifdst is a directory, a file with the same basename as src is created (or overwritten) in the directory specified.
Permissionbits are copied. src and dst are path names given asstrings.
Similar to copy(), but last access time and lastmodification time are copied as well.
This is similar to theUnix command cp -p.
Recursively copy an entire directory tree rooted at src.
Thedestination directory, named by dst, must not already exist;it will be created.
Individual files are copied usingcopy2().
If exception(s) occur, an Error is raisedwith a list of reasons.The source code for this should be considered an example rather than a tool.Changed in version 2.3:Error is raised if any exceptions occur during copying,rather than printing a message.
Delete an entire directory tree.
If ignore_errors is true,errors resulting from failed removals will be ignored; if false oromitted, such errors are handled by calling a handler specified byonerror or, if that is omitted, they raise an exception.If onerror is provided, it must be a callable that acceptsthree parameters: function, path, and excinfo.The first parameter, function, is the function which raisedthe exception; it will be os.
listdir(), os.remove() oros.rmdir().
The second parameter, path, will bethe path name passed to function.
The third parameter,excinfo, will be the exception information return bysys.exc_info().
Exceptions raised by onerror willnot be caught.
Recursively move a file or directory to another location.If the destination is on our current filesystem, then simply userename.
Otherwise, copy src to the dst and then remove src.
This exception collects exceptions that raised during a mult-fileoperation.
For copytree, the exception argument is alist of 3-tuples (srcname, dstname, exception).
Subsections 6.26.1 Example
This module provides mechanisms to use signal handlers in Python.Some general rules for working with signals and their handlers:
There is no way to ``block'' signals temporarily from criticalsections (since this is not supported by all Unix flavors).
Although Python signal handlers are called asynchronously as far asthe Python user is concerned, they can only occur between the``atomic'' instructions of the Python interpreter.
This means thatsignals arriving during long calculations implemented purely in C(such as regular expression matches on large bodies of text) may bedelayed for an arbitrary amount of time.
When a signal arrives during an I/O operation, it is possible that theI/O operation raises an exception after the signal handler returns.This is dependent on the underlying Unix system's semantics regardinginterrupted system calls.
Because the C signal handler always returns, it makes little sense tocatch synchronous errors like SIGFPE or SIGSEGV.
Python installs a small number of signal handlers by default:SIGPIPE is ignored (so write errors on pipes and sockets can bereported as ordinary Python exceptions) and SIGINT is translatedinto a KeyboardInterrupt exception.
All of these can beoverridden.
Some care must be taken if both signals and threads are used in thesame program.
The fundamental thing to remember in using signals andthreads simultaneously is: always perform signal() operationsin the main thread of execution.
Any thread can perform analarm(), getsignal(), or pause();only the main thread can set a new signal handler, and the main threadwill be the only one to receive signals (this is enforced by thePython signal module, even if the underlying threadimplementation supports sending signals to individual threads).
Thismeans that signals can't be used as a means of inter-threadcommunication.
Use locks instead.
The variables defined in the signal module are:
This is one of two standard signal handling options; it will simplyperform the default function for the signal.
For example, on mostsystems the default action for SIGQUIT is to dump coreand exit, while the default action for SIGCLD is tosimply ignore it.
This is another standard signal handler, which will simply ignorethe given signal.
All the signal numbers are defined symbolically.
For example, thehangup signal is defined as signal.SIGHUP; the variable namesare identical to the names used in C programs, as found insignal.h.The Unix man page for `signal()' lists the existingsignals (on some systems this is
signal(2), on others thelist is in
signal(7)).Note that not all systems define the same set of signal names; onlythose names defined by the system are defined by this module.
One more than the number of the highest signal number.
The signal module defines the following functions:
If time is non-zero, this function requests that aSIGALRM signal be sent to the process in time seconds.Any previously scheduled alarm is canceled (only one alarm canbe scheduled at any time).
The returned value is then the number ofseconds before any previously set alarm was to have been delivered.If time is zero, no alarm id scheduled, and any scheduledalarm is canceled.
The return value is the number of secondsremaining before a previously scheduled alarm.
If the return valueis zero, no alarm is currently scheduled.
(See the Unix man page
alarm(2).)Availability: Unix.
Return the current signal handler for the signal signalnum.The returned value may be a callable Python object, or one of thespecial values signal.SIG_IGN, signal.SIG_DFL orNone.
Here, signal.SIG_IGN means that thesignal was previously ignored, signal.SIG_DFL means that thedefault way of handling the signal was previously in use, andNone means that the previous signal handler was not installedfrom Python.
Cause the process to sleep until a signal is received; theappropriate handler will then be called.
Returns nothing.
Not onWindows.
signal(2).)
Set the handler for signal signalnum to the functionhandler. handler can be a callable Python objecttaking two arguments (see below), orone of the special values signal.SIG_IGN orsignal.SIG_DFL.
The previous signal handler will be returned(see the description of getsignal() above).
(See theUnix man page
signal(2).)When threads are enabled, this function can only be called from themain thread; attempting to call it from other threads will cause aValueError exception to be raised.The handler is called with two arguments: the signal numberand the current stack frame (None or a frame object;for a description of frame objects, see the reference manual sectionon the standard type hierarchy or see the attribute descriptions inthe
module). Subsections
It starts by constructing up to four directories from a head and atail part.
For the head part, it uses sys.
prefix andsys.exec_prefix; empty heads are skipped.
Forthe tail part, it uses the empty string (on Macintosh or Windows) orit uses first lib/python2.4/site-packages and thenlib/site-python (on Unix).
For each of the distincthead-tail combinations, it sees if it refers to an existing directory,and if so, adds it to sys.
path and also inspects the newly added path for configuration files.
A path configuration file is a file whose name has the form
package.pth and exists in one of the four directoriesmentioned above; its contents are additional items (oneper line) to be added to sys. path.
Non-existing items arenever added to sys. path, but no check is made that the itemrefers to a directory (rather than a file).
No item is added tosys.path more than once.
Blank lines and lines beginning with# are skipped.
Lines starting with import are executed.
For example, suppose sys. prefix and sys.exec_prefix areset to /usr/local.
The Python 2.4 library is theninstalled in /usr/local/lib/python2.4 (where only thefirst three characters of sys.version are used to form theinstallation path name).
Suppose this has a subdirectory/usr/local/lib/python2.4/site-packages with threesubsubdirectories, foo, bar and spam, and twopath configuration files, foo.pth and bar.pth.
Assumefoo.pth contains the following:
and bar.pth contains:
, which canperform arbitrary site-specific customizations.
is still attempted.
This module offers several classes to implement SMTP servers.
One isa generic do-nothing implementation, which can be overridden, whilethe other two offer specific mail-sending strategies. Subsections
The smtplib module defines an SMTP client session object thatcan be used to send mail to any Internet machine with an SMTP or ESMTPlistener daemon.
For details of SMTP and ESMTP operation, consultRFC 821 (Simple Mail Transfer Protocol) and RFC 1869(SMTP Service Extensions).
classSMTP
A SMTP instance encapsulates an SMTP connection.
It hasmethods that support a full repertoire of SMTP and ESMTPoperations. If the optional host and port parameters are given, theSMTP connect() method is called with those parameters duringinitialization.
An SMTPConnectError is raised if thespecified host doesn't respond correctly.For normal use, you should only require the initialization/connect,sendmail(), and quit() methods.
An example isincluded below.
A nice selection of exceptions is defined as well:
Base exception class for all exceptions raised by this module.
This exception is raised when the server unexpectedly disconnects,or when an attempt is made to use the SMTP instance beforeconnecting it to a server.
Base class for all exceptions that include an SMTP error code.These exceptions are generated in some instances when the SMTPserver returns an error code.
The error code is stored in thesmtp_code attribute of the error, and thesmtp_error attribute is set to the error message.
Sender address refused.
In addition to the attributes set by on allSMTPResponseException exceptions, this sets `sender' tothe string that the SMTP server refused.
All recipient addresses refused.
The errors for each recipient areaccessible through the attribute recipients, which is adictionary of exactly the same sort as SMTP.sendmail()returns.
The SMTP server refused to accept the message data.
Error occurred during establishment of a connection with the server.
The server refused our "HELO" message.
Protocol definition forSMTP.
This document covers the model, operating procedure,and protocol details for SMTP.
Definition of the ESMTPextensions for SMTP.
This describes a framework forextending SMTP with new commands, supporting dynamicdiscovery of the commands provided by the server, anddefines a few additional commands. Subsections
The sndhdr provides utility functions which attempt todetermine the type of sound data which is in a file.
When thesefunctions are able to determine what type of sound data is stored in afile, they return a tuple (type, sampling_rate,channels, frames, bits_per_sample).
The value fortype indicates the data type and will be one of the strings'aifc', 'aiff', 'au', 'hcom','sndr', 'sndt', 'voc', 'wav','8svx', 'sb', 'ub', or 'ul'.
Thesampling_rate will be either the actual value or 0 ifunknown or difficult to decode.
Similarly, channels will beeither the number of channels or 0 if it cannot be determinedor if the value is difficult to decode.
The value for frameswill be either the number of frames or -1.
The last item inthe tuple, bits_per_sample, will either be the sample size inbits or 'A' for A-LAW
or 'U' foru-LAW
.
Determines the type of sound data stored in the file filenameusing whathdr().
If it succeeds, returns a tuple asdescribed above, otherwise None is returned.
Determines the type of sound data stored in a file based on the file header.
The name of the file is given by filename.
Thisfunction returns a tuple as described above on success, orNone.
Unix Programmer's Manual, Supplementary Documents 1(sections PS1:7 and PS1:8).
The platform-specific reference materialfor the various socket-related system calls are also a valuable sourceof information on the details of socket semantics.
whose methods implement thevarious socket system calls.
Note, however,omission of scopeid can cause problems in manipulating scopedIPv6 addresses.
The socketaddress will be resolved differently into an actual IPv4/v6 address,depending on the results from DNS resolution and/or the hostconfiguration.
For deterministic behavior use a numeric address inhost portion.All errors raise exceptions.
A generalization of this based on timeoutsis supported through settimeout().The module socket exports the following constants and functions:
This exception is raised for socket-related errors.The accompanying value is either a string telling what went wrong or apair (errno, string)representing an error returned by a systemcall, similar to the value accompanying os.
error.See the module
, which containsnames for the error codes defined by the underlying operating system.
This exception is raised for address-related errors, i.e. forfunctions that use h_errno in the C API, includinggethostbyname_ex() and gethostbyaddr().The accompanying value is a pair (h_errno, string)representing an error returned by a library call. stringrepresents the description of h_errno, as returned bythe hstrerror()
C function.
C function.The error value will match one of the EAI_* constantsdefined in this module.
This exception is raised when a timeout occurs on a socket which hashad timeouts enabled via a prior call to settimeout().
Theaccompanying value is a string whose value is currently always ``timedout''.New in version 2.3.
These constants represent the address (and protocol) families,used for the first argument to socket().
If theAF_UNIX constant is not defined then this protocol isunsupported.
These constants represent the socket types,used for the second argument to socket().(Only SOCK_STREAM andSOCK_DGRAM appear to be generally useful.)
Many constants of these forms, documented in the Unix documentation onsockets and/or the IP protocol, are also defined in the socket module.They are generally used in arguments to the setsockopt() andgetsockopt() methods of socket objects.
In most cases, onlythose symbols that are defined in the Unix header files are defined;for a few symbols, default values are provided.
This constant contains a boolean value which indicates if IPv6 issupported on this platform.New in version 2.3.
For host and port, by passing either an emptystring or None, you can pass NULL to the C API.
Thegetaddrinfo() function returns a list of 5-tuples withthe following structure:
and other library modulesfor a typical usage of the function.New in version 2.2.
Return a fully qualified domain name for name.If name is omitted or empty, it is interpreted as the localhost.
To find the fully qualified name, the hostname returned bygethostbyaddr() is checked, then aliases for the host, ifavailable.
The first name which includes a period is selected.
Incase no fully qualified domain name is available, the hostname isreturned.New in version 2.0.
Translate a host name to IPv4 address format. The IPv4 address isreturned as a string, such as '100.50.200.5'.
If the host nameis an IPv4 address itself it is returned unchanged.
)
Translate a socket address sockaddr into a 2-tuple(host, port).Depending on the settings of flags, the result can contain afully-qualified domain name or numeric address representation inhost.
Similarly, port can contain a string port name or anumeric port number.New in version 2.2.
Translate an Internet protocol name (for example, 'icmp') to a constantsuitable for passing as the (optional) third argument to thesocket() function.
This is usually only needed for socketsopened in ``raw'' mode (SOCK_RAW); for the normal socketmodes, the correct protocol is chosen automatically if the protocol isomitted or zero.
Translate an Internet service name and protocol name to a port numberfor that service.
The optional protocol name, if given, should be'tcp' or 'udp', otherwise any protocol will match.
Translate an Internet port number and protocol name to a service namefor that service.
Create a new socket using the given address family, socket type andprotocol number.
The address family should be AF_INET (thedefault), AF_INET6 or AF_UNIX.
The socket typeshould be SOCK_STREAM (the default), SOCK_DGRAMor perhaps one of the other "SOCK_" constants.
The protocolnumber is usually zero and may be omitted in that case.
Initiate a SSL connection over the socket sock.
keyfile isthe name of a PEM formatted file that contains your privatekey. certfile is a PEM formatted certificate chain file.
Onsuccess, a new SSLObject is returned.
Warning:This does not do any certificate verification!
Build a pair of connected socket objects using the given addressfamily, socket type, and protocol number.
Address family, socket type,and protocol number are as for the socket() function above.The default family is AF_UNIX if defined on the platform;otherwise, the default is AF_INET.Availability: Unix.
New in version 2.4.
Build a socket object from an existing file descriptor (an integer asreturned by a file object's fileno() method).
Address family,socket type and protocol number are as for the socket() functionabove.
The file descriptor should refer to a socket, but this is notchecked -- subsequent operations on the object may fail if the filedescriptor is invalid.
This function is rarely needed, but can beused to get or set socket options on a socket passed to a program asstandard input or output (such as a server started by the Unix inetdaemon).
The socket is assumed to be in blocking mode.Availability: Unix.
Convert 32-bit integers from network to host byte order.
On machineswhere the host byte order is the same as network byte order, this is ano-op; otherwise, it performs a 4-byte swap operation.
Convert 16-bit integers from network to host byte order.
On machineswhere the host byte order is the same as network byte order, this is ano-op; otherwise, it performs a 2-byte swap operation.
Convert 32-bit integers from host to network byte order.
Convert 16-bit integers from host to network byte order.
Convert an IPv4 address from dotted-quad string format (for example,'123.45.67.89') to 32-bit packed binary format, as a string fourcharacters in length.
This is useful when conversing with a programthat uses the standard C library and needs objects of typestruct in_addr, which is the C type for the 32-bit packedbinary this function returns.If the IPv4 address string passed to this function is invalid,socket.error will be raised.
Note that exactly what isvalid depends on the underlying C implementation ofinet_aton().
inet_aton() does not support IPv6, andgetnameinfo() should be used instead for IPv4/v6 dual stacksupport.
inet_ntoa
Convert a 32-bit packed IPv4 address (a string four characters inlength) to its standard dotted-quad string representation (forexample, '123.45.67.89').
This is useful when conversing with aprogram that uses the standard C library and needs objects of typestruct in_addr, which is the C type for the 32-bit packedbinary data this function takes as an argument.If the string passed to this function is not exactly 4 bytes inlength, socket.error will be raised.
inet_ntoa() does not support IPv6, andgetnameinfo() should be used instead for IPv4/v6 dual stacksupport.
inet_pton
Note that exactly what is validdepends on both the value of address_family and the underlyingimplementation of inet_pton().Availability: Unix (maybe not all platforms).New in version 2.3.
address_family, packed_ip)
Asocket.error is raised for errors from the call toinet_ntop().Availability: Unix (maybe not all platforms).New in version 2.3.
)
This is a Python type object that represents the socket object type.It is the same as type(socket(...)).
See Also:
Classes that simplify writing network servers.
The stat module defines constants and functions forinterpreting the results of os.
stat(),os.fstat() and os. lstat() (if they exist).
Forcomplete details about the stat(), fstat() andlstat() calls, consult the documentation for your system.The stat module defines the following functions to test forspecific file types:
Return non-zero if the mode is from a directory.
Return non-zero if the mode is from a character special device file.
Return non-zero if the mode is from a block special device file.
Return non-zero if the mode is from a regular file.
Return non-zero if the mode is from a FIFO (named pipe).
Return non-zero if the mode is from a symbolic link.
Return non-zero if the mode is from a socket.
Two additional functions are defined for more general manipulation ofthe file's mode:
Return the portion of the file's mode that can be set byos. chmod()--that is, the file's permission bits, plus thesticky bit, set-group-id, and set-user-id bits (on systems that supportthem).
Return the portion of the file's mode that describes the file type (usedby the S_IS*() functions above).
These are alsouseful when checking for information about a file that isn't handledby
Inode protection mode.
Inode number.
Device inode resides on.
Number of links to the inode.
User id of the owner.
Group id of the owner.
Size in bytes of a plain file; amount of data waiting on some specialfiles.
Time of last access.
Time of last modification.
The ``ctime'' as reported by the operating system.
On some systems(like Unix) is the time of the last metadata change, and, on others(like Windows), is the creation time (see platform documentation fordetails).
The interpretation of ``file size'' changes according to the filetype.
For plain files this is the size of the file in bytes.
Themeaning of the size field for other character and block devices variesmore, depending on the implementation of the underlying system call.Example:
Deprecated since release 2.2.Use
.stat() directly insteadof using the cache; the cache introduces a very high level offragility in applications using it and complicates application codewith the addition of cache management support.
The statcache module provides a simple optimization toos.
stat(): remembering the values of previous invocations.The statcache module defines the following functions:
This is the main module entry-point.Identical for os.
stat(), except for remembering the resultfor future invocations of the function.
The rest of the functions are used to clear the cache, or parts ofit.
Clear the cache: forget all results of previous stat()calls.
Forget the result of stat(path), if any.
Forget all results of stat(path) for path startingwith prefix.
Forget all results of stat(path) for path a file in the directory prefix, including stat(prefix).
Similar to forget_prefix(), but for all path valuesnot starting with prefix.
The statvfs module defines constants so interpreting the resultif os.
statvfs(), which returns a tuple, can be made withoutremembering ``magic numbers.'' Each of the constants defined in thismodule is the index of the entry in the tuple returned byos.
statvfs() that contains the specified information.
Preferred file system block size.
Fundamental file system block size.
Total number of blocks in the filesystem.
Total number of free blocks.
Free blocks available to non-super user.
Total number of file nodes.
Total number of free file nodes.
Free nodes available to non-super user. F_FLAG
System dependent: see statvfs() man page.
Maximum file name length.
The string module contains a number of useful constants and classes,as well as some deprecated legacy functions that are also available as methodson strings.
See the module
for stringfunctions based on regular expressions. Subsections
When identifying things (such as host names) in the internet, it isoften necessary to compare such identifications for``equality''.
Exactly how this comparison is executed may depend onthe application domain, e.g. whether it should be case-insensitive ornot.
It may be also necessary to restrict the possibleidentifications, to allow only identifications consisting of``printable'' characters.
RFC 3454 defines a procedure for ``preparing'' Unicode strings ininternet protocols.
Before passing strings onto the wire, they areprocessed with the preparation procedure, after which they have acertain normalized form.
The RFC defines a set of tables, which can becombined into profiles.
Each profile must define which tables it uses,and what other optional parts of the stringprep procedure arepart of the profile.
One example of a stringprep profile isnameprep, which is used for internationalized domain names.The module stringprep only exposes the tables from RFC3454.
As these tables would be very large to represent them asdictionaries or lists, the module uses the Unicode character databaseinternally.
The module source code itself was generated using themkstringprep.py utility.As a result, these tables are exposed as functions, not as datastructures.
There are two kinds of tables in the RFC: sets andmappings.
For a set, stringprep provides the ``characteristicfunction'', i.e. a function that returns true if the parameter is partof the set.
For mappings, it provides the mapping function: given thekey, it returns the associated value.
Below is a list of all functionsavailable in the module.
Determine whether code is in tableA.1 (Unassigned code pointsin Unicode 3.2).
Determine whether code is in tableB.1 (Commonly mapped tonothing).
Return the mapped value for code according to tableB.2 (Mapping for case-folding used with NFKC).
Return the mapped value for code according to tableB.3 (Mapping for case-folding used with no normalization).
Determine whether code is in tableC.1.1 (ASCII space characters).
Determine whether code is in tableC.1.2 (Non-ASCII space characters).
Determine whether code is in tableC.1 (Space characters, union of C.1.1 and C.1.2).
Determine whether code is in tableC.2.1 (ASCII control characters).
Determine whether code is in tableC.2.2 (Non-ASCII control characters).
Determine whether code is in tableC.2 (Control characters, union of C.2.1 and C.2.2).
Determine whether code is in tableC.3 (Private use).
Determine whether code is in tableC.4 (Non-character code points).
Determine whether code is in tableC.5 (Surrogate codes).
Determine whether code is in tableC.6 (Inappropriate for plain text).
Determine whether code is in tableC.7 (Inappropriate for canonical representation).
Determine whether code is in tableC.8 (Change display properties or are deprecated).
Determine whether code is in tableC.9 (Tagging characters).
Determine whether code is in tableD.1 (Characters with bidirectional property ``R'' or ``AL'').
Determine whether code is in tableD.2 (Characters with bidirectional property ``L'').
This module performs conversions between Python values and Cstructs represented as Python strings.
It uses format strings(explained below) as compact descriptions of the lay-out of the Cstructs and the intended conversion to/from Python values.
This canbe used in handling binary data stored in files or from networkconnections, among other sources.The module defines the following exception and functions:
Exception raised on various occasions; argument is a stringdescribing what is wrong.
Return a string containing the values
v1, v2, ... packed according to the givenformat.
The arguments must match the values required by the formatexactly.
Unpack the string (presumably packed by pack(fmt,...)) according to the given format.
The result is atuple even if it contains exactly one item.
The string must containexactly the amount of data required by the format(len(string) must equal calcsize(fmt)).
Return the size of the struct (and hence of the string)corresponding to the given format.
Format characters have the following meaning; the conversion betweenC and Python values should be obvious given their types:
Format
C Type
string of length 1
integer
integer
long
float
string
Notes:
The "q" and "Q" conversion codes are available innative mode only if the platform C compiler supports C long long,or, on Windows, __int64.
They are always available in standardmodes.New in version 2.2.
A format character may be preceded by an integral repeat count.
Forexample, the format string '4h' means exactly the same as'hhhh'.Whitespace characters between formats are ignored; a count and itsformat must not contain whitespace though.For the "s" format character, the count is interpreted as thesize of the string, not a repeat count like for the other formatcharacters; for example, '10s' means a single 10-byte string, while'10c' means 10 characters.
The first byte stored isthe length of the string, or 255, whichever is smaller.
The bytesof the string follow.
If the string passed in to pack() is toolong (longer than the count minus 1), only the leading count-1 bytes of thestring are stored.
If the string is shorter than count-1, it is paddedwith null bytes so that exactly count bytes in all are used.
A NULL pointer willalways be returned as the Python integer 0.
When packing pointer-sizedvalues, Python integer or long integer objects may be used.
Byte order
Size and alignment
native
standard
little-endian
big-endian
network (= big-endian)
If the first character is not one of these, "@" is assumed.Native byte order is big-endian or little-endian, depending on thehost system.
The byte order character "=" chooses touse little- or big-endian ordering based on the host system.
Thestruct module does not interpret this as native ordering, so the"P" format is not available.Examples (all using native byte order, size and alignment, on abig-endian machine):
Hint: to align the end of a structure to the alignment requirement ofa particular type, end the format with the code for that type with arepeat count of zero.
For example, the format 'llh0l'specifies two pad bytes at the end, assuming longs are aligned on4-byte boundaries.
This only works when native size and alignment arein effect; standard size and alignment does not enforce any alignment.
Packed binary storage of homogeneous data. Module
Packing and unpacking of XDR data.
6.8.1 Using the subprocess
The subprocess module allows you to spawn new processes,connect to their input/output/error pipes, and obtain their returncodes.
This module intends to replace several other, older modulesand functions, such as:
Information about how the subprocess module can be used toreplace these modules and functions can be found in the followingsections. Subsections
6.8.1.1 Convenience Functions
6.8.1.2 Exceptions
6.8.1.3 Security
6.8.3.1 Replacing /bin/sh shell backquote
6.8.3.2 Replacing shell pipe line
6.8.3.3 Replacing os. system()
6.8.3.4 Replacing os. spawn*
6.8.3.5 Replacing os.
popen* 6.8.3.6 Replacing popen2.*
The sunau module provides a convenient interface to the SunAU sound format.
Note that this module is interface-compatible withthe modules
and
.An audio file consists of a header followed by the data.
The fieldsof the header are:
The four bytes ".snd".
Size of the header, including info, in bytes.
Physical size of the data, in bytes.
Indicates how the audio samples are encoded.
The sampling rate.
The number of channels in the samples.
ASCII string giving a description of the audiofile (padded with null bytes).
If file is a string, open the file by that name, otherwise treat itas a seekable file-like object. mode can be any of
Read only mode.
Write only mode.
Note that it does not allow read/write files.A mode of 'r' returns a AU_readobject, while a mode of 'w' or 'wb' returnsa AU_write object.
A synonym for open, maintained for backwards compatibility.
The sunau module defines the following exception:
An error raised when something is impossible because of Sun AU specs or implementation deficiency.
The sunau module defines the following data items:
An integer every valid Sun AU file begins with, stored in big-endianform.
This is the string ".snd" interpreted as an integer.
Values of the encoding field from the AU header which are supported bythis module.
Additional known values of the encoding field from the AU header, butwhich are not supported by this module.
Subsections 14.4.1 AU_read Objects
Availability: SunOS.
This is a companion module to
which definesuseful symbolic constants like MIN_GAIN,MAX_GAIN, SPEAKER, etc.
The names of theconstants are the same names as used in the C include filesun/audioio.h, with the leading string "AUDIO_"stripped.
This module allows you to access the Sun audio interface.
Afull description can be found in the
audio(7I) manual page.The module
defines constants which may be used with this module.This module defines the following variables and functions:
This exception is raised on all errors.
The argument is a stringdescribing what went wrong.
This function opens the audio device and returns a Sun audio deviceobject.
This object can then be used to do I/O on.
The mode parameteris one of 'r' for record-only access, 'w' for play-onlyaccess, 'rw' for both and 'control' for access to thecontrol device.
Since only one process is allowed to have the recorderor player open at the same time it is a good idea to open the deviceonly for the activity needed.
See
audio(7I) for details.As per the manpage, this module first looks in the environmentvariable AUDIODEV for the base audio device filename.
If notfound, it falls back to /dev/audio.
The control device iscalculated by appending ``ctl'' to the base audio device. Subsections
This module provides constants which represent the numeric values ofinternal nodes of the parse tree.
Unlike most Python constants, theseuse lower-case names.
Refer to the file Grammar/Grammar in thePython distribution for the definitions of the names in the context ofthe language grammar.
The specific numeric values which the names mapto may change between Python versions.This module also provides one additional data object:
Dictionary mapping the numeric values of the constants defined inthis module back to name strings, allowing more human-readablerepresentation of parse trees to be generated. See Also:
: The second example for the
module shows how to use the symbolmodule.
This module provides access to some variables used or maintained by theinterpreter and to functions that interact strongly with the interpreter.It is always available.
The list of command line arguments passed to a Python script.argv[0] is the script name (it is operating system dependentwhether this is a full pathname or not).
If the command wasexecuted using the -c command line option to theinterpreter, argv[0] is set to the string '-c'.
If noscript name was passed to the Python interpreter, argv haszero length.
An indicator of the native byte order.
This will have the value'big' on big-endian (most-signigicant byte first) platforms,and 'little' on little-endian (least-significant byte first)platforms.New in version 2.0.
A tuple of strings giving the names of all modules that are compiledinto this Python interpreter.
A string containing the copyright pertaining to the Pythoninterpreter.
Integer specifying the handle of the Python DLL.Availability: Windows.
If value is not None, this function prints it tosys.stdout, and saves it in __builtin__._.
sys.displayhook is called on the result of evaluating anexpression entered in an interactive Python session.
The display ofthese values can be customized by assigning another one-argumentfunction to sys. displayhook.
)
This function prints out a given traceback and exception tosys.stderr.When an exception is raised and uncaught, the interpreter callssys.excepthook with three arguments, the exception class,exception instance, and a traceback object.
In an interactivesession this happens just before control is returned to the prompt;in a Python program this happens just before the program exits.
Thehandling of such top-level exceptions can be customized by assigninganother three-argument function to sys.excepthook.
These objects contain the original values of displayhook andexcepthook at the start of the program.
They are saved sothat displayhook and excepthook can be restored incase they happen to get replaced with broken objects.
This function returns a tuple of three values that give informationabout the exception that is currently being handled.
Theinformation returned is specific both to the current thread and tothe current stack frame.
If the current stack frame is not handlingan exception, the information is taken from the calling stack frame,or its caller, and so on until a stack frame is found that ishandling an exception.
Otherwise, thevalues returned are (type, value,traceback).
If exc_clear() is called, this function will return threeNone values until either another exception is raised in thecurrent thread or the execution stack returns to a frame whereanother exception is being handled.
Warning:Assigning the traceback return value to alocal variable in a function that is handling an exception willcause a circular reference.
This will prevent anything referencedby a local variable in the same function or by the traceback frombeing garbage collected. Since most functions don't need access tothe traceback, the best solution is to use something likeexctype, value = sys.exc_info()[:2] to extract only theexception type and value.
If you do need the traceback, make sureto delete it after use (best done with a try... finally statement) or to call exc_info() ina function that does not itself handle an exception.
Note:Beginningwith Python 2.2, such cycles are automatically reclaimed when garbagecollection is enabled and they become unreachable, but it remains moreefficient to avoid creating cycles.
This function clears all information relating to the current or lastexception that occurred in the current thread.
After calling thisfunction, exc_info() will return three None values untilanother exception is raised in the current thread or the execution stackreturns to a frame where another exception is being handled.This function is only needed in only a few obscure situations.
Theseinclude logging and error handling systems that report information on thelast or current exception.
This function can also be used to try to freeresources and trigger object finalization, though no guarantee is made asto what objects will be freed, if any.New in version 2.3.
Deprecated since release 1.5.Use exc_info() instead.
When no exception is being handled, exc_type is setto None and the other two are undefined. exec_prefix
A string giving the site-specific directory prefix where theplatform-dependent Python files are installed; by default, this isalso '/usr/local'.
This can be set at build time with the--exec-prefix argument to the configurescript.
Specifically, all configuration files (e.g. thepyconfig.h header file) are installed in the directoryexec_prefix + '/lib/pythonversion/config', and sharedlibrary modules are installed in exec_prefix +'/lib/pythonversion/lib-dynload', where version isequal to version[:3].
A string giving the name of the executable binary for the Pythoninterpreter, on systems where this makes sense.
Exit from Python.
This is implemented by raising theSystemExit exception, so cleanup actions specified byfinally clauses of try statements are honored, and it ispossible to intercept the exit attempt at an outer level.
Theoptional argument arg can be an integer giving the exit status(defaulting to zero), or another type of object.
If it is aninteger, zero is considered ``successful termination'' and anynonzero value is considered ``abnormal termination'' by shells andthe like.
Most systems require it to be in the range 0-127, andproduce undefined results otherwise.
Some systems have a conventionfor assigning specific meanings to specific exit codes, but theseare generally underdeveloped; Unix programs generally use 2 forcommand line syntax errors and 1 for all other kind of errors.
Ifanother type of object is passed, None is equivalent topassing zero, and any other object is printed to sys.stderrand results in an exit code of 1.
In particular,sys.exit("some error message") is a quick way to exit aprogram when an error occurs.
This value is not actually defined by the module, but can be set bythe user (or by a program) to specify a clean-up action at programexit.
When set, it should be a parameterless function.
Thisfunction will be called when the interpreter exits. Only onefunction may be installed in this way; to allow multiple functionswhich will be called at termination, use the
module.
Note:The exit function is not called when the program iskilled by a signal, when a Python fatal internal error is detected,or when os._exit() is called.
Deprecated since release 2.4.Use
instead.
Return the interpreter's ``check interval'';see setcheckinterval().New in version 2.3.
Return the name of the current default string encoding used by theUnicode implementation.New in version 2.0.
Return the current value of the flags that are used fordlopen() calls.
The flag constants are defined in the
and DLFCN modules.Availability: Unix.New in version 2.2.
Return the name of the encoding used to convert Unicode filenamesinto system file names, or None if the system default encodingis used.
The result value depends on the operating system:
On Windows 9x, the encoding is ``mbcs''.
On Mac OS X, the encoding is ``utf-8''.
On Unix, the encoding is the user's preference according to the result of nl_langinfo(CODESET), or None ifthe nl_langinfo(CODESET) failed.
On Windows NT+, file names are Unicode natively, so no conversionis performed. getfilesystemencoding still returns ``mbcs'',as this is the encoding that applications should use when theyexplicitly want to convert Unicode strings to byte strings thatare equivalent when used as file names.
Return the reference count of the object.
The count returnedis generally one higher than you might expect, because it includesthe (temporary) reference as an argument togetrefcount().
)
Return the current value of the recursion limit, the maximum depthof the Python interpreter stack.
This limit prevents infiniterecursion from causing an overflow of the C stack and crashingPython.
It can be set by setrecursionlimit().
Return a frame object from the call stack.
If optional integerdepth is given, return the frame object that many calls belowthe top of the stack.
If that is deeper than the call stack,ValueError is raised.
The default for depth iszero, returning the frame at the top of the call stack.This function should be used for internal and specialized purposesonly.
Return a tuple containing five components, describing the Windows version currently running.
The elements are major, minor, build, platform, and text. text containsa string while all other values are integers.
platform may be one of the following values:
The version number encoded as a single integer.
This is guaranteedto increase with each version, including proper support fornon-production releases.
For example, to test that the Pythoninterpreter is at least version 1.5.2, use:
.
This is called "hexversion" since it only really looksmeaningful when viewed as the result of passing it to the built-inhex() function.
These three variables are not always defined; they are set when anexception is not handled and the interpreter prints an error messageand a stack traceback.
Their intended use is to allow aninteractive user to import a debugger module and engage inpost-mortem debugging without having to re-execute the command thatcaused the error.
(Since there is only oneinteractive thread, thread-safety is not a concern for thesevariables, unlike for exc_type etc.)
The largest positive integer supported by Python's regular integertype.
This is at least 2**31-1.
The largest negative integer is-maxint-1 -- the asymmetry results from the use of 2'scomplement binary arithmetic.
An integer giving the largest supported code point for a Unicodecharacter.
The value of this depends on the configuration optionthat specifies whether Unicode characters are stored as UCS-2 orUCS-4.
This is a dictionary that maps module names to modules which havealready been loaded.
This can be manipulated to force reloading ofmodules and other tricks.
Note that removing a module from thisdictionary is not the same as callingreload()
on the corresponding moduleobject.
If the script directory is not available (e.g. if theinterpreter is invoked interactively or if the script is read fromstandard input), path[0] is the empty string, which directsPython to search modules in the current directory first.
Noticethat the script directory is inserted before the entriesinserted as a result of PYTHONPATH.A program is free to modify this list for its own purposes.
Changed in version 2.3:Unicode strings are no longer ignored.
This string contains a platform identifier, e.g. 'sunos5' or'linux1'.
This can be used to append platform-specificcomponents to path, for instance.
A string giving the site-specific directory prefix where theplatform independent Python files are installed; by default, this isthe string '/usr/local'.
This can be set at build time withthe --prefix argument to the configurescript.
The main collection of Python library modules is installedin the directory prefix + '/lib/pythonversion' whilethe platform independent header files (all except pyconfig.h)are stored in prefix + '/include/pythonversion', whereversion is equal to version[:3].
Strings specifying the primary and secondary prompt of theinterpreter.
These are only defined if the interpreter is ininteractive mode.
Their initial values in this case are' ' and '... '.
If a non-string object isassigned to either variable, its str() is re-evaluatedeach time the interpreter prepares to read a new interactivecommand; this can be used to implement a dynamic prompt.
Set the interpreter's ``check interval''.
This integer valuedetermines how often the interpreter checks for periodic things suchas thread switches and signal handlers.
The default is 100,meaning the check is performed every 100 Python virtual instructions.Setting it to a larger value may increase performance for programsusing threads.
Setting it to a value = 0 checks everyvirtual instruction, maximizing responsiveness as well as overhead.
Set the current default string encoding used by the Unicodeimplementation.
If name does not match any availableencoding, LookupError is raised.
This function is onlyintended to be used by the
module implementationand, where needed, by sitecustomize. Once used by the
module, it is removed from the sysmodule's namespace.New in version 2.0.
Set the flags used by the interpreter for dlopen()calls, such as when the interpreter loads extension modules.
Amongother things, this will enable a lazy resolving of symbols whenimporting a module, if called as sys.setdlopenflags(0).
Toshare symbols across extension modules, call assys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL).
Symbolicnames for the flag modules can be either found in the
module, or in the DLFCN module.
If DLFCN is notavailable, it can be generated from /usr/include/dlfcn.husing the h2py script.Availability: Unix.New in version 2.2.
Set the system's profile function,
whichallows you to implement a Python source code profiler inPython.
See chapter10 for moreinformation on the Python profiler.
The system's profile functionis called similarly to the system's trace function (seesettrace()), but it isn't called for each executed lineof code (only on call and return, but the return event is reportedeven when an exception has been set).
Set the maximum depth of the Python interpreter stack tolimit.
This limit prevents infinite recursion from causing anoverflow of the C stack and crashing Python.The highest possible limit is platform-dependent.
A user may needto set the limit higher when she has a program that requires deeprecursion and a platform that supports a higher limit.
This shouldbe done with care, because a too-high limit can lead to a crash.
Set the system's trace function,
which allowsyou to implement a Python source code debugger in Python.
Seesection 9.2, ``How It Works,'' in the chapter onthe Python debugger.
The function isthread-specific; for a debugger to support multiple threads, it mustbe registered using settrace() for each thread beingdebugged.
Note:The settrace() function is intended onlyfor implementing debuggers, profilers, coverage tools and the like.Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available inall Python implementations.
File objects corresponding to the interpreter's standard input,output and error streams. stdin is used for all interpreterinput except for scripts but including calls toinput()
. stdout isused for the output of print and expression statements andfor the prompts of input() and raw_input().The interpreter's own prompts and (almost all of) its error messagesgo to stderr. stdout and stderr needn't bebuilt-in file objects: any object is acceptable as long as it has awrite() method that takes a string argument.
(Changingthese objects doesn't affect the standard I/O streams of processesexecuted by os. popen(), os.system() or theexec*() family of functions in the
module.)
These objects contain the original values of stdin,stderr and stdout at the start of the program.
Theyare used during finalization, and could be useful to restore theactual files to known working file objects in case they have beenoverwritten with a broken object.
When this variable is set to an integer value, it determines themaximum number of levels of traceback information printed when anunhandled exception occurs. The default is 1000.
When setto 0 or less, all traceback information is suppressed andonly the exception type and value are printed.
A string containing the version number of the Python interpreterplus additional information on the build number and compiler used.It has a value of the form 'version(#build_number, build_date, build_time)[compiler]'.
The first three characters are used to identifythe version in the installation directories (where appropriate oneach platform).
An example:
The C API version for this interpreter.
Programmers may find this usefulwhen debugging version conflicts between Python and extensionmodules.
A tuple containing the five components of the version number:major, minor, micro, releaselevel, andserial.
All values except releaselevel are integers;the release level is 'alpha', 'beta','candidate', or 'final'.
The version_infovalue corresponding to the Python version 2.0 is (2, 0, 0,'final', 0).New in version 2.0.
module formore information on the warnings framework.
The version number used to form registry keys on Windows platforms.This is stored as string resource 1000 in the Python DLL.
The valueis normally the first three characters of version.
This module provides an interface to the Unix syslog libraryroutines.
Refer to the Unix manual pages for a detailed descriptionof the syslog facility.The module defines the following functions:
Send the string message to the system logger.
A trailingnewline is added if necessary.
Each message is tagged with a prioritycomposed of a facility and a level.
The optionalpriority argument, which defaults to LOG_INFO,determines the message priority.
If the facility is not encoded inpriority using logical-or (LOG_INFO | LOG_USER), thevalue given in the openlog() call is used.
Logging options other than the defaults can be set by explicitlyopening the log file with openlog() prior to callingsyslog().
The defaults are (usually) ident ='syslog', logopt = 0, facility =LOG_USER.
The ident argument is a string which isprepended to every message.
The optional logopt argument is abit field - see below for possible values to combine.
The optionalfacility argument sets the default facility for messages whichdo not have a facility explicitly encoded.
Close the log file.
Set the priority mask to maskpri and return theprevious mask value.
Calls to syslog() with a prioritylevel not set in maskpri are ignored.
The default is to log allpriorities.
The function LOG_MASK(pri) calculates themask for the individual priority pri.
The functionLOG_UPTO(pri) calculates the mask for all priorities upto and including pri.
The module defines the following constants:
Priority levels (high to low):
LOG_EMERG, LOG_ALERT, LOG_CRIT,LOG_ERR, LOG_WARNING, LOG_NOTICE,LOG_INFO, LOG_DEBUG.
Facilities:
LOG_KERN, LOG_USER, LOG_MAIL,LOG_DAEMON, LOG_AUTH, LOG_LPR,LOG_NEWS, LOG_UUCP, LOG_CRON andLOG_LOCAL0 to LOG_LOCAL7.
Log options:
LOG_PID, LOG_CONS, LOG_NDELAY,LOG_NOWAIT and LOG_PERROR if defined insyslog.h.
For the time being this module is intended to be called as a script.However it is possible to import it into an IDE and use the functioncheck() described below.
Warning:The API provided by this module is likely to change in future releases; such changes may not be backward compatible.
If file_or_dir is a directory and not a symbolic link, thenrecursively descend the directory tree named by file_or_dir,checking all .py files along the way.
If file_or_diris an ordinary Python source file, it is checked for whitespacerelated problems.
The diagnostic messages are written to standardoutput using the print statement.
Flag indicating whether to print verbose messages.This is incremented by the -v option if called as a script.
This is set to true by the-q option if called as a script.
Raised by tokeneater() if detecting an ambiguous indent.Captured and handled in check().
This function is used by check() as a callback parameter tothe function tokenize.tokenize().
Lexical scanner for Python source code.
The tarfile module makes it possible to read and create tar archives.Some facts and figures:
reads and writes gzip and bzip2 compressed archives.
creates POSIX 1003.1-1990 compliant or GNU tar compatible archives.
reads GNU tar extensions longname, longlink andsparse.
stores pathnames of unlimited length using GNU tar extensions.
handles directories, regular files, hardlinks, symbolic links, fifos,character devices and block devices and is able to acquire andrestore file information like timestamp, access permissions and owner.
can handle tape devices.
Return a TarFile object for the pathname name.For detailed information on TarFile objects,see TarFile Objects (section 7.19.1).
mode has to be a string of the form 'filemode[:compression]',it defaults to 'r'. Here is a full list of mode combinations:
action
Open for reading with transparent compression (recommended).
Open for reading exclusively without compression.
Open for reading with gzip compression.
Open for reading with bzip2 compression.
'a' or 'a:'
Open for appending with no compression.
'w' or 'w:'
Open for uncompressed writing.
Open for gzip compressed writing.
Open for bzip2 compressed writing.
Note that 'a:gz' or 'a:bz2' is not possible.If mode is not suitable to open a certain (compressed) file forreading, ReadError is raised.
Use mode 'r' toavoid this.
If a compression method is not supported,CompressionError is raised.If fileobj is specified, it is used as an alternative toa file object opened for name.For special purposes, there is a second format for mode:'filemode|[compression]'. open() will return aTarFile object that processes its data as a stream ofblocks.
No random seeking will be done on the file.
If given,fileobj may be any object that has a read() orwrite() method (depending on the mode).bufsize specifies the blocksize and defaults to 20 *512 bytes.
Use this variant in combination withe.g. sys.stdin, a socket file object or a tape device.However, such a TarFile object is limited in that it doesnot allow to be accessed randomly, see ``Examples''(section7.19.3).
The currently possible modes:
Mode
Open a stream of uncompressed tar blocks for reading.
Open a gzip compressed stream for reading.
Open a bzip2 compressed stream for reading.
Open an uncompressed stream for writing.
Open an gzip compressed stream for writing.
Open an bzip2 compressed stream for writing.
Class for reading and writing tar archives.
Do not use thisclass directly, better use open() instead.See ``TarFile Objects'' (section7.19.1).
Return True if name is a tar archive file, thatthe tarfile module can read.
classTarFileCompat
Constant for an uncompressed tar archive.
compressed tar archive.
Base class for all tarfile exceptions.
Is raised when a tar archive is opened, that either cannot be handled bythe tarfile module or is somehow invalid.
Is raised when a compression method is not supported or when the datacannot be decoded properly.
Is raised for the limitations that are typical for stream-likeTarFile objects.
Is raised for non-fatal errors when using extract(), butonly if TarFile.errorlevel
== 2.
See Also:
: Documentation of the
GNU tar manual, Standard Section
Documentation for tar archive files,including GNU tar extensions.
Subsections 7.19.1 TarFile Objects
The telnetlib module provides a Telnet class thatimplements the Telnet protocol.
See RFC 854 for details about theprotocol.
In addition, it provides symbolic constants for the protocolcharacters (see below), and for the telnet options.
Thesymbolic names of the telnet options follow the definitions inarpa/telnet.h, with the leading TELOPT_ removed.
Forsymbolic names of options which are traditionally not included inarpa/telnet.h, see the module source itself.The symbolic constants for the telnet commands are: IAC, DONT, DO,WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (DataMark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT(Are You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead),SB (Subnegotiation Begin).
classTelnet
Telnet represents a connection to a Telnet server.
Theinstance is initially not connected by default; the open()method must be used to establish a connection.
See theindividual descriptions below.
RFC 854, Telnet Protocol Specification
Definition of the Telnet protocol.
Subsections 11.14.1 Telnet Objects
6.21.4.9 Callback example 6:
This module generates temporary files and directories.
It works onall supported platforms.In version 2.3 of Python, this module was overhauled for enhancedsecurity.
It now provides three new functions,NamedTemporaryFile(), mkstemp(), andmkdtemp(), which should eliminate all remaining need to usethe insecure mktemp() function.
Temporary file names createdby this module no longer contain the process ID; instead a string ofsix random characters is used.Also, all the user-callable functions now take additional argumentswhich allow direct control over the location and name of temporaryfiles.
It is no longer necessary to use the global tempdir andtemplate variables.
To maintain backward compatibility, theargument order is somewhat odd; it is recommended to use keywordarguments for clarity.The module defines the following user-callable functions:
Return a file (or file-like) object that can be used as a temporarystorage area.
The file is created using mkstemp.
It willbe destroyed as soon as it is closed (including an implicit close whenthe object is garbage collected).
Under Unix, the directory entryfor the file is removed immediately after the file is created.
Otherplatforms do not support this; your code should not rely on atemporary file created using this function having or not having avisible name in the file system.The mode parameter defaults to 'w+b' so that the filecreated can be read and written without being closed.
This function operates exactly as TemporaryFile() does,except that the file is guaranteed to have a visible name in the filesystem (on Unix, the directory entry is not unlinked).
That name canbe retrieved from the name member of the file object.
Creates a temporary file in the most secure manner possible.
Thereare no race conditions in the file's creation, assuming that theplatform properly implements the O_EXCL flag foros.open().
The file is readable and writable only by thecreating user ID.
If the platform uses permission bits to indicatewhether a file is executable, the file is executable by no one.
mkstemp() returns a tuple containing an OS-level handle toan open file (as would be returned by os.
open()) and theabsolute pathname of that file, in that order.New in version 2.3.
Creates a temporary directory in the most secure manner possible.There are no race conditions in the directory's creation.
mkdtemp() returns the absolute pathname of the new directory.New in version 2.3.
mktemp
Deprecated since release 2.3.Use mkstemp() instead.
Return an absolute pathname of a file that did not exist at the timethe call is made.
The prefix, suffix, and dirarguments are the same as for mkstemp().
Warning:Use of this function may introduce a security hole in yourprogram.
By the time you get around to doing anything with the filename it returns, someone else may have beaten you to the punch.
The module uses two global variables that tell it how to construct atemporary name.
They are initialized at the first call to any of thefunctions above.
The caller may change them, but this is discouraged;use the appropriate function arguments, instead.
When set to a value other than None, this variable defines thedefault value for the dir argument to all the functions definedin this module.If tempdir is unset or None at any call to any of theabove functions, Python searches a standard list of directories andsets tempdir to the first one which the calling user can createfiles in.
The list is:
The directory named by the TMPDIR environment variable.
The directory named by the TEMP environment variable.
The directory named by the TMP environment variable.
A platform-specific location:
On Macintosh, the Temporary Items folder.
On RiscOS, the directory named by theWimp$ScrapDir environment variable.
On all other platforms, the directories/tmp, /var/tmp, and /usr/tmp, in that order.
As a last resort, the current working directory.
Return the directory currently selected to create temporary files in.If tempdir is not None, this simply returns its contents;otherwise, the search described above is performed, and the resultreturned.
Deprecated since release 2.0.Use gettempprefix() instead.
When set to a value other than None, this variable defines theprefix of the final component of the filenames returned bymktemp().
A string of six random letters and digits isappended to the prefix to make the filename unique.
On Windows,the default prefix is ~T; on all other systemsit is tmp.Older versions of this module used to require that template beset to None after a call to os.
fork(); this has notbeen necessary since version 1.5.2.
Return the filename prefix used to create temporary files.
This doesnot contain the directory component.
Using this function is preferredover reading the template variable directly.New in version 1.5.2.
This module provides an interface to the POSIX calls for tty I/Ocontrol.
For a complete description of these calls, see the POSIX orUnix manual pages.
It is only available for those Unix versionsthat support POSIX termios style tty I/O control (and thenonly if configured at installation time).All functions in this module take a file descriptor fd as theirfirst argument.
Return a list containing the tty attributes for file descriptorfd, as follows: [
The interpretation of the flags and the speeds as well asthe indexing in the cc array must be done using the symbolicconstants defined in the termiosmodule.
Set the tty attributes for file descriptor fd from theattributes, which is a list like the one returned bytcgetattr().
The when argument determines when theattributes are changed: TCSANOW to change immediately,TCSADRAIN to change after transmitting all queued output,or TCSAFLUSH to change after transmitting all queuedoutput and discarding all queued input.
Send a break on file descriptor fd.
A zero duration sendsa break for 0.25-0.5 seconds; a nonzero duration has a systemdependent meaning.
Wait until all output written to file descriptor fd has beentransmitted.
Discard queued data on file descriptor fd.
The queueselector specifies which queue: TCIFLUSH for the inputqueue, TCOFLUSH for the output queue, orTCIOFLUSH for both queues.
Suspend or resume input or output on file descriptor fd.
Theaction argument can be TCOOFF to suspend output,TCOON to restart output, TCIOFF to suspendinput, or TCION to restart input.
Convenience functions for common terminal controloperations.
5.4.1 Writing Unit Tests
The test package contains all regression tests for Python aswell as the modules test.test_support andtest.regrtest. test.test_support is used to enhanceyour tests while test.regrtest drives the testing suite.Each module in the test package whose name starts with"test_" is a testing suite for a specific module or feature.All new tests should be written using the
unittest
module;using
unittest is not required but makes the tests moreflexible and maintenance of the tests easier.
Some older tests arewritten to use doctest
and a ``traditional'' testingstyle; these styles of tests will not be covered.
Writing PyUnit regression tests.
Tests embedded in documentation strings.
5.4.2 Running tests using test.regrtest
5.4.2 Running tests using
5.5 test.test_support --Utility functions for tests
The test.test_support module provides support for Python'sregression tests.This module defines the following exceptions:
Exception to be raised when a test fails.
The test.test_support module defines the following constants:
True when verbose output is enabled.Should be checked when more detailed information is desired about a runningtest.verbose is set by test.regrtest.
have_unicode
True when Unicode support is available.
True if the running interpreter is Jython.
Set to the path that a temporary file may be created at.Any temporary that is created should be closed and unlinked (removed).
The test.test_support module defines the following functions:
Removes the module named module_name from sys.modules and deletesany byte-compiled files of the module.
Returns True if resource is enabled and available.The list of available resources is only set when test.regrtestis executing the tests.
)
Return the path to the file named filename.If no match is found filename is returned.This does not equal a failure since it could be the path to the file.
Execute unittest.TestCase subclasses passed to the function.The function scans the classes for methods starting with the prefix"test_" and executes the tests individually.This is the preferred way to execute tests.
run_suite
Execute the unittest.TestSuite instance suite.The optional argument testclass accepts one of the test classes in thesuite so as to print out more detailed information on where the testing suiteoriginated from.
The textwrap module provides two convenience functions,wrap() and fill(), as well asTextWrapper, the class that does all the work, and a utility function dedent().
If you're just wrapping or filling one or two text strings, the convenience functions should be good enough; otherwise, you should use an instance of TextWrapper for efficiency.
Wraps the single paragraph in text (a string) so every line is atmost width characters long.
Wraps the single paragraph in text, and returns a single stringcontaining the wrapped paragraph. fill() is shorthand for
"\n".join(wrap(text, ...))
In particular, fill() accepts exactly the same keywordarguments as wrap().
Both wrap() and fill() work by creating aTextWrapper instance and calling a single method on it.
classTextWrapper
The TextWrapper constructor accepts a number of optionalkeyword arguments.
Each argument corresponds to one instance attribute,so for example
is the same as
wrapper = TextWrapper()wrapper.initial_indent = "* "
You can re-use the same TextWrapper object many times, and youcan change any of its options through direct assignment to instanceattributes between uses.
The TextWrapper instance attributes (and keyword arguments tothe constructor) are as follows:
(default: 70) The maximum length of wrapped lines.
As long asthere are no individual words in the input text longer thanwidth, TextWrapper guarantees that no output linewill be longer than width characters.
(default: True) If true, then all tab characters in textwill be expanded to spaces using the expand_tabs() method oftext.
(default: True) If true, each whitespace character (as definedby string.whitespace) remaining after tab expansion will bereplaced by a single space.
(default: '') String that will be prepended to the first lineof wrapped output.
Counts towards the length of the first line.
(default: '') String that will be prepended to all lines ofwrapped output except the first.
Counts towards the length of eachline except the first.
(default: False) If true, TextWrapper attempts to detectsentence endings and ensure that sentences are always separated byexactly two spaces.
This is generally desired for text in a monospacedfont.
However, the sentence detection algorithm is imperfect: itassumes that a sentence ending consists of a lowercase letter followedby one of ".","!", or "?", possibly followed by one of""" or "'", followed by a space.
One problemwith this is algorithm is that it is unable to detect the differencebetween ``Dr.'' in
and ``Spot.'' in
See Spot run [...]
fix_sentence_endings is false by default.Since the sentence detection algorithm relies onstring.
lowercase for the definition of ``lowercase letter,''and a convention of using two spaces after a period to separatesentences on the same line, it is specific to English-language texts.
(default: True) If true, then words longer thanwidth will be broken in order to ensure that no lines arelonger than width.
If it is false, long words will not bebroken, and some lines may be longer than width.
(Long wordswill be put on a line by themselves, in order to minimize the amountby which width is exceeded.)
TextWrapper also provides two public methods, analogous to themodule-level convenience functions:
Wraps the single paragraph in text (a string) so every line isat most width characters long.
All wrapping options aretaken from instance attributes of the TextWrapper instance.Returns a list of output lines, without final newlines.
Wraps the single paragraph in text, and returns a single stringcontaining the wrapped paragraph.
This module provides low-level primitives for working with multiplethreads (a.k.a. light-weight processes or tasks) -- multiplethreads of control sharing their global data space.
Forsynchronization, simple locks (a.k.a. mutexes or binarysemaphores) are provided.
The module is optional.
It is supported on Windows, Linux, SGIIRIX, Solaris 2.x, as well as on systems that have a POSIX thread(a.k.a. ``pthread'') implementation.
For systems lacking the threadmodule, the
module is available.It duplicates this module's interface and can beused as a drop-in replacement.
It defines the following constant and functions:
Raised on thread-specific errors.
This is the type of lock objects.
Start a new thread and return its identifier.
The thread executes the functionfunction with the argument list args (which must be a tuple).
Theoptional kwargs argument specifies a dictionary of keyword arguments.When the function returns, the thread silently exits.
A subthread can use thisfunction to interrupt the main thread.New in version 2.3.
Raise the SystemExit exception.
When not caught, thiswill cause the thread to exit silently.
Return a new lock object.
Methods of locks are described below.
Thelock is initially unlocked.
Return the `thread identifier' of the current thread.
This is anonzero integer.
Its value has no direct meaning; it is intended as amagic cookie to be used e.g. to index a dictionary of thread-specificdata.
Thread identifiers may be recycled when a thread exits andanother thread is created.
Lock objects have the following methods:
)
Without the optional argument, this method acquires the lockunconditionally, if necessary waiting until it is released by anotherthread (only one thread at a time can acquire a lock -- that's theirreason for existence), and returns None.
If an argument is present, thereturn value is True if the lock is acquired successfully,False if not.
Releases the lock.
The lock must have been acquired earlier, but notnecessarily by the same thread.
Return the status of the lock: True if it has been acquired bysome thread, False if not.
Threads interact strangely with interrupts: theKeyboardInterrupt exception will be received by anarbitrary thread.
module is available, interrupts always go to the main thread.)
Calling sys.exit() or raising the SystemExitexception is equivalent to calling exit().
Not all built-in functions that may block waiting for I/O allow otherthreads to run.
(The most popular ones (time.sleep(),
file.read(), select.select()) work asexpected.)
It is not possible to interrupt the acquire() method on a lock-- the KeyboardInterrupt exception will happen after thelock has been acquired.
When the main thread exits, it is system defined whether the otherthreads survive.
On SGI IRIX using the native thread implementation,they survive.
On most other systems, they are killed withoutexecuting try ... finally clauses or executingobject destructors.
When the main thread exits, it does not do any of its usual cleanup(except that try ... finally clauses are honored),and the standard I/O files are not flushed.
This module constructs higher-level threading interfaces on top of the lower level
module.The dummy_threading
module is provided forsituations where threading cannot be used because
Return the number of currently active Thread objects.The returned count is equal to the length of the list returned byenumerate().A function that returns the number of currently active threads.
A factory function that returns a new condition variable object.A condition variable allows one or more threads to wait until theyare notified by another thread.
Return the current Thread object, corresponding to thecaller's thread of control.
If the caller's thread of control was notcreated through thethreading module, a dummy thread object with limited functionalityis returned.
Return a list of all currently active Thread objects.The list includes daemonic threads, dummy thread objects createdby currentThread(), and the main thread.
It excludes terminatedthreads and threads that have not yet been started.
A factory function that returns a new event object.
An event managesa flag that can be set to true with the set() method andreset to false with the clear() method.
The wait()method blocks until the flag is true.
A class that represents thread-local data.
Thread-local data are datawhose values are thread specific.
To manage thread-local data, justcreate an instance of local (or a subclass) and storeattributes on it:
The instance's values will be different for separate threads.For more details and extensive examples, see the documentation stringof the _threading_local module.
A factory function that returns a new primitive lock object.
Oncea thread has acquired it, subsequent attempts to acquire it block,until it is released; any thread may release it.
A factory function that returns a new semaphore object.
Asemaphore manages a counter representing the number of release()calls minus the number of acquire() calls, plus an initial value.The acquire() method blocks if necessary until it can returnwithout making the counter negative.
If not given, value defaults to1.
A factory function that returns a new bounded semaphore object.
A boundedsemaphore checks to make sure its current value doesn't exceed its initialvalue.
If it does, ValueError is raised.
In most situationssemaphores are used to guard resources with limited capacity.
If thesemaphore is released too many times it's a sign of a bug.
If not given,value defaults to 1.
A class that represents a thread of control.
This class can be safelysubclassed in a limited fashion.
A thread that executes a function after a specified interval has passed.
The func will be passed to sys.settrace() for each thread, before its run()method is called.New in version 2.3.
The func will be passed to sys.setprofile() for each thread, before its run()method is called.New in version 2.3.
Detailed interfaces for the objects are documented below.
The design of this module is loosely based on Java's threading model.However, where Java makes locks and condition variables basic behaviorof every object, they are separate objects in Python.
Python's Threadclass supports a subset of the behavior of Java's Thread class;currently, there are no priorities, no thread groups, and threadscannot be destroyed, stopped, suspended, resumed, or interrupted.
This module provides various time-related functions.
It is alwaysavailable, but not all functions are available on all platforms.
Mostof the functions defined in this module call platform C libraryfunctions with the same name.
It may sometimes be helpful to consultthe platform documentation, because the semantics of these functionsvaries among platforms.An explanation of some terminology and conventions is in order.
The epoch
is the point where the time starts.
OnJanuary 1st of that year, at 0 hours, the ``time since the epoch'' iszero.
For Unix, the epoch is 1970.
To find out what the epoch is,look at gmtime(0).
The functions in this module do not handle dates and times before theepoch or far in the future.
The cut-off point in the future isdetermined by the C library; for Unix, it is typically in2038
Year 2000 (Y2K) issues:
Pythondepends on the platform's C library, which generally doesn't have year2000 issues, since all dates and times are represented internally asseconds since the epoch.
Functions accepting a struct_time(see below) generally require a 4-digit year.
Thus, you can setPYTHONY2K to a non-empty string in the environment to require 4-digityears for all year input.
When 2-digit years are accepted, they areconverted according to the POSIX or X/Open standard: values 69-99are mapped to 1969-1999, and values 0-68 are mapped to 2000-2068.Values 100-1899 are always illegal.
Note that this is new as ofPython 1.5.2(a2); earlier versions, up to Python 1.5.1 and 1.5.2a1,would add 1900 to year values below 1900.
is Coordinated Universal Time
(formerly known as Greenwich MeanTime,
or GMT).
The acronym UTC is not amistake but a compromise between English and French.
DST is Daylight Saving Time,
an adjustmentof the timezone by (usually) one hour during part of the year.
DSTrules are magic (determined by local law) and can change from year toyear.
The C library has a table containing the local rules (often itis read from a system file for flexibility) and is the only source ofTrue Wisdom in this respect.
The precision of the various real-time functions may be less thansuggested by the units in which their value or argument is expressed.
E.g. on most Unix systems, the clock ``ticks'' only 50 or 100 times asecond, and on the Mac, times are only accurate to whole seconds.
On the other hand, the precision of time() andsleep() is better than their Unix equivalents: times areexpressed as floating point numbers, time() returns themost accurate time available (using Unix gettimeofday()where available), and sleep() will accept a time with anonzero fraction (Unix select() is used to implementthis, where available).
The time value as returned by gmtime(),localtime(), and strptime(), and accepted byasctime(), mktime() and strftime(),is a sequence of 9 integers. The return values of gmtime(),localtime(), and strptime() also offer attributenames for individual fields.
(for example, 1993)
range [1,12]
range [1,31]
range [0,23]
range [0,59]
range [0,61]; see (1) in strftime() description
range [0,6], Monday is 0
range [1,366]
0, 1 or -1; see below
Note that unlike the C structure, the month value is arange of 1-12, not 0-11.
A year value will be handled as describedunder ``Year 2000 (Y2K) issues'' above.
A -1 argument as thedaylight savings flag, passed to mktime() will usuallyresult in the correct daylight savings state to be filled in.When a tuple with an incorrect length is passed to a functionexpecting a struct_time, or having elements of the wrong type, aTypeError is raised.
Changed in version 2.2:The time value sequence was changed from a tuple to astruct_time, with the addition of attribute namesfor the fields.
The module defines the following functions and data items:
Boolean value indicating whether two-digit year values will beaccepted.
This is true by default, but will be set to false if theenvironment variable PYTHONY2K has been set to a non-emptystring.
It may also be modified at run time.
The offset of the local DST timezone, in seconds west of UTC, if oneis defined. This is negative if the local DST timezone is east of UTC(as in Western Europe, including the UK).
Only use this ifdaylight is nonzero.
Convert a tuple or struct_time representing a time as returnedby gmtime()or localtime() to a 24-character string of the following form:'Sun Jun 20 23:21:05 1993'.
If t is not provided, thecurrent time as returned by localtime() is used.Locale information is not used by asctime().
Note:Unlike the C function of the same name, there is no trailingnewline.
Changed in version 2.1:Allowed t to be omitted.
On Unix, returnthe current processor time as a floating point number expressed inseconds.
The precision, and in fact the very definition of the meaningof ``processor time''
, dependson that of the C function of the same name, but in any case, this isthe function to use for benchmarking
Python ortiming algorithms.On Windows, this function returns wall-clock seconds elapsed since thefirst call to this function, as a floating point number,based on the Win32 function QueryPerformanceCounter().The resolution is typically better than one microsecond.
Convert a time expressed in seconds since the epoch to a stringrepresenting local time.
Changed in version 2.4:If secs is None, the current time isused.
Nonzero if a DST timezone is defined.
Convert a time expressed in seconds since the epoch to a struct_timein UTC in which the dst flag is always zero.
If secs is notprovided or None, the current time as returned bytime() is used.
Fractions of a second are ignored.
Seeabove for a description of the struct_time object.
Seecalendar.timegm() for the inverse of this function.Changed in version 2.1:Allowed secs to be omitted.
Like gmtime() but converts to local time.
If secs isnot provided or None, the current time as returned bytime() is used.
The dst flag is set to 1 when DSTapplies to the given time.Changed in version 2.1:Allowed secs to be omitted.
This is the inverse function of localtime().
Its argumentis the struct_time or full 9-tuple (since the dst flag isneeded; use -1 as the dst flag if it is unknown) whichexpresses the time inlocal time, not UTC.
It returns a floating point number, forcompatibility with time().
If the input value cannot berepresented as a valid time, either OverflowError orValueError will be raised (which depends on whether theinvalid value is caught by Python or the underlying C libraries).
Theearliest date for which it can generate a time is platform-dependent.
Suspend execution for the given number of seconds.
Also, the suspensiontime may be longer than requested by an arbitrary amount because ofthe scheduling of other activity in the system.
Convert a tuple or struct_time representing a time as returnedby gmtime() or localtime() to a string asspecified by the format argument.
If t is notprovided, the current time as returned by localtime() isused. format must be a string.
ValueError is raisedif any field in t is outside of the allowed range.Changed in version 2.1:Allowed t to be omitted.
Changed in version 2.4:ValueError raised if a field in t isout of range..
The following directives can be embedded in the format string.They are shown without the optional field width and precisionspecification, and are replaced by the indicated characters in thestrftime() result:
Locale's abbreviated weekday name.
Locale's full weekday name.
Locale's abbreviated month name.
Locale's full month name.
Locale's appropriate date and time representation.
%H
Hour (24-hour clock) as a decimal number [00,23].
Hour (12-hour clock) as a decimal number [01,12].
Day of the year as a decimal number [001,366].
Month as a decimal number [01,12].
Minute as a decimal number [00,59].
Locale's equivalent of either AM or PM.
Second as a decimal number [00,61].
Week number of the year (Sunday as the first day of theweek) as a decimal number [00,53].
All days in a new yearpreceding the first Sunday are considered to be in week 0.
Weekday as a decimal number [0(Sunday),6].
Week number of the year (Monday as the first day of theweek) as a decimal number [00,53].
All days in a new yearpreceding the first Monday are considered to be in week 0.
Locale's appropriate date representation.
Locale's appropriate time representation.
Year without century as a decimal number [00,99].
Year with century as a decimal number.
Time zone name (no characters if no time zone exists).
A literal "%" character.
Notes:
When used with the strptime() function, the %pdirective only affects the output hour field if the %I directiveis used to parse the hour.
The range really is 0 to 61; this accounts for leapseconds and the (very rare) double leap seconds.
When used with the strptime() function, %U and %Ware only used in calculations when the day of the week and the year arespecified.
Here is an example, a format for dates compatible with that specified in the RFC 2822 Internet email standard.
Parse a string representing a time according to a format.
The return value is a struct_time as returned by gmtime() orlocaltime().
The format parameter uses the samedirectives as those used by strftime(); it defaults to"%a %b %d %H:%M:%S %Y" which matches the formattingreturned by ctime().
If string cannot be parsedaccording to format, ValueError is raised.
If thestring to be parsed has excess data after parsing,ValueError is raised.
The default values used to fill inany missing data are (1900, 1, 1, 0, 0, 0, 0, 1, -1) .Support for the %Z directive is based on the values contained intzname and whether daylight is true.
Because of this,it is platform-specific except for recognizing UTC and GMT which arealways known (and are considered to be non-daylight savingstimezones).
The type of the time value sequence returned by gmtime(),localtime(), and strptime().New in version 2.2.
)
Return the time as a floating point number expressed in seconds sincethe epoch, in UTC.
Note that even though the time is always returnedas a floating point number, not all systems provide time with a betterprecision than 1 second.
While this function normally returnsnon-decreasing values, it can return a lower value than a previouscall if the system clock has been set back between the two calls.
The offset of the local (non-DST) timezone, in seconds west of UTC(negative in most of Western Europe, positive in the US, zero in theUK).
A tuple of two strings: the first is the name of the local non-DSTtimezone, the second is the name of the local DST timezone.
Availability: Unix.
Note:Although in many cases, changing the TZ environment variablemay affect the output of functions like localtime without calling tzset, this behavior should not be relied on.The TZ environment variable should contain no whitespace.
The standard format of the TZ environment variable is:(whitespace added for clarity)
Where:
std and dst
Three or more alphanumerics giving the timezone abbreviations.These will be propogated into time.
tzname
The offset has the form: hh[:mm[:ss]].This indicates the value added the local time to arrive at UTC.
If preceded by a '-', the timezone is east of the Prime Meridian; otherwise, it is west.
If no offset followsdst, summmer time is assumed to be one hour ahead of standard time.
Indicates when to change to and back from DST.
The format of thestart and end dates are one of the following:
The Julian day n (1 = n = 365).
Leap days are not counted, so in all years February 28 is day 59 andMarch 1 is day 60.
The zero-based Julian day (0 = n = 365).
Leap days arecounted, and it is possible to refer to February 29.
The d'th day (0 = d = 6) or week n of month m of the year (1 = n = 5, 1 = m = 12, where week 5 means "the last d dayin month m" which may occur in either the fourth or the fifth week).
Week 1 is the first week in which the d'th day occurs.
Day zero is Sunday.
time has the same format as offset except that no leading sign ('-' or'+') is allowed.
The default, if time is not given, is 02:00:00.
On many Unix systems (including *BSD, Linux, Solaris, and Darwin), itis more convenient to use the system's zoneinfo (
tzfile(5)) database to specify the timezone rules.
To do this, set the TZ environment variable to the path of the required timezone datafile, relative to the root of the systems 'zoneinfo' timezone database,usually located at /usr/share/zoneinfo.
For example, 'US/Eastern', 'Australia/Melbourne', 'Egypt' or 'Europe/Amsterdam'.
More object-oriented interface to dates and times.
The localesettings can affect the return values for some of the functions in the time module.
... standard.
The use of %Z is nowdeprecated, but the %z escape that expands to the preferred hour/minute offset is not supported by all ANSI C libraries.
Also,a strict reading of the original 1982 RFC 822 standard calls fora two-digit year (%y rather than %Y), but practice moved to4-digit years long before the year 2000.
The 4-digit year hasbeen mandated by RFC 2822, which obsoletes RFC 822.
This module provides a simple way to time small bits of Python code.It has both command line as well as callable interfaces.
It avoids anumber of common traps for measuring execution times.
See also TimPeters' introduction to the ``Algorithms'' chapter in thePython Cookbook, published by O'Reilly.The module defines the following public class:
classTimer
Class for timing execution speed of small code snippets.The constructor takes a statement to be timed, an additional statementused for setup, and a timer function.
Both statements default to'pass'; the timer function is platform-dependent (see themodule doc string).
The statements may contain newlines, as long asthey don't contain multi-line string literals.To measure the execution time of the first statement, use thetimeit() method.
The repeat() method is aconvenience to call timeit() multiple times and return a listof results.
Helper to print a traceback from the timed code.Typical use:
t = Timer(...) # outside the try/excepttry:t.timeit(...) # or t.repeat(...)except:t.print_exc()
)
Call timeit() a few times.This is a convenience function that calls the timeit()repeatedly, returning a list of results.
The first argument specifieshow many times to call timeit().
The second argumentspecifies the number argument for timeit().
Note:It's tempting to calculate mean and standard deviation from the resultvector and report these.
So the min() of the result isprobably the only number you should be interested in.
After that, youshould look at the entire vector and apply common sense rather thanstatistics.
)
Time number executions of the main statement.This executes the setup statement once, and thenreturns the time it takes to execute the main statement a number oftimes, measured in seconds as a float.
The argument is the number oftimes through the loop, defaulting to one million.
The mainstatement, the setup statement and the timer function to be used arepassed to the constructor.
Note:By default, timeit() temporarily turns off garbage collectionduring the timing.
The advantage of this approach is that it makesindependent timings more comparable.
This disadvantage is that GCmay be an important component of the performance of the function beingmeasured.
If so, GC can be re-enabled as the first statement in thesetup string.
For example:
This module provides constants which represent the numeric values ofleaf nodes of the parse tree (terminal tokens).
Refer to the fileGrammar/Grammar in the Python distribution for the definitionsof the names in the context of the language grammar.
The specificnumeric values which the names map to may change between Pythonversions.This module also provides one data object and some functions.
Thefunctions mirror definitions in the Python C header files.
Dictionary mapping the numeric values of the constants defined in thismodule back to name strings, allowing more human-readablerepresentation of parse trees to be generated.
Return true for terminal token values.
Return true for non-terminal token values.
Return true if x is the marker indicating the end of input.
The tokenize module provides a lexical scanner for Pythonsource code, implemented in Python.
The generate_tokens() generator requires one argment,readline, which must be a callable object whichprovides the same interface as the readline() method ofbuilt-in file objects (see section2.3.9).
An older entry point is retained for backward compatibility:
The tokenize() function accepts two parameters: onerepresenting the input stream, and one providing an output mechanismfor tokenize().The first parameter, readline, must be a callable object whichprovides the same interface as the readline() method ofbuilt-in file objects (see section2.3.9).
Eachcall to the function should return one line of input as a string.The second parameter, tokeneater, must also be a callableobject.
It is called once for each token, with five arguments,corresponding to the tuples generated by generate_tokens(). All constants from the
module are also exported fromtokenize, as are two additional token type values that might bepassed to the tokeneater function by tokenize():
Token value used to indicate a comment.
Token value used to indicate a non-terminating newline.
The NEWLINEtoken indicates the end of a logical line of Python code; NL tokensare generated when a logical line of code is continued over multiplephysical lines.
This module provides a standard interface to extract, format and printstack traces of Python programs.
It exactly mimics the behavior ofthe Python interpreter when it prints a stack trace.
This is usefulwhen you want to print stack traces under program control, such as in a``wrapper'' around the interpreter.The module uses traceback objects -- this is the object type that isstored in the variables sys.exc_traceback (deprecated) andsys.last_traceback and returned as the third item fromsys.exc_info().
The module defines the following functions:
Print up to limit stack trace entries from traceback.
Iflimit is omitted or None, all entries are printed.If file is omitted or None, the output goes tosys.stderr; otherwise it should be an open file or file-likeobject to receive the output.
print_exception
)
This is a shorthand for print_exception(sys.exc_type,sys.exc_value, sys.exc_traceback, limit, file).
(Infact, it uses sys.exc_info() to retrieve the sameinformation in a thread-safe way instead of using the deprecatedvariables.)
This is like print_exc(limit) but returns a stringinstead of printing to a file.New in version 2.4.
print_last
This is a shorthand for print_exception(sys.last_type,sys.last_value, sys.last_traceback, limit, file).
This function prints a stack trace from its invocation point.
Theoptional f argument can be used to specify an alternate stackframe to start.
The optional limit and file arguments have thesame meaning as for print_exception().
Return a list of up to limit ``pre-processed'' stack traceentries extracted from the traceback object traceback.
It isuseful for alternate formatting of stack traces.
If limit isomitted or None, all entries are extracted.
A``pre-processed'' stack trace entry is a quadruple (filename,line number, function name, text) representingthe information that is usually printed for a stack trace.
Thetext is a string with leading and trailing whitespacestripped; if the source is not available it is None.
Extract the raw traceback from the current stack frame.
The returnvalue has the same format as for extract_tb().
Theoptional f and limit arguments have the same meaning asfor print_stack().
Given a list of tuples as returned by extract_tb() orextract_stack(), return a list of strings ready forprinting.
Each string in the resulting list corresponds to the itemwith the same index in the argument list.
Each string ends in anewline; the strings may contain internal newlines as well, for thoseitems whose source text line is not None.
Format the exception part of a traceback.
The arguments are theexception type and value such as given by sys. last_type andsys.last_value.
The return value is a list of strings, eachending in a newline.
Normally, the list contains a single string;however, for SyntaxError exceptions, it contains severallines that (when printed) display detailed information about where thesyntax error occurred.
The message indicating which exceptionoccurred is the always last string in the list.
Format a stack trace and the exception information.
The arguments have the same meaning as the corresponding arguments toprint_exception().
The return value is a list of strings,each ending in a newline and some containing internal newlines.
Whenthese lines are concatenated and printed, exactly the same text isprinted as does print_exception().
A shorthand for format_list(extract_tb(tb, limit)).
A shorthand for format_list(extract_stack(f, limit)).
This function returns the current line number set in the tracebackobject.
This function was necessary because in versions of Pythonprior to 2.3 when the -O flag was passed to Python the
tb.tb_lineno was not updated correctly.
This functionhas no use in versions past 2.3. Subsections
The tty module defines functions for putting the tty intocbreak and raw modes.Because it requires the
module, it will workonly on Unix.The tty module defines the following functions:
Change the mode of the file descriptor fd to raw.
If whenis omitted, it defaults to termios.TCSAFLUSH, and is passedto termios. tcsetattr().
Change the mode of file descriptor fd to cbreak.
See Also:
Low-level terminal control interface.
The turtle module provides turtle graphics primitives, in both anobject-oriented and procedure-oriented ways.
Set angle measurement units to degrees.
Set angle measurement units to radians.
Clear the screen, re-center the pen, and set variables to the defaultvalues.
Clear the screen.
Set tracing on/off (according to whether flag is true or not).
Tracingmeans line are drawn more slowly, with an animation of an arrow along the line.
Go forward distance steps.
Go backward distance steps.
Turn left angle units.
Units are by default degrees, but can beset via the degrees() and radians() functions.
Turn right angle units.
Move the pen up -- stop drawing.
Move the pen down -- draw when moving.
Set the line width to width.
Set the pen color.
In the first form, the color is specified as aTk color specification as a string.
The second form specifies thecolor as a tuple of the RGB values, each in the range [0.. 1].
For thethird form, the color is specified giving the RGB values as threeseparate parameters (each in the range [0.. 1]).
Write text at the current pen position.
If move is true,the pen is moved to the bottom-right corner of the text.
By default,move is false.
The complete specifications are rather complex, but the recommended usage is: call fill(1) before drawing a path you want to fill,and call fill(0) when you finish to draw the path.
)
Draw a circle with radius radius whose center-point isradius units left of the turtle.extent determines which part of a circle is drawn: ifnot given it defaults to a full circle.If extent is not a full circle, one endpoint of the arc is thecurrent pen position.
The arc is drawn in a counter clockwisedirection if radius is positive, otherwise in a clockwisedirection.
In the process, the direction of the turtle is changedby the amount of the extent.
Go to co-ordinates x, y.
The co-ordinates may bespecified either as two separate arguments or as a 2-tuple.
This module also does from math import *, so see thedocumentation for the
module for additional constantsand functions useful for turtle graphics.
Exercise the module a bit.
Exception raised on any error caught by this module.
For examples, see the code of the demo() function.This module defines the following classes:
classPen
Define a pen.
All above functions can be called as a methods on the givenpen.
The constructor automatically creates a canvas do be drawn on.
classRawPen
Define a pen which draws on a canvas canvas.
This is useful if you want to use the module to create graphics in a ``real'' program. Subsections
This module defines names for some object types that are used bythe standard Python interpreter, but not for the types defined by variousextension modules.
Also, it does not include some of the types thatarise during processing such the listiterator type.It is safe to use "from types import *"
--the module does not export any names besides the ones listed here.New names exported by future versions of this module will all end in"Type".Typical use is for functions that do different things depending ontheir argument types, like the following:
Starting in Python 2.2, built-in factory functions such asint() and str() are also names for thecorresponding types. This is now the preferred way to accessthe type instead of using the types module.
Accordingly,the example above should be written as follows:
The module defines the following names:
The type of None.
The type of the bool values True and False; thisis an alias of the built-in bool() function.New in version 2.3.
The type of integers (e.g. 1).
The type of long integers (e.g. 1L).
The type of floating point numbers (e.g. 1.0).
The type of complex numbers (e.g. 1.0j).
This is not definedif Python was built without complex number support.
The type of character strings (e.g. 'Spam').
The type of Unicode character strings (e.g. u'Spam').
This isnot defined if Python was built without Unicode support.
The type of tuples (e.g. (1, 2, 3, 'Spam')).
The type of lists (e.g. [0, 1, 2, 3]).
The type of dictionaries (e.g. {'Bacon': 1, 'Ham': 0}).
An alternate name for DictType.
The type of user-defined functions and lambdas.
An alternate name for FunctionType.
The type of generator-iterator objects, produced by calling agenerator function.New in version 2.2.
The type of user-defined classes.
The type of instances of user-defined classes.
The type of methods of user-defined class instances.
An alternate name for MethodType.
The type of built-in functions like len() orsys.exit().
An alternate name for BuiltinFunction.
The type of modules.
The type of open file objects such as sys.stdout.
The type of Ellipsis.
The type of traceback objects such as found insys.exc_traceback.
The type of frame objects such as found in tb.tb_frame iftb is a traceback object.
function.
A sequence containing StringType and UnicodeType used tofacilitate easier checking for any string object.
Using this is moreportable than using a sequence of the two string types constructedelsewhere since it only contains UnicodeType if it has beenbuilt in the running version of Python.
For example:isinstance(s, types.StringTypes).New in version 2.2.
This module provides access to the Unicode Character Database whichdefines character properties for all Unicode characters.
The data inthis database is based on the UnicodeData.txt file version3.2.0 which is publically available from ftp://ftp.unicode.org/.The module uses the same names and symbols as defined by theUnicodeData File Format 3.2.0 (seehttp://www.unicode.org/Public/UNIDATA/UnicodeData.html).
Itdefines the following functions:
Look up character by name.
If a character with thegiven name is found, return the corresponding Unicodecharacter.
If not found, KeyError is raised.
Returns the name assigned to the Unicode characterunichr as a string.
If no name is defined,default is returned, or, if not given,ValueError is raised.
Returns the decimal value assigned to the Unicode characterunichr as integer.
If no such value is defined,default is returned, or, if not given,ValueError is raised.
Returns the digit value assigned to the Unicode characterunichr as integer.
Returns the numeric value assigned to the Unicode characterunichr as float.
If no such value is defined, default isreturned, or, if not given, ValueError is raised.
Returns the general category assigned to the Unicode characterunichr as string.
Returns the bidirectional category assigned to the Unicode characterunichr as string.
If no such value is defined, an empty stringis returned.
Returns the canonical combining class assigned to the Unicodecharacter unichr as integer.
Returns 0 if no combiningclass is defined.
Returns the east asian width assigned to the Unicode characterunichr as string.New in version 2.4.
Returns the mirrored property assigned to the Unicode characterunichr as integer.
Returns 1 if the character has beenidentified as a ``mirrored'' character in bidirectional text,0 otherwise.
Returns the character decomposition mapping assigned to the Unicodecharacter unichr as string.
An empty string is returned in caseno such mapping is defined.
In Unicode, several characters can beexpressed in various way.
In Unicode, certain characters aresupported which normally would be unified with other characters.
Forexample, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049(LATIN CAPITAL LETTER I).
Thenormal form KC (NFKC) first applies the compatibility decomposition,followed by the canonical composition.
In addition, the module exposes the following constant:
The version of the Unicode database used in this module.
5.2.8 Soapbox
The Python unit testing framework, often referred to as ``PyUnit,'' isa Python language version of JUnit, by Kent Beck and Erich Gamma.JUnit is, in turn, a Java version of Kent's Smalltalk testingframework.
Each is the de facto standard unit testing framework forits respective language.PyUnit supports test automation, sharing of setup and shutdown codefor tests, aggregation of tests into collections, and independence ofthe tests from the reporting framework.
The unittest moduleprovides classes that make it easy to support these qualities for aset of tests.To achieve this, PyUnit supports some important concepts:
A test fixture represents the preparation needed to perform oneor more tests, and any associate cleanup actions.
A test case is the smallest unit of testing. It checks for aspecific response to a particular set of inputs.
PyUnit provides abase class, TestCase, which may be used to create new testcases.
You may provide your own implementation that does not subclassfrom TestCase, of course.
test suite
A test suite is a collection of test cases, test suites, orboth. It is used to aggregate tests that should be executedtogether.
test runner
A test runner is a component which orchestrates the execution oftests and provides the outcome to the user.
The runner may use agraphical interface, a textual interface, or return a special value toindicate the results of executing the tests.
The test case and test fixture concepts are supported through theTestCase and FunctionTestCase classes; the formershould be used when creating new tests, and the latter can be used whenintegrating existing test code with a PyUnit-driven framework.
Whenbuilding test fixtures using TestCase, the setUp()and tearDown() methods can be overridden to provideinitialization and cleanup for the fixture.
WithFunctionTestCase, existing functions can be passed to theconstructor for these purposes.
When the test is run, thefixture initialization is run first; if it succeeds, the cleanupmethod is run after the test has been executed, regardless of theoutcome of the test.
Each instance of the TestCase will onlybe used to run a single test method, so a new fixture is created foreach test.Test suites are implemented by the TestSuite class.
Thisclass allows individual tests and test suites to be aggregated; whenthe suite is executed, all tests added directly to the suite and in``child'' test suites are run.A test runner is an object that provides a single method,run(), which accepts a TestCase or TestSuiteobject as a parameter, and returns a result object.
The classTestResult is provided for use as the result object.
PyUnitprovide the TextTestRunner as an example test runner whichreports test results on the standard error stream by default.Alternate runners can be implemented for other environments (such asgraphical environments) without any need to derive from a specificclass.
Subsections 5.3.1 Basic example
This module provides a high-level interface for fetching data acrossthe World Wide Web.
In particular, the urlopen() functionis similar to the built-in function open(), but acceptsUniversal Resource Locators (URLs) instead of filenames.
Somerestrictions apply -- it can only open URLs for reading, and no seekoperations are available.It defines the following public functions:
Open a network object denoted by a URL for reading.
If the URL doesnot have a scheme identifier, or if it has file: as its schemeidentifier, this opens a local file (without universal newlines);otherwise it opens a socket to a server somewhere on the network.
Ifthe connection cannot be made, or if the server returns an error code,the IOError exception is raised.
If all went well, afile-like object is returned.
This supports the following methods:read(), readline(), readlines(), fileno(),close(), info() and geturl().
(It is not a built-in file object, however, so it can't beused at those few places where a true built-in file object isrequired.)The info() method returns an instance of the classmimetools.Message containing meta-information associatedwith the URL.
When the method is HTTP, these headers are thosereturned by the server at the head of the retrieved HTML page(including Content-Length and Content-Type).
When the method is FTP,a Content-Length header will be present if (as is now usual) theserver passed back a file length in response to the FTP retrievalrequest.
A Content-Type header will be present if the MIME type canbe guessed.
When the method is local-file, returned headers will includea Date representing the file's last-modified time, a Content-Lengthgiving file size, and a Content-Type containing a guess at the file'stype. See also the description of the
module.The geturl() method returns the real URL of the page.
Insome cases, the HTTP server redirects a client to another URL.
Theurlopen() function handles this transparently, but in somecases the caller needs to know which URL the client was redirectedto.
The geturl() method can be used to get at thisredirected URL.If the url uses the http: scheme identifier, the optionaldata argument may be given to specify a POST request(normally the request type is GET).
The data argumentmust be in standard application/x-www-form-urlencoded format;see the urlencode() function below.The urlopen() function works transparently with proxieswhich do not require authentication.
In a Unix or Windowsenvironment, set the http_proxy, ftp_proxy orgopher_proxy environment variables to a URL that identifiesthe proxy server before starting the Python interpreter.
For example(the "%" is the command prompt):
.
In a Windows environment, if no proxy environment variables are set,proxy settings are obtained from the registry's Internet Settingssection.In a Macintosh environment, urlopen() will retrieve proxyinformation from Internet
Config.Alternatively, the optional proxies argument may be used toexplicitly specify proxies.
The urlopen() function does not support explicit proxyspecification.
Changed in version 2.3:Added the proxies support.
Copy a network object denoted by a URL to a local file, if necessary.If the URL points to a local file, or a valid cached copy of theobject exists, the object is not copied.
The hook will be passed three arguments; acount of blocks transferred so far, a block size in bytes, and thetotal size of the file.
The third argument may be -1 on olderFTP servers which do not return a file size in response to a retrievalrequest.If the url uses the http: scheme identifier, the optionaldata argument may be given to specify a POST request(normally the request type is GET).
The data argumentmust in standard application/x-www-form-urlencoded format;see the urlencode() function below.
The public functions urlopen() andurlretrieve() create an instance of theFancyURLopener class and use it to perform their requestedactions.
To override this functionality, programmers can create asubclass of URLopener or FancyURLopener, then assignan instance of that class to theurllib._urlopener variable before calling the desired function.For example, applications may want to specify a differentUser-Agent: header than URLopener defines.
Thiscan be accomplished with the following code:
Clear the cache that may have been built up by previous calls tourlretrieve().
quote_plus
Like quote(), but also replaces spaces by plus signs, asrequired for quoting HTML form values.
Plus signs in the originalstring are escaped unless they are included in safe.
It alsodoes not have safe default to '/'.
Replace "%xx" escapes by their single-character equivalent.Example: unquote('/%7Econnolly/') yields '/~connolly/'.
unquote_plus
Like unquote(), but also replaces plus signs by spaces, asrequired for unquoting HTML form values.
Convert a mapping object or a sequence of two-element tuples to a``url-encoded'' string, suitable to pass tourlopen() above as the optional data argument.
Thisis useful to pass a dictionary of form fields to a POSTrequest.
The resulting string is a series of
pairs separated by ""characters, where both key and value are quoted usingquote_plus() above.
If the optional parameter doseq ispresent and evaluates to true, individual
pairsare generated for each element of the sequence.When a sequence of two-element tuples is used as the query argument,the first element of each tuple is a key and the second is a value.
Theorder of parameters in the encoded string will match the order of parametertuples in the sequence.The
module provides the functionsparse_qs() and parse_qsl() which are used toparse query strings into Python data structures.
Convert the pathname path from the local syntax for a path tothe form used in the path component of a URL.
This does not produce acomplete URL.
The return value will already be quoted using thequote() function.
Convert the path component path from an encoded URL to the localsyntax for a path. This does not accept a complete URL.
Thisfunction uses unquote() to decode path.
classURLopener
Base class for opening and reading URLs.
", whereVVV is the urllib version number.
The keywordskey_file and cert_file are supported; both are needed toactually retrieve a resource at an https: URL.
classFancyURLopener
FancyURLopener subclasses URLopener providing defaulthandling for the following HTTP response codes: 301, 302, 303, 307 and401.
For the 30x response codes listed above, theLocation: header is used to fetch the actual URL.
For 401response codes (authentication required), basic HTTP authentication isperformed.
For the 30x response codes, recursion is bounded by thevalue of the maxtries attribute, which defaults to 10.
Note:According to the letter of RFC 2616, 301 and 302 responses toPOST requests must not be automatically redirected withoutconfirmation by the user.
In reality, browsers do allow automaticredirection of these responses, changing the POST to a GET, andurllib reproduces this behaviour.
The parameters to the constructor are the same as those forURLopener.
Note:When performing basic authentication, aFancyURLopener instance calls itsprompt_user_passwd() method.
The default implementation asksthe users for the required information on the controlling terminal.
Asubclass may override this method to support more appropriate behaviorif needed.
Restrictions:
Currently, only the following protocols are supported: HTTP, (versions0.9 and 1.0), Gopher (but not Gopher-+), FTP, and local files.
The caching feature of urlretrieve() has been disableduntil I find the time to hack proper processing of Expiration timeheaders.
There should be a function to query whether a particular URL is inthe cache.
For backward compatibility, if a URL appears to point to a local filebut the file can't be opened, the URL is re-interpreted using the FTPprotocol.
This can sometimes cause confusing error messages.
The urlopen() and urlretrieve() functions cancause arbitrarily long delays while waiting for a network connectionto be set up.
This means that it is difficult to build an interactiveWeb client using these functions without using threads.
The data returned by urlopen() or urlretrieve()is the raw data returned by the server.
This may be binary data(e.g. an image), plain text or (for example) HTML
.
protocol provides type information in thereply header, which can be inspected by looking at theContent-Type: header.
For theGopher
protocol, type information is encodedin the URL; there is currently no easy way to extract it.
If thereturned data is HTML, you can use the module
protocol cannot differentiatebetween a file and a directory.
This can lead to unexpected behaviorwhen attempting to read a URL that points to a file that is notaccessible.
If the URL ends in a /, it is assumed to refer toa directory and will be handled accordingly.
But if an attempt toread a file leads to a 550 error (meaning the URL cannot be found oris not accessible, often for permission reasons), then the path istreated as a directory in order to handle the case when a directory isspecified by a URL but the trailing / has been left off.
This cancause misleading results when you try to fetch a file whose readpermissions make it inaccessible; the FTP code will try to read it,fail with a 550 error, and then perform a directory listing for theunreadable file.
If fine-grained control is needed, consider using theftplib module, subclassing FancyURLOpener, or changing_urlopener to meet your needs.
This module does not support the use of proxies which requireauthentication.
This may be implemented in the future.
Although the urllib module contains (undocumented) routinesto parse and unparse URL strings, the recommended interface for URLmanipulation is in module
. Subsections
The urllib2 module defines functions and classes which helpin opening URLs (mostly HTTP) in a complex world -- basic and digestauthentication, redirections, cookies and more.The urllib2 module defines the following functions:
Open the URL url, which can be either a string or a Requestobject.
data should be a string, which specifies additional data tosend to the server.
In HTTP requests, which are the only ones thatsupport data, it should be a buffer in the format ofapplication/x-www-form-urlencoded, for example one returnedfrom urllib.urlencode().This function returns a file-like object with two additional methods:
geturl() -- return the URL of the resource retrieved
info() -- return the meta-information of the page, asa dictionary-like object
Raises URLError on errors.Note that None may be returned if no handler handles therequest (though the default installed global OpenerDirectoruses UnknownHandler to ensure this never happens).
Install an OpenerDirector instance as the default globalopener.
Return an OpenerDirector instance, which chains thehandlers in the order given. handlers can be either instancesof BaseHandler, or subclasses of BaseHandler (inwhich case it must be possible to call the constructor withoutany parameters).
Besides ProxyHandler, which hashandler_order of 100, all handlers currently have itset to 500.
The following exceptions are raised as appropriate:
The handlers raise this exception (or derived exceptions) when theyrun into a problem.
It is a subclass of IOError.
A subclass of URLError, it can also function as a non-exceptional file-like return value (the same thing thaturlopen() returns).
This is useful when handling exoticHTTP errors, such as requests for authentication.
A subclass of URLError, this is the error raised by theGopher handler.
classRequest
This class is an abstraction of a URL request.
url should be a string which is a valid URL.
origin_req_host should be the request-host of the origintransaction, as defined by RFC 2965.
It defaults tocookielib.request_host(self).
This is the host name or IPaddress of the original request that was initiated by the user.
Forexample, if the request is for an image in an HTML document, thisshould be the request-host of the request for the page containing theimage.
unverifiable should indicate whether the request isunverifiable, as defined by RFC 2965.
It defaults to False.
Anunverifiable request is one whose URL the user did not have the optionto approve.
For example, if the request is for an image in an HTMLdocument, and the user had no option to approve the automatic fetchingof the image, this should be true.
classOpenerDirector
The OpenerDirector class opens URLs via BaseHandlerschained together.
It manages the chaining of handlers, and recoveryfrom errors.
classBaseHandler
This is the base class for all registered handlers -- and handles onlythe simple mechanics of registration.
classHTTPDefaultErrorHandler
A class which defines a default handler for HTTP error responses; allresponses are turned into HTTPError exceptions.
A class to handle redirections.
classHTTPCookieProcessor
A class to handle HTTP Cookies.
classProxyHandler
classHTTPPasswordMgr
Keep a database of (realm, uri) - (user, password)mappings.
classHTTPPasswordMgrWithDefaultRealm
Keep a database of (realm, uri) - (user, password) mappings.A realm of None is considered a catch-all realm, which is searchedif no other realm fits.
classAbstractBasicAuthHandler
classHTTPBasicAuthHandler
Handle authentication with the remote host.password_mgr, if given, should be something that is compatiblewith HTTPPasswordMgr; refer to section11.5.7for information on the interface that must be supported.
classProxyBasicAuthHandler
Handle authentication with the proxy.password_mgr, if given, should be something that is compatiblewith HTTPPasswordMgr; refer to section11.5.7for information on the interface that must be supported.
classAbstractDigestAuthHandler
classHTTPDigestAuthHandler
classProxyDigestAuthHandler
classHTTPHandler
A class to handle opening of HTTP URLs.
A class to handle opening of HTTPS URLs.
Open local files.
classFTPHandler
Open FTP URLs.
classCacheFTPHandler
)
Open FTP URLs, keeping a cache of open FTP connections to minimizedelays.
classGopherHandler
Open gopher URLs.
classUnknownHandler
A catch-all class to handle unknown URLs. Subsections
Parse a URL into 6 components, returning a 6-tuple: (addressingscheme, network location, path, parameters, query, fragmentidentifier).
This corresponds to the general structure of a URL:
urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
yields the tuple
('http', 'www.cwi.nl:80', '/%7Eguido/Python.html', '', '', '')
If the default_scheme argument is specified, it gives thedefault addressing scheme, to be used only if the URL string does notspecify one.
The default value for this argument is the empty string.If the allow_fragments argument is zero, fragment identifiersare not allowed, even if the URL's addressing scheme normally doessupport them.
The default value for this argument is 1.
This is similar to urlparse(), but does not split theparams from the URL.
This should generally be used instead ofurlparse() if the more recent URL syntax allowingparameters to be applied to each segment of the path portion ofthe URL (see RFC 2396).
A separate function is needed to separatethe path segments and parameters.
This function returns a 5-tuple:(addressing scheme, network location, path, query, fragmentidentifier).New in version 2.2.
Combine the elements of a tuple as returned by urlsplit()into a complete URL as a string.New in version 2.2.
Construct a full (``absolute'') URL by combining a ``base URL''(base) with a ``relative URL'' (url).
Informally, thisuses components of the base URL, in particular the addressing scheme,the network location and (part of) the path, to provide missingcomponents in the relative URL.Example:
urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
yields the string
'http://www.cwi.nl/%7Eguido/FAQ.html'
The allow_fragments argument has the same meaning as forurlparse().
If url contains a fragment identifier, returns a modifiedversion of url with no fragment identifier, and the fragmentidentifier as a separate string.
If there is no fragment identifierin url, returns url unmodified and an empty string.
This specifies the formal syntax and semantics of absoluteURLs.
This Request For Comments includes the rules for joining anabsolute and a relative URL, including a fair number of``Abnormal Examples'' which govern the treatment of bordercases.
Document describing the generic syntactic requirements forboth Uniform Resource Names (URNs) and Uniform ResourceLocators (URLs).
As a policy, Python doesn't run user-specified code on startup ofPython programs.
(Only interactive sessions execute the scriptspecified in the PYTHONSTARTUP environment variable if itexists).However, some programs or sites may find it convenient to allow usersto have a standard customization file, which gets run when a programrequests it.
This module implements such a mechanism.
A programthat wishes to use the mechanism must execute the statement
The user module looks for a file .pythonrc.py in the user'shome directory and if it can be opened, executes it (usingexecfile()
) in its own (themodule user's) global namespace.
Errors during this phaseare not caught; that's up to the program that imports theuser module, if it wishes.
Since you don't know which programs willuse it, changing the behavior of standard modules or functions isgenerally not a good idea.A suggestion for programmers who wish to use this mechanism: a simpleway to let users specify options for your package is to have themdefine variables in their .pythonrc.py file that you test inyour module.
For example, a module spam that has a verbositylevel can look for a variable user.spam_verbose, as follows:
(The three-argument form of getattr() is used in casethe user has not defined spam_verbose in their.pythonrc.py file.)Programs with extensive customization needs are better off reading aprogram-specific customization file.Programs with security or privacy concerns should not importthis module; a user can easily break into a program by placingarbitrary code in the .pythonrc.py file.Modules for general use should not import this module; it mayinterfere with the operation of the importing program.
See Also:
Site-wide customization mechanism.
This module encodes and decodes files in uuencode format, allowingarbitrary binary data to be transferred over ASCII-only connections.Wherever a file argument is expected, the methods accept a file-likeobject.
For backwards compatibility, a string containing a pathnameis also accepted, and the corresponding file will be opened forreading and writing; the pathname '-' is understood to mean thestandard input or output.
The uu module defines the following functions:
Uuencode file in_file into file out_file.
The uuencodedfile will have the header specifying name and mode asthe defaults for the results of decoding the file.
The defaultdefaults are taken from in_file, or '-' and 0666respectively.
This call decodes uuencoded file in_file placing the result onfile out_file.
If out_file is a pathname, mode isused to set the permission bits if the file must becreated.
Defaults for out_file and mode are taken fromthe uuencode header.
However, if the file specified in the headeralready exists, a uu.Error is raised.
exceptionError
)
Subclass of Exception, this can be raised byuu.decode() under various situations, such as describedabove, but also including a badly formated header, or truncatedinput file.
Support module containing ASCII-to-binaryand binary-to-ASCII conversions.
videoreader reads and decodes QuickTime movies and passesa stream of images to your program.
It also provides some support foraudio tracks.
Warning messages are typically issued in situations where it is usefulto alert the user of some condition in a program, where that condition(normally) doesn't warrant raising an exception and terminating theprogram.
For example, one might want to issue a warning when aprogram uses an obsolete module.Python programmers issue warnings by calling the warn()function defined in this module.
(C programmers usePyErr_Warn(); see the
for details).Warning messages are normally written to sys.stderr, but theirdisposition can be changed flexibly, from ignoring all warnings toturning them into exceptions.
The disposition of warnings can varybased on the warning category (see below), the text of the warningmessage, and the source location where it is issued.
Subsections
5.17 waste -- non-Apple TextEdit replacement
Undocumented Modules
Informationabout the WASTE widget and library, includingdocumentation and downloads.
The wave module provides a convenient interface to the WAV soundformat.
It does not support compression/decompression, but it does supportmono/stereo.The wave module defines the following function and exception:
If file is a string, open the file by that name, other treat itas a seekable file-like object. mode can be any of
Note that it does not allow read/write WAV files.A mode of 'r' or 'rb' returns a Wave_readobject, while a mode of 'w' or 'wb' returnsa Wave_write object.
If mode is omitted and a file-like object is passed as file,
file.mode is used as thedefault value for mode (the "b" flag is still added if necessary).
A synonym for open(), maintained for backwards compatibility.
An error raised when something is impossible because it violates theWAV specification or hits an implementation deficiency.
Subsections 14.5.1 Wave_read Objects
A primary use for weak references is to implementcaches or mappings holding large objects, where it's desired that alarge object not be kept alive solely because it appears in a cache ormapping.
For example, if you have a number of large binary image objects,you may wish to associate a name with each.
If you used a Pythondictionary to map names to images, or images to names, the image objectswould remain alive just because they appeared as values or keys in thedictionaries.
The WeakKeyDictionary andWeakValueDictionary classes supplied by the weakrefmodule are an alternative, using weak references to construct mappingsthat don't keep objects alive solely because they appear in the mappingobjects.
If, for example, an image object is a value in aWeakValueDictionary, then when the last remainingreferences to that image object are the weak references held by weakmappings, garbage collection can reclaim the object, and its correspondingentries in weak mappings are simply deleted.
WeakKeyDictionary and WeakValueDictionary use weakreferences in their implementation, setting up callback functions onthe weak references that notify the weak dictionaries when a key or valuehas been reclaimed by garbage collection.
Most programs should find thatusing one of these weak dictionary types is all they need - it'snot usually necessary to create your own weak references directly.
Several builtin types such as list and dict do notdirectly support weak references but can add support through subclassing:
Extension types can easily be made to support weak references; see section3.3.3, ``Weak References in Extension Types,'' for moreinformation.
classref
Return a weak reference to object.
The original object can beretrieved by calling the reference object if the referent is stillalive; if the referent is no longer alive, calling the referenceobject will cause None to be returned.
Theywill maintain their hash value even after the object wasdeleted.
If hash() is called the first time only afterthe object was deleted, the call will raiseTypeError.Weak references support tests for equality, but not ordering.
Ifthe referents are still alive, two references have the sameequality relationship as their referents (regardless of thecallback).
If either referent has been deleted, thereferences are equal only if the reference objects are the sameobject.
Changed in version 2.4:This is now a subclassable type rather than afactory function; it derives from object.
Return a proxy to object which uses a weak reference.
Thissupports use of the proxy in most contexts instead of requiring theexplicit dereferencing used with weak reference objects.
Thereturned object will have a type of either ProxyType orCallableProxyType, depending on whether object iscallable.
Return the number of weak references and proxies which refer toobject.
Return a list of all weak reference and proxy objects which refer toobject.
classWeakKeyDictionary
Mapping class that references keys weakly.
Entries in thedictionary will be discarded when there is no longer a strongreference to the key.
This can be used to associate additional datawith an object owned by other parts of an application without addingattributes to those objects.
This can be especially useful withobjects that override attribute accesses.
Note:Caution: Because a WeakKeyDictionary is built on topof a Python dictionary, it must not change size when iteratingover it.
This can be difficult to ensure for aWeakKeyDictionary because actions performed by theprogram during iteration may cause items in the dictionaryto vanish "by magic" (as a side effect of garbage collection).
classWeakValueDictionary
Mapping class that references values weakly.
The type object for weak references objects.
The type object for proxies of objects which are not callable.
The type object for proxies of callable objects.
Sequence containing all the type objects for proxies.
This can makeit simpler to test if an object is a proxy without being dependenton naming both proxy types.
Exception raised when a proxy object is used but the underlyingobject has been collected.
This is the same as the standardReferenceError exception.
The webbrowser module provides a very high-level interface toallow displaying Web-based documents to users.
The controller objectsare easy to use and are platform-independent.
Under mostcircumstances, simply calling the open() function from thismodule will do the right thing.Under Unix, graphical browsers are preferred under X11, but text-modebrowsers will be used if graphical browsers are not available or an X11display isn't available.
If text-mode browsers are used, the callingprocess will block until the user exits the browser.Under Unix, if the environment variable BROWSER exists, itis interpreted to override the platform default list of browsers, as acolon-separated list of browsers to try in order.
Exception raised when a browser control error occurs.
The following functions are defined:
Display url using the default browser.
If new is true,a new browser window is opened if possible.
If autoraise istrue, the window is raised if possible (note that under many windowmanagers this will occur regardless of the setting of this variable).
Open url in a new window of the default browser, if possible,otherwise, open url in the only browser window.
Return a controller object for the browser type name.
Ifname is empty, return a controller for a default browserappropriate to the caller's environment.
Register the browser type name.
Once a browser type isregistered, the get() function can return a controllerfor that browser type.
If instance is not provided, or isNone, constructor will be called without parameters tocreate an instance when needed.
If instance is provided,constructor will never be called, and may be None.This entry point is only useful if you plan to either set theBROWSER variable or call get with a nonemptyargument matching the name of a handler you declare.
A number of browser types are predefined.
This table gives the typenames that may be passed to the get() function and thecorresponding instantiations for the controller classes, all definedin this module.
``Konqueror'' is the file manager for the KDE desktop environment forUNIX, and only makes sense to use if KDE is running.
Some way ofreliably detecting KDE would be nice; the KDEDIR variable isnot sufficient.
Note also that the name ``kfm'' is used even whenusing the konqueror command with KDE 2 -- theimplementation selects the best strategy for running Konqueror.
Only on Windows platforms; requires the commonextension modules win32api and win32con.
Only on MacOS platforms; requires the standard MacPython icmodule, described in the
manual.
Subsections 11.1.1 Browser Controller Objects
The single function in this module attempts to guess which of theseveral simple database modules available-
, or
-should be used to open agiven file.
Returns one of the following values: None if the file can't beopened because it's unreadable or doesn't exist; the empty string('') if the file's format can't be guessed; or a stringcontaining the required module name, such as 'dbm' or'gdbm'.
Deprecated since release 2.1.Use
instead.
Note:This module was an implementation detail of the
module in releases of Python prior to 2.1.
It isno longer used.
Please do not use this module directly; use
instead.
This module implements a Wichmann-Hill pseudo-random number generatorclass that is also named whrandom.
They also offer the following method, specific to the Wichmann-Hill algorithm:
Initializes the random number generator from the integers x,y and z.
When the module is first imported, the randomnumber is initialized using values derived from the current time.If x, y, and z are either omitted or 0, the seed will be computed from the current system time.
If one or twoof the parameters are 0, but not all three, the zero valuesare replaced by ones.
This causes some apparently different seedsto be equal, with the corresponding result on the pseudo-randomseries produced by the generator.
Chooses a random element from the non-empty sequence seq and returns it.
Returns the next random floating point number in the range [0.0 ... 1.0).
When the module is first imported, the randomnumber is initialized using values derived from the current time.
Returns a random real number N such that
Therefore one can write either N = whrandom.random() or:
Note that using separate instances of the generator leads toindependent sequences of pseudo-random numbers.
22.3 winsound -- Sound-playing interface for Windows
A. Undocumented Modules
22.3 winsound --Sound-playing interface for Windows
The winsound module provides access to the basicsound-playing machinery provided by Windows platforms.
It includesfunctions and several constants.
If the system is notable to beep the speaker, RuntimeError is raised.
Note:Under Windows 95 and 98, the Windows Beep()function exists but is useless (it ignores its arguments).
In thatcase Python simulates it via direct port manipulation (added in version2.1).
It's unknown whether that will work on all systems.
Call the underlying PlaySound() function from thePlatform API.
The sound parameter may be a filename, audiodata as a string, or None.
Its interpretation depends on thevalue of flags, which can be a bit-wise ORed combination ofthe constants described below.
If the system indicates an error,RuntimeError is raised.
Call the underlying MessageBeep() function from thePlatform API.
This plays a sound as specified in the registry.
Thetype argument specifies which sound to play; possible valuesare -1, MB_ICONASTERISK, MB_ICONEXCLAMATION,MB_ICONHAND, MB_ICONQUESTION, and MB_OK, alldescribed below.
The value -1 produces a ``simple beep'';this is the final fallback if a sound cannot be played otherwise.New in version 2.3.
The sound parameter is the name of a WAV file.Do not use with SND_ALIAS.
SND_ALIAS
The sound parameter is a sound association name from theregistry.
Corresponding Control Panel Sound name
For example:
Play the sound repeatedly.
The SND_ASYNC flag must alsobe used to avoid blocking.
Cannot be used with SND_MEMORY.
The sound parameter to PlaySound() is a memoryimage of a WAV file, as a string.
Note:This module does not support playing from a memoryimage asynchronously, so a combination of this flag andSND_ASYNC will raise RuntimeError.
SND_PURGE
Stop playing all instances of the specified sound.
Return immediately, allowing sounds to play asynchronously.
If the specified sound cannot be found, do not play the system defaultsound.
Do not interrupt sounds currently playing.
Return immediately if the sound driver is busy.
Play the SystemDefault sound.
Play the SystemExclamation sound.
Play the SystemHand sound.
Play the SystemQuestion sound.
There are also two exception classes.
classPacker
Packer is the class for packing data into XDR representation.The Packer class is instantiated with no arguments.
classUnpacker
Unpacker is the complementary class which unpacks XDR datavalues from a string buffer.
The input buffer is given asdata.
This RFCdefined the encoding of data which was XDR at the timethis module was originally written.
It hasapparently been obsoleted by RFC 1832.
Newer RFCthat provides a revised definition of XDR.
Subsections 12.17.1 Packer Objects
The Document Object Model, or ``DOM,'' is a cross-language API fromthe World Wide Web Consortium (W3C) for accessing and modifying XMLdocuments.
A DOM implementation presents an XML document as a treestructure, or allows client code to build such a structure fromscratch.
It then gives access to the structure through a set ofobjects which provided well-known interfaces.The DOM is extremely useful for random-access applications.
SAX onlyallows you a view of one bit of the document at a time.
If you arelooking at one SAX element, you have no access to another.
If you arelooking at a text node, you have no access to a containing element.When you write a SAX application, you need to keep track of yourprogram's position in the document somewhere in your own code.
SAXdoes not do it for you.
Also, if you need to look ahead in the XMLdocument, you are just out of luck.Some applications are simply impossible in an event driven model withno access to a tree.
Of course you could build some sort of treeyourself in SAX events, but the DOM allows you to avoid writing thatcode.
The DOM is a standard tree representation for XML data.The Document Object Model is being defined by the W3C in stages, or``levels'' in their terminology.
The Python mapping of the API issubstantially based on the DOM Level2 recommendation.
The mapping ofthe Level3 specification, currently only available in draft form, isbeing developed by the Python XML Special InterestGroup as part of thePyXML package.
Refer to thedocumentation bundled with that package for information on the currentstate of DOM Level3 support.
DOM applications typically start by parsing some XML into a DOM.
Howthis is accomplished is not covered at all by DOM Level1, and Level2provides only limited improvements: There is aDOMImplementation object class which provides access toDocument creation methods, but no way to access an XMLreader/parser/Document builder in an implementation-independent way.There is also no well-defined way to access these methods without anexisting Document object.
In Python, each DOM implementationwill provide a function getDOMImplementation().
DOM Level3adds a Load/Store specification, which defines an interface to thereader, but this is not yet available in the Python standard library.Once you have a DOM document object, you can access the parts of yourXML document through its properties and methods.
These properties aredefined in the DOM specification; this portion of the reference manualdescribes the interpretation of the specification in Python.The specification provided by the W3C defines the DOM API for Java,ECMAScript, and OMG IDL.
The Python mapping defined here is based inlarge part on the IDL version of the specification, but strictcompliance is not required (though implementations are free to supportthe strict mapping from IDL).
See section 13.6.3,``Conformance,'' for a detailed discussion of mapping requirements.
The W3C recommendation upon which the Python DOM API isbased.
The W3C recommendation for theDOM supported by xml.dom.minidom.
Users that require afull-featured implementation of DOM should use the PyXMLpackage.
This specifies the mapping from OMG IDL to Python.
Subsections 13.6.1 Module Contents
xml.dom.minidom is a light-weight implementation of theDocument Object Model interface.
It is intended to besimpler than the full DOM and also significantly smaller.DOM applications typically start by parsing some XML into a DOM.
Withxml.dom.minidom, this is done through the parse functions:
The parse() function can take either a filename or an openfile object.
This function will change thedocument handler of the parser and activate namespace support; otherparser configuration (like setting an entity resolver) must have beendone in advance.
If you have XML in a string, you can use theparseString() function instead:
Return a Document that represents the string.
Thismethod creates a StringIO object for the string and passesthat on to parse.
Both functions return a Document object representing thecontent of the document.What the parse() and parseString() functions dois connect an XML parser with a ``DOM builder'' that can accept parseevents from any SAX parser and convert them into a DOM tree.
The nameof the functions are perhaps misleading, but are easy to grasp whenlearning the interfaces.
The parsing of the document will becompleted before these functions return; it's simply that thesefunctions do not provide a parser implementation themselves.You can also create a Document by calling a method on a ``DOMImplementation'' object.
You can get this object either by callingthe getDOMImplementation() function in the
xml.dom
package or the xml.dom.minidom module.Using the implementation from the xml.dom.minidom module willalways return a Document instance from the minidomimplementation, while the version from
xml.dom
may providean alternate implementation (this is likely if you have thePyXML package installed).
Onceyou have a Document, you can add child nodes to it to populatethe DOM:
Once you have a DOM document object, you can access the parts of yourXML document through its properties and methods.
These properties aredefined in the DOM specification.
The main property of the documentobject is the documentElement property.
It gives you themain element in the XML document: the one that holds all others.
Hereis an example program:
When you are finished with a DOM, you should clean it up.
This isnecessary because some versions of Python do not support garbagecollection of objects that refer to each other in a cycle.
Until thisrestriction is removed from all versions of Python, it is safest towrite your code as if cycles would not be cleaned up.The way to clean up a DOM is to call its unlink() method:
unlink() is a xml.dom.minidom-specific extension tothe DOM API.
After calling unlink() on a node, the node andits descendents are essentially useless.
The W3C recommendation for theDOM supported by xml.dom.minidom. Subsections
xml.dom.pulldom allows building only selected portions of aDocument Object Model representation of a document from SAX events.
classPullDOM
xml.sax.handler.ContentHandler implementation that ...
classDOMEventStream
classSAX2DOM
default_bufsize
Default value for the busize parameter to parse().Changed in version 2.1:The value of this variable can be changed beforecalling parse() and the new value willtake effect. Subsections
New in version 2.0.
The xml.parsers.expat module is a Python interface to theExpat
non-validating XML parser.The module provides a single extension type, xmlparser, thatrepresents the current state of an XML parser.
After anxmlparser object has been created, various attributes of the object can be set to handler functions.
When an XML document is then fed tothe parser, the handler functions are called for the character dataand markup in the XML document.This module uses the pyexpat
module toprovide access to the Expat parser.
The exception raised when Expat reports an error.
See section13.5.2, ``ExpatError Exceptions,'' for moreinformation on interpreting Expat errors.
Alias for ExpatError.
The type of the return values from the ParserCreate()function.
The xml.parsers.expat module contains two functions:
Returns an explanatory string for a given error number errno.
Creates and returns a new xmlparser object. encoding, if specified, must be a string naming the encoding used by the XML data.
Expat doesn't support as many encodings asPython does, and its repertoire of encodings can't be extended; itsupports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.
The value must be aone-character string; a ValueError will be raised if thestring has an illegal length (None is considered the same asomission). When namespace processing is enabled, element type namesand attribute names that belong to a namespace will be expanded.
Theelement name passed to the element handlersStartElementHandler and EndElementHandlerwill be the concatenation of the namespace URI, the namespaceseparator character, and the local part of the name.
If the namespaceseparator is a zero byte (chr(0)) then the namespace URI andthe local part will be concatenated without any separator.For example, if namespace_separator is set to a space character("
") and the following document is parsed:
StartElementHandler will receive the following stringsfor each element:
Home page of the Expat project.
The SAX API defines four kinds of handlers: content handlers, DTDhandlers, error handlers, and entity resolvers.
Applications normallyonly need to implement those interfaces whose events they areinterested in; they can implement the interfaces in a single object orin multiple objects.
Handler implementations should inherit from thebase classes provided in the module xml.sax, so that allmethods get default implementations.
This is the main callback interface in SAX, and the one mostimportant to applications.
The order of events in this interfacemirrors the order of the information in the document.
Handle DTD events.This interface specifies only those DTD events required for basicparsing (unparsed entities and attributes).
Basic interface for resolving entities.
If you create an objectimplementing this interface, then register the object with yourParser, the parser will call the method in your object to resolve allexternal entities.
Interface used by the parser to present error and warning messagesto the application.
The methods of this object control whether errorsare immediately converted to exceptions or are handled in some otherway.
In addition to these classes, xml.sax.handler providessymbolic constants for the feature and property names.
Value: "http://xml.org/sax/features/namespaces"
true: Perform Namespace processing.
false: Optionally do not perform Namespace processing(implies namespace-prefixes; default).access: (parsing) read-only; (not parsing) read/write
feature_namespace_prefixes
Value: "http://xml.org/sax/features/namespace-prefixes"
true: Report the original prefixed names and attributes used for Namespacedeclarations.
false: Do not report attributes used for Namespace declarations, andoptionally do not report original prefixed names (default).access: (parsing) read-only; (not parsing) read/write
Value: "http://xml.org/sax/features/string-interning"
true: All element names, prefixes, attribute names, Namespace URIs, andlocal names are interned using the built-in intern function.
false: Names are not necessarily interned, although they may be (default).access: (parsing) read-only; (not parsing) read/write
feature_validation
Value: "http://xml.org/sax/features/validation"
true: Report all validation errors (implies external-general-entities andexternal-parameter-entities).false: Do not report validation errors.access: (parsing) read-only; (not parsing) read/write
Value: "http://xml.org/sax/features/external-general-entities"
true: Include all external general (text) entities.
false: Do not include external general entities.
access: (parsing) read-only; (not parsing) read/write
Value: "http://xml.org/sax/features/external-parameter-entities"
true: Include all external parameter entities, including the externalDTD subset.false: Do not include any external parameter entities, even the externalDTD subset.access: (parsing) read-only; (not parsing) read/write
all_features
property_lexical_handler
Value: "http://xml.org/sax/properties/lexical-handler"
data type: xml.sax.sax2lib.LexicalHandler (not supported in Python 2)description: An optional extension handler for lexical events like comments.
access: read/write
data type: xml.sax.sax2lib.DeclHandler (not supported in Python 2)description: An optional extension handler for DTD-related events otherthan notations and unparsed entities.
data type: org.w3c.dom.Node (not supported in Python 2) description: When parsing, the current DOM node being visited if this isa DOM iterator; when not parsing, the root DOM node foriteration.access: (parsing) read-only; (not parsing) read/write
property_xml_string
Value: "http://xml.org/sax/properties/xml-string"
data type: Stringdescription: The literal string of characters that was the source forthe current event.access: read-only
List of all known property names.
Subsections 13.10.1 ContentHandler Objects
The xml.sax package provides a number of modules whichimplement the Simple API for XML (SAX) interface for Python.
Thepackage itself provides the SAX exceptions and the conveniencefunctions which will be most used by users of the SAX API.The convenience functions are:
make_parser
Create and return a SAX XMLReader object.
The first parserfound will be used.
If parser_list is provided, it must be asequence of strings which name modules that have a function namedcreate_parser().
Modules listed in parser_listwill be used before modules in the default list of parsers.
Create a SAX parser and use it to parse a document.
The document,passed in as filename_or_stream, can be a filename or a fileobject.
The handler parameter needs to be a SAXContentHandler instance.
If error_handler is given,it must be a SAX ErrorHandler instance; if omitted, SAXParseException will be raised on all errors.
Thereis no return value; all work must be done by the handlerpassed in.
Similar to parse(), but parses from a buffer stringreceived as a parameter.
A typical SAX application uses three kinds of objects: readers,handlers and input sources.
A SAX application musttherefore obtain a reader object, create or open the input sources,create the handlers, and connect these objects all together.
Since Python does not havean explicit notion of interface, they are formally introduced asclasses, but applications may use implementations which do not inheritfrom the provided classes.
The InputSource, Locator,Attributes, AttributesNS, andXMLReader interfaces are defined in the module
The handler interfaces are defined in
For convenience, InputSource(which is often instantiated directly) and the handler classes arealso available from xml.sax.
These interfaces are describedbelow.In addition to these classes, xml.sax provides the followingexception classes.
exceptionSAXException
Encapsulate an XML error or warning.
This class can contain basicerror or warning information from either the XML parser or theapplication: it can be subclassed to provide additionalfunctionality or to add localization.
The optional exception parameter, if given,should be None or an exception that was caught by the parsingcode and is being passed along as information.This is the base class for the other SAX exception classes.
exceptionSAXParseException
Subclass of SAXException raised on parse errors.Instances of this class are passed to the methods of the SAXErrorHandler interface to provide information about theparse error.
This class supports the SAX Locator interfaceas well as the SAXException interface.
exceptionSAXNotRecognizedException
Subclass of SAXException raised when a SAXXMLReader is confronted with an unrecognized feature orproperty.
SAX applications and extensions may use this class forsimilar purposes.
exceptionSAXNotSupportedException
Subclass of SAXException raised when a SAXXMLReader is asked to enable a feature that is notsupported, or to set a property to a value that the implementationdoes not support.
SAX applications and extensions may use thisclass for similar purposes.
This site is the focal point for the definition ofthe SAX API.
It provides a Java implementation and onlinedocumentation.
Links to implementations and historicalinformation are also available.
Module xml.sax.handler
xml.sax.saxutils :
Subsections 13.9.1 SAXException Objects
The module xml.sax.saxutils contains a number of classes andfunctions that are commonly useful when creating SAX applications,either in direct use, or as base classes.
)
Escape "", "", and "" in a stringof data.You can escape other strings of data by passing a dictionary as theoptional entities parameter.
The keys and values must all bestrings; each key will be replaced with its corresponding value.
Unescape "amp;", "lt;", and "gt;"in a string of data.You can unescape other strings of data by passing a dictionary as theoptional entities parameter.
Similar to escape(), but also prepares data to beused as an attribute value.
The return value is a quoted version ofdata with any additional required replacements.
quoteattr() will select a quote character based on thecontent of data, attempting to avoid encoding any quotecharacters in the string.
If both single- and double-quotecharacters are already in data, the double-quote characterswill be encoded and data will be wrapped in double-quotes.
Theresulting string can be used directly as an attribute value:
This function is useful when generating attribute values for HTML orany SGML using the reference concrete syntax.New in version 2.2.
classXMLGenerator
This class implements the ContentHandler interface bywriting SAX events back into an XML document.
In other words, usingan XMLGenerator as the content handler will reproduce theoriginal document being parsed. out should be a file-likeobject which will default to sys.stdout. encoding is theencoding of the output stream which defaults to 'iso-8859-1'.
classXMLFilterBase
This class is designed to sit between an XMLReader and theclient application's event handlers.
By default, it does nothingbut pass requests up to the reader and events on to the handlersunmodified, but subclasses can override specific methods to modifythe event stream or the configuration requests as they pass through.
This function takes an input source and an optional base URL andreturns a fully resolved InputSource object ready forreading.
The input source can be given as a string, a file-likeobject, or an InputSource object; parsers will use thisfunction to implement the polymorphic source argument to theirparse() method.
SAX parsers implement the XMLReader interface. They areimplemented in a Python module, which must provide a functioncreate_parser().
This function is invoked by xml.sax.make_parser() with no arguments to create a new parser object.
classXMLReader
Base class which can be inherited by SAX parsers.
classIncrementalParser
In some cases, it is desirable not to parse an input source at once,but to feed chunks of the document as they get available.
Note thatthe reader will normally not read the entire file, but read it inchunks as well; still parse() won't return until the entiredocument is processed.
So these interfaces should be used if theblocking behaviour of parse() is not desirable.When the parser is instantiated it is ready to begin accepting datafrom the feed method immediately.
Interface for associating a SAX event with a document location.
Alocator object will return valid results only during calls toDocumentHandler methods; at any other time, the results areunpredictable.
If information is not available, methods may returnNone.
classInputSource
classAttributesImpl
This is an implementation of the Attributesinterface (seesection13.12.5).
This is a dictionary-likeobject which represents the element attributes in astartElement() call.
In addition to the most usefuldictionary operations, it supports a number of other methods asdescribed by the interface.
Objects of this class should beinstantiated by readers; attrs must be a dictionary-likeobject containing a mapping from attribute names to attributevalues.
classAttributesNSImpl
Namespace-aware variant of AttributesImpl, which will bepassed to startElementNS().
It is derived fromAttributesImpl, but understands attribute names astwo-tuples of namespaceURI and localname.
In addition,it provides a number of methods expecting qualified names as theyappear in the original document.
This class implements the
AttributesNS interface(see section13.12.6). Subsections
Deprecated since release 2.0.Use xml.sax
instead.
Changed in version 1.5.2:Added namespace support.
The XMLParser class must be instantiated withoutarguments.
This class provides the following interface methods and instance variables:
A mapping of element names to mappings.
The latter mapping mapsattribute names that are valid for the element to the default value of the attribute, or if there is no default to None. The defaultvalue is the empty dictionary.
This variable is meant to beoverridden, not extended since the default is shared by all instancesof XMLParser.
A mapping of element names to tuples.
The tuples contain a functionfor handling the start and end tag respectively of the element, orNone if the method unknown_starttag() orunknown_endtag() is to be called.
The default value is theempty dictionary.
This variable is meant to be overridden, notextended since the default is shared by all instances ofXMLParser.
A mapping of entitynames to their values.
The default value containsdefinitions for 'lt', 'gt', 'amp', 'quot', and 'apos'.
Loses all unprocessed data.
This is calledimplicitly at the instantiation time.
Stop processing tags.
Treat all following input as literal input(CDATA).
Enter literal mode (CDATA mode).
This mode is automatically exitedwhen the close tag matching the last unclosed open tag is encountered.
Feed some text to the parser.
It is processed insofar as it consistsof complete tags; incomplete data is buffered until more data isfed or close() is called.
Force processing of all buffered data as if it were followed by anend-of-file mark.
This method may be redefined by a derived class todefine additional processing at the end of the input, but theredefined version should always call close().
Translate all entity and character references in data andreturn the translated string.
Return a mapping of namespace abbreviations to namespace URIs that arecurrently in effect.
This method is called when the "?xml ...?" tag is processed.The arguments are the values of the encoding and standalone attributes in the tag.
Both encoding and standalone are optional.
The valuespassed to handle_xml() default to None and the string'no' respectively.
The arguments are thetag name of the root element, the Formal Public
Identifier (or None if not specified), the systemidentifier, and the uninterpreted contents of the internal DTD subsetas a string (or None if not present).
This method is called to handle start tags for which a start taghandler is defined in the instance variable elements.
Thetag argument is the name of the tag, and themethod argument is the function (method) which should be used tosupport semantic interpretation of the start tag.
Theattributes argument is a dictionary of attributes, the key beingthe name and the value being the value of the attributefound inside the tag's brackets.
Character and entityreferences in the value have been interpreted.
For instance,for the start tag A HREF="http://www.cwi.nl/", this methodwould be called as handle_starttag('A', self. elements['A'][0],{'HREF': 'http://www.cwi.nl/'}).
The base implementation simplycalls method with attributes as the only argument.
This method is called to handle endtags for which an end tag handleris defined in the instance variable elements.
The tagargument is the name of the tag, and the method argument is thefunction (method) which should be used to support semanticinterpretation of the end tag.
For instance, for the endtag/A, this method would be called as handle_endtag('A',self. elements['A'][1]).
The base implementation simply callsmethod.
This method is called to process arbitrary data.
It is intended to beoverridden by a derived class; the base class implementation doesnothing.
It translates the character to ASCII and calls themethod handle_data() with the character as argument.
Ifref is invalid or out of range, the methodunknown_charref(ref) is called to handle the error.
Asubclass must override this method to provide support for characterreferences outside of the ASCII range.
This method is called when a comment is encountered.
Thecomment argument is a string containing the text between the"!-" and "-" delimiters, but not the delimitersthemselves.
For example, the comment "!-text-" willcause this method to be called with the argument 'text'.
Thedefault method does nothing.
This method is called when a CDATA element is encountered.
Thedata argument is a string containing the text between the"![CDATA[" and "]]" delimiters, but not the delimitersthemselves.
For example, the entity "![CDATA[text]]" willcause this method to be called with the argument 'text'.
Thedefault method does nothing, and is intended to be overridden.
This method is called when a processing instruction (PI) isencountered.
The name is the PI target, and the dataargument is a string containing the text between the PI target and theclosing delimiter, but not the delimiter itself.
For example, theinstruction "?XML text?" will cause this method to be calledwith the arguments 'XML' and 'text'.
The default methoddoes nothing.
Note that if a document starts with "?xml..?", handle_xml() is called to handle it.
This method is called when a declaration is encountered.
Thedata argument is a string containing the text between the"!" and "" delimiters, but not the delimitersthemselves.
For example, the
entitydeclaration "!ENTITY text" will cause this method to be calledwith the argument 'ENTITY text'.
The default method doesnothing.
Note that "!DOCTYPE ..." is handled separately if itis located at the start of the document.
This method is called when a syntax error is encountered.
Themessage is a description of what was wrong.
The default method raises a RuntimeError exception.
If this method isoverridden, it is permissible for it to return.
This method is onlycalled when the error can be recovered from.
Unrecoverable errorsraise a RuntimeError without first callingsyntax_error().
This method is called to process an unknown start tag.
It is intendedto be overridden by a derived class; the base class implementationdoes nothing.
This method is called to process an unknown end tag.
This method is called to process unresolvable numeric characterreferences.
It is intended to be overridden by a derived class; thebase class implementation does nothing.
This method is called to process an unknown entity reference.
It isintended to be overridden by a derived class; the base classimplementation calls syntax_error() to signal an error.
The XML specification, published by the WorldWide Web Consortium (W3C), defines the syntax andprocessor requirements for XML.
References to additionalmaterial on XML, including translations of thespecification, are available athttp://www.w3.org/XML/.
The Python XML Topic Guide provides a greatdeal of information on using XML from Python and links toother sources of information on XML.
The Python XML Special InterestGroup is developing substantial support for processing XMLfrom Python.
Footnotes ...arguments.
Actually, a number of keyword arguments arerecognized which influence the parser to accept certain non-standardconstructs.
The following keyword arguments are currentlyrecognized.
The defaults for all of these is 0 (false) exceptfor the last one for which the default is 1 (true).accept_unquoted_attributes (accept certain attribute valueswithout requiring quotes), accept_missing_endtag_name (acceptend tags that look like /), map_case (map upper case tolower case in tags and attributes), accept_utf8 (allow UTF-8characters in input; this is required according to the XML standard,but Python does not as yet deal properly with these characters, sothis is not the default), translate_attribute_references (don'tattempt to translate character and entity references in attribute values).
Subsections
XML-RPC is a Remote Procedure Call method that uses XML passed viaHTTP as a transport.
With it, a client can call methods withparameters on a remote server (the server is named by a URI) and get backstructured data.
This module supports writing XML-RPC client code; ithandles all the details of translating between conformable Pythonobjects and XML on the wire.
classServerProxy
A ServerProxy instance is an object that manages communicationwith a remote XML-RPC server.
The required first argument is a URI(Uniform Resource Indicator), and will normally be the URL of theserver.
The optional second argument is a transport factory instance;by default it is an internal SafeTransport instance for https:URLs and an internal HTTP Transport instance otherwise.
Theoptional third argument is an encoding, by default UTF-8.
The optionalfourth argument is a debugging flag.
If allow_none is true, the Python constant None will be translated into XML; thedefault behaviour is for None to raise a TypeError.This is a commonly-used extension to the XML-RPC specification, but isn'tsupported by all clients and servers; seehttp://ontosys.com/xml-rpc/extensions.
html for a description.
Both the HTTP and HTTPS transports support the URL syntax extension forHTTP Basic Authentication: http://user:pass@host:port/path.
The user:pass portion will be base64-encoded as an HTTP `Authorization'header, and sent to the remote server as part of the connection processwhen invoking an XML-RPC method.
You only need to use this if theremote server requires a Basic Authentication user and password.The returned instance is a proxy object with methods that can be usedto invoke corresponding RPC calls on the remote server.
If the remoteserver supports the introspection API, the proxy can also be used to querythe remote server for the methods it supports (service discovery) andfetch other server-associated metadata.
ServerProxy instance methods take Python basic types and objects as arguments and return Python basic types and classes.
Types that areconformable (e.g. that can be marshalled through XML), include thefollowing (and except where noted, they are unmarshalled as the samePython type):
Name
The True and False constants
integers
Pass in directly
floating-point numbers
strings
arrays
Any Python sequence type containing conformableelements.
Arrays are returned as lists
structures
A Python dictionary.
Keys must be strings,values may be any conformable type.
dates
in seconds since the epoch; pass in an instance of theDateTime wrapper class
binary data
pass in an instance of the Binarywrapper class
This is the full set of data types supported by XML-RPC.
Method callsmay also raise a special Fault instance, used to signalXML-RPC server errors, or ProtocolError used to signal anerror in the HTTP/HTTPS transport layer.
Note that even though startingwith Python 2.2 you can subclass builtin types, the xmlrpclib modulecurrently does not marshal instances of such subclasses.When passing strings, characters special to XML such as "","", and "" will be automatically escaped.
However, it'sthe caller's responsibility to ensure that the string is free ofcharacters that aren't allowed in XML, such as the control characterswith ASCII values between 0 and 31; failing to do this will result inan XML-RPC request that isn't well-formed XML.
If you have to passarbitrary strings via XML-RPC, use the Binary wrapper classdescribed below.
Server is retained as an alias for ServerProxy for backwardscompatibility.
New code should use ServerProxy.
The ZIP file format is a common archive and compression standard.This module provides tools to create, read, write, append, and list aZIP file.
Any advanced use of this module will require anunderstanding of the format, as defined in
The error raised for bad ZIP files.
The class for reading and writing ZIP files.
See``ZipFile Objects'' (section 7.18.1) forconstructor details.
Class for creating ZIP archives containing Python libraries.
classZipInfo
)
Class used the represent infomation about a member of an archive.Instances of this class are returned by the getinfo() andinfolist() methods of ZipFile objects.
Most usersof the zipfile module will not need to create these, butonly use those created by this module.filename should be the full name of the archive member, anddate_time should be a tuple containing six fields whichdescribe the time of the last modification to the file; the fieldsare described in section 7.18.3, ``ZipInfo Objects.''
is_zipfile
Returns True if filename is a valid ZIP file based on its magicnumber, otherwise returns False.
This module does not currentlyhandle ZIP files which have appended comments.
The numeric constant for an uncompressed archive member.
The numeric constant for the usual ZIP compression method.
Thisrequires the zlib module.
No other compression methods arecurrently supported.
Documentation on the ZIP file format by PhilKatz, the creator of the format and algorithms used.
Information about the Info-ZIP project's ZIP archiveprograms and development libraries. Subsections
For applications that require data compression, the functions in thismodule allow compression and decompression, using the zlib library.The zlib library has its own home page at http://www.gzip.org/zlib/.
Exception raised on compression and decompression errors.
Computes a Adler-32 checksum of string.
(An Adler-32checksum is almost as reliable as a CRC32 but can be computed muchmore quickly.)
If value is present, it is used as thestarting value of the checksum; otherwise, a fixed default value isused.
This allows computing a running checksum over theconcatenation of several input strings.
The algorithm is notcryptographically strong, and should not be used forauthentication or digital signatures.
Since the algorithm isdesigned for use as a checksum algorithm, it is not suitable foruse as a general hash algorithm.
The default value is 6.
Raises theerror exception if any error occurs.
)
Computes a CRC (Cyclic Redundancy Check)
checksum of string.
Ifvalue is present, it is used as the starting value of thechecksum; otherwise, a fixed default value is used.
This allowscomputing a running checksum over the concatenation of severalinput strings.
The algorithm is not cryptographically strong, andshould not be used for authentication or digital signatures.
Sincethe algorithm is designed for use as a checksum algorithm, it is notsuitable for use as a general hash algorithm.
Decompresses the data in string, returning a string containingthe uncompressed data.
The wbits parameter controls the size ofthe window buffer.
If bufsize is given, it is used as theinitial size of the output buffer.
Raises the errorexception if any error occurs.The absolute value of wbits is the base two logarithm of thesize of the history buffer (the ``window size'') used when compressingdata.
Its absolute value should be between 8 and 15 for the mostrecent versions of the zlib library, larger values resulting in bettercompression at the expense of greater memory usage.
The default valueis 15.
When wbits is negative, the standardgzip header is suppressed; this is an undocumented featureof the zlib library, used for compatibility with unzip'scompression file format.
bufsize is the initial size of the buffer used to holddecompressed data.
If more space is required, the buffer size will beincreased as needed, so you don't have to get this value exactlyright; tuning it will only save a few calls to malloc().
Thedefault size is 16384.
Returns a decompression object, to be used for decompressing datastreams that won't fit into memory at once.
The wbitsparameter controls the size of the window buffer.
Compression objects support the following methods:
Compress string, returning a string containing compressed datafor at least part of the data in string.
This data should beconcatenated to the output produced by any preceding calls to thecompress() method.
Some input may be kept in internal buffersfor later processing.
All pending input is processed, and a string containing the remainingcompressed output is returned. mode can be selected from theconstants Z_SYNC_FLUSH, Z_FULL_FLUSH, or Z_FINISH, defaulting to Z_FINISH.
Z_SYNC_FLUSH and Z_FULL_FLUSH allow compressing further strings of data andare used to allow partial error recovery on decompression, whileZ_FINISH finishes the compressed stream and prevents compressing any more data.
After callingflush() with mode set to Z_FINISH, thecompress() method cannot be called again; the only realisticaction is to delete the object.
Decompression objects support the following methods, and two attributes:
A string which contains any bytes past the end of the compressed data.That is, this remains "" until the last byte that containscompression data is available.
If the whole string turned out tocontain compressed data, this is "", the empty string.The only way to determine where a string of compressed data ends is byactually decompressing it.
A string that contains any data that was not consumed by the lastdecompress call because it exceeded the limit for theuncompressed data buffer.
This data has not yet been seen by the zlibmachinery, so you must feed it (possibly with further dataconcatenated to it) back to a subsequent decompress methodcall in order to get correct output.
[max_length]Decompress string, returning a string containing theuncompressed data corresponding to at least part of the data instring.
This data should be concatenated to the output producedby any preceding calls to thedecompress() method.
Some of the input data may be preservedin internal buffers for later processing.If the optional parameter max_length is supplied then the return valuewill be no longer than max_length.
This may mean that not all of thecompressed input can be processed; and unconsumed data will be storedin the attribute unconsumed_tail.
This string must be passedto a subsequent call to decompress() if decompression is tocontinue.
If max_length is not supplied then the whole input isdecompressed, and unconsumed_tail is an empty string.
All pending input is processed, and a string containing the remaininguncompressed output is returned.
After calling flush(), thedecompress() method cannot be called again; the only realisticaction is to delete the object.
There are only a few functions special to module objects.
This instance of PyTypeObject represents the Python moduletype.
This is exposed to Python programs astypes.ModuleType.
Returns true if p is a module object, or a subtype of a moduleobject.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if p is a module object, but not a subtype ofPyModule_Type.New in version 2.2.
PyObject*
Return a new module object with the __name__ attribute setto name.
Only the module's __doc__ and__name__ attributes are filled in; the caller isresponsible for providing a __file__ attribute.
Return the dictionary object that implements module'snamespace; this object is the same as the __dict__attribute of the module object.
This function never fails.
It is recommended extensions use other PyModule_*()and PyObject_*() functions rather than directlymanipulate a module's __dict__.
Return module's __name__ value.
If the module doesnot provide one, or if it is not a string, SystemErroris raised and NULL is returned.
Return the name of the file from which module was loaded usingmodule's __file__ attribute.
If this is not defined,or if it is not a string, raise SystemError and returnNULL.
Add an object to module as name.
This is a conveniencefunction which can be used from the module's initializationfunction.
This steals a reference to value.
Returns-1 on error, 0 on success.New in version 2.0.
Add an integer constant to module as name.
Thisconvenience function can be used from the module's initializationfunction.
Returns -1 on error, 0 on success.New in version 2.0.
Add a string constant to module as name.
The string value must be null-terminated.
Returns-1 on error, 0 on success.New in version 2.0.
classMorsel
Abstract a key/value pair, which has some RFC 2109 attributes.Morsels are dictionary-like objects, whose set of keys is constant --the valid RFC 2109 attributes, which are
The keys are case-insensitive.
The value of the cookie.
The encoded value of the cookie -- this is what should be sent.
The name of the cookie.
Set the key, value and coded_value members.
Whether K is a member of the set of keys of a Morsel.
Return a string representation of the Morsel, suitableto be sent as an HTTP header.
By default, all the attributes are included,unless attrs is given, in which case it should be a list of attributesto use. header is by default "Set-Cookie:".
Return an embeddable JavaScript snippet, which, if run on a browser whichsupports JavaScript, will act the same as if the HTTP header was sent.The meaning for attrs is the same as in output().
Return a string representing the Morsel, without any surrounding HTTPor JavaScript.The meaning for attrs is the same as in output().
Return true if a keypress is waiting to be read.
Read a keypress and return the resulting character.
Nothing isechoed to the console.
This call will block if a keypress is notalready available, but will not wait for Enter to be pressed.If the pressed key was a special function key, this will return'000' or 'xe0'; the next call will return thekeycode.
The Control-C keypress cannot be read with thisfunction.
Similar to getch(), but the keypress will be echoed if it represents a printable character.
Print the character char to the console without buffering.
Cause the character char to be ``pushed back'' into theconsole buffer; it will be the next character read bygetch() or getche().
Lock part of a file based on file descriptor fd from the Cruntime. Raises IOError on failure.
constants listed below.Multiple regions in a file may be locked at the same time, but maynot overlap.
Adjacent regions are not merged; they must be unlockedindividually.
Locks the specified bytes.
If the bytes cannot be locked, theprogram immediately tries again after 1 second.
If, after 10attempts, the bytes cannot be locked, IOError israised.
LK_UNLCK Unlocks the specified bytes, which must have been previously locked.
Set the line-end translation mode for the file descriptor fd.To set it to text mode, flags should be os.
O_TEXT;for binary, it should be os.
Create a C runtime file descriptor from the file handlehandle.
The returned file descriptor may be used as aparameter to os. fdopen() to create a file object.
Return the file handle for the file descriptor fd.
RaisesIOError if fd is not recognized.
Force the malloc() heap to clean itself up and returnunused blocks to the operating system.
This only works on WindowsNT.
On failure, this raises IOError.
6.29.4 Sending and receiving
Let's say you want to log to console and file with different message formatsand in differing circumstances.
Say you want to log messages with levelsof DEBUG and higher to file, and those messages at level INFO and higher tothe console.
Let's also assume that the file should contain timestamps, butthe console messages should not. Here's how you can achieve this:
When you run this, on the console you will see
and in the file you will see something like
As you can see, the DEBUG message only shows up in the file.
The othermessages are sent to both destinations.This example uses console and file handlers, but you can use any number andcombination of handlers you choose.
mutex objects have following methods:
Check whether the mutex is locked.
)
``Atomic'' test-and-set, grab the lock if it is not set,and return True, otherwise, return False.
Execute
function(argument), unless the mutex is locked.In the case it is locked, place the function and argument on the queue.See unlock for explanation of when
function(argument) is executed in that case.
Unlock the mutex if queue is empty, otherwise execute the first elementin the queue.
Names
refer to objects.
Names are introduced byname binding operations.
Each occurrence of a name in the programtext refers to the binding
of that nameestablished in the innermost function block containing the use.A block
is a piece of Python program text that isexecuted as a unit.
The following are blocks: a module, a functionbody, and a class definition.
Each command typed interactively is ablock.
A script file (a file given as standard input to theinterpreter or specified on the interpreter command line the firstargument) is a code block.
A script command (a command specified onthe interpreter command line with the `-c' option) is a codeblock.
The file read by the built-in function execfile()is a code block.
The string argument passed to the built-in functioneval() and to the exec statement is a code block.The expression read and evaluated by the built-in functioninput() is a code block.A code block is executed in an executionframe
A frame contains someadministrative information (used for debugging) and determines whereand how execution continues after the code block's execution hascompleted.A scope
defines the visibility of a name within ablock.
If a local variable is defined in a block, its scope includesthat block.
If the definition occurs in a function block, the scopeextends to any blocks contained within the defining one, unless acontained block introduces a different binding for the name.
Thescope of names defined in a class block is limited to the class block;it does not extend to the code blocks of methods.When a name is used in a code block, it is resolved using the nearestenclosing scope.
The set of all such scopes visible to a code blockis called the block's environment
.
If a name is bound in a block, it is a local variable of that block.If a name is bound at the module level, it is a global variable.
(Thevariables of the module code block are local and global.)
If avariable is used in a code block but not defined there, it is afree variable
.When a name is not found at all, aNameError
exception is raised.
If the namerefers to a local variable that has not been bound, aUnboundLocalError
exception israised.
UnboundLocalError is a subclass ofNameError.The following constructs bind names: formal parameters to functions,import statements, class and function definitions (thesebind the class or function name in the defining block), and targetsthat are identifiers if occurring in an assignment, for loopheader, or in the second position of an except clauseheader.
binds all names defined in theimported module, except those beginning with an underscore.
This formmay only be used at the module level.A target occurring in a del statement is also considered boundfor this purpose (though the actual semantics are to unbind thename).
This can lead to errors when a name is used within ablock before it is bound.This rule is subtle.
Python lacks declarations and allowsname binding operations to occur anywhere within a code block.
Thelocal variables of a code block can be determined by scanning theentire text of the block for name binding operations.If the global statement occurs within a block, all uses of the namespecified in the statement refer to the binding of that name in thetop-level namespace.
Names are resolved in the top-level namespace bysearching the global namespace, i.e. the namespace of the modulecontaining the code block, and the builtin namespace, the namespace ofthe module __builtin__.
The global namespace is searchedfirst.
If the name is not found there, the builtin namespace issearched.
The global statement must precede all uses of the name.The built-in namespace associated with the execution of a code blockis actually found by looking up the name __builtins__ in itsglobal namespace; this should be a dictionary or a module (in thelatter case the module's dictionary is used).
Normally, the__builtins__ namespace is the dictionary of the built-in module__builtin__ (note: no `s').
If it isn't, restrictedexecution
mode is in effect.The namespace for a module is automatically created the first time amodule is imported.
The main module for a script is always called__main__
.The global statement has the same scope as a name binding operationin the same block.
If the nearest enclosing scope for a free variablecontains a global statement, the free variable is treated as a global.A class definition is an executable statement that may use and definenames.
These references follow the normal rules for name resolution.The namespace of the class definition becomes the attribute dictionaryof the class.
Names defined at the class scope are not visible inmethods.
Subsections 4.1.1 Interaction with dynamic features
Internet Data Handling This chapter describes modules which support handling data formatscommonly used on the Internet.
Generic output formatter and device interface.
Package supporting the parsing, manipulating, andgenerating email messages, including MIME documents.
The base class representing email messages.
Parse flat text email messages to produce a messageobject structure.
Generate flat text email messages from a message structure.
Representing non-ASCII headers
Character Sets
email.Errors
The exception classes used by the email package.
Miscellaneous email package utilities.
Iterate over a message object tree.
Mailcap file handling.
Read various mailbox formats.
Manipulate MH mailboxes from Python.
Tools for parsing MIME-style message bodies.
Mapping of filename extensions to MIME types.
Generic MIME file writer.
Mimification and unmimification of mail messages.
Support for reading files which contain distinctparts, such as some MIME data.
Parse RFC 2822 style mail messages.
RFC 3548: Base16, Base32, Base64 Data Encodings
Tools for converting between binary and variousASCII-encoded binary representations.
Encode and decode files in binhex4 format.
Encode and decode files using the MIMEquoted-printable encoding.
Encode and decode files in uuencode format.
Encoders and decoders for the External DataRepresentation (XDR).
Loading of .netrc files.
Loads a robots. txt file andanswers questions about fetchability of other URLs.
Write and read tabular data to and from delimited files.
A netrc instance has the following methods:
Return a 3-tuple (login, account, password)of authenticators for host.
If the netrc file did notcontain an entry for the given host, return the tuple associated withthe `default' entry.
If neither matching host nor default entry isavailable, return None.
Instances of netrc have public instance variables:
Dictionary mapping host names to (login, account,password) tuples.
The `default' entry, if any, is representedas a pseudo-host by that name.
Dictionary mapping macro names to string lists.
Note:Passwords are limited to a subset of the ASCII character set.Versions of this module prior to 2.3 were extremely limited.
Starting with2.3, all ASCII punctuation is allowed in passwords.
However, note thatwhitespace and non-printable characters are not allowed in passwords.
Thisis a limitation of the way the .netrc file is parsed and may be removed inthe future.
The following methods only apply to new-style classes.
Called unconditionally to implement attribute accesses for instancesof the class.
10.1 Allocating Objects on 10.
Object Implementation Support
This chapter describes the functions, types, and macros used whendefining new object types. Subsections
10.9 Supporting Cyclic Garbage Collection
NNTP instances have the following methods.
The response that isreturned as the first item in the return tuple of almost all methodsis the server's response: a string beginning with a three-digit code.If the server's response indicates an error, the method raises one ofthe above exceptions.
Return the welcome message sent by the server in reply to the initialconnection.
(This message sometimes contains disclaimers or helpinformation that may be relevant to the user.)
This controls the amount ofdebugging output printed.
The default, 0, produces no debuggingoutput.
A value of 1 produces a moderate amount of debuggingoutput, generally a single line per request or response.
A value of2 or higher produces the maximum amount of debugging output,logging each line sent and received on the connection (includingmessage text).
Send a "NEWGROUPS" command.
The date argument should be astring of the form 'yy
dd' indicating thedate, and time should be a string of the form'hh
ss' indicating the time.
Return a pair(response, groups) where groups is a list ofgroup names that are new since the given date and time.If the file parameter is supplied, then the output of the "NEWGROUPS" command is stored in a file.
If file is a string, then the method will open a file object with that name, write to it then close it.
If file is a file object, then it will startcalling write() on it to store the lines of the command output.If file is supplied, then the returned list is an empty list.
Send a "NEWNEWS" command.
Here, group is a group name or'*', and date and time have the same meaning as fornewgroups().
Return a pair (response,articles) where articles is a list of article ids.If the file parameter is supplied, then the output of the "NEWNEWS" command is stored in a file.
Send a "LIST" command.
Return a pair (response,list) where list is a list of tuples.
Each tuple has theform (group, last, first, flag), wheregroup is a group name, last and first are the lastand first article numbers (as strings), and flag is'y' if posting is allowed, 'n' if not, and 'm' ifthe newsgroup is moderated.
(Note the ordering: last,first.)If the file parameter is supplied, then the output of the "LIST" command is stored in a file.
Send a "LIST NEWSGROUPS" command, where grouppattern is a wildmatstring as specified in RFC2980 (it's essentially the same as DOS or UNIXshell wildcard strings).
Return a pair (response,list), where list is a list of tuples containing(name, title).
Get a description for a single group group.
If more than one groupmatches (if 'group' is a real wildmat string), return the first match.
If no group matches, return an empty string.This elides the response code from the server.
If the response code isneeded, use descriptions().
The numbers are returned as strings.
Send a "HELP" command.
Send a "NEXT" command.
Return as for stat().
Send a "LAST" command.
Send a "HEAD" command, where id has the same meaning as forstat().
Return a tuple(response, number, id, list)where the first three are the same as for stat(),and list is a list of the article's headers (an uninterpretedlist of lines, without trailing newlines).
Send a "BODY" command, where id has the same meaning as forstat().
If the file parameter is supplied, thenthe body is stored in a file.
If file is supplied, thenthe returned list is an empty list.
Send an "ARTICLE" command, where id has the same meaning asfor stat().
Return as for head().
Send a "SLAVE" command.
Return the server's response.
This command is not defined in the RFCbut is a common extension.
The header argument is a headerkeyword, e.g. 'subject'.
The string argument should havethe form 'first-last' where first andlast are the first and last article numbers to search.
Post an article using the "POST" command.
The fileargument is an open file object which is read until EOF using itsreadline() method.
It should be a well-formed news article,including the required headers.
The post() methodautomatically escapes lines beginning with ".".
Send an "IHAVE" command.
If the response is not an error, treatfile exactly as for the post() method.
Usedescriptions() or description() instead.
Return a pair (resp, list). list is a listof tuples, one for each article in the range delimited by the startand end article numbers.
Each tuple is of the form(article number, subject, poster, date,id, references, size, lines).If the file parameter is supplied, then the output of the "XOVER" command is stored in a file.
If file is a file object, then it will startcalling write() on it to store the lines of the command output.If file is supplied, then the returned list is an empty list.This is an optional NNTP extension, and may not be supported by allservers.
Return a pair (resp, path), where path is thedirectory path to the article with message ID id.
This is anoptional NNTP extension, and may not be supported by all servers.
Send a "QUIT" command and close the connection.
Once this methodhas been called, no other methods of the NNTP object should be called.
There are several built-in functions that are no longer essential to learn,know or use in modern Python programming.
They have been kept here tomaintain backwards compatability with programs written for older versionsof Python.Python programmers, trainers, students and bookwriters should feel free tobypass these functions without concerns about missing something important.
The function argument must be a callable object (auser-defined or built-in function or method, or a class object) andthe args argument must be a sequence.
The function iscalled with args as the argument list; the number of argumentsis the length of the tuple.If the optional keywords argument is present, it must be adictionary whose keys are strings.
It specifies keyword argumentsto be added to the end of the argument list.Calling apply() is different from just calling
function(args), since in that case there is alwaysexactly one argument.
The use of apply() is equivalentto
function(*args, **keywords).Use of apply() is not necessary since the ``extended callsyntax,'' as used in the last example, is completely equivalent.
Deprecated since release 2.3.Use the extended call syntax instead, as describedabove.
)
The object argument must be an object that supports the buffercall interface (such as strings, arrays, and buffers).
A new bufferobject will be created which references the object argument.The buffer object will be a slice from the beginning of object(or from the specified offset).
The slice will extend to theend of object (or will have a length given by the sizeargument).
Return a tuple consisting of the two numeric arguments converted toa common type, using the same rules as used by arithmeticoperations.
If coercion is not possible, raise TypeError.
Enter string in the table of ``interned'' strings and returnthe interned string - which is string itself or a copy.Interning strings is useful to gain a little performance ondictionary lookup - if the keys in a dictionary are interned, andthe lookup key is interned, the key comparisons (after hashing) canbe done by a pointer compare instead of a string compare.
Normally,the names used in Python programs are automatically interned, andthe dictionaries used to hold module, class or instance attributeshave interned keys.
Changed in version 2.3:Interned strings are notimmortal (like they used to be in Python 2.2 and before);you must keep a reference to the return value of intern()around to benefit from it.
Release 2.4, documentation updated on 30 November 2004. See
Note that the PyTypeObject for None is not directlyexposed in the Python/C API.
Since None is a singleton,testing for object identity (using "==" in C) is sufficient.There is no PyNone_Check() function for the same reason.
The Python None object, denoting lack of value.
This objecthas no methods.
It needs to be treated just like any other objectwith respect to reference counts.
Properly handles returning Py_None from within a C function.
The descriptions of lexical analysis and syntax use a modified BNFgrammar notation.
This uses the following style of definition:
The first line says that a name is an lc_letter followed bya sequence of zero or more lc_letters and underscores.
Anlc_letter in turn is any of the single characters "a"through "z".
(This rule is actually adhered to for thenames defined in lexical and grammar rules in this document.)Each rule begins with a name (which is the name defined by the rule)and a colon.
A vertical bar (|) is used to separatealternatives; it is the least binding operator in this notation.
Astar (*) means zero or more repetitions of the preceding item;likewise, a plus (+) means one or more repetitions, and aphrase enclosed in square brackets ([ ]) means zero or oneoccurrences (in other words, the enclosed phrase is optional).
The* and + operators bind as tightly as possible;parentheses are used for grouping.
Literal strings are enclosed inquotes.
A phrase between angular brackets (...) gives aninformal description of the symbol defined; e.g., this could be usedto describe the notion of `control character' if needed.Even though the notation used is almost the same, there is a bigdifference between the meaning of lexical and syntactic definitions:a lexical definition operates on the individual characters of theinput source, while a syntax definition operates on the stream oftokens generated by the lexical analysis.
All uses of BNF in the nextchapter (``Lexical Analysis'') are lexical definitions; uses insubsequent chapters are syntactic definitions.
1.11 Writing Extensions in
In general, functions that take object references as arguments do notexpect you to pass them NULL pointers, and will dump core (orcause later core dumps) if you do so.
Functions that return objectreferences generally return NULL only to indicate that anexception occurred.
There are no variants with NULLchecking.The C function calling mechanism guarantees that the argument listpassed to C functions (args in the examples) is neverNULL -- in fact it guarantees that it is always a tuple.
It is a severe error to ever let a NULL pointer ``escape'' tothe Python user.
Footnotes ... tuple.
These guarantees don't hold when you use the ``old'' stylecalling convention -- this is still found in much existing code.
10.4 Mapping Object Structures
Structure used to hold pointers to the functions an extension typeuses to implement the number protocol.
Returns 1 if the object o provides numeric protocols,and false otherwise.
Returns the result of adding o1 and o2, or NULL onfailure.
Returns the result of subtracting o2 from o1, or NULLon failure.
Returns the result of multiplying o1 and o2, or NULLon failure.
Returns the result of dividing o1 by o2, or NULL onfailure.
Return the floor of o1 divided by o2, or NULL onfailure.
This is equivalent to the ``classic'' division ofintegers.New in version 2.2.
Return a reasonable approximation for the mathematical value ofo1 divided by o2, or NULL on failure.
The returnvalue is ``approximate'' because binary floating point numbers areapproximate; it is not possible to represent all real numbers inbase two.
This function can return a floating point value whenpassed two integers.New in version 2.2.
Returns the remainder of dividing o1 by o2, or NULLon failure.
See the built-in function divmod()
.Returns NULL on failure.
This is the equivalent of the Pythonexpression "divmod(o1, o2)".
See the built-in function pow()
This is the equivalent of the Pythonexpression "pow(o1, o2, o3)", where o3is optional.
If o3 is to be ignored, pass Py_None inits place (passing NULL for o3 would cause an illegalmemory access).
Returns the negation of o on success, or NULL on failure.This is the equivalent of the Python expression "-o
Returns o on success, or NULL on failure.
This is theequivalent of the Python expression "+o
Returns the absolute value of o, or NULL on failure.
Thisis the equivalent of the Python expression "abs(o)".
Returns the bitwise negation of o on success, or NULL onfailure.
This is the equivalent of the Python expression"~o
This is the equivalent of the Pythonexpression "
Returns the result of right shifting o1 by o2 onsuccess, or NULL on failure.
Returns the ``bitwise and'' of o1 and o2 on success andNULL on failure.
Returns the ``bitwise exclusive or'' of o1 by o2 onsuccess, or NULL on failure.
This is the equivalent of thePython expression "
Returns the ``bitwise or'' of o1 and o2 on success, orNULL on failure.
The operation is done in-place when o1supports it.
This is the equivalent of the Python statement"
Returns the mathematical floor of dividing o1 by o2, orNULL on failure.
This is the equivalent of the Pythonstatement "
o1 //= o2 ".New in version 2.2.
This function can return a floating point value whenpassed two integers.
The operation is done in-place wheno1 supports it.New in version 2.2.
Returns the remainder of dividing o1 by o2, or NULLon failure.
See the built-in function pow().
Returns NULL on failure.
The operation is done in-placewhen o1 supports it.
This is the equivalent of the Pythonstatement "
" when o3 is Py_None,or an in-place variant of "pow(o1, o2, o3)" otherwise.
If o3 is to be ignored, pass Py_None in itsplace (passing NULL for o3 would cause an illegal memoryaccess).
Returns the result of left shifting o1 by o2 on success,or NULL on failure.
The operation is donein-place when o1 supports it.
This is the equivalentof the Python statement "
This function takes the addresses of two variables of typePyObject*.
and *p2
have the same type, increment their referencecount and return 0 (success).
If the objects can be convertedto a common numeric type, replace *p1 and *p2 by theirconverted value (with 'new' reference counts), and return 0.If no conversion is possible, or if some other error occurs, return-1 (failure) and don't increment the reference counts.
Thecall PyNumber_Coerce(o1, o2) is equivalent to the Pythonstatement "
o1, o2 = coerce(o1, o2)".
PyObject*
Returns the o converted to an integer object on success, orNULL on failure.
If the argument is outside the integer rangea long object will be returned instead.
This is the equivalentof the Python expression "int(o)".
PyObject*
Returns the o converted to a long integer object on success,or NULL on failure.
This is the equivalent of the Pythonexpression "long(o)".
Returns the o converted to a float object on success, orNULL on failure.
This is the equivalent of the Python expression"float(o)".
There are four types of numeric literals: plain integers, longintegers, floating point numbers, and imaginary numbers.
There are nocomplex literals (complex numbers can be formed by adding a realnumber and an imaginary number).Note that numeric literals do not include a sign; a phrase like-1 is actually an expression composed of the unary operator`-' and the literal 1.
3.3.6 Additional methods for
3.3.8 Coercion rules
3.3.7 Emulating numeric types
The following methods can be defined to emulate numeric objects.Methods corresponding to operations that are not supported by theparticular kind of number implemented (e.g., bitwise operations fornon-integral numbers) should be left undefined.
These methods arecalled to implement the binary arithmetic operations (+,-, *, //, %,divmod()
, , ^, |).
For instance, toevaluate the expression x
y, where x is aninstance of a class that has an __add__() method,
x.__add__(y) is called.
The __divmod__()method should be the equivalent to using __floordiv__() and__mod__(); it should not be related to __truediv__()(described below).
Note that__pow__() should be defined to accept an optional thirdargument if the ternary version of the built-inpow()
function is to be supported.
The division operator (/) is implemented by these methods.
The__truediv__() method is used when __future__.divisionis in effect, otherwise __div__() is used.
If only one ofthese two methods is defined, the object will not support division inthe alternate context; TypeError will be raised instead.
These methods arecalled to implement the binary arithmetic operations (+,-, *, /, %,divmod()
, , ^, |) with reflected(swapped) operands.
These functions are only called if the leftoperand does not support the corresponding operation.
For instance,to evaluate the expression x
y, where y is aninstance of a class that has an __rsub__() method,
y.__rsub__(x) is called.
These methods are called to implement the augmented arithmeticoperations (+=, -=, *=, /=, %=,**=,
=, =,^=, |=).
These methods should attempt to do theoperation in-place (modifying self) and return the result (whichcould be, but does not have to be, self).
If a specific methodis not defined, the augmented operation falls back to the normalmethods.
For instance, to evaluate the expressionx
y, where x is an instance of a class thathas an __iadd__() method,
x.__iadd__(y) iscalled.
If x is an instance of a class that does not define a__iadd() method,
y.__radd__(x) are considered, as with theevaluation of x
Called to implement the unary arithmetic operations (-,+, abs()
and ~).
Called to implement the built-in functionscomplex()
,and float()
.
Should return a value ofthe appropriate type.
Called to implement ``mixed-mode'' numeric arithmetic.
Should eitherreturn a 2-tuple containing self and other converted toa common numeric type, or None if conversion is impossible.
Whenthe common type would be the type of other, it is sufficient toreturn None, since the interpreter will also ask the otherobject to attempt a coercion (but sometimes, if the implementation ofthe other type cannot be changed, it is useful to do the conversion tothe other type here).
A return value of NotImplemented isequivalent to returning None.
Subsections 7.2.1 Plain Integer Objects
Print an object o, on file fp.
Returns -1 onerror.
The flags argument is used to enable certain printingoptions.
The only option currently supported isPy_PRINT_RAW; if given, the str() of theobject is written instead of the repr().
Returns 1 if o has the attribute attr_name, and0 otherwise.
This is equivalent to the Python expression"hasattr(o, attr_name)".
This function alwayssucceeds.
".
Retrieve an attribute named attr_name from object o.Returns the attribute value on success, or NULL on failure.
Thisis the equivalent of the Python expression"
Set the value of the attribute named attr_name, for objecto, to the value v.
Returns -1 on failure.
Thisis the equivalent of the Python statement"
Delete attribute named attr_name, for object o.
Returns-1 on failure.
This is the equivalent of the Pythonstatement "del o.attr_name
Compare the values of o1 and o2 using the operationspecified by opid, which must be one ofPy_LT,Py_LE,Py_EQ,Py_NE,Py_GT, orPy_GE, corresponding to,=,==,!=,, or= respectively.
This is the equivalent of the Python expression"
", where op is the operatorcorresponding to opid.
Returns the value of the comparison onsuccess, or NULL on failure.
Returns -1 on error, 0 if theresult is false, 1 otherwise.
This is the equivalent of thePython expression "
", whereop is the operator corresponding to opid.
Compare the values of o1 and o2 using a routine providedby o1, if one exists, otherwise with a routine provided byo2.
The result of the comparison is returned inresult.
This is the equivalentof the Python statement
result =cmp(o1, o2)".
Returns the result of the comparison on success.
Onerror, the value returned is undefined; usePyErr_Occurred() to detect an error.
This is equivalentto the Python expression
"cmp(o1,o2)".
Compute a string representation of object o.
Returns thestring representation on success, NULL on failure.
This is theequivalent of the Python expression "repr(o)".
This is theequivalent of the Python expression "str(o)".
Called bythe str()
built-in function and by theprint statement.
Compute a Unicode string representation of object o.
Returnsthe Unicode string representation on success, NULL on failure.This is the equivalent of the Python expression"unicode(o)".
Returns 1 if inst is an instance of the class clsor a subclass of cls, or 0 if not.
On error, returns-1 and sets an exception.
If cls is a type objectrather than a class object, PyObject_IsInstance()returns 1 if inst is of type cls.
If clsis a tuple, the check will be done against every entry in cls.The result will be 1 when at least one of the checks returns1, otherwise it will be 0.
If inst is not a classinstance and cls is neither a type object, nor a class object,nor a tuple, inst must have a __class__ attribute-- the class relationship of the value of that attribute withcls will be used to determine the result of this function.New in version 2.1.
Changed in version 2.2:Support for a tuple as the second argument added.
Subclass determination is done in a fairly straightforward way, butincludes a wrinkle that implementors of extensions to the class systemmay want to be aware of.
If A and B are classobjects, B is a subclass of A if it inherits fromA either directly or indirectly.
If either is not a classobject, a more general mechanism is used to determine the classrelationship of the two objects.
When testing if B is asubclass of A, if A is B,PyObject_IsSubclass() returns true.
If A andB are different objects, B's __bases__ attributeis searched in a depth-first fashion for A -- the presence ofthe __bases__ attribute is considered sufficient for thisdetermination.
Returns 1 if the class derived is identical to orderived from the class cls, otherwise returns 0.
Incase of an error, returns -1.
If either derived orcls is not an actual class object (or tuple), this functionuses the generic algorithm described above.New in version 2.1.
Changed in version 2.3:Older versions of Python did not support a tupleas the second argument.
Determine if the object o is callable.
Return 1 if theobject is callable and 0 otherwise.
Call a callable Python object callable_object, with argumentsgiven by the tuple args, and named arguments given by thedictionary kw.
Returns the result of the call on success,or NULL on failure.
This is the equivalent of the Pythonexpression "apply(callable_object, args, kw)" or "
callable_object(*args, **kw)".
Call a callable Python object callable_object, with argumentsgiven by the tuple args.
If no arguments are needed, thenargs may be NULL.
Returns the result of the call onsuccess, or NULL on failure.
This is the equivalent of thePython expression "apply(callable_object, args)" or"
callable_object(*args)".
Call a callable Python object callable, with a variablenumber of C arguments.
The C arguments are described using aPy_BuildValue() style format string.
The format may beNULL, indicating that no arguments are provided.
Returns theresult of the call on success, or NULL on failure.
This is theequivalent of the Python expression "apply(callable,args)" or "
callable(*args)".
Call the method named method of object o with a variablenumber of C arguments.
The C arguments are described by aPy_BuildValue() format string that should produce a tuple.
The format may be NULL,indicating that no arguments are provided.
Returns the result of thecall on success, or NULL on failure.
This is the equivalent ofthe Python expression "
o.method(args)".
Call a callable Python object callable, with a variablenumber of PyObject* arguments.
The arguments are providedas a variable number of parameters followed by NULL.Returns the result of the call on success, or NULL on failure.New in version 2.2.
Calls a method of the object o, where the name of the methodis given as a Python string object in name.
It is called witha variable number of PyObject* arguments.
The arguments areprovided as a variable number of parameters followed by NULL.Returns the result of the call on success, or NULL on failure.New in version 2.2.
Compute and return the hash value of an object o.
On failure,return -1.
This is the equivalent of the Python expression"hash(o)".
Returns 1 if the object o is considered to be true, and0 otherwise.
On failure, return -1.
Returns 0 if the object o is considered to be true, and1 otherwise.
When o is non-NULL, returns a type object corresponding tothe object type of object o.
On failure, raisesSystemError and returns NULL.
This is equivalent tothe Python expression type(o).
This function increments the reference count of the return value.There's really no reason to use this function instead of thecommon expression
o-ob_type, which returns a pointerof type PyTypeObject*, except when the incremented referencecount is needed.
Return true if the object o is of type type or a subtypeof type.
Both parameters must be non-NULL.New in version 2.2.
Return the length of object o.
If the object o provideseither the sequence and mapping protocols, the sequence length isreturned.
On error, -1 is returned.
This is the equivalentto the Python expression "len(o)".
Return element of o corresponding to the object key orNULL on failure.
Map the object key to the value v.
Returns -1 onfailure.
Delete the mapping for key from o.
This is the equivalent of the Python statement "delo[key]".
Derives a file-descriptor from a Python object.
If the object is aninteger or long integer, its value is returned.
If not, theobject's fileno() method is called if it exists; the methodmust return an integer or long integer, which is returned as thefile descriptor value.
This is equivalent to the Python expression "dir(o)",returning a (possibly empty) list of strings appropriate for theobject argument, or NULL if there was an error.
If the argumentis NULL, this is like the Python "dir()", returning the namesof the current locals; in this case, if no execution frame is activethen NULL is returned but PyErr_Occurred() willreturn false.
This is equivalent to the Python expression "iter(o)".It returns a new iterator for the object argument, or the object itself if the object is already an iterator.
RaisesTypeError and returns NULL if the object cannot beiterated.
Most Python/C API functions have one or more arguments as well as areturn value of type PyObject*.
This type is a pointerto an opaque data type representing an arbitrary Pythonobject.
Since all Python object types are treated the same way by thePython language in most situations (e.g., assignments, scope rules,and argument passing), it is only fitting that they should berepresented by a single C type.
Almost all Python objects live on theheap: you never declare an automatic or static variable of typePyObject, only pointer variables of type PyObject* can be declared.
The sole exception are the type objects
;since these must never be deallocated, they are typically staticPyTypeObject objects.All Python objects (even Python integers) have a type and areference count.
An object's type determines what kind of object it is (e.g., an integer, a list, or a user-defined function; there are many more as explained in the
PythonReference Manual
).
For each of the well-known types there is a macroto check whether an object is of that type; for instance,"PyList_Check(a)" is true if (and only if) the objectpointed to by a is a Python list. Subsections
These modules are not normally available for import; additional workmust be done to make them available.Those which are written in Python will be installed into the directory lib-old/ installed as part of the standard library.
To usethese, the directory must be added to sys.
path, possibly usingPYTHONPATH.Obsolete extension modules written in C are not built by default.Under Unix, these must be enabled by uncommenting the appropriatelines in Modules/Setup in the build tree and either rebuildingPython if the modules are statically linked, or building andinstalling the shared object if using dynamically-loaded extensions.
-- Alternate approach to packages.
Use the built-in package supportinstead.
-- File comparison function.
Use the newer
instead.
-- Caching version of the obsolete cmp module. Use thenewer
-- Extract function name or line number from a functioncode object (these are now accessible as attributes:co.co_name, func.func_name,co.co_firstlineno).
-- Class to build directory diff tools on (may become a demo or tool).
Deprecated since release 2.0.The
module replacesdircmp.
-- Print python code that reconstructs a variable.
-- Text formatting abstractions (too slow).
-- Wrapper around FCNTL file locking (usefcntl.lockf()/flock() instead; see
-- New dir() function (the standard dir() isnow just as good).
-- Helper for fmt.
-- Polynomials.
-- Emacs-style regular expression support; may still be used in someold code (extension module). Refer to the
Python1.6 Documentation
for documentation.
-- Regular expression based string replacement utilities, for usewith regex (extension module). Refer to the
-- Print tracebacks, with a dump of local variables (usepdb.pm() or
instead).
-- Measure time intervals to high resolution (usetime.clock() instead).
(This is an extension module.)
-- Parse a timezone specification (unfinished; may disappear in thefuture, and does not work when the TZ environment variable isnot set).
-- Useful functions that don't fit elsewhere.
-- Recognize sound files; use
-- Compute properties of mathematical ``fields.''
The following modules are obsolete, but are likely to re-surface astools or scripts:
-- Find files matching pattern in directory tree.
-- grep implementation in Python.
-- Create a self-unpacking Unix shell archive.
The following modules were documented in previous versions of thismanual, but are now considered obsolete.
The source for thedocumentation is still available as part of the documentation sourcearchive.
-- Import modules in ``packages.'' Basic package support is nowbuilt in.
The built-in support is very similar to what is provided inthis module.
-- Old interface to the random number generator.
-- Algorithm for collapsing names which sound similar to a sharedkey.
The specific algorithm doesn't seem to match any publishedalgorithm.
OpenerDirector instances have the following methods:
handler should be an instance of BaseHandler.
Thefollowing methods are searched, and added to the possible chains (notethat HTTP errors are a special case). protocol_open()
--signal that the handler knows how to open protocol URLs.
--signal that the handler knows how to handle errors from(non-http) protocol.
--signal that the handler knows how to post-process protocolresponses.
Handle an error of the given protocol.
This will call the registerederror handlers for the given protocol with the given arguments (whichare protocol specific).
The HTTP protocol is a special case whichuses the HTTP response code to determine the specific error handler;refer to the http_error_*() methods of the handler classes.Return values and exceptions raised are the same as thoseof urlopen().
OpenerDirector objects open URLs in three stages:The order in which these methods are called within each stage isdetermined by sorting the handler instances.
Every handler with a method named like
protocol_request() has that method called topre-process the request. Handlers with a method named like
protocol_open() are called to handle the request.This stage ends when a handler either returns anon-None value (ie. a response), or raises an exception(usually URLError).
Exceptions are allowed to propagate.In fact, the above algorithm is first tried for methods nameddefault_open.
If all such methods returnNone, the algorithm is repeated for methods named like
protocol_open().
If all such methods returnNone, the algorithm is repeated for methods namedunknown_open().Note that the implementation of these methods may involve calls ofthe parent OpenerDirector instance's .open() and.error() methods.
Every handler with a method named like protocol_response() has that method called topost-process the response.
This table shows how abstract operations correspond to operatorsymbols in the Python syntax and the functions in the
module.
Operation
Syntax
Function
Addition
Concatenation
Containment Test
Division
div(a, b) # without __future__.division
truediv(a, b) # with __future__.division
Bitwise Exclusive Or
Bitwise Inversion
Bitwise Or
Exponentiation
Indexed Deletion
Indexing
Left Shift
Modulo
Multiplication
Negation (Arithmetic)
Negation (Logical)
Right Shift
Sequence Repitition
Slice Assignment
Slice Deletion
Slicing
String Formatting
Subtraction
Truth Test
Ordering
le(a, b)
Difference
The following tokens are operators:
The comparison operators and != are alternatespellings of the same operator.
!= is the preferred spelling; is obsolescent.
optparse was explicitly designed to encourage the creation of programs withstraightforward, conventional command-line interfaces.
To that end, itsupports only the most common command-line syntax and semanticsconventionally used under Unix.
If you are unfamiliar with theseconventions, read this section to acquaint yourself with them. Subsections
6.21.4.3 Raising errors in
6.21.4.5 Callback example 2:
Here's an example of a callback option that takes no arguments, andsimply records that the option was seen:
Of course, you could do that with the store_true action.
6.21.4.4 Callback example 1:
6.21.4.6 Callback example 3:
Here's a slightly more interesting example: record the fact that"-a" is seen, but blow up if it comes after "-b" in thecommand-line.
6.21.4.7 Callback example 4:
If you want to re-use this callback for several similar options (set aflag, but blow up if "-b" has already been seen), it needs a bit ofwork: the error message and the flag that it sets must begeneralized.
6.21.4.8 Callback example 5:
Of course, you could put any condition in there--you're not limitedto checking the values of already-defined options.
For example, ifyou have options that should not be called when the moon is full, allyou have to do is this:
def check_moon(option, opt_str, value, parser):if is_moon_full():raise OptionValueError("%s option invalid when moon is full"% opt_str)setattr(parser.values, option.dest, 1)[...]parser.add_option("--foo",action="callback", callback=check_moon, dest="foo")
(The definition of is_moon_full() is left as an exercise for thereader.)
Things get slightly more interesting when you define callback optionsthat take a fixed number of arguments.
Specifying that a callbackoption takes arguments is similar to defining a store or appendoption: if you define type, then the option takes one argument thatmust be convertible to that type; if you further define nargs, thenthe option takes nargs arguments.
Here's an example that just emulates the standard store action:
Note that optparse takes care of consuming 3 arguments and converting themto integers for you; all you have to do is store them.
(Or whatever;obviously you don't need a callback for this example.)
Things get hairy when you want an option to take a variable number ofarguments.
For this case, you must write a callback, as optparse doesn'tprovide any built-in capabilities for it.
And you have to deal withcertain intricacies of conventional Unix command-line parsing that optparsenormally handles for you.
In particular, callbacks should implementthe conventional rules for bare "-" and "-" arguments:
bare "-" (if not the argument to some option): halt command-lineprocessing and discard the "-"
bare "-" (if not the argument to some option): halt command-lineprocessing but keep the "-" (append it to parser.largs)
If you want an option that takes a variable number of arguments, thereare several subtle, tricky issues to worry about.
The exactimplementation you choose will be based on which trade-offs you'rewilling to make for your application (which is why optparse doesn't supportthis sort of thing directly).Nevertheless, here's a stab at a callback for an option with variablearguments:
def vararg_callback(option, opt_str, value, parser):assert value is Nonedone = 0value = []rargs = parser.rargswhile rargs:arg = rargs[0]# Stop if we hit an arg like "--foo", "-a", "-fx", "--file=f",# etc.
Note that this also stops on "-3" or "-3.0", so if# your option takes numeric values, you will need to handle# this.
The main weakness with this particular implementation is that negativenumbers in the arguments following "-c" will be interpreted asfurther options (probably causing an error), rather than as arguments to"-c".
Fixing this is left as an exercise for the reader.
6.21.3.5 Querying and manipulating
If you're not careful, it's easy to define options with conflictingoption strings:
(This is particularly true if you've defined your own OptionParsersubclass with some standard options.)Every time you add an option, optparse checks for conflicts with existingoptions.
If it finds any, it invokes the current conflict-handlingmechanism.
You can set the conflict-handling mechanism either in theconstructor:
or with a separate call:
The available conflict-handling mechanisms are:
error (default)
assume option conflicts are a programming error and raise OptionConflictError
resolve option conflicts intelligently (see below)
As an example, let's define an OptionParser that resolves conflictsintelligently and add conflicting options to it:
At this point, optparse detects that a previously-added option is alreadyusing the "-n" option string.
Since conflict_handler is"resolve", it resolves the situation by removing "-n" from theearlier option's list of option strings.
Now "-dry-run" is theonly way for the user to activate that option.
If the user asks forhelp, the help message will reflect that:
It's possible to whittle away the option strings for a previously-addedoption until there are none left, and the user has no way of invokingthat option from the command-line.
In that case, optparse removes thatoption completely, so it doesn't show up in help text or anywhere else.Carrying on with our existing OptionParser:
parser.add_option("--dry-run", ..., help="new dry-run option")
At this point, the original -n/-dry-run option is no longeraccessible, so optparse removes it, leaving this help text:
options:[...]-n, --noisy be noisy--dry-run new dry-run option
All of the above examples involve setting some variable (the``destination'') when certain command-line options are seen.
What happensif those options are never seen?
Since we didn't supply any defaults,they are all set to None.
If we want optparse to setverbose to True unless "-q" is seen, then we can do this:
Since default values apply to the destination rather than to anyparticular option, and these two options happen to have the samedestination, this is exactly equivalent:
Consider this:
As before, the last value specified for a given option destination isthe one that counts.
For clarity, try to use one method or the other ofsetting default values, not both.
6.21.4.2 How callbacks are
As always, the easiest way to define a callback option is by using theparser.add_option() method.
Apart from action, the only optionattribute you must specify is callback, the function to call:
callback is a function (or other callable object), so you must havealready defined my_callback() when you create this callback option.In this simple case, optparse doesn't even know if -c takes anyarguments, which usually means that the option takes no arguments--themere presence of -c on the command-line is all it needs to know.
Insome circumstances, though, you might want your callback to consume anarbitrary number of command-line arguments.
This is where writingcallbacks gets tricky; it's covered later in this section.
optparse always passes four particular arguments to your callback, and itwill only pass additional arguments if you specify them viacallback_args and callback_kwargs.
Thus, the minimal callbackfunction signature is:
has its usual meaning: as with the store or append actions,it instructs optparse to consume one argument and convert it totype.
Rather than storing the converted value(s) anywhere,though, optparse passes it to your callback function.
also has its usual meaning: if it is supplied and 1, optparse willconsume nargs arguments, each of which must be convertible totype.
It then passes a tuple of converted values to yourcallback.
Each Option instance represents a set of synonymous command-line optionstrings, e.g. -f and --file.
You canspecify any number of short or long option strings, but you must specifyat least one overall option string.The canonical way to create an Option instance is by callingmake_option(), so that is what will be shown here.
However, themost common and convenient way is to use parser.add_option().
Notethat make_option() and parser.add_option() have identical callsignatures:
To define an option with only a short option string:
make_option("-f", attr=value, ...)
And to define an option with only a long option string:
make_option("--foo", attr=value, ...)
The attr=value keyword arguments define option attributes,i.e. attributes of the Option object.
The most important optionattribute is action, and it largely determines what other attributesare relevant or required.
If you pass irrelevant option attributes, orfail to pass required ones, optparse raises an OptionError exceptionexplaining your mistake.An options's action determines what optparse does when it encountersthis option on the command-line.
The actions hard-coded into optparse are:
store this option's argument [default]
store a constant value store_true
store_false
store a false value
append this option's argument to a list
increment a counter by one
call a specified function
print a usage message including all options and thedocumentation for them
(If you don't supply an action, the default is store.
one of the first things optparse does is create the options object:
If one of the options in this parser is defined with
and the command-line being parsed includes any of the following:
then optparse, on seeing the -f or --file option, will do theequivalent of
The type and dest option attributes are almost as important asaction, but action is the only one that makes sense for alloptions.
6.21.2.7 Printing a version
optparse's ability to generate help and usage text automatically is usefulfor creating user-friendly command-line interfaces.
All you have to dois supply a help value for each option, and optionally a short usagemessage for your whole program.
Here's an OptionParser populated withuser-friendly (documented) options:
If optparse encounters either "-h" or "-help" on the command-line,or if you just call parser.print_help(), it prints the following tostandard output:
the script defines its own usage message:
optparse expands "%prog" in the usage string to the name of the currentprogram, i.e. os.path.basename(sys.argv[0]).
every option defines a help string, and doesn't worry about line-wrapping--optparse takes care of wrapping lines and making thehelp output look good.
options that take a value indicate this fact in theirautomatically-generated help message, e.g. for the ``mode'' option:
Here, ``MODE'' is called the meta-variable: it stands for the argumentthat the user is expected to supply to -m/--mode.
By default,optparse converts the destination variable name to uppercase and usesthat for the meta-variable.
Sometimes, that's not what you want--for example, the --filename option explicitly setsmetavar="FILE", resulting in this automatically-generated optiondescription:
options that have a default value can include %default inthe help string--optparse will replace it with str() of theoption's default value.
If an option has no default value (or thedefault value is None), %default expands to none.
Flag options--set a variable to true or false when a particular optionis seen--are quite common. optparse supports them with two separateactions, store_true and store_false.
For example, you might have averbose flag that is turned on with "-v" and off with "-q":
Here we have two different options with the same destination, which isperfectly OK. (It just means you have to be a bit careful when settingdefault values--see below.)When optparse encounters "-v" on the command line, it setsoptions.
verbose to True; when it encounters "-q",options.
verbose is set to False.
6.21.4.1 Defining a callback
All callbacks are called as follows:
where
is the Option instance that's calling the callback
is the option string seen on the command-line that's triggering thecallback.
(If an abbreviated long option was used, opt_str willbe the full, canonical option string--e.g. if the user puts"-foo" on the command-line as an abbreviation for"-foobar", then opt_str will be "-foobar".)
is the argument to this option seen on the command-line. optparse willonly expect an argument if type is set; the type of valuewill be the type implied by the option's type.
If type for thisoption is None (no argument expected), then value will beNone.
If nargs 1, value will be a tuple of values ofthe appropriate type.
is the OptionParser instance driving the whole thing, mainlyuseful because you can access some other interesting data throughits instance attributes:
the current list of leftover arguments, ie. arguments that havebeen consumed but are neither options nor option arguments.Feel free to modify parser.largs, e.g. by adding morearguments to it.
(This list will become args, the secondreturn value of parse_args().)
the current list of remaining arguments, ie. with opt_str andvalue (if applicable) removed, and only the argumentsfollowing them still there.
Feel free to modifyparser.rargs, e.g. by consuming more arguments.
parser.values the object where option values are by default stored (aninstance of optparse.OptionValues).
This lets callbacks use thesame mechanism as the rest of optparse for storing option values;you don't need to mess around with globals or closures.
You canalso access or modify the value(s) of any options alreadyencountered on the command-line.
is a tuple of arbitrary positional arguments supplied via thecallback_args option attribute.
is a dictionary of arbitrary keyword arguments supplied viacallback_kwargs.
6.21.2.9 Putting it all
There are two broad classes of errors that optparse has to worry about:programmer errors and user errors.
Programmer errors are usuallyerroneous calls to parse.add_option(), e.g. invalid option strings,unknown option attributes, missing option attributes, etc.
Also, you can call parser.error() to signal anapplication-defined error condition:
(options, args) = parser.parse_args()[...]if options.
a and options.
Or, where the user fails to pass a value at all:
optparse-generated error messages take care always to mention the optioninvolved in the error; be sure to do the same when callingparser.error() from your application code.If optparse's default error-handling behaviour does not suite your needs,you'll need to subclass OptionParser and override exit() and/orerror().
Quite often a simple callback is all you need.There are two steps to defining a callback option:
define the option itself using the callback action
6.21.2.3 Handling boolean (flag)
Some other actions supported by optparse are:
store a constant value
append this option's argument to a list
increment a counter by one
call a specified function
These are covered in section6.21.3, Reference Guide and section6.21.4, Option Callbacks.
There are several ways to populate the parser with options.
Thepreferred way is by using OptionParser.add_option(), as shown insection6.21.2, the tutorial. add_option() can be called in one of twoways:
pass it an Option instance (as returned by make_option())
pass it any combination of positional and keyword arguments that areacceptable to make_option() (i.e., to the Option constructor),and it will create the Option instance for you
The other alternative is to pass a list of pre-constructed Optioninstances to the OptionParser constructor, as in:
(make_option() is a factory function for creating Option instances;currently it is an alias for the Option constructor.
A future versionof optparse may split Option into several classes, and make_option()will pick the right class to instantiate.
Do not instantiate Optiondirectly.)
6.21.2.8 How optparse handles
Similar to the brief usage string, optparse can also print a version stringfor your program.
You have to supply the string as the versionargument to OptionParser:
Note that "%prog" is expanded just like it is in usage.
Apartfrom that, version can contain anything you like.
$ /usr/bin/foo --versionfoo 1.0
Here's what optparse-based scripts usually look like:
Sometimes, it's useful to poke around your option parser and see what'sthere.
OptionParser provides a couple of methods to help you out:
Return true if the OptionParser has an option with option string opt_str (e.g., "-q" or "-verbose").
Returns the Option instance with the option string opt_str, orNone if no options have that option string.
remove_option(opt_str)
If the OptionParser has an option corresponding to opt_str,that option is removed.
If that option provided any otheroption strings, all of those option strings become invalid.If opt_str does not occur in any option belonging to thisOptionParser, raises ValueError.
The callback function should raise OptionValueError if there are anyproblems with the option or its argument(s). optparse catches this andterminates the program, printing the error message you supply tostderr.
Your message should be clear, concise, accurate, and mentionthe option at fault.
Otherwise, the user will have a hard timefiguring out what he did wrong.
Subsections 6.21.3.1 Populating the parser
The various option actions all have slightly different requirements andeffects.
Most actions have several relevant option attributes which youmay specify to guide optparse's behaviour; a few have required attributes,which you must specify for any option using that action.
store [relevant: type, dest, nargs, choices]The option must be followed by an argument, which isconverted to a value according to type and stored indest.
If nargs 1, multiple arguments will be consumedfrom the command line; all will be converted according totype and stored to dest as a tuple.
As it parses the command line
optparse will set
f = "bar.txt"
store_const [required: const; relevant: dest]The value const is stored in dest.Example:
If "-noisy" is seen, optparse will set
append [relevant: type, dest, nargs, choices]The option must be followed by an argument, which is appended to thelist in dest.
If no default value for dest is supplied, anempty list is automatically created when optparse first encounters thisoption on the command-line.
If nargs 1, multiple arguments areconsumed, and a tuple of length nargs is appended to dest.The defaults for type and dest are the same as for thestore action.Example:
parser.add_option("-t", "--tracks", action="append", type="int")
If "-t3" is seen on the command-line, optparse does the equivalent of: options.
If, a little later on, "-tracks=4" is seen, it does: options.
tracks.
append(int("4"))
count [relevant: dest]Increment the integer stored at dest.
If no default value issupplied, dest is set to zero before being incremented the firsttime.Example:
parser.add_option("-v", action="count", dest="verbosity")
The first time "-v" is seen on the command line, optparse does theequivalent of:
Every subsequent occurrence of "-v" results in
The signature ofthis function should be
func(option : Option,opt : string,value : any,parser : OptionParser,*args, **kwargs)
See section6.21.4, Option Callbacks for more detail.
Prints a complete help message for all the options in thecurrent option parser.
The help message is constructed fromthe usage string passed to OptionParser's constructor andthe help string passed to every option.If no help string is supplied for an option, it will still belisted in the help message.
To omit an option entirely, usethe special value optparse.
SUPPRESS_HELP. optparse automatically adds a help option to all OptionParsers, soyou do not normally need to create one.Example:
from optparse import OptionParser, SUPPRESS_HELPparser = OptionParser()parser.add_option("-h", "--help", action="help"),parser.add_option("-v", action="store_true", dest="verbose",help="Be moderately verbose")parser.add_option("--file", dest="filename",help="Input file to read data from"),parser.add_option("--secret", help=SUPPRESS_HELP)
If optparse sees either "-h" or "-help" on the command line, itwill print something like the following help message to stdout(assuming sys. argv[0] is "foo.py"):
After printing the help message, optparse terminates your processwith sys.exit(0).
Prints the version number supplied to the OptionParser to stdout andexits.
The version number is actually formatted and printed by theprint_version() method of OptionParser.
Generally only relevantif the version argument is supplied to the OptionParserconstructor.
As with help options, you will rarely createversion options, since optparse automatically adds them when needed.
optparse has six built-in option types: string, int, long,choice, float and complex.
If you need to add new optiontypes, see section
, Extending optparse.Arguments to string options are not checked or converted in any way: thetext on the command line is stored in the destination (or passed to thecallback) as-is.Integer arguments are passed to int() to convert them to Pythonintegers.
If int() fails, so will optparse, although with a moreuseful error message.
(Internally, optparse raises OptionValueError;OptionParser catches this exception higher up and terminates yourprogram with a useful error message.)Likewise, float arguments are passed to float() for conversion,long arguments to long(), and complex arguments tocomplex().
Apart from that, they are handled identically to integerarguments.
choice options are a subtype of string options.
The choicesoption attribute (a sequence of strings) defines the set of allowedoption arguments. optparse.
option.check_choice() comparesuser-supplied option arguments against this master list and raisesOptionValueError if an invalid string is given.
6.21.2.3 Handling boolean (flag)
6.21.2.2 The store action
The most common option action is store, which tells optparse to takethe next argument (or the remainder of the current argument), ensurethat it is of the correct type, and store it to your chosen destination.For example:
parser.add_option("-f", "--file",action="store", type="string", dest="filename")
Now let's make up a fake command line and ask optparse to parse it:
When optparse sees the option string "-f", it consumes the nextargument, "foo.txt", and stores it in options.
filename. So,after this call to parse_args(), options.
filename is"foo.txt".Some other option types supported by optparse are int and float.Here's an option that expects an integer argument:
Note that this option has no long option string, which is perfectlyacceptable.
Also, there's no explicit action, since the default isstore.Let's parse another fake command-line.
This time, we'll jam the optionargument right up against the option: since "-n42" (one argument) isequivalent to "-n 42" (two arguments), the code
will print "42".If you don't specify a type, optparse assumes string.
Combined with thefact that the default action is store, that means our first examplecan be a lot shorter:
If you don't supply a destination, optparse figures out a sensible defaultfrom the option strings: if the first long option string is"-foo-bar", then the default destination is foo_bar.
If thereare no long option strings, optparse looks at the first short optionstring: the default destination for "-f" is f.
optparse also includes built-in long and complex types.
Addingtypes is covered in section
, Extending optparse.
6.21.1.2 What are options
argument
a string entered on the command-line, and passed by the shell toexecl() or execv().
In Python, arguments are elements ofsys.argv[1:] (sys.argv[0] is the name of the program beingexecuted).
Unix shells also use the term ``word''.It is occasionally desirable to substitute an argument list otherthan sys.
argv[1:], so you should read ``argument'' as ``an element ofsys.argv[1:], or of some other list provided as a substitute forsys.argv[1:]''.
option
an argument used to supply extra information to guide or customize theexecution of a program.
Also, traditional Unixsyntax allows multiple options to be merged into a single argument,e.g.
"-x -F" is equivalent to "-xF".
The GNU projectintroduced "-" followed by a series of hyphen-separated words,e.g.
"-file" or "-dry-run".
These are the only two optionsyntaxes provided by optparse.Some other option syntaxes that the world has seen include:
a hyphen followed by a few letters, e.g. "-pf" (this isnot the same as multiple options merged into a single argument)
a hyphen followed by a whole word, e.g. "-file" (this istechnically equivalent to the previous syntax, but they aren'tusually seen in the same program)
a plus sign followed by a single letter, or a few letters,or a word, e.g. "+f", "+rgb"
a slash followed by a letter, or a few letters, or a word, e.g."/f", "/file"
These option syntaxes are not supported by optparse, and they never willbe.
This is deliberate: the first three are non-standard on anyenvironment, and the last only makes sense if you're exclusivelytargeting VMS, MS-DOS, and/or Windows.
option argument
an argument that follows an option, is closely associated with thatoption, and is consumed from the argument list when that option is.With optparse, option arguments may either be in a separate argumentfrom their option:
or included in the same argument:
Typically, a given option either takes an argument or it doesn't.Lots of people want an ``optional option arguments'' feature, meaningthat some options will take an argument if they see it, and won't ifthey don't.
This is somewhat controversial, because it makes parsingambiguous: if "-a" takes an optional argument and "-b" isanother option entirely, how do we interpret "-ab"?
Because ofthis ambiguity, optparse does not support this feature.
positional argument
something leftover in the argument list after options have beenparsed, i.e. after options and their arguments have been parsed andremoved from the argument list.
required option
an option that must be supplied on the command-line; note that thephrase ``required option'' is self-contradictory in English. optparsedoesn't prevent you from implementing required options, but doesn'tgive you much help at it either.
See examples/required_1.py andexamples/required_2.py in the optparse source distribution for twoways to implement required options with optparse.
For example, consider this hypothetical command-line:
"-v" and "-report" are both options.
Assuming that--report takes one argument, "/tmp/report.txt" is an optionargument.
"foo" and "bar" are positional arguments.
6.21.1.3 What are positional
While optparse is quite flexible and powerful, it's also straightforward touse in most cases.
Then you can start defining options.
The basic syntax is:
For brevity, we will frequently referto encountering an option on the command line; in reality, optparseencounters option strings and looks up options from them.Once all of your options are defined, instruct optparse to parse yourprogram's command line:
parse_args() returns two values:
options, an object containing values for all of your options--e.g. if "-file" takes a single string argument, thenoptions.
file will be the filename supplied by the user, orNone if the user did not supply that option
args, the list of positional arguments leftover after parsingoptions
This tutorial section only covers the four most important optionattributes: action, type, dest (destination), and help.Of these, action is the most fundamental.
Subsections
Actions tell optparse what to do when it encounters an option on thecommand line.
There is a fixed set of actions hard-coded into optparse;adding new actions is an advanced topic covered in section
Options are used to provide extra information to tune or customize theexecution of a program.
In case it wasn't clear, options are usuallyoptional.
A program should be able to run just fine with no optionswhatsoever.
(Pick a random program from the Unix or GNU toolsets.
Canit run without any options at all and still make sense?
The mainexceptions are find, tar, and dd--all of which are mutantoddballs that have been rightly criticized for their non-standard syntaxand confusing interfaces.)Lots of people want their programs to have ``required options''.
Thinkabout it.
If it's required, then it's not optional!
If there is apiece of information that your program absolutely requires in order torun successfully, that's what positional arguments are for.As an example of good command-line interface design, consider the humblecp utility, for copying files.
It doesn't make much sense to try tocopy files without supplying a destination and at least one source.Hence, cp fails if you run it with no arguments.
However, it has aflexible, useful syntax that does not require any options at all:
DEST-DIR You can get pretty far with just that.
Most cp implementationsprovide a bunch of options to tweak exactly how the files are copied:you can preserve mode and modification time, avoid following symlinks,ask before clobbering existing files, etc.
But none of this distractsfrom the core mission of cp, which is to copy either one file toanother, or several files to another directory.
Positional arguments are for those pieces of information that yourprogram absolutely, positively requires to run.A good user interface should have as few absolute requirements aspossible.
If your program requires 17 distinct pieces of information inorder to run successfully, it doesn't much matter how you get thatinformation from the user--most people will give up and walk awaybefore they successfully run the program.
This applies whether the userinterface is a command-line, a configuration file, or a GUI: if you makethat many demands on your users, most of them will simply give up.In short, try to minimize the amount of information that users areabsolutely required to supply--use sensible defaults wheneverpossible.
Of course, you also want to make your programs reasonablyflexible. That's what options are for.
Again, it doesn't matter ifthey are entries in a config file, widgets in the ``Preferences'' dialogof a GUI, or command-line options--the more options you implement, themore flexible your program is, and the more complicated itsimplementation becomes.
Too much flexibility has drawbacks as well, ofcourse; too many options can overwhelm users and make your code muchharder to maintain.
5.3.3 Re-using old test
The basic building blocks of unit testing are test cases --single scenarios that must be set up and checked for correctness.
InPyUnit, test cases are represented by instances of theTestCase class in the
module.
Note that in order to test something, we use the one of theassert*() or fail*() methods provided by theTestCase base class.
If the test fails when the test caseruns, an exception will be raised, and the testing framework willidentify the test case as a failure.
Other exceptions that donot arise from checks made through the assert*() andfail*() methods are identified by the testing framework asdfnerrors.The way to run a test case will be described later.
For now, notethat to construct an instance of such a test case, we call itsconstructor without arguments:
Now, such test cases can be numerous, and their set-up can berepetitive.
In the above case, constructing a ``Widget'' in each of100 Widget test case subclasses would mean unsightly duplication.Luckily, we can factor out such set-up code by implementing a methodcalled setUp(), which the testing framework willautomatically call for us when we run the test:
If the setUp() method raises an exception while the test isrunning, the framework will consider the test to have suffered anerror, and the runTest() method will not be executed.Similarly, we can provide a tearDown() method that tidies upafter the runTest() method has been run:
If setUp() succeeded, the tearDown() method will berun regardless of whether or not runTest() succeeded.Such a working environment for the testing code is called afixture.Often, many small test cases will use the same fixture.
Here we have not provided a runTest() method, but haveinstead provided two different test methods.
Class instances will noweach run one of the test*() methods, with self.
Test case instances are grouped together according to the featuresthey test.
PyUnit provides a mechanism for this: the testsuite, represented by the class TestSuite in the
module:
For the ease of running tests, as we will see later, it is a goodidea to provide in each test module a callable object that returns apre-built test suite:
or even:
(The latter is admittedly not for the faint-hearted!)Since it is a common pattern to create a TestCase subclasswith many similarly named test functions, there is a conveniencefunction called makeSuite() that constructs a test suitethat comprises all of the test cases in a test case class:
Note that when using the makeSuite() function, the order inwhich the various test cases will be run by the test suite is theorder determined by sorting the test function names using thecmp() built-in function.Often it is desirable to group suites of test cases together, so as torun tests for the whole system at once.
This is easy, sinceTestSuite instances can be added to a TestSuite justas TestCase instances can be added to a TestSuite:
You can place the definitions of test cases and test suites in thesame modules as the code they are to test (such as widget.py),but there are several advantages to placing the test code in aseparate module, such as widgettests. py:
The test module can be run standalone from the command line.
The test code can more easily be separated from shipped code.
There is less temptation to change test code to fit the codeit tests without a good reason.
Test code should be modified much less frequently than thecode it tests.
Tested code can be refactored more easily.
Tests for modules written in C must be in separate modulesanyway, so why not be consistent?
If the testing strategy changes, there is no need to changethe source code.
These functions operate on I/O streams referred tousing file descriptors.
Close file descriptor fd.Availability: Macintosh, Unix, Windows.
Note:This function is intended for low-level I/O and must be appliedto a file descriptor as returned by open() orpipe().
To close a ``file object'' returned by thebuilt-in function open() or by popen() orfdopen(), use its close() method.
Return a duplicate of file descriptor fd.Availability: Macintosh, Unix, Windows.
Duplicate file descriptor fd to fd2, closing the latterfirst if necessary.Availability: Unix, Windows.
Return system configuration information relevant to an open file.name specifies the configuration value to retrieve; it may be astring which is the name of a defined system value; these names arespecified in a number of standards (POSIX.1, Unix 95, Unix 98, andothers).
Some platforms define additional names as well.
The namesknown to the host operating system are given in thepathconf_names dictionary.
If a specific value for name is not supported by thehost system, even if it is included in pathconf_names, anOSError is raised with errno.EINVAL for theerror number.
Return status for file descriptor fd, like stat().Availability: Unix, Windows.
Return information about the filesystem containing the file associatedwith file descriptor fd, like statvfs().Availability: Unix.
Force write of file with filedescriptor fd to disk.
On Unix,this calls the native fsync() function; on Windows, theMS _commit() function.If you're starting with a Python file object f, first do
f.flush(), and then do os.
fsync(f.fileno()),to ensure that all internal buffers associated with f are writtento disk.Availability: Unix, and Windows starting in 2.2.3.
Truncate the file corresponding to file descriptor fd,so that it is at most length bytes in size.Availability: Unix.
Open the file file and set various flags according toflags and possibly its mode according to mode.The default mode is 0777 (octal), and the current umaskvalue is first masked out.
Note:This function is intended for low-level I/O. For normal usage,use the built-in function open(), which returns a ``fileobject'' with read() and write() methods (and manymore).
Open a new pseudo-terminal pair.
Return a pair of file descriptors(master, slave) for the pty and the tty,respectively.
For a (slightly) more portable approach, use the
module.Availability: Some flavors of Unix.
Create a pipe.
Return a pair of file descriptors (r,w) usable for reading and writing, respectively.Availability: Unix, Windows.
Read at most n bytes from file descriptor fd.Return a string containing the bytes read.
If the end of the filereferred to by fd has been reached, an empty string isreturned.Availability: Macintosh, Unix, Windows.
Note:This function is intended for low-level I/O and must be appliedto a file descriptor as returned by open() orpipe().
To read a ``file object'' returned by thebuilt-in function open() or by popen() orfdopen(), or sys.stdin, use itsread() or readline() methods.
Return the process group associated with the terminal given byfd (an open file descriptor as returned by open()).Availability: Unix.
Set the process group associated with the terminal given byfd (an open file descriptor as returned by open())to pg.Availability: Unix.
Return a string which specifies the terminal device associated withfile-descriptor fd.
If fd is not associated with a terminaldevice, an exception is raised.Availability: Unix.
To write a ``file object'' returned by thebuilt-in function open() or by popen() orfdopen(), or sys.stdout or sys.stderr, useits write() method.
The following data items are available for use in constructing theflags parameter to the open() function.
More options for the flag argument to the open() function.Availability: Macintosh, Unix.
Option for the flag argument to the open() function.This can be bit-wise OR'd together with those listed above.Availability: Macintosh, Windows.
O_TEXT Options for the flag argument to the open() function.These can be bit-wise OR'd together.Availability: Windows.
Use the real uid/gid to test for access to path.
Return True if access is allowed,False if not.See the Unix man page
Value to pass as the mode parameter of access() totest the existence of path.
Value to include in the mode parameter of access()to test the readability of path.
Value to include in the mode parameter of access()to test the writability of path.
Value to include in the mode parameter of access()to determine if path can be executed.
Change the current working directory to path.Availability: Macintosh, Unix, Windows.
Return a string representing the current working directory.Availability: Macintosh, Unix, Windows.
Change the mode of path to the numeric mode.mode may take one of the following values(as defined in the stat module):
Availability: Unix, Windows.
Change the owner and group id of path to the numeric uidand gid.
This function will not follow symbolic links.Availability: Unix.New in version 2.3.
Create a hard link pointing to src named dst.Availability: Unix.
Return a list containing the names of the entries in the directory.The list is in arbitrary order.
It does not include the specialentries '.' and '..' even if they are present in thedirectory.Availability: Macintosh, Unix, Windows.
Changed in version 2.3:On Windows NT/2k/XP and Unix, if path is a Unicodeobject, the result will be a list of Unicode objects..
Like stat(), but do not follow symbolic links.Availability: Unix.
Create a FIFO (a named pipe) named path with numeric modemode.
The default mode is 0666 (octal).
FIFOs existuntil they are deleted (for example with os.
unlink()).Generally, FIFOs are used as rendezvous between ``client'' and``server'' type processes: the server opens the FIFO for reading, andthe client opens it for writing.
Note that mkfifo()doesn't open the FIFO -- it just creates the rendezvous point.
Create a filesystem node (file, device special file or named pipe)named filename. mode specifies both the permissions to use andthe type of node to be created, being combined (bitwise OR) with oneof S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO (those constants areavailable in stat).
For S_IFCHR and S_IFBLK, devicedefines the newly created device special file (probably usingos.
makedev()), otherwise it is ignored.New in version 2.3.
Extracts a device major number from a raw device number.New in version 2.3.
Extracts a device minor number from a raw device number.New in version 2.3.
Composes a raw device number from the major and minor device numbers.New in version 2.3.
Create a directory named path with numeric mode mode.The default mode is 0777 (octal).
On some systems,mode is ignored.
Where it is used, the current umask value isfirst masked out.Availability: Macintosh, Unix, Windows.
Recursive directory creation function.
Like mkdir(),but makes all intermediate-level directories needed to contain theleaf directory.
Throws an error exception if the leafdirectory already exists or cannot be created.
The default modeis 0777 (octal).
This function does not properly handle UNCpaths (only relevant on Windows systems; Universal Naming Conventionpaths are those that use the `hostpath' syntax).New in version 1.5.2.
Return system configuration information relevant to a named file.name specifies the configuration value to retrieve; it may be astring which is the name of a defined system value; these names arespecified in a number of standards (POSIX.1, Unix 95, Unix 98, andothers).
Dictionary mapping names accepted by pathconf() andfpathconf() to the integer values defined for those namesby the host operating system.
This can be used to determine the setof names known to the system.Availability: Unix.
Return a string representing the path to which the symbolic linkpoints.
The result may be either an absolute or relative pathname; ifit is relative, it may be converted to an absolute pathname usingos.
path.join(os.path.dirname(path), result).Availability: Unix.
Remove the file path.
If path is a directory,OSError is raised; see rmdir() below to removea directory.
This is identical to the unlink() functiondocumented below.
On Windows, attempting to remove a file that is inuse causes an exception to be raised; on Unix, the directory entry isremoved but the storage allocated to the file is not made availableuntil the original file is no longer in use.Availability: Macintosh, Unix, Windows.
Removes directories recursively.
Works likermdir() except that, if the leaf directory issuccessfully removed, directories corresponding to rightmost pathsegments will be pruned way until either the whole path is consumed oran error is raised (which is ignored, because it generally means thata parent directory is not empty).
Throws an errorexception if the leaf directory could not be successfully removed.New in version 1.5.2.
Rename the file or directory src to dst.
If dst isa directory, OSError will be raised.
On Unix, ifdst exists and is a file, it will be removed silently if theuser has permission.
The operation may fail on some Unix flavorsif src and dst are on different filesystems.
Ifsuccessful, the renaming will be an atomic operation (this is aPOSIX requirement).
On Windows, if dst already exists,OSError will be raised even if it is a file; there may beno way to implement an atomic rename when dst names an existingfile.Availability: Macintosh, Unix, Windows.
Note:This function can fail with the new directory structure made ifyou lack permissions needed to remove the leaf directory or file.
Remove the directory path.Availability: Macintosh, Unix, Windows.
Perform a stat() system call on the given path.
Thereturn value is an object whose attributes correspond to the members ofthe stat structure, namely:st_mode (protection bits),st_ino (inode number),st_dev (device),st_nlink (number of hard links),st_uid (user ID of owner),st_gid (group ID of owner),st_size (size of file, in bytes),st_atime (time of most recent access),st_mtime (time of most recent content modification),st_ctime(platform dependent; time of most recent metadata change on Unix, orthe time of creation on Windows).
Changed in version 2.3:If stat_float_times returns true, the timevalues are floats, measuring seconds.
Fractions of a second may bereported if the system supports that.
On Mac OS, the times are alwaysfloats.
See stat_float_times for further discussion.
definesfunctions and constants that are useful for extracting informationfrom a stat structure.(On Windows, some items are filled with dummy values.)
For example, on Windows systemsusing the FAT or FAT32 file systems, st_mtime has 2-secondresolution, and st_atime has only 1-day resolution.
Seeyour operating system documentation for details.
Availability: Macintosh, Unix, Windows.
Changed in version 2.2:Added access to values as attributes of the returned object.
Determine whether stat_result represents time stamps as floatobjects.
If newval is True, future calls to stat() return floats, ifit is False, future calls return ints.
If newval is omitted, returnthe current setting.For compatibility with older Python versions, accessingstat_result as a tuple always returns integers.
Forcompatibility with Python 2.2, accessing the time stamps by field namealso returns integers.
Applications that want to determine thefractions of a second in a time stamp can use this function to havetime stamps represented as floats.
If an application uses a library that works incorrectly iffloating point time stamps are processed, this application should turnthe feature off until the library has been corrected.
Perform a statvfs() system call on the given path.
defines constants that are useful for extracting informationfrom a statvfs structure when accessing it as a sequence; thisremains useful when writing code that needs to work with versions ofPython that don't support accessing the fields as attributes.
Create a symbolic link pointing to src named dst.Availability: Unix.
Return a unique path name that is reasonable for creating a temporaryfile.
This will be an absolute path that names a potential directoryentry in the directory dir or a common location for temporaryfiles if dir is omitted or None.
If given and notNone, prefix is used to provide a short prefix to thefilename.
Applications are responsible for properly creating andmanaging files created using paths returned by tempnam();no automatic cleanup is provided.On Unix, the environment variable TMPDIR overridesdir, while on Windows the TMP is used. The specificbehavior of this function depends on the C library implementation;some aspects are underspecified in system documentation.
This will be an absolute path that names a potential directoryentry in a common location for temporary files.
Applications areresponsible for properly creating and managing files created usingpaths returned by tmpnam(); no automatic cleanup isprovided.
This function probably shouldn't be usedon Windows, though: Microsoft's implementation of tmpnam()always creates a name in the root directory of the current drive, andthat's generally a poor location for a temp file (depending onprivileges, you may not even be able to open a file using this name).
The maximum number of unique names that tmpnam() willgenerate before reusing names.
This is the same function asremove(); the unlink() name is its traditionalUnix name.Availability: Macintosh, Unix, Windows.
Set the access and modified times of the file specified by path.If times is None, then the file's access and modifiedtimes are set to the current time.
)
walk() generates the file names in a directory tree, bywalking the tree either top down or bottom up.For each directory in the tree rooted at directory top (includingtop itself), it yields a 3-tuple(dirpath, dirnames, filenames).
Note that thenames in the lists contain no path components.
To get a fullpath (which begins with top) to a file or directory indirpath, do os.
path.join(dirpath, name).If optional argument topdown is true or not specified, the triplefor a directory is generated before the triples for any of itssubdirectories (directories are generated top down).
Modifying dirnames when topdown isfalse is ineffective, because in bottom-up mode the directories indirnames are generated before dirnames itself is generated.By default errors from the os.
listdir() call are ignored.
Ifoptional argument onerror is specified, it should be a function;it will be called with one argument, an os. error instance.
It canreport the error to continue with the walk, or raise the exceptionto abort the walk.
Note that the filename is available as thefilename attribute of the exception object.
Note:If you pass a relative pathname, don't change the current workingdirectory between resumptions of walk(). walk()never changes the current directory, and assumes that its callerdoesn't either.
Note:On systems that support symbolic links, links to subdirectories appearin dirnames lists, but walk() will not visit them(infinite loops are hard to avoid when following symbolic links).To visit linked directories, you can identify them withos.
path.islink(path), and invoke walk(path)on each directly.
This example displays the number of bytes taken by non-directory filesin each directory under the starting directory, except that it doesn'tlook under any CVS subdirectory:
import osfrom os. path import join, getsizefor root, dirs, files in os.
In the next example, walking the tree bottom up is essential:rmdir() doesn't allow deleting a directory before thedirectory is empty:
n)
Return a string of n random bytes suitable for cryptographic use.This function returns random bytes from an OS-specificrandomness source.
The returned data should be unpredictable enough forcryptographic applications, though its exact quality depends on the OSimplementation.
On a UNIX-like system this will query /dev/urandom, andon Windows it will use CryptGenRandom.
If a randomness source is notfound, NotImplementedError will be raised.New in version 2.4.
These functions create new file objects.
Return an open file object connected to the file descriptor fd.
The mode and bufsize arguments have the same meaning asthe corresponding arguments to the built-in open()function.Availability: Macintosh, Unix, Windows.
Changed in version 2.3:When specified, the mode argument must now startwith one of the letters "r", "w", or "a",otherwise a ValueError is raised.
Open a pipe to or from command.
The return value is an openfile object connected to the pipe, which can be read or writtendepending on whether mode is 'r' (default) or 'w'.The bufsize argument has the same meaning as the correspondingargument to the built-in open() function.
Changed in version 2.0:This function worked unreliably under Windows inearlier versions of Python.
This was due to the use of the_popen() function from the libraries provided withWindows.
Newer versions of Python do not use the brokenimplementation from the Windows libraries.
Return a new file object opened in update mode ("w+b").
The filehas no directory entries associated with it and will be automaticallydeleted once there are no file descriptors for the file.Availability: Unix, Windows.
For each of these popen() variants, if bufsize isspecified, it specifies the buffer size for the I/O pipes.mode, if provided, should be the string 'b' or't'; on Windows this is needed to determine whether the fileobjects should be opened in binary or text mode.
The default valuefor mode is 't'.Also, for each of these variants, on Unix, cmd may be a sequence, inwhich case arguments will be passed directly to the program without shellintervention (as with os.
spawnv()).
If cmd is a string it willbe passed to the shell (as with os.
system()).These methods do not make it possible to retrieve the return code fromthe child processes.
Executes cmd as a sub-process.
Returns the file objects(child_stdin, child_stdout).Availability: Unix, Windows.New in version 2.0.
Returns the file objects(child_stdin, child_stdout, child_stderr).Availability: Unix, Windows.New in version 2.0.
(Note that
moduleusing functions of the same names, but the return values of thosefunctions have a different order.
Return string-valued system configuration values.
name specifies the configuration value to retrieve; it may be astring which is the name of a defined system value; these names arespecified in a number of standards (POSIX, Unix 95, Unix 98, andothers). Some platforms define additional names as well.
The namesknown to the host operating system are given in theconfstr_names dictionary.
If a specific value for name is not supported by thehost system, even if it is included in confstr_names, anOSError is raised with errno.EINVAL for theerror number.
Return the number of processes in the system run queue averaged overthe last 1, 5, and 15 minutes or raises OSError if the load averagewas unobtainable.
Return integer-valued system configuration values.If the configuration value specified by name isn't defined,-1 is returned.
The comments regarding the nameparameter for confstr() apply here as well; the dictionarythat provides information on the known names is given bysysconf_names.Availability: Unix.
The follow data values are used to support path manipulationoperations.
These are defined for all platforms.Higher-level operations on pathnames are defined in the
module.
The constant string used by the operating system to refer to the currentdirectory.For example: '.' for POSIX or ':' for the Macintosh.Also available via os.
path.
The constant string used by the operating system to refer to the parentdirectory.For example: '..' for POSIX or '::' for the Macintosh.Also available via os.
The character used by the operating system to separate pathname components,for example, "/" for POSIX or ":" for theMacintosh.
-- but it is occasionally useful.Also available via os. path.
An alternative character used by the operating system to separate pathnamecomponents, or None if only one separator character exists.
This isset to "/" on Windows systems where sep is abackslash.Also available via os.
The character which separates the base filename from the extension;for example, the "." in os.
py.Also available via os.
path.New in version 2.2.
The character conventionally used by the operating system to separatesearch patch components (as in PATH), such as ":" forPOSIX or ";" for Windows.Also available via os.
The default search path used by exec*p*() andspawn*p*() if the environment doesn't have a 'PATH'key.Also available via os.
The string used to separate (or, rather, terminate) lines on thecurrent platform.
This may be a single character, such as 'n' for POSIX or 'r' for Mac OS, or multiple characters,for example, 'rn' for Windows.
path.New in version 2.4.
These functions may be used to create and manage processes.The various exec*() functions take a list of arguments forthe new program loaded into the process.
In each case, the first ofthese arguments is passed to the new program as its own name ratherthan as an argument a user may have typed on a command line.
For theC programmer, this is the argv[0] passed to a program'smain().
For example, "os.execv('/bin/echo', ['foo','bar'])" will only print "bar" on standard output; "foo"will seem to be ignored.
Generate a SIGABRT signal to the current process.
OnUnix, the default behavior is to produce a core dump; on Windows, theprocess immediately returns an exit code of 3.
Be aware thatprograms which use signal.signal() to register a handlerfor SIGABRT will behave differently.Availability: Unix, Windows.
These functions all execute a new program, replacing the currentprocess; they do not return.
On Unix, the new executable is loadedinto the current process, and will have the same process ID as thecaller.
Errors will be reported as OSError exceptions.The "l" and "v" variants of theexec*() functions differ in how command-line arguments arepassed.
The "l" variants are perhaps the easiest to workwith if the number of parameters is fixed when the code is written;the individual parameters simply become additional parameters to theexecl*() functions.
The "v" variants are goodwhen the number of parameters is variable, with the arguments beingpassed in a list or tuple as the args parameter.
In eithercase, the arguments to the child process should start with the name ofthe command being run, but this is not enforced.The variants which include a "p" near the end(execlp(), execlpe(), execvp(),and execvpe()) will use the PATH environmentvariable to locate the program file.
Note:The standard way to exit is sys.exit(n)._exit() should normally only be used in the child processafter a fork().
The following exit codes are a defined, and can be used with_exit(), although they are not required.
These aretypically used for system programs written in Python, such as amail server's external command delivery program.
Exit code that means the command was used incorrectly, such as whenthe wrong number of arguments are given.Availability: Unix.New in version 2.3.
EX_DATAERR
EX_NOINPUT
Exit code that means a specified user did not exist.Availability: Unix.New in version 2.3.
Exit code that means a specified host did not exist.Availability: Unix.New in version 2.3.
Exit code that means that a required service is unavailable.Availability: Unix.New in version 2.3.
EX_SOFTWARE
Exit code that means an operating system error was detected, such asthe inability to fork or create a pipe.Availability: Unix.New in version 2.3.
EX_OSFILE
Exit code that means a user specified output file could not be created.Availability: Unix.New in version 2.3.
EX_IOERR
Exit code that means a temporary failure occurred.
Exit code that means that there were insufficient permissions toperform the operation (but not intended for file system problems).Availability: Unix.New in version 2.3.
EX_CONFIG
Fork a child process.
Return 0 in the child, the child'sprocess id in the parent.Availability: Unix.
Fork a child process, using a new pseudo-terminal as the child'scontrolling terminal.
Return a pair of (pid, fd),where pid is 0 in the child, the new child's process idin the parent, and fd is the file descriptor of the master endof the pseudo-terminal.
For a more portable approach, use the
module.Availability: Some flavors of Unix.
Kill the process pid with signal sig.
Constants for thespecific signals available on the host platform are defined in the
module.Availability: Unix.
Add increment to the process's ``niceness''.
Return the newniceness.Availability: Unix.
Lock program segments into memory.
The value of op(defined in sys/lock.h) determines which segments are locked.Availability: Unix.
Run child processes, returning opened pipes for communications.
Thesefunctions are described in section 6.1.2.
Execute the program path in a new process.
If mode isP_NOWAIT, this function returns the process ID of the newprocess; if mode is P_WAIT, returns the process'sexit code if it exits normally, or -signal
, wheresignal is the signal that killed the process.
The "l" variants are perhaps the easiest to workwith if the number of parameters is fixed when the code is written;the individual parameters simply become additional parameters to thespawnl*() functions.
In eithercase, the arguments to the child process must start with the name ofthe command being run.The variants which include a second "p" near the end(spawnlp(), spawnlpe(), spawnvp(),and spawnvpe()) will use the PATH environmentvariable to locate the program file.
When the environment isbeing replaced (using one of the spawn*e() variants,discussed in the next paragraph), the new environment is used as thesource of the PATH variable.
Availability: Unix, Windows. spawnlp(),spawnlpe(), spawnvp() and spawnvpe()are not available on Windows.New in version 1.6.
P_NOWAIT
Possible values for the mode parameter to the spawn*()family of functions.
If either of these values is given, thespawn*() functions will return as soon as the new processhas been created, with the process ID as the return value.Availability: Unix, Windows.New in version 1.6.
Possible value for the mode parameter to the spawn*()family of functions.
If this is given as mode, thespawn*() functions will not return until the new processhas run to completion and will return the exit code of the process therun is successful, or -signal
if a signal kills theprocess.Availability: Unix, Windows.New in version 1.6.
Possible values for the mode parameter to thespawn*() family of functions.
Start a file with its associated application.
This acts likedouble-clicking the file in Windows Explorer, or giving the file nameas an argument to the start command from the interactivecommand shell: the file is opened with whatever application (if any)its extension is associated.
startfile() returns as soon as the associated applicationis launched.
There is no option to wait for the application to close,and no way to retrieve the application's exit status.
The pathparameter is relative to the current directory.
If you want to use anabsolute path, make sure the first character is not a slash("/"); the underlying Win32 ShellExecute()function doesn't work if it is.
Use the os.
path.normpath()function to ensure that the path is properly encoded for Win32.Availability: Windows.New in version 2.0.
Execute the command (a string) in a subshell.
This is implemented bycalling the Standard C function system(), and has thesame limitations.
Changes to posix.environ, sys.stdin,etc. are not reflected in the environment of the executed command.On Unix, the return value is the exit status of the process encoded in theformat specified for wait().
Return a 5-tuple of floating point numbers indicating accumulated(processor or other)times, in seconds.
The items are: user time, system time, children'suser time, children's system time, and elapsed real time since a fixedpoint in the past, in that order.
See the Unix manual page
times(2) or the corresponding Windows Platform APIdocumentation.Availability: Unix, Windows.
Wait for completion of a child process, and return a tuple containingits pid and exit status indication: a 16-bit number, whose low byte isthe signal number that killed the process, and whose high byte is theexit status (if the signal number is zero); the high bit of the lowbyte is set if a core file was produced.Availability: Unix.
The details of this function differ on Unix and Windows.On Unix:Wait for completion of a child process given by process id pid,and return a tuple containing its process id and exit statusindication (encoded as for wait()).
If pid is0, the request is for the status of any child in the processgroup of the current process.
If pid is -1, the requestpertains to any child of the current process.
If pid is lessthan -1, status is requested for any process in the processgroup -pid
(the absolute value of pid).On Windows:Wait for completion of a process given by process handle pid,and return a tuple containing pid,and its exit status shifted left by 8 bits (shifting makes cross-platformuse of the function easier).A pid less than or equal to 0 has no special meaning onWindows, and raises an exception.The value of integer options has no effect.pid can refer to any process whose id is known, not necessarily achild process.The spawn() functions called with P_NOWAITreturn suitable process handles.
The option for waitpid() to avoid hanging if no childprocess status is available immediately.Availability: Unix.
Returns True if the process has been stopped, otherwise itreturns False.Availability: Unix.
Returns True if the process exited due to a signal, otherwiseit returns False.Availability: Unix.
Returns True if the process exited using the
exit(2)system call, otherwise it returns False.Availability: Unix.
If WIFEXITED(status) is true, return the integerparameter to the
exit(2) system call.
Otherwise, the returnvalue is meaningless.Availability: Unix.
Return the signal which caused the process to stop.Availability: Unix.
Return the signal which caused the process to exit.Availability: Unix.
These functions and data items provide information and operate on thecurrent process and user.
A mapping object representing the string environment.
Changes to the environment made after this time arenot reflected in os.
environ, except for changes made by modifyingos.
environ directly.If the platform supports the putenv() function, thismapping may be used to modify the environment as well as query theenvironment. putenv() will be called automatically whenthe mapping is modified.
Note:Calling putenv() directly does not changeos.
environ, so it's better to modify os.
environ. Note:On some platforms, including FreeBSD and Mac OS X, settingenviron may cause memory leaks.
Refer to the system documentationfor putenv().
If putenv() is not provided, this mapping may be passed tothe appropriate process-creation functions to cause child processes touse a modified environment.
These functions are described in ``Files and Directories'' (section6.1.4).
Return the filename corresponding to the controlling terminal of theprocess.Availability: Unix.
Return the effective group id of the current process.
Thiscorresponds to the `set id' bit on the file being executed in thecurrent process.Availability: Unix.
Return the current process' effective user id.Availability: Unix.
Return the real group id of the current process.Availability: Unix.
Return list of supplemental group ids associated with the currentprocess.Availability: Unix.
Return the name of the user logged in on the controlling terminal ofthe process.
Availability: Unix.New in version 2.3.
Return the id of the current process group.Availability: Unix.
Return the current process id.Availability: Unix, Windows.
Return the parent's process id.Availability: Unix.
Return the current process' user id.Availability: Unix.
Set the environment variable named varname to the stringvalue.
Such changes to the environment affect subprocessesstarted with os.
system(), popen() orfork() and execv().Availability: most flavors of Unix, Windows.
Note:On some platforms, including FreeBSD and Mac OS X,setting environ may cause memory leaks.Refer to the system documentation for putenv.
When putenv() issupported, assignments to items in os.
Set the current process's effective group id.Availability: Unix.
Set the current process's effective user id.Availability: Unix.
Set the current process' group id.Availability: Unix.
Set the list of supplemental group ids associated with the currentprocess to groups. groups must be a sequence, and eachelement must be an integer identifying a group.
This operation istypical available only to the superuser.Availability: Unix.New in version 2.2.
Calls the system call setpgrp() or setpgrp(0,0) depending on which version is implemented (if any).
See theUnix manual for the semantics.Availability: Unix.
Calls the system callsetpgid() to set the process group id of the process withid pid to the process group with id pgrp.
See the Unixmanual for the semantics.Availability: Unix.
Set the current process's real and effective user ids.Availability: Unix.
Set the current process's real and effective group ids.Availability: Unix.
Calls the system call getsid().
See the Unix manualfor the semantics.Availability: Unix.
Calls the system call setsid().
Set the current process' user id.Availability: Unix.
Return the error message corresponding to the error code incode.Availability: Unix, Windows.
Set the current numeric umask and returns the previous umask.Availability: Unix, Windows.
Return a 5-tuple containing information identifying the currentoperating system.
The tuple contains 5 strings:(sysname, nodename, release, version,machine).
Some systems truncate the nodename to 8characters or to the leading component; a better way to get thehostname is socket.gethostname()
or even
socket.gethostbyaddr(socket.gethostname()).Availability: recent flavors of Unix.
Return true (nonzero) if the standard I/O file fp with namefilename is deemed interactive.
This is the case for filesfor which "isatty(fileno(fp))" is true.
If the globalflag Py_InteractiveFlag is true, this function also returnstrue if the filename pointer is NULL or if the name isequal to one of the strings 'stdin' or '???'.
Return the time of last modification of the file filename.The result is encoded in the same way as the timestamp returned bythe standard C library function time().
Function to update some internal state after a process fork; thisshould be called in the new process if the Python interpreter willcontinue to be used.
If a new executable is loaded into the newprocess, this function does not need to be called.
Return true when the interpreter runs out of stack space.
This is areliable check, but is only available when USE_STACKCHECKis defined (currently on Windows using the Microsoft Visual C++compiler and on the Macintosh). USE_CHECKSTACK will bedefined automatically; you should never change the definition inyour own code.
Return the current signal handler for signal i.
This is athin wrapper around either sigaction() orsignal().
Do not call those functions directly!PyOS_sighandler_t is a typedef alias for void(*)(int).
Set the signal handler for signal i to be h; return theold signal handler.
This is a thin wrapper around eithersigaction() or signal().
Do not call thosefunctions directly! PyOS_sighandler_t is a typedef aliasfor void (*)(int).
Before you can write to or read from an audio device, you must callthree methods in the correct order:
setfmt() to set the output format
channels() to set the number of channels
speed() to set the sample rate
Alternately, you can use the setparameters() method to set allthree audio parameters at once.
This is more convenient, but may not beas flexible in all cases.The audio device objects returned by open() define thefollowing methods:
Explicitly close the audio device.
When you are done writing to orreading from an audio device, you should explicitly close it.
A closeddevice cannot be used again.
Return the file descriptor associated with the device.
Read size bytes from the audio input and return them as a Pythonstring.
Unlike most Unix device drivers, OSS audio devices inblocking mode (the default) will block read() until theentire requested amount of data is available.
Write the Python string data to the audio device and return thenumber of bytes written.
If the audio device is in blocking mode (thedefault), the entire string is always written (again, this is differentfrom usual Unix device semantics).
If the device is in non-blockingmode, some data may not be written--see writeall().
Has no return value, since the amount of datawritten is always equal to the amount of data supplied.
The following methods each map to exactly oneioctl() system call.
The correspondence is obvious: forexample, setfmt() corresponds to the SNDCTL_DSP_SETFMTioctl, and sync() to SNDCTL_DSP_SYNC (this can be usefulwhen consulting the OSS documentation).
If the underlyingioctl() fails, they all raise IOError.
Put the device into non-blocking mode.
Once in non-blocking mode, thereis no way to return it to blocking mode.
Return a bitmask of the audio output formats supported by thesoundcard.
On a typical Linux system, these formats are:
a logarithmic encoding (used by Sun .au files and/dev/audio)
a logarithmic encoding
a 4:1 compressed format defined by the Interactive MultimediaAssociation
Unsigned, 8-bit audio
Unsigned, 16-bit audio, little-endian byte order (as used byIntel processors)
Unsigned, 16-bit audio, big-endian byte order (as used by 68k,PowerPC, Sparc)
Signed, 8 bit audio
Signed, 16-bit little-endian audio
Signed, 16-bit big-endian audio
Most systems support only a subset of these formats.
Many devices onlysupport AFMT_U8; the most common format used today isAFMT_S16_LE.
Try to set the current audio format to format--seegetfmts() for a list.
Returns the audio format that the devicewas set to, which may not be the requested format.
May also be used toreturn the current audio format--do this by passing an ``audio format''ofAFMT_QUERY.
Set the number of output channels to nchannels.
A value of 1indicates monophonic sound, 2 stereophonic.
Some devices may have morethan 2 channels, and some high-end devices may not support mono.Returns the number of channels the device was set to.
Try to set the audio sampling rate to samplerate samples persecond. Returns the rate actually set.
Most sound devices don'tsupport arbitrary sampling rates.
Common rates are:
Rate
default rate for /dev/audio
speech recording
CD quality audio (at 16 bits/sample and 2 channels)
DVD quality audio (at 24 bits/sample)
Wait until the sound device has played every byte in its buffer.
(Thishappens implicitly when the device is closed.) The OSS documentationrecommends closing and re-opening the device rather than usingsync().
Immediately stop playing or recording and return the device to astate where it can accept commands.
The OSS documentation recommendsclosing and re-opening the device after calling reset().
Tell the driver that there is likely to be a pause in the output, makingit possible for the device to handle the pause more intelligently.
Youmight use this after playing a spot sound effect, before waiting foruser input, or before doing disk I/O.
The following convenience methods combine several ioctls, or one ioctland some simple calculations.
Set the key audio sampling parameters--sample format, number ofchannels, and sampling rate--in one method call. format, nchannels, and samplerate should be as specified in thesetfmt(), channels(), and speed() methods.
If strict is true, setparameters() checks tosee if each parameter was actually set to the requested value, andraises OSSAudioError if not.
Returns a tuple (format,nchannels, samplerate) indicating the parameter values thatwere actually set by the device driver (i.e., the same as the returnvalus of setfmt(), channels(), and speed()).For example,
(fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)
Returns the size of the hardware buffer, in samples.
Returns the number of samples that are in the hardware buffer yet to beplayed.
Returns the number of samples that could be queued into the hardwarebuffer to be played without blocking.
1.1 Getting and Installing
1.1.3 configuration 1.1.2 Running scripts with a GUI
There is one Mac OS X quirk that you need to be aware of: programsthat talk to the Aqua window manager (in other words, anything that has a GUI)need to be run in a special way.
Use pythonw instead of pythonto start such scripts.
16.6 Other Graphical User Interface Packages There are an number of extension widget sets to
. Python megawidgets
is atoolkit for building high-level compound widgets in Python using the
module.
It consists of a set of base classes anda library of flexible and extensible megawidgets built on thisfoundation.
These megawidgets include notebooks, comboboxes, selectionwidgets, paned widgets, scrolled widgets, dialog windows, etc.
Also,with the Pmw.Blt interface to BLT, the busy, graph, stripchart, tabsetand vector commands are be available.The initial ideas for Pmw were taken from the Tk itclextensions [incr Tk] by Michael McLennan and [incrWidgets] by Mark Ulferts.
Several of the megawidgets are directtranslations from the itcl to Python.
is a library that allows you to write new Tkinter widgets in purePython.
The WCK framework gives you full control over widgetcreation, configuration, screen appearance, and event handling.
WCKwidgets can be very fast and light-weight, since they can operatedirectly on Python data structures, without having to transfer datathrough the Tk/Tcl layer.
Tk is not the only GUI for Python, but is however themost commonly used one.
is a GUI toolkit that combines the most attractive attributes of Qt,Tk, Motif, and GTK+ in one powerful and efficient package.
There is a Python class wrapper, independent of Tkinter.wxWindows is much richer in widgets than
, with itshelp system, sophisticated HTML and image viewers, and otherspecialized widgets, extensive documentation, and printing capabilities.
PyQt is a sip-wrapped binding to the Qt toolkit.
PyKDE is a sip-wrapped interface to the KDE desktoplibraries.
KDE is a desktop environment for Unix computers; thegraphical components are based on Qt.
GUI.FOX is a C++ based Toolkit for developing Graphical User Interfaceseasily and effectively.
It offers a wide, and growing, collection ofControls, and provides state of the art facilities such as drag anddrop, selection, as well as OpenGL widgets for 3D graphicalmanipulation.
FOX also implements icons, images, and user-conveniencefeatures such as status line help, and tooltips.
Even though FOX offers a large collection of controls already, FOXleverages C++ to allow programmers to easily build additional Controlsand GUI elements, simply by taking existing controls, and creating aderived class which simply adds or redefines the desired behavior.
is a set of bindings for the GTK widget set.It provides an object oriented interface that is slightly higherlevel than the C one.
It automatically does all the type casting andreference counting that you would have to do normally with the CAPI.
There are alsobindingsto GNOME, and a tutorialis available.
Besides NEWLINE, INDENT and DEDENT, the following categories of tokensexist: identifiers, keywords, literals,operators, and delimiters.Whitespace characters (other than line terminators, discussed earlier)are not tokens, but serve to delimit tokens.Whereambiguity exists, a token comprises the longest possible string thatforms a legal token, when read from left to right.
Subsections 7.5.1 File Objects
Whenever an object reference is passed into or out of a function, itis part of the function's interface specification whether ownership istransferred with the reference or not.Most functions that return a reference to an object pass on ownershipwith the reference.
In particular, all functions whose function it isto create a new object, such as PyInt_FromLong() andPy_BuildValue(), pass ownership to the receiver.
Even ifthe object is not actually new, you still receive ownership of a newreference to that object.
For instance, PyInt_FromLong()maintains a cache of popular values and can return a reference to acached item.Many functions that extract objects from other objects also transferownership with the reference, for instancePyObject_GetAttrString().
There are exactly two important exceptions to this rule:PyTuple_SetItem() and PyList_SetItem().
Thesefunctions take over ownership of the item passed to them -- even ifthey fail!
(Note that PyDict_SetItem() and friends don'ttake over ownership -- they are ``normal.'')When a C function is called from Python, it borrows references to itsarguments from the caller.
The caller owns a reference to the object,so the borrowed reference's lifetime is guaranteed until the functionreturns.
Only when such a borrowed reference must be stored or passedon, it must be turned into an owned reference by callingPy_INCREF().The object reference returned from a C function that is called fromPython must be an owned reference -- ownership is tranferred from thefunction to its caller.
The Python Package Index (PyPI) holds meta-data describing distributionspackaged with distutils.
The distutils command register isused to submit your distribution's meta-data to the index.
It is invokedas follows:
Distutils will respond with the following prompt:
Note: if your username and password are saved locally, you willnot see this menu.If you have not registered with PyPI, then you will need to do so now.
Youshould choose option 2, and enter your details as required.
Soon aftersubmitting your details, you will receive an email which will be used toconfirm your registration.Once you are registered, you may choose option 1 from the menu.
Ifyou alter the meta-data for a particular version, you may submit it againand the index will be updated.PyPI holds a record for each (name, version) combination submitted.
Thefirst user to submit information for a given name is designated the Ownerof that name.
They may submit changes through the registercommand or through the web interface.
They may also designate other usersas Owners or Maintainers.
Maintainers may edit the package information, butnot designate other Owners or Maintainers.By default PyPI will list all versions of a given package.
To hide certainversions, the Hidden property should be set to yes.
This must be editedthrough the web interface.
A parenthesized form is an optional expression list enclosed inparentheses:
A parenthesized expression list yields whatever that expression listyields: if the list contains at least one comma, it yields a tuple;otherwise, it yields the single expression that makes up theexpression list.An empty pair of parentheses yields an empty tuple object.
Sincetuples are immutable, the rules for literals apply (i.e., twooccurrences of the empty tuple may or may not yield the same object).
Note that tuples are not formed by the parentheses, but rather by useof the comma operator.
The exception is the empty tuple, for whichparentheses are required -- allowing unparenthesized ``nothing''in expressions would cause ambiguities and allow common typos topass uncaught.
The PyArg_ParseTuple() function is declared as follows:
The arg argument must be a tuple object containing an argumentlist passed from Python to a C function.
The format argumentmust be a format string, whose syntax is explained in``Parsing arguments and buildingvalues'' in the
.
Theremaining arguments must be addresses of variables whose type isdetermined by the format string.Note that while PyArg_ParseTuple() checks that the Pythonarguments have the required types, it cannot check the validity of theaddresses of C variables passed to the call: if you make mistakesthere, your code will probably crash or at least overwrite random bitsin memory.
So be careful!Note that any Python object references which are provided to thecaller are borrowed references; do not decrement theirreference count!Some example calls:
int ok;int i, j;long k, l;const char *s;int size;ok = PyArg_ParseTuple(args, ""); /* No arguments *//* Python call: f() */
ok = PyArg_ParseTuple(args, "s", s); /* A string *//* Possible Python call: f('whoops!') */
ok = PyArg_ParseTuple(args, "lls", k, l, s); /* Two longs and a string *//* Possible Python call: f(1, 2, 'three')
*/ ok = PyArg_ParseTuple(args, "(ii)s#", i, j, s, size);/* A pair of ints and a string, whose size is also returned *//* Possible Python call: f((1, 2), 'three')
{int left, top, right, bottom, h, v;ok = PyArg_ParseTuple(args, "((ii)(ii))(ii)",left, top, right, bottom, h, v);/* A rectangle and a point *//* Possible Python call:f(((0, 0), (400, 300)), (10, 10))
*/}
{Py_complex c;ok = PyArg_ParseTuple(args, "D:myfunction", c);/* a complex, also providing a function name for errors *//* Possible Python call: myfunction(1+2j) */}
The PyArg_ParseTupleAndKeywords() function is declared asfollows:
The arg and format parameters are identical to those of thePyArg_ParseTuple() function.
The kwdict parameteris the dictionary of keywords received as the third parameter from thePython runtime.
The kwlist parameter is a NULL-terminatedlist of strings which identify the parameters; the names are matchedwith the type information from format from left to right.
Onsuccess, PyArg_ParseTupleAndKeywords() returns true,otherwise it returns false and raises an appropriate exception.
Note:Nested tuples cannot be parsed when using keywordarguments! Keyword parameters passed in which are not present in thekwlist will cause TypeError to be raised.
Here is an example module which uses keywords, based on an example byGeoff Philbrick (philbrick@hks.com):
voidinitkeywdarg(void){/* Create the module and add the functions */Py_InitModule("keywdarg", keywdarg_methods);}
pass is a null operation -- when it is executed, nothinghappens.
It is useful as a placeholder when a statement isrequired syntactically, but no code needs to be executed, for example:
def f(arg): pass # a function that does nothing (yet)class C: pass # a class with no methods (yet)
Pen and RawPen objects have all the global functionsdescribed above, except for demo() as methods, whichmanipulate the given pen.The only method which is more powerful as a method isdegrees().
fullcircle is by default 360.
A physical line ends in whatever the current platform's convention isfor terminating lines.
On Unix, this is the ASCII LF (linefeed)character.
On Windows, it is the ASCII sequence CR LF (returnfollowed by linefeed).
On Macintosh, it is the ASCII CR (return)character.
Here's a simple example of how to modify pickling behavior for aclass.
The TextReader class opens a text file, and returnsthe line number and line contents each time its readline()method is called.
If a TextReader instance is pickled, allattributes except the file object member are saved.
When theinstance is unpickled, the file is reopened, and reading resumes fromthe last location.
fh = fh # save the file object A sample usage might be something like this:
works across Pythonprocesses, start another Python session, before continuing.
Whatfollows can happen from either the same process or a new process.
See Also:
Indexed databases of objects; uses pickle.
Shallow and deep object copying.
High-performance serialization of built-in types.
3.14.5.1 Pickling and unpickling normal class instances
3.14.5.2 Pickling and unpickling
When a pickled class instance is unpickled, its __init__()method is normally not invoked.
If it is desirable that the__init__() method be called on unpickling, an old-style classcan define a method __getinitargs__(), which should return atuple containing the arguments to be passed to the classconstructor (i.e.
__init__()).
The__getinitargs__() method is called atpickle time; the tuple it returns is incorporated in the pickle forthe instance.
New-style types can provide a __getnewargs__() method that isused for protocol 2.
Implementing this method is needed if the typeestablishes some internal invariants when the instance is created, orif the memory allocation is affected by the values passed to the__new__() method for the type (as it is for tuples andstrings).
Instances of a new-style type C are created using
where args is the result of calling __getnewargs__() onthe original object; if there is no __getnewargs__(), anempty tuple is assumed.
Classes can further influence how their instances are pickled; if theclass defines the method __getstate__(), it is called and thereturn state is pickled as the contents for the instance, instead ofthe contents of the instance's dictionary.
If there is no__getstate__() method, the instance's __dict__ ispickled.Upon unpickling, if the class also defines the method__setstate__(), it is called with the unpickledstate.
3.6
If there is no __setstate__() method, thepickled state must be a dictionary and its items are assigned to thenew instance's dictionary.
If a class defines both__getstate__() and __setstate__(), the state objectneedn't be a dictionary and these methods can do what theywant.
Warning:For new-style classes, if __getstate__() returns a falsevalue, the __setstate__() method will not be called. Footnotes
...state.
These methods can also be used to implement copyingclass instances.
...want.
This protocol is also used by the shallow and deepcopying operations defined in the
module.
3.14.4 What can be
3.14.5.1 Pickling and unpickling
This section describes the ``pickling protocol'' that defines theinterface between the pickler/unpickler and the objects that are beingserialized.
This protocol provides a standard way for you to define,customize, and control how your objects are serialized andde-serialized.
The description in this section doesn't cover specificcustomizations that you can employ to make the unpickling environmentslightly safer from untrusted pickle data streams; see section3.14.6for more details. Subsections
3.14.5.3 Pickling and unpickling
By default, unpickling will import any class that it finds in thepickle data.
You can control exactly what gets unpickled and whatgets called by customizing your unpickler.
Unfortunately, exactly howyou do this is different depending on whether you're usingpickle or cPickle.
3.10
In the pickle module, you need to derive a subclass fromUnpickler, overriding the load_global()method. load_global() should read two lines from the pickledata stream where the first line will the name of the modulecontaining the class and the second line will be the name of theinstance's class.
It then looks up the class, possibly importing themodule and digging out the attribute, then it appends what it finds tothe unpickler's stack.
Or you could raise an error if you want todisallow all unpickling of instances.
If this sounds like a hack,you're right.
If it isNone then any attempts to unpickle instances will raise anUnpicklingError.
If it is a function,then it should accept a module name and a class name, and return thecorresponding class object.
Footnotes ...cPickle.
A word of caution: themechanisms described here use internal attributes and methods, whichare subject to change in future versions of Python.
We intend tosomeday provide a common interface for controlling this behavior,which will work in either pickle or cPickle.
Player objects (returned by open()) have the followingmethods:
Unlocks the eject button on the CD-ROM drive permitting the user toeject the caddy if desired.
Returns the best value to use for the num_frames parameter ofthe readda() method.
Best is defined as the value thatpermits a continuous flow of data from the CD-ROM drive.
Frees the resources associated with the player object.
After callingclose(), the methods of the object should no longer be used.
Ejects the caddy from the CD-ROM drive.
Returns information pertaining to the current state of the CD-ROMdrive.
The returned information is a tuple with the following values:state, track, rtime, atime, ttime,first, last, scsi_audio, cur_block.rtime is the time relative to the start of the current track;atime is the time relative to the beginning of the disc;ttime is the total time on the disc.
For more information onthe meaning of the values, see the man page
CDgetstatus(3dm).The value of state is one of the following: ERROR,NODISC, READY, PLAYING,PAUSED, STILL, or CDROM.
Returns information about the specified track.
The returnedinformation is a tuple consisting of two elements, the start time ofthe track and the duration of the track.
Converts a minutes, seconds, frames triple representing a time inabsolute time code into the corresponding logical block number for thegiven CD-ROM drive.
You should use msftoframe() rather thanmsftoblock() for comparing times.
The logical block numberdiffers from the frame number by an offset required by certain CD-ROMdrives.
Starts playback of an audio CD in the CD-ROM drive at the specifiedtrack.
The audio output appears on the CD-ROM drive's headphone andaudio jacks (if fitted).
Play stops at the end of the disc.start is the number of the track at which to start playing theCD; if play is 0, the CD will be set to an initial pausedstate.
The method togglepause() can then be used to commenceplay.
Like play(), except that the start is given in minutes,seconds, and frames instead of a track number.
Like play(), except that playing stops at the end of thetrack.
Like play(), except that playing begins at the specifiedabsolute time and ends at the end of the specified track.
Locks the eject button on the CD-ROM drive thus preventing the userfrom arbitrarily ejecting the caddy.
Reads the specified number of frames from an audio CD mounted in theCD-ROM drive.
The return value is a string representing the audioframes.
This string can be passed unaltered to theparseframe() method of the parser object.
Sets the pointer that indicates the starting point of the next read ofdigital audio data from a CD-ROM.
The pointer is set to an absolutetime code location specified in minutes, seconds, andframes.
The return value is the logical block number to whichthe pointer has been set.
The pointer is set to the specifiedlogical block number.
The return value is the logical block number towhich the pointer has been set.
The pointer is set to the specifiedtrack.
The return value is the logical block number to which thepointer has been set.
Stops the current playing operation.
Pauses the CD if it is playing, and makes it play if it is paused.
The poll() system call, supported on most Unix systems,provides better scalability for network servers that service many,many clients at the same time.
poll() scales better because the system call onlyrequires listing the file descriptors of interest, while select()builds a bitmap, turns on bits for the fds of interest, and thenafterward the whole bitmap has to be linearly scanned again.select() is O(highest file descriptor), whilepoll() is O(number of file descriptors).
Register a file descriptor with the polling object.
Future calls tothe poll() method will then check whether the file descriptorhas any pending I/O events. fd can be either an integer, or anobject with a fileno() method that returns an integer.
Fileobjects implementfileno(), so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events youwant to check for, and can be a combination of the constantsPOLLIN, POLLPRI, and POLLOUT,described in the table below.
If not specified, the default valueused will check for all 3 types of events.
There is data to read
There is urgent data to read
Ready for output: writing will not block
Error condition of some sort
Hung up
Invalid request: descriptor not open
Registering a file descriptor that's already registered is not anerror, and has the same effect as registering the descriptor exactlyonce.
Remove a file descriptor being tracked by a polling object.
Just likethe register() method, fd can be an integer or anobject with a fileno() method that returns an integer.Attempting to remove a file descriptor that was never registeredcauses a KeyError exception to be raised.
)
Polls the set of registered file descriptors, and returns apossibly-empty list containing (fd, event) 2-tuplesfor the descriptors that have events or errors to report.
fd is the file descriptor, and event is a bitmaskwith bits set for the reported events for that descriptor-- POLLIN for waiting input,POLLOUT to indicate that the descriptor can be written to, andso forth.An empty list indicates that the call timed out and no filedescriptors had any events to report.If timeout is given, it specifies the length of time inmilliseconds which the system will wait for events before returning.If timeout is omitted, negative, or None, the call willblock until there is an event for this poll object.
Here is a minimal example (without error checking) that opens amailbox and retrieves and prints all messages:
At the end of the module, there is a test section that contains a moreextensive example of usage.
Set the instance's debugging level.
This controls the amount ofdebugging output printed.
The default, 0, produces nodebugging output.
A value of 1 produces a moderate amount ofdebugging output, generally a single line per request.
A value of2 or higher produces the maximum amount of debugging output,logging each line sent and received on the control connection.
Returns the greeting string sent by the POP3 server.
Send user command, response should indicate that a password is required.
Use the more secure APOP authentication to log into the POP3 server.
Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.
Get mailbox status.
The result is a tuple of 2 integers:(message count, mailbox size).
If which isset, it is the message to list.
Retrieve whole message number which, and set its seen flag.Result is in form (response, ['line', ...], octets).
Flag message number which for deletion.
On most serversdeletions are not actually performed until QUIT (the major exception isEudora QPOP, which deliberately violates the RFCs by doing pendingdeletes on any disconnect).
Remove any deletion marks for the mailbox.
Do nothing.
Might be used as a keep-alive.
Signoff: commit changes, unlock mailbox, drop connection.
Retrieves the message header plus howmuch lines of the messageafter the header of message number which.
,otherwise result is list (response, ['mesgnum uid', ...],octets).
Instances of POP3_SSL have no additional methods.
Theinterface of this subclass is identical to its parent.
Any time you are working with any form of inter-process communication,control flow needs to be carefully thought out.
This remains the casewith the file objects provided by this module (or the
module equivalents).When reading output from a child process that writes a lot of data tostandard error while the parent is reading from the child's standardoutput, a deadlock can occur.
A similar situation can occur with othercombinations of reads and writes.
with code like this in the child:
import osimport sys# note that each of these print statements# writes a single long stringprint sys.stderr, 400 * 'this is a test\n'os.close(sys.stderr.fileno())print sys.stdout, 400 * 'this is another test\n'
In particular, note that sys.stderr must be closed afterwriting all data, or readlines() won't return.
Also notethat os.
close() must be used, as sys.stderr.close()won't close stderr (otherwise assigning to sys.stderrwill silently close it, so no further errors can be printed).Applications which need to support a more general approach shouldintegrate I/O over pipes with their select() loops, or useseparate threads to read each of the individual files provided bywhichever popen*() function or Popen* class wasused.
Instances of the Popen3 and Popen4 classes have thefollowing methods:
Returns -1 if child process hasn't completed yet, or its return code otherwise.
Waits for and returns the status code of the child process.
Thestatus code encodes both the return code of the process andinformation about whether it exited using the exit()system call or died due to a signal.
Functions to help interpret thestatus code are defined in the
module; see section6.1.5 for the W*() family of functions.
The following attributes are also available:
A file object that provides output from the child process.
ForPopen4 instances, this will provide both the standard outputand standard error streams.
A file object that provides input to the child process.
A file object that provides error output from the child process, ifcapturestderr was true for the constructor, otherwiseNone.
This will always be None for Popen4instances.
The process ID of the child process.
Module posix defines the following data item:
A dictionary representing the string environment at the time theinterpreter was started.
For example, environ['HOME'] is thepathname of your home directory, equivalent togetenv("HOME") in C.Modifying this dictionary does not affect the string environmentpassed on by execv(), popen() orsystem(); if you need to change the environment, passenviron to execve() or add variable assignments andexport statements to the command string for system() orpopen().
Note:The
module provides an alternateimplementation of environ which updates the environment onmodification.
Note also that updating os. environ will renderthis dictionary obsolete.
Use of the
module version ofthis is recommended over direct access to the posix module.
module; refer to the documentation for that module forfurther information.
Several operating systems (including AIX, HPUX, Irix and Solaris)provide support for files that are larger than 2 Gb from a Cprogramming model where int and long are 32-bitvalues.
This is typically accomplished by defining the relevant sizeand offset types as 64-bit values.
Such files are sometimes referredto as large files.Large file support is enabled in Python when the size of anoff_t is larger than a long and the long longtype is available and is at least as large as an off_t.
Pythonlongs are then used to represent file sizes, offsets and other valuesthat can exceed the range of a Python int.
It may be necessary toconfigure and compile Python with certain compiler flags to enablethis mode. For example, it is enabled by default with recent versionsof Irix, but with Solaris 2.6 and 2.7 you need to do something like:
Subsections 5.3.1 The Postinstallation script
Executable installers are the natural format for binary distributionson Windows.
They display a nice graphical user interface, displaysome information about the module distribution to be installed takenfrom the metadata in the setup script, let the user select a fewoptions, and start or cancel the installation.Since the metadata is taken from the setup script, creating Windowsinstallers is usually as easy as running:
or the bdist command with the --formats option:
If you have a pure module distribution (only containing pure Pythonmodules and packages), the resulting installer will be versionindependent and have a name like foo-1.0.win32.exe.
You have to create a separate installerfor every Python version you want to support.The installer will try to compile pure modules into bytecode afterinstallation on the target system in normal and optimizing mode.
This can be changed toanother text by using the --title option.The installer file will be written to the ``distribution directory''-- normally dist/, but customizable with the--dist-dir option.
Starting with Python 2.3, a postinstallation script can be specifiedwhich the --install-script option.
These functions should be called when a directory or file is createdby the postinstall script at installation time.
It will registerpath with the uninstaller, so that it will be removed when thedistribution is uninstalled.
To be safe, directories are only removedif they are empty.
This function can be used to retrieve special folder locations onWindows like the Start Menu or the Desktop.
It returns the fullpath to the folder. csidl_string must be one of the followingstrings:
"CSIDL_APPDATA""CSIDL_COMMON_STARTMENU""CSIDL_STARTMENU""CSIDL_COMMON_DESKTOPDIRECTORY""CSIDL_DESKTOPDIRECTORY""CSIDL_COMMON_STARTUP""CSIDL_STARTUP""CSIDL_COMMON_PROGRAMS""CSIDL_PROGRAMS""CSIDL_FONTS"
For details refer toMicrosoft's documentation of theSHGetSpecialFolderPath() function.
]
)
Again, for details consult the Microsoftdocumentation for the IShellLink interface.
Thus, in an unparenthesized sequence of power and unary operators, theoperators are evaluated from right to left (this does not constrainthe evaluation order for the operands).The power operator has the same semantics as the built-inpow() function, when called with two arguments: it yieldsits left argument raised to the power of its right argument.
Thenumeric arguments are first converted to a common type.
The resulttype is that of the arguments after coercion.With mixed operand types, the coercion rules for binary arithmeticoperators apply.
For int and long int operands, the result has thesame type as the operands (after coercion) unless the second argumentis negative; in that case, all arguments are converted to float and afloat result is delivered.
For example, 10**2 returns 100,but 10**-2 returns 0.01. (This last feature was added inPython 2.2.
Raising a negative number to afractional power results in a ValueError.
Set the version number for the software described in thedocument.
Specify the ``short'' version number of the documented softwareto be sver.
6.2 Meta-information Markup
Primaries represent the most tightly bound operations of the language.Their syntax is:
Subsections 5.3.1 Attribute references
print evaluates each expression in turn and writes theresulting object to standard output (see below).
If an object is nota string, it is first converted to a string using the rules for stringconversions. The (resulting or original) string is then written.
Aspace is written before each object is (converted and) written, unlessthe output system believes it is positioned at the beginning of aline.
This is the case (1) when no characters have yet been writtento standard output, (2) when the last character written to standardoutput is "n", or (3) when the last write operation onstandard output was not a print statement.
(In some casesit may be functional to write an empty string to standard output forthis reason.)
Note:Objects which act like file objects but which arenot the built-in file objects often do not properly emulate thisaspect of the file object's behavior, so it is best not to rely onthis.
A "n" character is written at the end, unless theprint statement ends with a comma.
This is the only actionif the statement contains just the keyword print.
Standard output is defined as the file object named stdoutin the built-in module sys.
If no such object exists, or ifit does not have a write() method, a RuntimeErrorexception is raised.
print also has an extended
mustevaluate to a ``file-like'' object, specifically an object that has awrite() method as described above.
With this extended form,the subsequent expressions are printed to this file object.
If thefirst expression evaluates to None, then sys.stdout isused as the file for output.
Print a fatal error message and kill the process.
No cleanup isperformed.
This function should only be invoked when a condition isdetected that would make it dangerous to continue using the Pythoninterpreter; e.g., when the object administration appears to becorrupted.
On Unix, the standard C library functionabort()
is called which will attempt toproduce a core file.
Exit the current process.
This callsPy_Finalize()
and then calls thestandard C library functionexit(status)
.
Register a cleanup function to be called byPy_Finalize()
. The cleanupfunction will be called with no arguments and should return novalue.
At most 32
cleanup functions can beregistered.
When the registration is successful,Py_AtExit() returns 0; on failure, it returns-1.
The cleanup function registered last is called first.Each cleanup function will be called at most once.
Since Python'sinternal finalization will have completed before the cleanupfunction, no Python APIs should be called by func.
The profiler subtracts a constant from eachevent handling time to compensate for the overhead of calling the timefunction, and socking away the results.
By default, the constant is 0.The following procedure canbe used to obtain a better constant for a given platform (see discussionin section Limitations above).
import profile# 1. Apply computed bias to all Profile instances created hereafter.profile.Profile.bias = your_computed_bias# 2.
Apply computed bias to a specific Profile instance.
pr = profile.Profile()pr.bias = your_computed_bias# 3.
If you have a choice, you are better off choosing a smaller constant, andthen your results will ``less often'' show up as negative in profilestatistics.
Footnotes ... it:
Prior to Python 2.2, itwas necessary to edit the profiler source code to embed the bias asa literal number.
You still can, but that method is no longerdescribed, because no longer needed.
10.2 How Is This
This section is provided for users that ``don't want to read themanual.''
It provides a very brief overview, and allows a user torapidly perform profiling on an existing application.To profile an application with a main entry point of foo(),you would add the following to your module:
The above action would cause foo() to be run, and a series ofinformative lines (the profile) to be printed.
The above approach ismost useful when working with the interpreter.
If you would like tosave the results of a profile into a file for later examination, youcan supply a file name as the second argument to the run()function:
The file profile.py can also be invoked asa script to profile another script.
For example:
profile.py accepts two optional arguments on the command line: profile.
-s only applies to standard output (-o isnot supplied).
Look in the Stats documentation for valid sortvalues.When you wish to review the profile, you should use the methods in thepstats module.
Typically you would load the statistics data asfollows:
The class Stats (the above code just created an instance ofthis class) has a variety of methods for manipulating and printing thedata that was just read into p.
When you ranprofile.run() above, what was printed was the result of threemethod calls:
The first method removed the extraneous path from all the modulenames.
The second method sorted all the entries according to thestandard module/line/name string that is printed (this is to complywith the semantics of the old profiler).
The third method printed outall the statistics.
You might try the following sort calls:
The first call will actually sort the list by function name, and thesecond call will print out the statistics.
The following are someinteresting calls to experiment with:
This sorts the profile by cumulative time in a function, and then onlyprints the ten most significant lines.
If you want to understand whatalgorithms are taking time, the above line is what you would use.If you were looking to see what functions were looping a lot, andtaking a lot of time, you would do:
to sort according to time spent within each function, and then printthe statistics for the top ten functions.You might also try:
This will sort all the statistics by file name, and then print outstatistics for only the class init methods (since they are spelledwith __init__ in them).
This line sorts statistics with a primary key of time, and a secondarykey of cumulative time, and then prints out some of the statistics.To be specific, the list is first culled down to 50% (re: ".5")of its original size, then only lines containing init aremaintained, and that sub-sub-list is printed.If you wondered what functions called the above functions, you couldnow (p is still sorted according to the last criteria) do:
and you would get a list of callers for each of the listed functions.If you want more functionality, you're going to have to read themanual, or guess what the following functions do:
Invoked as a script, the pstats module is a statisticsbrowser for reading and examining profile dumps.
It has a simpleline-oriented interface (implemented using
) andinteractive help.
There are two fundamental limitations on this profiler.
The first isthat it relies on the Python interpreter to dispatch call,return, and exception events.
Compiled C code does notget interpreted, and hence is ``invisible'' to the profiler.
All timespent in C code (including built-in functions) will be charged to thePython function that invoked the C code.
The most obvious restriction is that the underlying ``clock''is only ticking at a rate (typically) of about .001 seconds.
Hence nomeasurements will be more accurate than the underlying clock.
Ifenough measurements are taken, then the ``error'' will tend to averageout.
Unfortunately, removing this first error induces a second sourceof error.The second problem is that it ``takes a while'' from when an event isdispatched until the profiler's call to get the time actuallygets the state of the clock.
Similarly, there is a certain lagwhen exiting the profiler event handler from the time that the clock'svalue was obtained (and then squirreled away), until the user's codeis once again executing.
As a result, functions that are called manytimes, or call many functions, will typically accumulate this error.The error that accumulates in this fashion is typically less than theaccuracy of the clock (less than one clock tick), but itcan accumulate and become very significant.
This profilerprovides a means of calibrating itself for a given platform so thatthis error can be probabilistically (on the average) removed.After the profiler is calibrated, it will be more accurate (in a leastsquare sense), but it will sometimes produce negative numbers (whencall counts are exceptionally low, and the gods of probability workagainst you :-).
)
Do not be alarmed by negative numbers inthe profile.
They should only appear if you have calibratedyour profiler, and the results are actually better than withoutcalibration.
Stats objects have the following methods:
This method for the Stats class removes all leading pathinformation from file names.
It is very useful in reducing the sizeof the printout to fit within (close to) 80 columns.
This methodmodifies the object, and the stripped information is lost.
Afterperforming a strip operation, the object is considered to have itsentries in a ``random'' order, as it was just after objectinitialization and loading.
If strip_dirs() causes twofunction names to be indistinguishable (they are on the sameline of the same filename, and have the same function name), then thestatistics for these two entries are accumulated into a single entry.
This method of the Stats class accumulates additionalprofiling information into the current profiling object.
Itsarguments should refer to filenames created by the correspondingversion of profile.run().
Statistics for identically named(re: file, line, name) functions are automatically accumulated intosingle function statistics.
Save the data loaded into the Stats object to a file namedfilename.
The file is created if it does not exist, and isoverwritten if it already exists.
This is equivalent to the method ofthe same name on the profile.Profile class.New in version 2.3.
This method modifies the Stats object by sorting it accordingto the supplied criteria.
The argument is typically a stringidentifying the basis of a sort (example: 'time' or'name').When more than one key is provided, then additional keys are used assecondary criteria when there is equality in all keys selectedbefore them.
For example, sort_stats('name', 'file') will sortall the entries according to their function name, and resolve all ties(identical function names) by sorting by file name.Abbreviations can be used for any key names, as long as theabbreviation is unambiguous.
The following are the keys currentlydefined:
Valid Arg
Meaning
call count
cumulative time
file name
file name
primitive call count
line number
function name
name/file/line
standard name
internal time
Note that all sorts on statistics are in descending order (placingmost time consuming items first), where as name, file, and line numbersearches are in ascending order (alphabetical).
The subtledistinction between 'nfl' and 'stdname' is that thestandard name is a sort of the name as printed, which means that theembedded line numbers get compared in an odd way.
For example, lines3, 20, and 40 would (if the file names were the same) appear in thestring order 20, 3 and 40.
In contrast, 'nfl' does a numericcompare of the line numbers.
In fact, sort_stats('nfl') is thesame as sort_stats('name', 'file', 'line').For compatibility with the old profiler, the numeric arguments-1, 0, 1, and 2 are permitted.
They areinterpreted as 'stdname', 'calls', 'time', and'cumulative' respectively.
If this old style format (numeric)is used, only one sort key (the numeric key) will be used, andadditional arguments will be silently ignored.
This method for the Stats class reverses the ordering of the basiclist within the object.
This method is provided primarily forcompatibility with the old profiler.
Its utility is questionablenow that ascending vs descending order is properly selected based onthe sort key of choice.
)
This method for the Stats class prints out a report as describedin the profile.run() definition.The order of the printing is based on the last sort_stats()operation done on the object (subject to caveats in add() andstrip_dirs()).The arguments provided (if any) can be used to limit the list down tothe significant entries.
Initially, the list is taken to be thecomplete set of profiled functions.
Each restriction is either aninteger (to select a count of lines), or a decimal fraction between0.0 and 1.0 inclusive (to select a percentage of lines), or a regularexpression (to pattern match the standard name that is printed; as ofPython 1.5b1, this uses the Perl-style regular expression syntaxdefined by the
module).
If several restrictions areprovided, then they are applied sequentially.
would first limit the printing to first 10% of list, and then onlyprint functions that were part of filename .*foo:.
would limit the list to all functions having file names .*foo:,and then proceed to only print the first 10% of them.
This method for the Stats class prints a list of all functionsthat called each function in the profiled database.
The ordering isidentical to that provided by print_stats(), and the definitionof the restricting argument is also identical.
For convenience, anumber is shown in parentheses after each caller to show how manytimes this specific call was made.
A second non-parenthesized numberis the cumulative time spent in the function at the right.
This method for the Stats class prints a list of all functionthat were called by the indicated function.
Aside from this reversalof direction of calls (re: called vs was called by), the arguments andordering are identical to the print_callers() method.
...Python.
This was once necessary, when Python would print any unused expressionresult that was not None. The method is still defined forbackward compatibility.
10.1 Introduction to the 10.
The Python Profiler
Permission to use, copy, modify, and distribute this Python softwareand its associated documentation for any purpose (subject to therestriction in the following sentence) without fee is hereby granted,provided that the above copyright notice appears in all copies, andthat both that copyright notice and this permission notice appear insupporting documentation, and that the name of InfoSeek not be used inadvertising or publicity pertaining to distribution of the softwarewithout specific, written prior permission. This permission isexplicitly restricted to the copying and modification of the softwareto remain in Python, compiled Python, or other languages (such as C)wherein the modified or derived code is exclusively imported into aPython module.INFOSEEK CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THISSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY ANDFITNESS. IN NO EVENT SHALL INFOSEEK CORPORATION BE LIABLE FOR ANYSPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVERRESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OFCONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR INCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.The profiler was written after only programming in Python for 3 weeks.As a result, it is probably clumsy code, but I don't know for sure yet'cause I'm a beginner :-).
I did work hard to make the code run fast,so that profiling would be a reasonable thing to do.
I tried not torepeat code fragments, but I'm sure I did some stuff in really awkwardways at times.
Please send suggestions for improvements to:jar@netscape.com.
Updated and converted to LaTeX by Guido van Rossum.
The references tothe old profiler are left in the text, although it no longer exists.
Subsections 10.1 Introduction to the profiler
10.1 Introduction to the
The Python interpreter provides some low-level support for attachingprofiling and execution tracing facilities.
These are used forprofiling, debugging, and coverage analysis tools.Starting with Python 2.2, the implementation of this facility wassubstantially revised, and an interface from C was added.
This Cinterface allows the profiling or tracing code to avoid the overheadof calling through Python-level callable objects, making a direct Cfunction call instead.
The essential attributes of the facility havenot changed; the interface allows trace functions to be installedper-thread, and the basic events reported to the trace function arethe same as had been reported to the Python-level trace functions inprevious versions.
Value of what
Meaning of arg
Always NULL.
Exception information as returned bysys.exc_info().
Value being returned to the caller.
Name of function being called.
The value of the what parameter to a Py_tracefuncfunction when a new call to a function or method is being reported,or a new entry into a generator.
Note that the creation of theiterator for a generator function is not reported as there is nocontrol transfer to the Python bytecode in the corresponding frame.
The value of the what parameter to a Py_tracefuncfunction when an exception has been raised.
The callback functionis called with this value for what when after any bytecode isprocessed after which the exception becomes set within the framebeing executed.
The effect of this is that as exception propagationcauses the Python stack to unwind, the callback is called uponreturn to each frame as the exception propagates.
Only tracefunctions receives these events; they are not needed by theprofiler.
The value passed as the what parameter to a trace function(but not a profiling function) when a line-number event is beingreported.
The value for the what parameter to Py_tracefuncfunctions when a call is returning without propagating an exception.
The value for the what parameter to Py_tracefuncfunctions when a C function is about to be called.
The value for the what parameter to Py_tracefuncfunctions when a C function has thrown an exception.
The value for the what parameter to Py_tracefuncfunctions when a C function has returned.
Set the profiler function to func.
The obj parameter ispassed to the function as its first parameter, and may be any Pythonobject, or NULL.
If the profile function needs to maintain state,using a different value for obj for each thread provides aconvenient and thread-safe place to store it.
The profile functionis called for all monitored events except the line-number events.
Set the tracing function to func.
This is similar toPyEval_SetProfile(), except the tracing function doesreceive line-number events.
While a language specification need not prescribe how the languageinterpreter is invoked, it is useful to have a notion of a completePython program.
A complete Python program is executed in a minimallyinitialized environment: all built-in and standard modules areavailable, but none have been initialized, except for sys(various system services), __builtin__ (built-in functions,exceptions and None) and __main__.
The latter is usedto provide the local and global namespace for execution of thecomplete program.
The syntax for a complete Python program is that for file input,described in the next section.The interpreter may also be invoked in interactive mode; in this case,it does not read and execute a complete program but reads and executesone statement (possibly compound) at a time.
The initial environmentis identical to that of a complete program; each statement is executedin the namespace of __main__.
Under Unix, a complete program can be passed to the interpreter inthree forms: with the -c string command line option, as afile passed as the first command line argument, or as standard input.If the file or standard input is a tty device, the interpreter entersinteractive mode; otherwise, it executes the file as a completeprogram.
ProgressBar objects provide support for modeless progress-bardialogs.
Both determinate (thermometer style) and indeterminate(barber-pole style) progress bars are supported.
The bar will bedeterminate if its maximum value is greater than zero; otherwise itwill be indeterminate.Changed in version 2.2:Support for indeterminate-style progress bars wasadded.
The dialog is displayed immediately after creation.
If the dialog's``Cancel'' button is pressed, or if Cmd-. or ESC is typed,the dialog window is hidden and KeyboardInterrupt israised (but note that this response does not occur until the progressbar is next updated, typically via a call to inc() orset()).
Otherwise, the bar remains visible until theProgressBar object is discarded.
ProgressBar objects possess the following attributes andmethods:
The current value (of type integer or long integer) of the progressbar.
The normal access methods coerce curval between0 and maxval.
This attribute should not be altereddirectly.
The maximum value (of type integer or long integer) of the progressbar; the progress bar (thermometer style) is full when curvalequals maxval.
If maxval is 0, the bar willbe indeterminate (barber-pole).
Sets the text in the title bar of the progress dialog tonewstr.
Sets the text in the progress box of the progress dialog tonewstr.
)
Sets the progress bar's curval to value, and alsomaxval to max if the latter is provided. valueis first coerced between 0 and maxval.
The thermometer baris updated to reflect the changes, including a change fromindeterminate to determinate or vice versa.
Increments the progress bar's curval by n, or by 1if n is not provided.
(Note that n may be negative, inwhich case the effect is a decrement.)
The progress bar is updated toreflect the change.
If the bar is indeterminate, this causes one``spin'' of the barber pole.
The resulting curval is coercedbetween 0 and maxval if incrementing causes it to falloutside this range.
A ProtocolError object describes a protocol error in theunderlying transport layer (such as a 404 `not found' error if theserver named by the URI does not exist). It has the followingmembers:
The URI or URL that triggered the error.
The error code.
The error message or diagnostic string.
A string containing the headers of the HTTP/HTTPS request thattriggered the error.
The ProxyHandler will have a method protocol_open() for every protocol which has aproxy in the proxies dictionary given in the constructor.
The first program aims to execute a function in a Pythonscript.
Like in the section about the very high level interface,the Python interpreter does not directly interact with theapplication (but that will change in the next section).The code to run a function defined in a Python script is:
This code loads a Python script using argv[1], and calls thefunction named in argv[2].
Its integer arguments are the othervalues of the argv array.
If you compile and link thisprogram (let's call the finished executable call), and useit to execute a Python script, such as:
then the result should be:
Although the program is quite large for its functionality, most of thecode is for data conversion between Python and C, and for errorreporting.
The interesting part with respect to embedding Pythonstarts with
Py_Initialize();pName = PyString_FromString(argv[1]);/* Error checking of pName left out */pModule = PyImport_Import(pName);
After initializing the interpreter, the script is loaded usingPyImport_Import().
This routine needs a Python stringas its argument, which is constructed using thePyString_FromString() data conversion routine.
pFunc = PyObject_GetAttrString(pModule, argv[2]);/* pFunc is a new reference */if (pFunc PyCallable_Check(pFunc)) {...}Py_XDECREF(pFunc);
Once the script is loaded, the name we're looking for is retrievedusing PyObject_GetAttrString().
If the name exists, andthe object returned is callable, you can safely assume that it is afunction.
The program then proceeds by constructing a tuple ofarguments as normal.
The call to the Python function is then madewith:
Upon return of the function, pValue is either NULL or itcontains a reference to the return value of the function.
Be sure torelease the reference after examining the value.
7.2 Pure Python distribution
If you're just distributing a couple of modules, especially if theydon't live in a particular package, you can specify them individuallyusing the py_modules option in the setup script.In the simplest case, you'll have two files to worry about: a setupscript and the single module you're distributing, foo.py in thisexample:
(In all diagrams in this section, root will refer to thedistribution root directory.)
A minimal setup script to describe thissituation would be:
Note that the name of the distribution is specified independently withthe name option, and there's no rule that says it has to be thesame as the name of the sole module in the distribution (although that'sprobably a good convention to follow).
and the setup script might be
You can put module source files into another directory, but if you haveenough modules to do that, it's probably easier to specify modules bypackage rather than listing them individually.
If you have more than a couple of modules to distribute, especially ifthey are in multiple packages, it's probably easier to specify wholepackages rather than individual modules.
This works even if yourmodules are not in a package; you can just tell the Distutils to processmodules from the root package, and that works the same as any otherpackage (except that you don't have to have an __init__.pyfile).The setup script from the last example could also be written as
(The empty string stands for the root package.)If those two files are moved into a subdirectory, but remain in the rootpackage, e.g.:
then you would still specify the root package, but you have to tell theDistutils where source files in the root package live:
More typically, though, you will want to distribute multiple modules inthe same package (or in sub-packages).
For example, if the foo and bar modules belong in package foobar, one way tolayout your source tree is
This is in fact the default layout expected by the Distutils, and theone that requires the least work to describe in your setup script:
If you want to put modules in directories not named for their package,then you need to use the package_dir option again.
Forexample, if the src directory holds modules in thefoobar package:
an appropriate setup script would be
from distutils.core import setupsetup(name='foobar',version='1.0',package_dir={'foobar': 'src'},packages=['foobar'],)
Or, you might put modules from your main package right in thedistribution root:
in which case your setup script would be
from distutils.core import setupsetup(name='foobar',version='1.0',package_dir={'foobar': ''},packages=['foobar'],)
(The empty string also stands for the current directory.)If you have sub-packages, they must be explicitly listed inpackages, but any entries in package_dirautomatically extend to sub-packages.
(In other words, the Distutilsdoes not scan your source tree, trying to figure out whichdirectories correspond to Python packages by looking for__init__.py files.)
Thus, if the default layout grows asub-package:
then the corresponding setup script would be
(Again, the empty string in package_dir stands for the currentdirectory.
The class descriptor objects used as values in the dictionary returnedby readmodule() and readmodule_ex()provide the following data members:
The name of the module defining the class described by the classdescriptor.
The name of the class.
A list of class descriptors which describe the immediate baseclasses of the class being described.
Classes which are named assuperclasses but which are not discoverable byreadmodule() are listed as a string with the class nameinstead of class descriptors.
A dictionary mapping method names to line numbers.
Name of the file containing the class statement defining the class.
The line number of the class statement within the file named byfile.
The function descriptor objects used as values in the dictionary returnedby readmodule_ex() provide the following data members:
The name of the module defining the function described by the functiondescriptor.
The name of the function.
Name of the file containing the def statement defining the function.
The line number of the def statement within the file named byfile.
If you're reading this document, you probably have a good idea of whatmodules, extensions, and so forth are.
Nevertheless, just to be surethat everyone is operating from a common starting point, we offer thefollowing glossary of common Python terms:
module
the basic unit of code reusability in Python: a block ofcode imported by some other code.
Three types of modules concern ushere: pure Python modules, extension modules, and packages.
pure Python module
a module written in Python and contained in asingle .py file (and possibly associated .pyc and/or.pyo files).
Sometimes referred to as a ``pure module.''
extension module
(Note thatcurrently, the Distutils only handles C/C++ extensions for Python.)
package
a module that contains other modules; typically containedin a directory in the filesystem and distinguished from otherdirectories by the presence of a file __init__.py.
root package
the root of the hierarchy of packages.
(This isn'treally a package, since it doesn't have an __init__.pyfile. But we have to call it something.)
The vast majority of thestandard library is in the root package, as are many small, standalonethird-party modules that don't belong to a larger module collection.Unlike regular packages, modules in the root package can be found inmany directories: in fact, every directory listed in sys.
pathcontributes modules to the root package.
Python Runtime Services
The modules described in this chapter provide a wide range of servicesrelated to the Python interpreter and its interaction with itsenvironment.
Here's an overview:
Access system-specific parameters and functions.
Interface to the cycle-detecting garbage collector.
Support for weak references and weak dictionaries.
Provide control for floating point exception handling.
Register and execute cleanup functions.
Names for built-in types.
Class wrapper for dictionary objects.
Class wrapper for list objects.
Class wrapper for string objects.
All Python's standard operators as built-in functions.
Extract information and source code from live objects.
Print or retrieve a stack traceback.
This module provides random access to individual linesfrom text files.
Convert Python objects to streams of bytes and back.
Register pickle support functions.
Python object persistence.
Shallow and deep copy operations.
Convert Python objects to streams of bytes and back(with different constraints).
Issue warning messages and control their disposition.
Access the implementation of the import statement.
Utilities to support extension of packages.
Base classes for interactive Python interpreters.
Compile (possibly incomplete) Python code.
Alternate repr() implementation with size limits.
Interface to the creation of runtime implementation objects.
A standard way to reference site-specific modules.
A standard way to reference user-specific modules.
The set of built-in functions.
The environment where the top-level script is run.
Future statement definitions
The PyZipFile constructor takes the same parameters as theZipFile constructor.
Instances have one method in addition tothose of ZipFile objects.
Search for files *.py and add the corresponding file to thearchive.
The corresponding file is a *.pyo file ifavailable, else a *.pyc file, compiling if necessary.
If thepathname is a file, the filename must end with .py, and justthe (corresponding *.py[co]) file is added at the top level(no path information).
If it is a directory, and the directory isnot a package directory, then all the files *.py[co] areadded at the top level.
If the directory is a package directory,then all *.py[oc] are added under the package name as a filepath, and if any subdirectories are package directories, all ofthese are added recursively. basename is intended forinternal use only.
The writepy() method makes archiveswith file names like this:
If no expressions are present, raise re-raises the lastexpression that was active in the current scope.
If no exception isactive in the current scope, an exception is raised indicating this error.
The instance so created by calling the constructor isused as the exception value.If a third object is present and not None, it must be atraceback
object (see section3.2), andit is substituted instead of the current location as the place wherethe exception occurred.
If the third object is present and not atraceback object or None, a TypeError exception israised.
Compiled regular expression objects support the following methods andattributes:
If zero or more characters at the beginning of string matchthis regular expression, return a correspondingMatchObject instance.
Return None if the string does notmatch the pattern; note that this is different from a zero-lengthmatch.
Note:If you want to locate a match anywhere instring, use search() instead.
The optional second parameter pos gives an index in the stringwhere the search is to start; it defaults to 0.
This is notcompletely equivalent to slicing the string; the'^' patterncharacter matches at the real beginning of the string and at positionsjust after a newline, but not necessarily at the index where the searchis to start.The optional parameter endpos limits how far the string willbe searched; it will be as if the string is endpos characterslong, so only the characters from pos to
endpos -1 will be searched for a match.
If endpos is less thanpos, no match will be found, otherwise, if rx is acompiled regular expression object,
rx.match(string, 0, 50) is equivalent to
rx.match(string[:50], 0).
Scan through string looking for a location where this regularexpression produces a match, and return acorresponding MatchObject instance.
Return None if noposition in the string matches the pattern; note that this isdifferent from finding a zero-length match at some point in the string.The optional pos and endpos parameters have the samemeaning as for the match() method.
Identical to the split() function, using the compiled pattern.
Identical to the findall() function, using the compiled pattern.
Identical to the finditer() function, using the compiled pattern.
Identical to the sub() function, using the compiled pattern.
Identical to the subn() function, using the compiled pattern.
The flags argument used when the RE object was compiled, or0 if no flags were provided.
A dictionary mapping any symbolic group names defined by(?Pid) to group numbers.
The dictionary is empty if nosymbolic groups were used in the pattern.
The pattern string from which the RE object was compiled.
In general, if a stringp matches A and another string q matches B,the string pq will match AB.
This holds unless A orB contain low precedence operations; boundary conditions betweenA and B; or have numbered group references.
Thus, complexexpressions can easily be constructed from simpler primitiveexpressions like the ones described here.
For details of the theoryand implementation of regular expressions, consult the Friedl bookreferenced above, or almost any textbook about compiler construction.A brief explanation of the format of regular expressions follows.
You can concatenate ordinary characters, so lastmatches the string 'last'.
(In the rest of this section, we'llwrite RE's in this special style, usually without quotes, andstrings to be matched 'in single quotes'.)Some characters, like "|" or "(", are special.Special characters either stand for classes of ordinary characters, oraffect how the regular expressions around them are interpreted.The special characters are:
"."
(Dot.)
In the default mode, this matches anycharacter except a newline.
If the DOTALL flag has beenspecified, this matches any character including a newline.
(Caret.)
Matches the start of thestring, and in MULTILINE mode also matches immediatelyafter each newline.
More interestingly, searching for foo.$ in'foo1nfoo2n' matches 'foo2' normally,but 'foo1' in MULTILINE mode.
Causes the resulting RE tomatch 0 or more repetitions of the preceding RE, as many repetitionsas are possible. ab* willmatch 'a', 'ab', or 'a' followed by any number of 'b's.
"+"
Causes theresulting RE to match 1 or more repetitions of the preceding RE.ab+ will match 'a' followed by any non-zero number of 'b's; itwill not match just 'a'.
"?"
Causes the resulting RE tomatch 0 or 1 repetitions of the preceding RE. ab? willmatch either 'a' or 'ab'.
*?, +?, ??
The "*","+", and "?" qualifiers are all greedy; theymatch as much text as possible.
Sometimes this behaviour isn'tdesired; if the RE .* is matched against'H1title/H1', it will match the entire string, and not just'H1'.
Adding "?" after the qualifier makes itperform the match in non-greedy or minimal fashion; asfew characters as possible will be matched.
Using .*?in the previous expression will match only 'H1'.
Specifies that exactly m copies of the previous RE should bematched; fewer matches cause the entire RE not to match.
For example,a{6} will match exactly six "a" characters, butnot five.
Causes the resulting RE to match fromm to n repetitions of the preceding RE, attempting tomatch as many repetitions as possible.
For example, a{3,5}will match from 3 to 5 "a" characters.
Omitting mspecifies a lower bound of zero, and omitting n specifies an infinite upper bound.
As anexample, a{4,}b will match aaaab or a thousand"a" characters followed by a b, but not aaab.The comma may not be omitted or the modifier would be confused withthe previously described form.
Causes the resulting RE tomatch from m to n repetitions of the preceding RE,attempting to match as few repetitions as possible.
This isthe non-greedy version of the previous qualifier.
For example, on the6-character string 'aaaaaa', a{3,5} will match 5"a" characters, while a{3,5}? will only match 3characters.
Either escapes special characters (permittingyou to match characters like "*", "?", and soforth), or signals a special sequence; special sequences are discussedbelow.If you're not using a raw string toexpress the pattern, remember that Python also uses thebackslash as an escape sequence in string literals; if the escapesequence isn't recognized by Python's parser, the backslash andsubsequent character are included in the resulting string.
However,if Python would recognize the resulting sequence, the backslash shouldbe repeated twice.
This is complicated and hard to understand, soit's highly recommended that you use raw strings for all but thesimplest expressions.
Used to indicate a set of characters.
Characters canbe listed individually, or a range of characters can be indicated bygiving two characters and separating them by a "-".
Specialcharacters are not active inside sets.
For example, [akm$]will match any of the characters "a", "k","m", or "$"; [a-z]will match any lowercase letter, and [a-zA-Z0-9] matches anyletter or digit.
Character classes such as w or S(defined below) are also acceptable inside a range.
If you want toinclude a "]" or a "-" inside a set, precede it with abackslash, or place it as the first character.
Thepattern []] will match ']', for example.You can match the characters not within a range by complementingthe set.
This is indicated by including a"^" as the first character of the set;"^" elsewhere will simply match the"^" character.
For example,[^5] will matchany character except "5", and[^^] will match any characterexcept "^".
A|B, where A and B can be arbitrary REs,creates a regular expression that will match either A or B. Anarbitrary number of REs can be separated by the "|" in thisway.
This can be used inside groups (see below) as well.
As the targetstring is scanned, REs separated by "|" are tried from left toright.
When one pattern completely matches, that branch is accepted.This means that once A matches, B will not be tested further,even if it would produce a longer overall match.
In other words, the"|" operator is never greedy.
To match a literal "|",use |, or enclose it inside a character class, as in [|].
Matches whatever regular expression is inside theparentheses, and indicates the start and end of a group; the contentsof a group can be retrieved after a match has been performed, and canbe matched later in the string with the number
specialsequence, described below.
To match the literals "(" or")", use ( or ), or enclose theminside a character class: [(] [)].
This is an extension notation (a "?"following a "(" is not meaningful otherwise).
(One or more letters from the set "i","L", "m", "s", "u","x".)
The group matches the empty string; the letters setthe corresponding flags (re.I, re.L,re.M, re.S, re.U, re.X)for the entire regular expression.
If there are non-whitespace characters beforethe flag, the results are undefined.
(?:...)
A non-grouping version of regular parentheses.Matches whatever regular expression is inside the parentheses, but thesubstring matched by thegroup cannot be retrieved after performing a match orreferenced later in the pattern.
Similar to regular parentheses, butthe substring matched by the group is accessible via the symbolic groupname name.
Group names must be valid Python identifiers, andeach group name must be defined only once within a regular expression.
Asymbolic group is also a numbered group, just as if the group were notnamed.
So the group named 'id' in the example above can also bereferenced as the numbered group 1.For example, if the pattern is(?Pid[a-zA-Z_]w*), the group can be referenced by itsname in arguments to methods of match objects, such asm.group('id') or m.end('id'), and also by name inpattern text (for example, (?P=id)) and replacement text(such as gid).
Matches whatever text was matched by theearlier group named name.
A comment; the contents of the parentheses aresimply ignored.
Matches if ... matches next, but doesn'tconsume any of the string.
This is called a lookahead assertion.
Forexample, Isaac (?=Asimov) will match 'Isaac' only if it'sfollowed by 'Asimov'.
Matches if ... doesn't match next.
Thisis a negative lookahead assertion.
For example,Isaac (?!Asimov) will match 'Isaac' only if it's notfollowed by 'Asimov'.
Matches if the current position in the stringis preceded by a match for ... that ends at the currentposition.
This is called a positive lookbehind assertion.(?=abc)def will find a match in "abcdef", since thelookbehind will back up 3 characters and check if the containedpattern matches.
The contained pattern must only match strings ofsome fixed length, meaning that abc or a|b areallowed, but a* and a{3,4} are not.
Note thatpatterns which start with positive lookbehind assertions will nevermatch at the beginning of the string being searched; you will mostlikely want to use the search() function rather than thematch() function:
This example looks for a word following a hyphen:
Matches if the current position in the stringis not preceded by a match for ....
This is called anegative lookbehind assertion.
Similar to positive lookbehindassertions, the contained pattern must only match strings of somefixed length.
Patterns which start with negative lookbehindassertions may match at the beginning of the string being searched.
The special sequences consist of "" and a character from thelist below.
If the ordinary character is not on the list, then theresulting RE will match the second character.
For example,$ matches the character "$".
Matches the contents of the group of thesame number.
Groups are numbered starting from 1.
For example,(.+) 1 matches 'the the' or '55 55', but not'the end' (notethe space after the group).
This special sequence can only be used tomatch one of the first 99 groups.
If the first digit of numberis 0, or number is 3 octal digits long, it will not be interpretedas a group match, but as the character with octal value number.Inside the "[" and "]" of a character class, all numericescapes are treated as characters.
A
Matches only at the start of the string.
Matches the empty string, but only at thebeginning or end of a word.
A word is defined as a sequence ofalphanumeric or underscore characters, so the end of a word is indicated bywhitespace or a non-alphanumeric, non-underscore character.
Note that b is defined as the boundary between w and W, so the precise set of characters deemed to be alphanumeric depends on thevalues of the UNICODE and LOCALE flags.
Inside a characterrange, b represents the backspace character, for compatibilitywith Python's string literals.
Matches the empty string, but only when it is notat the beginning or end of a word.
This is just the opposite of b, so is also subject to the settings of LOCALE and UNICODE.
Matches any decimal digit; this isequivalent to the set [0-9].
Matches any non-digit character; this isequivalent to the set [^0-9].
Matches any whitespace character; this isequivalent to the set [ tnrfv].
Matches any non-whitespace character; this isequivalent to the set [^ tnrfv].
When the LOCALE and UNICODEflags are not specified, matches any alphanumeric character and theunderscore; this is equivalent to the set[a-zA-Z0-9_].
With LOCALE, it will match the set[0-9_] plus whatever characters are defined as alphanumeric forthe current locale.
If UNICODE is set, this will match thecharacters [0-9_] plus whatever is classified as alphanumericin the Unicode character properties database.
When the LOCALE and UNICODEflags are not specified, matches any non-alphanumeric character; thisis equivalent to the set [^a-zA-Z0-9_].
WithLOCALE, it will match any character not in the set[0-9_], and not defined as alphanumeric for the current locale.If UNICODE is set, this will match anything other than[0-9_] and characters marked as alphanumeric in the Unicodecharacter properties database.
Matches only at the end of the string.
Most of the standard escapes supported by Python string literals arealso accepted by the regular expression parser:
Octal escapes are included in a limited form: If the first digit is a0, or if there are three octal digits, it is considered an octalescape.
Otherwise, it is a group reference.
As for string literals,octal escapes are always at most three digits in length.
The following example demonstrates how to use thereadline module's history reading and writing functions toautomatically load and save a history file named .pyhist fromthe user's home directory.
The code below would normally be executedautomatically during interactive sessions from the user'sPYTHONSTARTUP file.
The following example extends the code.InteractiveConsole class tosupport history save/restore.
write_history_file(histfile) Python Library Reference
The reference count behavior of functions in the Python/C API is best explained in terms of ownership of references.
Ownershippertains to references, never to objects (objects are not owned: theyare always shared).
"Owning a reference" means being responsible forcalling Py_DECREF on it when the reference is no longer needed.
When no ownershipis transferred, the caller is said to borrow the reference.Nothing needs to be done for a borrowed reference.Conversely, when a calling function passes it a reference to an object, there are two possibilities: the function steals a reference to the object, or it does not.
Few functions steal references; the two notable exceptions arePyList_SetItem()
andPyTuple_SetItem()
, which steal a reference to the item (but not to the tuple or list into whichthe item is put!).
These functions were designed to steal a referencebecause of a common idiom for populating a tuple or list with newlycreated objects; for example, the code to create the tuple (1,2, "three") could look like this (forgetting about error handling forthe moment; a better way to code this is shown below):
Incidentally, PyTuple_SetItem() is the only way toset tuple items; PySequence_SetItem() andPyObject_SetItem() refuse to do this since tuples are animmutable data type.
You should only usePyTuple_SetItem() for tuples that you are creatingyourself.
Equivalent code for populating a list can be written using PyList_New() and PyList_SetItem().
Such codecan also use PySequence_SetItem(); this illustrates thedifference between the two (the extra Py_DECREF() calls):
You might find it strange that the ``recommended'' approach takes morecode.
However, in practice, you will rarely use these ways ofcreating and populating a tuple or list.
There's a generic function,Py_BuildValue(), that can create most common objects fromC values, directed by a format string.
For example, theabove two blocks of code could be replaced by the following (whichalso takes care of the error checking):
It is much more common to use PyObject_SetItem() andfriends with items whose references you are only borrowing, likearguments that were passed in to the function you are writing.
Inthat case, their behaviour regarding reference counts is much saner,since you don't have to increment a reference count so you can give areference away (``have it be stolen'').
For example, this functionsets all items of a list (actually, any mutable sequence) to a givenitem:
The situation is slightly different for function return values.
While passing a reference to most functions does not change your ownership responsibilities for that reference, many functions that return a referece to an object give you ownership of the reference.The reason is simple: in many cases, the returned object is created on the fly, and the reference you get is the only reference to the object.
Therefore, the generic functions that return object references, like PyObject_GetItem() and PySequence_GetItem(), always return a new reference (thecaller becomes the owner of the reference).It is important to realize that whether you own a reference returned by a function depends on which function you call only -- theplumage (the type of the object passed as anargument to the function) doesn't enter into it!
Thus, if you extract an item from a list using PyList_GetItem(), youdon't own the reference -- but if you obtain the same item from thesame list using PySequence_GetItem() (which happens totake exactly the same arguments), you do own a reference to thereturned object.Here is an example of how you could write a function that computes thesum of the items in a list of integers; once using PyList_GetItem()
, and once usingPySequence_GetItem()
.
longsum_list(PyObject *list){int i, n;long total = 0;PyObject *item;n = PyList_Size(list);if (n 0)return -1; /* Not a list */for (i = 0; i n; i++) {item = PyList_GetItem(list, i); /* Can't fail */if (!PyInt_Check(item)) continue; /* Skip non-integers */total += PyInt_AsLong(item);}return total;}
longsum_sequence(PyObject *sequence){int i, n;long total = 0;PyObject *item;n = PySequence_Length(sequence);if (n 0)return -1; /* Has no length */for (i = 0; i n; i++) {item = PySequence_GetItem(sequence, i);if (item == NULL)return -1; /* Not a sequence, or other failure */if (PyInt_Check(item))total += PyInt_AsLong(item);Py_DECREF(item); /* Discard reference ownership */}return total;}
The reference count is important because today's computers have a finite (and often severely limited) memory size; it counts how many different places there are that have a reference to an object.
Such a place could be another object, or a global (or static) C variable, or a local variable in some C function.
When an object's reference count becomes zero, the object is deallocated.
If it contains references to other objects, their reference count is decremented.
Those other objects may be deallocated in turn, if this decrement makes their reference count become zero, and so on.
(There's an obvious problem with objects that reference each other here; for now, the solution is ``don't do that.'')Reference counts are always manipulated explicitly.
The normal way is to use the macro Py_INCREF()
toincrement an object's reference count by one, andPy_DECREF()
to decrement it by one.
The type-specific deallocator takes care of decrementingthe reference counts for other objects contained in the object if thisis a compound object type, such as a list, as well as performing anyadditional finalization that's needed.
There's no chance that thereference count can overflow; at least as many bits are used to holdthe reference count as there are distinct memory locations in virtualmemory (assuming sizeof(long) = sizeof(char*)).
Thus, thereference count increment is a simple operation.It is not necessary to increment an object's reference count for every local variable that contains a pointer to an object.
In theory, the object's reference count goes up by one when the variable is made to point to it and it goes down by one when the variable goes out of scope.
However, these two cancel each other out, so at the end the reference count hasn't changed.
The only real reason to use the reference count is to prevent the object from being deallocated as long as our variable is pointing to it.
If we know that there is at least one other reference to the object that lives at least as long as our variable, there is no need to increment the reference count temporarily.
These operations alwaysincrement the reference count of the object they return.
This leavesthe caller with the responsibility to callPy_DECREF() when they are done with the result; this soonbecomes second nature. Subsections
For this purpose (and others), every object also contains apointer to its type object.The big question now remains: when to use Py_INCREF(x) andPy_DECREF(x)?
Let's first introduce some terms.
Nobody``owns'' an object; however, you can own a reference to anobject.
An object's reference count is now defined as the number ofowned references to it.
The owner of a reference is responsible forcalling Py_DECREF() when the reference is no longerneeded.
Ownership of a reference can be transferred.
There are threeways to dispose of an owned reference: pass it on, store it, or callPy_DECREF().
Forgetting to dispose of an owned referencecreates a memory leak.It is also possible to borrow 1.2
a reference to an object.
The borrowerof a reference should not call Py_DECREF().
The borrower mustnot hold on to the object longer than the owner from which it wasborrowed.
Using a borrowed reference after the owner has disposed ofit risks using freed memory and should be avoidedcompletely.
The advantage of borrowing over owning a reference is that you don'tneed to take care of disposing of the reference on all possible pathsthrough the code -- in other words, with a borrowed reference youdon't run the risk of leaking when a premature exit is taken.
Thedisadvantage of borrowing over leaking is that there are some subtlesituations where in seemingly correct code a borrowed reference can beused after the owner from which it was borrowed has in fact disposedof it.A borrowed reference can be changed into an owned reference by callingPy_INCREF().
This does not affect the status of the owner fromwhich the reference was borrowed -- it creates a new owned reference,and gives full owner responsibilities (the new owner mustdispose of the reference properly, as well as the previous owner).
Footnotes
...completely.
Checking that the reference count is at least 1does not work -- the reference count itself could be infreed memory and may thus be reused for another object!
9.1 Installing modules: the
Subsections 9.1 Installing modules: the install command family
6.10 Reference List Markup Many sections include a list of references to module documentationor external documents.
These lists are created using theseealso or seealso* environments.
These environmentsdefine some additional macros to support creating referenceentries in a reasonable manner.The seealso environment is typically placed in a sectionjust before any sub-sections.
This is done to ensure thatreference links related to the section are not hidden in asubsection in the hypertext renditions of the documentation.
Forthe HTML output, it is shown as a ``side bar,'' boxed off from themain flow of the text.
The seealso* environment isdifferent in that it should be used when a list of references isbeing presented as part of the primary content; it is notspecially set off from the text.
This environment creates a ``See also:'' heading and defines themarkup used to describe individual references.
This environment is used to create a list of references whichform part of the main content.
It is not given a specialheader and is not set off from the main flow of the text.
Itprovides the same additional markup used to describe individualreferences.
References to specific on-line resources should be given usingthe seelink macro if they don't have a meaningful titlebut there is some short description of what's at the end of thelink.
Online documents which have identifiable titles should bereferenced using the seetitle macro, using the optionalparameter to that macro to provide the URL.
Refer to another module. why should be a briefexplanation of why the reference may be interesting.
The modulename is given in name, with the link key given inkey if necessary.
In the HTML and PDF conversions, themodule name will be a hyperlink to the referred-to module.
Note:The module must be documented in the samedocument (the corresponding declaremodule is required).
Refer to an Python Enhancement Proposal (PEP). numbershould be the official number assigned by the PEP Editor,title should be the human-readable title of the PEP asfound in the official copy of the document, and why shouldexplain what's interesting about the PEP.
This should be usedto refer the reader to PEPs which specify interfaces or languagefeatures relevant to the material in the annotated section of thedocumentation.
Refer to an IETF Request for Comments (RFC).
Otherwise verysimilar to seepep.
This should be usedto refer the reader to PEPs which specify protocols or dataformats relevant to the material in the annotated section of thedocumentation.
Add arbitrary text text to the ``See also:'' list.
Thiscan be used to refer to off-line materials or on-line materialsusing the url macro.
This should consist of one or morecomplete sentences.
Add a reference to an external document named title.
Ifurl is given, the title is made a hyperlink in the HTMLversion of the documentation, and displayed below the title inthe typeset versions of the documentation.
}
References to specific on-line resources should be given usingthe seeurl macro if they don't have a meaningful title.Online documents which have identifiable titles should bereferenced using the seetitle macro, using the optionalparameter to that macro to provide the URL.
6.11 Index-generating Markup
py
py -uall to turn on allresources; specifying all as an option for-u enables all possible resources.If all but one resource is desired (a more common case), acomma-separated list of resources that are not desired may be listed afterall.The command python regrtest.
py
-uall,-audio,-largefile will run test.regrtestwith all resources except the audio andlargefile resources.For a list of all resources and more command-line options, runpython regrtest.
10.9 Supporting Cyclic Garbage
The following methods describe all of Request's public interface,and so all must be overridden in subclasses.
add_data
Set the Request data to data.
Return a string indicating the HTTP request method.
This is onlymeaningful for HTTP requests, and currently always takes one of thevalues ("GET", "POST").
Return whether the instance has a non-None data.
Return the instance's data.
Add another header to the request.
Headers are currently ignored byall handlers except HTTP handlers, where they are added to the listof headers sent to the server.
Note that there cannot be more thanone header with the same name, and later calls will overwriteprevious calls in case the key collides.
Currently, this isno loss of HTTP functionality, since all headers which have meaningwhen used more than once have a (header-specific) way of gaining thesame functionality using only one header.
Add a header that will not be added to a redirected request.New in version 2.4.
Return whether the instance has the named header (checks both regularand unredirected).New in version 2.4.
get_full_url
Return the URL given in the constructor.
Return the type of the URL -- also known as the scheme.
Return the host to which a connection will be made.
Return the selector -- the part of the URL that is sent tothe server.
Prepare the request by connecting to a proxy server.
The hostand type will replace those of the instance, and the instance'sselector will be the original URL given in the constructor.
Return the request-host of the origin transaction, as defined byRFC 2965.
See the documentation for the Requestconstructor.
Return whether the request is unverifiable, as defined by RFC 2965.See the documentation for the Request constructor.
16.6 Other Graphical User
Restricted Execution
Warning:In Python 2.3 these modules have been disabled due to various knownand not readily fixable security holes.
The modules are stilldocumented here to help in reading old code that uses therexec and Bastion modules.
Restricted execution is the basic framework in Python that allowsfor the segregation of trusted and untrusted code.
The framework is based on thenotion that trusted Python code (a supervisor) can create a``padded cell' (or environment) with limited permissions, and run theuntrusted code within this cell.
The untrusted code cannot break outof its cell, and can only interact with sensitive system resourcesthrough interfaces defined and managed by the trusted code.
The term``restricted execution'' is favored over ``safe-Python''since true safety is hard to define, and is determined by the way therestricted environment is created.
Note that the restrictedenvironments can be nested, with inner cells creating subcells oflesser, but never greater, privilege.An interesting aspect of Python's restricted execution model is thatthe interfaces presented to untrusted code usually have the same namesas those presented to trusted code.
Therefore no special interfacesneed to be learned to write code designed to run in a restrictedenvironment.
And because the exact nature of the padded cell isdetermined by the supervisor, different restrictions can be imposed,depending on the application.
For example, it might be deemed``safe'' for untrusted code to read any file within a specifieddirectory, but never to write a file.
In this case, the supervisormay redefine the built-in open() function so that it raisesan exception whenever the mode parameter is 'w'.
Itmight also perform a chroot()-like operation on thefilename parameter, such that root is always relative to somesafe ``sandbox'' area of the filesystem.
In this case, the untrustedcode would still see an built-in open() function in itsenvironment, with the same calling interface.
The semantics would beidentical too, with IOErrors being raised when thesupervisor determined that an unallowable parameter is being used.The Python run-time determines whether a particular code block isexecuting in restricted execution mode based on the identity of the__builtins__ object in its global variables: if this is (thedictionary of) the standard
__builtin__
Basic restricted execution framework.
Providing restricted access to objects.
Grail, an Internet browser written in Python, uses thesemodules to support Python applets.
Moreinformation on the use of Python's restricted executionmode in Grail is available on the Web site.
return may only occur syntactically nested in a functiondefinition, not within a nested class definition.
If an expression list is present, it is evaluated, else Noneis substituted.
return leaves the current function call with the expressionlist (or None) as return value.When return passes control out of a try statementwith a finally clause, that finally clause is executedbefore really leaving the function.
In a generator function, the return statement is not allowedto include an expression_list.
In that context, a barereturn indicates that the generator is done and will causeStopIteration to be raised.
The RExec class has the following class attributes, which areused by the __init__() method.
All theseattributes are tuples of strings.
Contains the names of built-in functions which will not beavailable to programs running in the restricted environment.
A subclass that wants to override thisvariable should probably start with the value from the base class andconcatenate additional forbidden functions -- when new dangerousbuilt-in functions are added to Python, they will also be added tothis module.)
Contains the names of built-in modules which can be safely imported.The value for RExec is ('audioop', 'array', 'binascii','cmath', 'errno', 'imageop', 'marshal', 'math', 'md5', 'operator','parser', 'regex', 'select', 'sha', '_sre', 'strop','struct', 'time').
A similar remark about overriding this variableapplies -- use the value from the base class as a starting point.
Contains the directories which will be searched when an importis performed in the restricted environment.
The value for RExec is the same as sys. path (at the timethe module is loaded) for unrestricted code.
module which will beavailable to programs running in the restricted environment.
Thevalue for RExec is ('error', 'fstat', 'listdir','lstat', 'readlink', 'stat', 'times', 'uname', 'getpid', 'getppid','getcwd', 'getuid', 'getgid', 'geteuid', 'getegid'). ok_sys_names
Contains the names of the functions and variables in the
module which will be available to programs running in the restrictedenvironment.
The value for RExec is ('ps1', 'ps2','copyright', 'version', 'platform', 'exit', 'maxint').
Contains the file types from which modules are allowed to be loaded.Each file type is an integer constant defined in the
module.The meaningful values are PY_SOURCE, PY_COMPILED, andC_EXTENSION.
The value for RExec is (C_EXTENSION,PY_SOURCE).
Adding PY_COMPILED in subclasses is not recommended;an attacker could exit the restricted execution mode by putting a forgedbyte-compiled file (.pyc) anywhere in your file system, for exampleby writing it to /tmp or uploading it to the /incomingdirectory of your public FTP server.
RExec instances support the following methods:
code must either be a string containing a Python expression, ora compiled code object, which will be evaluated in the restrictedenvironment's __main__ module.
The value of the expression orcode object will be returned.
code must either be a string containing one or more lines ofPython code, or a compiled code object, which will be executed in therestricted environment's __main__ module.
Execute the Python code contained in the file filename in therestricted environment's __main__ module.
Methods whose names begin with "s_" are similar to the functionsbeginning with "r_", but the code will be granted access torestricted versions of the standard I/O streams sys.stdin,sys.stderr, and sys.stdout.
code must be a string containing a Python expression, which willbe evaluated in the restricted environment.
code must be a string containing one or more lines of Python code,which will be executed in the restricted environment.
Execute the Python code contained in the file filename in therestricted environment.
RExec objects must also support various methods which will beimplicitly called by code executing in the restricted environment.Overriding these methods in a subclass is used to change the policiesenforced by a restricted environment.
r_import
Import the module modulename, raising an ImportErrorexception if the module is considered unsafe.
Method called when open() is called in the restrictedenvironment.
The arguments are identical to those of open(),and a file object (or a class instance compatible with file objects)should be returned.
RExec's default behaviour is allow openingany file for reading, but forbidding any attempt to write a file.
Seethe example below for an implementation of a less restrictiver_open().
Reload the module object module, re-parsing and re-initializing it.
Unload the module object module (remove it from therestricted environment's sys.modules dictionary).
And their equivalents with access to restricted standard I/O streams:
Unload the module object module.
A reentrant lock is a synchronization primitive that may beacquired multiple times by the same thread.
Internally, it usesthe concepts of ``owning thread'' and ``recursion level'' inaddition to the locked/unlocked state used by primitive locks.
Inthe locked state, some thread owns the lock; in the unlockedstate, no thread owns it.To lock the lock, a thread calls its acquire() method; thisreturns once the thread owns the lock.
To unlock the lock, athread calls its release() method.acquire()/release() call pairs may be nested; onlythe final release() (the release() of the outermostpair) resets the lock to unlocked and allows another thread blocked inacquire() to proceed.
Acquire a lock, blocking or non-blocking.When invoked without arguments: if this thread already ownsthe lock, increment the recursion level by one, and returnimmediately.
Otherwise, if another thread owns the lock,block until the lock is unlocked.
Once the lock is unlocked(not owned by any thread), then grab ownership, set therecursion level to one, and return.
If more than one threadis blocked waiting until the lock is unlocked, only one at atime will be able to grab ownership of the lock.
If a call without an argument would block, return falseimmediately; otherwise, do the same thing as when calledwithout arguments, and return true.
Release a lock, decrementing the recursion level.
If after thedecrement it is zero, reset the lock to unlocked (not owned by anythread), and if any other threads are blocked waiting for the lock tobecome unlocked, allow exactly one of them to proceed.
Objects with this interface are used to receive error and warninginformation from the XMLReader.
If you create an object thatimplements this interface, then register the object with yourXMLReader, the parser will call the methods in your object toreport all warnings and errors.
There are three levels of errorsavailable: warnings, (possibly) recoverable errors, and unrecoverableerrors.
All methods take a SAXParseException as the onlyparameter.
Errors and warnings may be converted to an exception byraising the passed-in exception object.
Called when the parser encounters a recoverable error.
If this methoddoes not raise an exception, parsing may continue, but further documentinformation should not be expected by the application.
Allowing theparser to continue may allow additional errors to be discovered in theinput document.
Called when the parser encounters an error it cannot recover from;parsing is expected to terminate when this method returns.
Called when the parser presents minor warning information to theapplication.
Parsing is expected to continue when this method returns,and document information will continue to be passed to the application.Raising an exception in this method will cause parsing to end.
The SAXException exception class supports the followingmethods:
Return a human-readable message describing the error condition.
Return an encapsulated exception object, or None.
scheduler instances have the following methods:
Schedule a new event.
The time argument should be a numeric typecompatible with the return value of the timefunc function passed to the constructor.
Events scheduled forthe same time will be executed in the order of theirpriority.Executing the event means executing
Schedule an event for delay more time units.
Other then therelative time, the other arguments, the effect and the return valueare the same as those for enterabs().
Remove the event from the queue.
If event is not an eventcurrently in the queue, this method will raise aRuntimeError.
Return true if the event queue is empty.
Run all scheduled events.
This function will wait (using the delayfunc function passed to the constructor)for the next event, then execute it and so on until there are no morescheduled events.Either action or delayfunc can raise an exception.
Ineither case, the scheduler will maintain a consistent state andpropagate the exception.
If an exception is raised by action,the event will not be attempted in future calls to run().If a sequence of events takes longer to run than the time availablebefore the next event, the scheduler will simply fall behind.
Noevents will be dropped; the calling code is responsible for canceling events which are no longer pertinent.
1.2.4.2 Editors with Python
If you use BBEdit to create your scripts you will want to tell it about the Python creator code so thatyou can simply double click on the saved file to launch it.
Launch BBEdit.
Select ``Preferences'' from the ``Edit'' menu.
Select ``File Types'' from the scrolling list.
click on the ``Add...'' button and navigate toPythonInterpreter in the main directory of theMacPython distribution; click ``open''.
Click on the ``Save'' button in the Preferences panel.
Python has a fairly complete implementation of the Open ScriptingArchitecure (OSA, also commonly referred to as AppleScript), allowingyou to control scriptable applications from your Python program,and with a fairly pythonic interface.
For a description of the various components of AppleScript and OSA, andto get an understanding of the architecture and terminology, you shouldread Apple's documentation.
The "Applescript Language Guide" explainsthe conceptual model and the terminology, and documents the standardsuite.
The "Open Scripting Architecture" document explains how to useOSA from an application programmers point of view.
In the Apple HelpViewer these book sare located in the Developer Documentation, CoreTechnologies section.As an example of scripting an application, the following piece ofAppleScript will get the name of the frontmost Finder windowand print it:
In Python, the following code fragment will do the same:
As distributed the Python library includes packages that implement thestandard suites, plus packages that interface to a small number ofcommon applications.To send AppleEvents to an application you must first create the Pythonpackage interfacing to the terminology of the application (whatScript Editor calls the "Dictionary").
This can be done fromwithin the PythonIDE or by running thegensuitemodule.py module as a standalone program from the commandline.The generated output is a package with a number of modules, one forevery suite used in the program plus an __init__ module to glueit all together.
The Python inheritance graph follows the AppleScriptinheritance graph, so if a programs dictionary specifies that itincludes support for the Standard Suite, but extends one or two verbswith extra arguments then the output suite will contain a moduleStandard_Suite that imports and re-exports everything fromStdSuites.Standard_Suite but overrides the methods that haveextra functionality.
AppleScript classes are also implemented as Pythonclasses, as are comparisons and all the other thingies.The mainPython class implementing the verbs also allows access to the propertiesand elements declared in the AppleScript class "application".
In thecurrent release that is as far as the object orientation goes, soin the example above we need to usef.get(f.window(1).name) instead of the more Pythonicf.window(1).name.get().If an AppleScript identifier is not a Python identifier the name ismangled according to a small number of rules:
spaces are replaced with underscores
other non-alphanumeric characters are replaced with_xx_ where xx is the hexadecimal character value
any Python reserved word gets an underscore appended
Python also has support for creating scriptable applicationsin Python, butThe following modules are relevant to MacPython AppleScript support:
Create a stub package from an OSA dictionary
Basic support for sending Apple Events
Conversion between Python variables and AppleEventdata containers.
Python representation of the Apple Event Object Model.
Support to act as an Open Scripting Architecture (OSA) server(``Apple Events'').
In addition, support modules have been pre-generated forFinder, Terminal, Explorer,Netscape, CodeWarrior, SystemEvents andStdSuites.
ScrolledWindow objects are ControlsWindow objects with the followingextra methods:
Create (or destroy) horizontal and vertical scrollbars.
The argumentsspecify which you want (default: both).
The scrollbars always haveminimum 0 and maximum 32767.
You must supply this method.
It should return a tuple (x,y) giving the current position of the scrollbars (between0 and 32767).
You can return None for either toindicate the whole document is visible in that direction.
Call this method when the document has changed.
It will callgetscrollbarvalues() and update the scrollbars.
Supplied by you and called after user interaction. which willbe 'x' or 'y', what will be '-','-', 'set', '++' or '+'.
For'set', value will contain the new scrollbar position.
Auxiliary method to help you calculate values to return fromgetscrollbarvalues().
You pass document minimum and maximum valueand topmost (leftmost) and bottommost (rightmost) visible values andit returns the correct number or None.
Takes care of dimming/highlighting scrollbars when a window becomesfrontmost.
If you override this method, call this one at the end ofyour method.
Moves scrollbars to the correct position.
Call this method initiallyif you override it.
Handles scrollbar interaction.
If you override it call this methodfirst, a nonzero return value indicates the hit was in the scrollbarsand has been handled.
9.2 Creating a source distribution: the sdist command
Subsections 4.1 Modifying Python's Search Path
Sometimes, the alternate installation schemes described insection3 just don't do what you want.
You mightwant to tweak just one or two directories while keeping everything underthe same base directory, or you might want to completely redefine theinstallation scheme.
In either case, you're creating a custominstallation scheme.You probably noticed the column of ``override options'' in the tablesdescribing the alternate installation schemes above.
Those options arehow you define a custom installation scheme.
These override options canbe relative, absolute, or explicitly defined in terms of one of theinstallation base directories.
Another Unix example: suppose your Python installation was built andinstalled with a prefix of /usr/local/python, so under a standard installation scripts will wind up in /usr/local/python/bin.
Ifyou want them in /usr/local/bin instead, you would supply thisabsolute directory for the --install-scripts option:
(This performs an installation using the ``prefix scheme,'' where theprefix is whatever your Python interpreter was installed with--/usr/local/python in this case.)If you maintain Python on Windows, you might want third-party modules tolive in a subdirectory of prefix, rather than right inprefix itself.
This is almost as easy as customizing thescript installation directory--you just have to remember that there aretwo types of modules to worry about, pure modules and non-pure modules(i.e., modules from a non-pure distribution).
The specified installation directories are relative toprefix.
Of course, you also have to ensure that thesedirectories are in Python's module search path, such as by putting a.pth file in prefix.
See section4.1to find out how to modify Python's search path.If you want to define an entire installation scheme, you just have tosupply all of the installation directory options.
The recommended wayto do this is to supply relative paths; for example, if you want tomaintain all Python module-related files under python in yourhome directory, and you want a separate directory for each platform thatyou use your home directory from, you might define the followinginstallation scheme:
or, equivalently,
Thus, you canput these options into your Distutils config file (seesection5):
or, equivalently,
Note that these two are not equivalent if you supply a differentinstallation base directory when you run the setup script.
would install pure modules to /tmp/python/lib in the firstcase, and to /tmp/lib in the second case.
(For the secondcase, you probably want to supply an installation base of/tmp/python.)You probably noticed the use of $HOME and $PLAT in thesample configuration file input.
When the Python interpreter executes an import statement, itsearches for both Python code and extension modules along a searchpath.
A default value for the path is configured into the Pythonbinary when the interpreter is built.
You can determine the path byimporting the sys module and printing the value ofsys.path.
The null string in sys. path represents the current workingdirectory.
The expected convention for locally installed packages is to put themin the .../site-packages/ directory, but you may want toinstall Python modules into some arbitrary directory.
For example,your site may have a convention of keeping all software related to theweb server under /www.
Add-on Python modules might then belongin /www/python, and in order to import them, this directorymust be added to sys. path.
There are several different ways toadd the directory.The most convenient way is to add a path configuration file to adirectory that's already on Python's path, usually to the.../site-packages/ directory.
Path configuration files have anextension of .pth, and each line must contain a single paththat will be appended to sys. path.
(Because the new paths areappended to sys.
path, modules in the added directories will notoverride standard modules.
This means you can't use this mechanismfor installing fixed versions of standard modules.)Paths can be absolute or relative, in which case they're relative tothe directory containing the .pth file.
site module documentation
for more information.A slightly less convenient way is to edit the site.py file inPython's standard library, and modify sys.
path. site.pyis automatically imported when the Python interpreter is executed,unless the -S switch is supplied to suppress thisbehaviour.
So you could simply edit site.py and add two lines to it:
However, if you reinstall the same major version of Python (perhapswhen upgrading from 2.2 to 2.2.2, for example) site.py will beoverwritten by the stock version.
You'd have to remember that it wasmodified and save a copy before doing the installation.There are two environment variables that can modify sys.
path.PYTHONHOME sets an alternate value for the prefix of thePython installation.
For example, if PYTHONHOME is set to"/www/python", the search path will be set to ['','/www/python/lib/python2.2/', '/www/python/lib/python2.3/plat-linux2',...].
The PYTHONPATH variable can be set to a list of paths thatwill be added to the beginning of sys.
path. For example, ifPYTHONPATH is set to "/www/python:/opt/py", the searchpath will begin with ['/www/python', '/opt/py'].
(Note thatdirectories must exist in order to be added to sys.
path; thesite module removes paths that don't exist.)Finally, sys.path is just a regular Python list, so any Pythonapplication can modify it by adding or removing entries.
Semaphores are often used to guard resources with limited capacity, forexample, a database server.
In any situation where the size of the resourcesize is fixed, you should use a bounded semaphore.
Before spawning anyworker threads, your main thread would initialize the semaphore:
Once spawned, worker threads call the semaphore's acquire and releasemethods when they need to connect to the server:
The use of a bounded semaphore reduces the chance that a programming errorwhich causes the semaphore to be released more than it's acquired will goundetected.
This is one of the oldest synchronization primitives in the history ofcomputer science, invented by the early Dutch computer scientistEdsger W. Dijkstra (he used P() and V() instead ofacquire() and release()).A semaphore manages an internal counter which is decremented by eachacquire() call and incremented by each release()call.
The counter can never go below zero; when acquire()finds that it is zero, it blocks, waiting until some other threadcalls release().
classSemaphore
)
The optional argument gives the initial value for the internalcounter; it defaults to 1.
Acquire a semaphore.When invoked without arguments: if the internal counter is larger thanzero on entry, decrement it by one and return immediately.
If it iszero on entry, block, waiting until some other thread has calledrelease() to make it larger than zero.
This is done withproper interlocking so that if multiple acquire() calls areblocked, release() will wake exactly one of them up.
Theimplementation may pick one at random, so the order in which blockedthreads are awakened should not be relied on.
If acall without an argument would block, return false immediately;otherwise, do the same thing as when called without arguments, andreturn true.
Release a semaphore,incrementing the internal counter by one.
When it was zero onentry and another thread is waiting for it to become largerthan zero again, wake up that thread. Subsections
The SequenceMatcher class has this constructor:
Optional argument isjunk must be None (the default) ora one-argument function that takes a sequence element and returnstrue if and only if the element is ``junk'' and should be ignored.Passing None for isjunk is equivalent to passinglambda x: 0; in other words, no elements are ignored.
Forexample, pass:
if you're comparing lines as sequences of characters, and don't wantto synch up on blanks or hard tabs.The optional arguments a and b are sequences to becompared; both default to empty strings.
The elements of bothsequences must be hashable.
SequenceMatcher objects have the following methods:
Set the two sequences to be compared.
SequenceMatcher computes and caches detailed information aboutthe second sequence, so if you want to compare one sequence againstmany sequences, use set_seq2() to set the commonly usedsequence once and call set_seq1() repeatedly, once for eachof the other sequences.
Set the first sequence to be compared.
The second sequence to becompared is not changed.
Set the second sequence to be compared.
The first sequence to becompared is not changed.
b[blo:bhi].If isjunk was omitted or None,get_longest_match() returns (i, j,k) such that
a[i:i+k] is equalto
b[j:j+k], where
and
i = i'
,and if
,
are also met.In other words, of all maximal matching blocks, return one thatstarts earliest in a, and of all those maximal matching blocksthat start earliest in a, return the one that starts earliestin b.
s = SequenceMatcher(None, " abcd", "abcd abcd") s.find_longest_match(0, 5, 0, 9)(0, 4, 5)
If isjunk was provided, first the longest matching block isdetermined as above, but with the additional restriction that nojunk element appears in the block.
Instead only the'abcd' can match, and matches the leftmost 'abcd' inthe second sequence:
If no blocks match, this returns (alo, blo, 0).
Return list of triples describing matching subsequences.Each triple is of the form (i, j, n), andmeans that
The triples are monotonicallyincreasing in i and j.The last triple is a dummy, and has the value (len(a),len(b), 0).
It is the only triple with n == 0.
Return list of 5-tuples describing how to turn a into b.Each tuple is of the form (tag, i1, i2,j1, j2).
The first tuple has
a[i1:i2] should bereplaced by
b[j1:j2].
a[i1:i2] should bedeleted.
Note that
inthis case.
b[j1:j2] should beinserted at
a[i1:i1].Note that
in thiscase.
%... (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2]))delete a[0:1] (q) b[0:0] ()equal a[1:3] (ab) b[0:2] (ab)replace a[3:4] (x) b[2:3] (y)equal a[4:6] (cd) b[3:5] (cd)insert a[6:6] () b[5:6] (f)
Return a measure of the sequences' similarity as a float in therange [0, 1].Where T is the total number of elements in both sequences, and M isthe number of matches, this is 2.0*M / T. Note that this is1.0 if the sequences are identical, and 0.0 if theyhave nothing in common.This is expensive to compute if get_matching_blocks() orget_opcodes() hasn't already been called, in which case youmay want to try quick_ratio() orreal_quick_ratio() first to get an upper bound.
)
Return an upper bound on ratio() relatively quickly.This isn't defined beyond that it is an upper bound onratio(), and is faster to compute.
)
Return an upper bound on ratio() very quickly.This isn't defined beyond that it is an upper bound onratio(), and is faster to compute than eitherratio() or quick_ratio().
The three methods that return the ratio of matching to total characterscan give different results due to differing levels of approximation,although quick_ratio() and real_quick_ratio() are alwaysat least as large as ratio():
s = SequenceMatcher(None, "abcd", "bcde") s.ratio()0.75 s.quick_ratio()0.75 s.real_quick_ratio()1.0
The following optional methods can be defined to further emulate sequenceobjects.
Immutable sequences methods should at most only define__getslice__(); mutable sequences might define all threemethods.
Deprecated since release 2.0.Support slice objects as parameters to the__getitem__() method.
Called to implement evaluation of
self[i:j].The returned object should be of the same type as self.
Notethat missing i or j in the slice expression are replacedby zero or sys.maxint, respectively.
If negative indexes areused in the slice, the length of the sequence is added to that index.If the instance does not implement the __len__() method, anAttributeError is raised.No guarantee is made that indexes adjusted this way are not stillnegative.
Called to implement assignment to
self[i:j].Same notes for i and j as for __getslice__().This method is deprecated.
Called to implement deletion of
Notice that these methods are only invoked when a single slice with asingle colon is used, and the slice method is available.
For sliceoperations involving extended slice notation, or in absence of theslice methods, __getitem__(), __setitem__() or__delitem__() is called with a slice object as argument.The following example demonstrate how to make your program or modulecompatible with earlier versions of Python (assuming that methods__getitem__(), __setitem__() and __delitem__()support slice objects as arguments):
Note the calls to max(); these are necessary because ofthe handling of negative indices before the__*slice__() methods are called.
When negative indexes areused, the __*item__() methods receive them as provided, butthe __*slice__() methods get a ``cooked'' form of the indexvalues.
For each negative index value, the length of the sequence isadded to the index before calling the method (which may still resultin a negative index); this is the customary handling of negativeindexes by the built-in sequence types, and the __*item__()methods are expected to do this as well.
However, since they shouldalready be doing that, negative indexes cannot be passed in; they mustbe constrained to the bounds of the sequence before being passed tothe __*item__() methods.Calling max(0, i) conveniently returns the proper value.
10.7 Buffer Object Structures
Structure used to hold pointers to the functions which an objectuses to implement the sequence protocol.
The following methods can be defined to implement containerobjects.
Containers usually are sequences (such as lists or tuples)or mappings (like dictionaries), but can represent other containers aswell.
The first set of methods is used either to emulate asequence or to emulate a mapping; the difference is that for asequence, the allowable keys should be the integers k for which0 = k N
where N is the length of thesequence, or slice objects, which define a range of items.
(For backwardscompatibility, the method __getslice__() (see below) can also bedefined to handle simple, but not extended slices.)
It is also recommendedthat mappings provide the methods keys(), values(),items(), has_key(), get(), clear(),setdefault(), iterkeys(), itervalues(),iteritems(), pop(), popitem(), copy(), and update() behaving similar to those forPython's standard dictionary objects.
The UserDict moduleprovides a DictMixin class to help create those methodsfrom a base set of __getitem__(), __setitem__(),__delitem__(), and keys().
Mutable sequences should providemethods append(), count(), index(),extend(), insert(), pop(), remove(), reverse()and sort(), like Python standard list objects. Finally,sequence types should implement addition (meaning concatenation) andmultiplication (meaning repetition) by defining the methods__add__(), __radd__(), __iadd__(),__mul__(), __rmul__() and __imul__() describedbelow; they should not define __coerce__() or other numericaloperators.
It is recommended that both mappings and sequencesimplement the __contains__() method to allow efficient use ofthe in operator; for mappings, in should be equivalentof has_key(); for sequences, it should search through thevalues.
It is further recommended that both mappings and sequencesimplement the __iter__() method to allow efficient iterationthrough the container; for mappings, __iter__() should bethe same as iterkeys(); for sequences, it should iteratethrough the values.
Should return the length of theobject, an integer = 0.
Also, an object that doesn't define a__nonzero__() method and whose __len__() methodreturns zero is considered to be false in a Boolean context.
Called to implement evaluation of
self[key].For sequence types, the accepted keys should be integers and sliceobjects.
Note thatthe special interpretation of negative indexes (if the class wishes toemulate a sequence type) is up to the __getitem__() method.If key is of an inappropriate type, TypeError may beraised; if of a value outside the set of indexes for the sequence(after any special interpretation of negative values),IndexError should be raised.
for loops expect that anIndexError will be raised for illegal indexes to allowproper detection of the end of the sequence.
Called to implement assignment to self[key].
Samenote as for __getitem__().
This should only be implementedfor mappings if the objects support changes to the values for keys, orif new keys can be added, or for sequences if elements can bereplaced.
The same exceptions should be raised for improperkey values as for the __getitem__() method.
Called to implement deletion of self[key].
This should only be implementedfor mappings if the objects support removal of keys, or for sequencesif elements can be removed from the sequence.
The same exceptionsshould be raised for improper key values as for the__getitem__() method.
This method is called when an iterator is required for a container.This method should return a new iterator object that can iterate overall the objects in the container.
For mappings, it should iterateover the keys of the container, and should also be made available asthe method iterkeys().Iterator objects also need to implement this method; they are requiredto return themselves.
For more information on iterator objects, see``Iterator Types'' in the
.
The membership test operators (in and not in) arenormally implemented as an iteration through a sequence.
However,container objects can supply the following special method with a moreefficient implementation, which also does not require the object be asequence.
Called to implement membership test operators.
Should return true ifitem is in self, false otherwise.
For mapping objects,this should consider the keys of the mapping rather than the values orthe key-item pairs.
Return 1 if the object provides sequence protocol, and0 otherwise.
Returns the number of objects in sequence o on success, and-1 on failure.
For objects that do not provide sequenceprotocol, this is equivalent to the Python expression"len(o)".
(
Return the result of repeating sequence object o counttimes, or NULL on failure.
This is the equivalent of the Pythonexpression "
Return the concatenation of o1 and o2 on success, andNULL on failure.
The operation is done in-placewhen o supports it.
Return the ith element of o, or NULL on failure.This is the equivalent of the Python expression"
o[i]".
Return the slice of sequence object o between i1 andi2, or NULL on failure.
o[i1:i2]".
Assign object v to the ith element of o.
Delete the ith element of object o.
Returns -1on failure.
This is the equivalent of the Python statement"del o[i]".
Assign the sequence object v to the slice in sequence objecto from i1 to i2.
This is the equivalent of thePython statement "
Delete the slice in sequence object o from i1 toi2.
This is the equivalent ofthe Python statement "del o[i1:i2]".
Return the number of occurrences of value in o, that is,return the number of keys for which
o[key] ==value .
This is equivalent tothe Python expression "
o.count(value)".
Determine if o contains value.
If an item in o isequal to value, return 1, otherwise return 0.On error, return -1.
This is equivalent to the Pythonexpression "
On error, return -1.
o.index(value)".
Return a list object with the same contents as the arbitrarysequence o.
The returned list is guaranteed to be new.
Return a tuple object with the same contents as the arbitrarysequence o.
If o is a tuple, a new reference will bereturned, otherwise a tuple will be constructed with the appropriatecontents.
PyObject*
Returns the sequence o as a tuple, unless it is already atuple or list, in which case o is returned.
UsePySequence_Fast_GET_ITEM() to access the members of theresult.
If the object is not asequence, raises TypeError with m as the messagetext.
Assumes thato was returned by PySequence_Fast() ando is not NULL.New in version 2.4.
Returns the length of o, assuming that o wasreturned by PySequence_Fast() and that o isnot NULL.
The size can also be gotten by callingPySequence_Size() on o, butPySequence_Fast_GET_SIZE() is faster because it canassume o is a list or tuple.
7.2.5.2 Complex Numbers as
Generic operations on sequence objects were discussed in the previouschapter; this section deals with the specific kinds of sequenceobjects that are intrinsic to the Python language. Subsections
This example compares two strings, considering blanks to be ``junk:''
s = SequenceMatcher(lambda x: x == " ",...
ratio() returns a float in [0, 1], measuring the similarityof the sequences.
As a rule of thumb, a ratio() value over0.6 means the sequences are close matches:
If you're only interested in where the sequences match,get_matching_blocks() is handy:
Note that the last tuple returned by get_matching_blocks() isalways a dummy, (len(a), len(b), 0), and this isthe only case in which the last tuple element (number of elementsmatched) is 0.If you want to know how to change the first sequence into the second,use get_opcodes():
for opcode in s.get_opcodes():... print "%6s a[%d:%d] b[%d:%d]" % opcodeequal a[0:8] b[0:8]insert a[8:8] b[8:17]equal a[8:14] b[17:23]equal a[14:29] b[23:38]
See also the function get_close_matches() in this module,which shows how simple code building on SequenceMatcher can beused to do useful work.
A ServerProxy instance has a method corresponding toeach remote procedure call accepted by the XML-RPC server. Callingthe method performs an RPC, dispatched by both name and argumentsignature (e.g. the same method name can be overloaded with multipleargument signatures).
The RPC finishes by returning a value, whichmay be either returned data in a conformant type or a Fault orProtocolError object indicating an error.Servers that support the XML introspection API support some commonmethods grouped under the reserved system member:
This method returns a list of strings, one for each (non-system)method supported by the XML-RPC server.
This method takes one parameter, the name of a method implemented bythe XML-RPC server.It returns an array of possible signatures for thismethod.
A signature is an array of types.
The first of these types isthe return type of the method, the rest are parameters.Because multiple signatures (ie. overloading) is permitted, this methodreturns a list of signatures rather than a singleton.Signatures themselves are restricted to the top level parametersexpected by a method.
For instance if a method expects one array ofstructs as a parameter, and it returns a string, its signature issimply "string, array".
If it expects three integers and returns astring, its signature is "string, int, int, int".If no signature is defined for the method, a non-array value isreturned.
In Python this means that the type of the returned value will be something other that list.
This method takes one parameter, the name of a method implemented bythe XML-RPC server.
It returns a documentation string describing theuse of that method. If no such string is available, an empty string isreturned.
The documentation string may contain HTML markup.
Introspection methods are currently supported by servers written inPHP, C and Microsoft .NET.
Partial introspection support is includedin recent updates to UserLand Frontier.
Introspection support forPerl, Python and Java is available at the XML-RPC Hacks page.
Instances of Set and ImmutableSet both providethe following operations:
Equivalent
cardinality of set s
test x for membership in s
test x for non-membership in s
test whether every element in s is in t
test whether every element in t is in s
new set with elements from both s and t
new set with elements common to s and t
new set with elements in s but not in t
new set with elements in either s or t but not both
new set with a shallow copy of s
Note, the non-operator versions of union(),intersection(), difference(), andsymmetric_difference() will accept any iterable as an argument.In contrast, their operator based counterparts require their arguments tobe sets.
This precludes error-prone constructions likeSet('abc') 'cbs' in favor of the more readableSet('abc').intersection('cbs').Changed in version 2.3.1:Formerly all arguments were required to be sets.
In addition, both Set and ImmutableSetsupport set to set comparisons.
For example, any two disjoint sets are not equal andare not subsets of each other, so all of the following returnFalse:
returns a hash value for s
The following table lists operations available in Setbut not found in ImmutableSet:
return set s with elements added from t
return set s keeping only elements also found in t
return set s after removing elements found in t
return set s with elements from s or tbut not both
add element x to set s
remove x from set s; raises KeyError if not present
removes x from set s if present
remove and return an arbitrary element from s; raisesKeyError if empty
remove all elements from set s
Note, the non-operator versions of union_update(),intersection_update(), difference_update(), andsymmetric_difference_update() will accept any iterable asan argument.Changed in version 2.3.1:Formerly all arguments were required to be sets.
Often, it's not possible to write down everything needed to build adistribution a priori: you may need to get some information fromthe user, or from the user's system, in order to proceed.
As long asthat information is fairly simple--a list of directories to search forC header files or libraries, for example--then providing aconfiguration file, setup.cfg, for users to edit is a cheap andeasy way to solicit it.
Configuration files also let you providedefault values for any command option, which the installer can thenoverride either on the command-line or by editing the config file.The setup configuration file is a useful middle-ground between the setupscript--which, ideally, would be opaque to installers
3.1
--and the command-line to the setupscript, which is outside of your control and entirely up to theinstaller.
In fact, setup.cfg (and any other Distutilsconfiguration files present on the target system) are processed afterthe contents of the setup script, but before the command-line.
This has several useful consequences:
installers can override some of what you put in setup.py byediting setup.cfg
you can provide non-standard defaults for options that are noteasily set in setup.py
installers can override anything in setup.cfg using thecommand-line options to setup.py
The basic syntax of the configuration file is simple:
. where command is one of the Distutils commands (e.g.build_py, install), and option is one ofthe options that command supports.
Any number of options can besupplied for each command, and any number of command sections can beincluded in the file.
Blank lines are ignored, as are comments, whichrun from a "#" character until the end of the line.
Longoption values can be split across multiple lines simply by indentingthe continuation lines.You can find out the list of options supported by a particular commandwith the universal --help option, e.g.
python setup.py --help build_ext[...]Options for 'build_ext' command:--build-lib (-b) directory for compiled extension modules--build-temp (-t) directory for temporary files (build by-products)--inplace (-i) ignore build-lib and put compiled extensions into thesource directory alongside your pure Python modules--include-dirs (-I) list of directories to search for header files--define (-D) C preprocessor macros to define--undef (-U) C preprocessor macros to undefine[...]
Note that an option spelled --foo-bar on the command-line is spelled foo_bar in configuration files.For example, say you want your extensions to be built``in-place''--that is, you have an extension pkg.ext, and youwant the compiled extension file (ext.so on Unix, say) to be putin the same source directory as your pure Python modulespkg.mod1 and pkg.mod2.
You can always use the--inplace option on the command-line to ensure this:
But this requires that you always specify the build_extcommand explicitly, and remember to provide --inplace.An easier way is to ``set and forget'' this option, by encoding it insetup.cfg, the configuration file for this distribution:
This will affect all builds of this module distribution, whether or notyou explcitly specify build_ext.
If you includesetup.cfg in your source distribution, it will also affectend-user builds--which is probably a bad idea for this option, sincealways building extensions in-place would break installation of themodule distribution.
In certain peculiar cases, though, modules arebuilt right in their installation directory, so this is conceivably auseful ability.
(Distributing extensions that expect to be built intheir installation directory is almost always a bad idea, though.)Another example: certain commands take a lot of options that don'tchange from run to run; for example, bdist_rpm needs to knoweverything required to generate a ``spec'' file for creating an RPMdistribution.
Some of this information comes from the setup script, andsome is automatically generated by the Distutils (such as the list offiles installed).
But some of it has to be supplied as options tobdist_rpm, which would be very tedious to do on thecommand-line for every run.
Hence, here is a snippet from theDistutils' own setup.cfg:
Note that the doc_files option is simply awhitespace-separated string split across multiple lines for readability.
More information on the configuration files isavailable in the manual for system administrators.
Footnotes ... installers
Thisideal probably won't be achieved until auto-configuration is fullysupported by the Distutils.
The setup script is the centre of all activity in building,distributing, and installing modules using the Distutils.
The mainpurpose of the setup script is to describe your module distribution tothe Distutils, so that the various commands that operate on your modulesdo the right thing.
(Keep in mind thatalthough the Distutils are included with Python 1.6 and later, they alsohave an independent existence so that Python 1.5.2 users can use them toinstall other module distributions.
The Distutils' own setup script,shown here, is used to install the package into Python 1.5.2.)
There are only two differences between this and the trivial one-filedistribution presented in section1.2: moremetadata, and the specification of pure Python modules by package,rather than by module.
For more information on the additional meta-data, seesection2.7.Note that any pathnames (files or directories) supplied in the setupscript should be written using the Unix convention, i.e.slash-separated.
The Distutils will take care of converting thisplatform-neutral representation into whatever is appropriate on yourcurrent platform before actually using the pathname.
This makes yoursetup script portable across operating systems, which of course is oneof the major goals of the Distutils.
In this spirit, all pathnames inthis document are slash-separated.
(Mac OS programmers should keep inmind that the absence of a leading slash indicates a relativepath, the opposite of the Mac OS convention with colons.)This, of course, only applies to pathnames given to Distutilsfunctions.
If you, for example, use standard Python functions such asglob.glob() or os.
listdir() to specify files, youshould be careful to write portable code instead of hardcoding pathseparators:
SGI IRIX Specific Services
The modules described in this chapter provide interfaces to featuresthat are unique to SGI's IRIX operating system (versions 4 and 5).
Audio functions on the SGI.
Constants used with the al module.
Interface to the CD-ROM on Silicon Graphics systems.
FORMS library for applications with graphical userinterfaces.
Constants used with the fl module.
Functions for loading stored FORMS designs.
Font Manager interface for SGI workstations.
Functions from the Silicon Graphics Graphics Library.
Constants used with the gl module.
Support for SGI imglib files.
Read and write image files in compressed JPEG format.
5.6 Binary arithmetic operations
The shifting operations have lower priority than the arithmeticoperations:
These operators accept plain or long integers as arguments.
Thearguments are converted to a common type.
They shift the firstargument to the left or right by the number of bits given by thesecond argument.A right shift by n bits is defined as division bypow(2,n).
A left shift by n bits is defined asmultiplication with pow(2,n); for plain integers there isno overflow check so in that case the operation drops bits and flipsthe sign if the result is not less than pow(2,31) in absolutevalue.
Negative shift counts raise a ValueErrorexception.
5.21 shlex
A shlex instance has the following methods:
Return a token.
If tokens have been stacked usingpush_token(), pop a token off the stack.
Otherwise, read onefrom the input stream.
If reading encounters an immediateend-of-file, self. eof is returned (the empty string ('')in non-POSIX mode, and None in POSIX mode).
(This is not ordinarily a useful entry point, and isdocumented here only for the sake of completeness.)
When shlex detects a source request (seesource below) this method is given the following token asargument, and expected to return a tuple consisting of a filename andan open file-like object.Normally, this method first strips any quotes off the argument.
Ifthe result is an absolute pathname, or there was no previous sourcerequest in effect, or the previous source was a stream(such as sys.stdin), the result is left alone.
Otherwise, if theresult is a relative pathname, the directory part of the name of thefile immediately before it on the source inclusion stack is prepended(this behavior is like the way the C preprocessor handles#include "file.h").The result of the manipulations is treated as a filename, and returnedas the first component of the tuple, withopen() called on it to yield the second component.
(Note:this is the reverse of the order of arguments in instance initialization!)This hook is exposed so that you can use it to implement directorysearch paths, addition of file extensions, and other namespace hacks.There is no corresponding `close' hook, but a shlex instance will callthe close() method of the sourced input stream when itreturns EOF.For more explicit control of source stacking, use thepush_source() and pop_source() methods.
push_source
Push an input source stream onto the input stack.
If the filenameargument is specified it will later be available for use in errormessages.
This is the same method used internally by thesourcehook method.New in version 2.1.
pop_source
This method generates an error message leader in the format of aUnix C compiler error label; the format is '"%s", line %d: ',where the "%s" is replaced with the name of the current sourcefile and the "%d" with the current input line number (theoptional arguments can be used to override these).This convenience is provided to encourage shlex users togenerate error messages in the standard, parseable format understoodby Emacs and other Unix tools.
Instances of shlex subclasses have some public instancevariables which either control lexical analysis or can be used fordebugging:
The string of characters that will accumulate into multi-charactertokens.
By default, includes all ASCII alphanumerics andunderscore.
Characters that will be considered whitespace and skipped.
Whitespacebounds tokens.
By default, includes space, tab, linefeed andcarriage-return.
Characters that will be considered as escape.
This will be only usedin POSIX mode, and includes just "" by default.New in version 2.3.
Characters that will be considered string quotes.
The tokenaccumulates until the same quote is encountered again (thus, differentquote types protect each other as in the shell.)
By default, includesASCII single and double quotes.
Characters in quotes that will interpret escape charactersdefined in escape.
This is only used in POSIX mode, andincludes just """ by default.New in version 2.3.
whitespace_split
If True, tokens will only be split in whitespaces.
This is useful, forexample, for parsing command lines with shlex, getting tokensin a similar way to shell arguments.New in version 2.3.
The name of the current input file, as initially set at classinstantiation time or stacked by later source requests.
It maybe useful to examine this when constructing error messages.
The input stream from which this shlex instance is readingcharacters.
This member is None by default.
If you assign a string to it,that string will be recognized as a lexical-level inclusion requestsimilar to the "source" keyword in various shells.
That is, theimmediately following token will opened as a filename and input takenfrom that stream until EOF, at which point the close()method of that stream will be called and the input source will againbecome the original input stream.
Source requests may be stacked anynumber of levels deep.
If this member is numeric and 1 or more, a shlexinstance will print verbose progress output on its behavior.
If youneed to use this, you can read the module source code to learn thedetails.
Source line number (count of newlines seen so far plus one).
The token buffer.
It may be useful to examine this when catchingexceptions.
Token used to determine end of file.
This will be set to the emptystring (''), in non-POSIX mode, and to None inPOSIX mode.New in version 2.3.
When operating in non-POSIX mode, shlex will try to obey tothe following rules.
Quote characters are not recognized within words(Do"Not"Separate is parsed as the single wordDo"Not"Separate);
Escape characters are not recognized;
Enclosing characters in quotes preserve the literal value ofall characters within the quotes;
Closing quotes separate words ("Do"Separate is parsedas "Do" and Separate);
If whitespace_split is False, any character notdeclared to be a word character, whitespace, or a quote will bereturned as a single-character token.
If it is True,shlex will only split words in whitespaces;
EOF is signaled with an empty string ('');
It's not possible to parse empty strings, even if quoted.
When operating in POSIX mode, shlex will try to obey to thefollowing parsing rules.
Quotes are stripped out, and do not separate words("Do"Not"Separate" is parsed as the single wordDoNotSeparate);
"'") preserve the literalvalue of all characters within the quotes;
Enclosing characters in quotes which are part ofescapedquotes (e.g. """) preserves the literalvalue of all characters within the quotes, with the exception ofthe characters mentioned in escape.
The escape charactersretain its special meaning only when followed by the quote in use,or the escape character itself.
Otherwise the escape characterwill be considered a normal character.
EOF is signaled with a None value;
Quoted empty strings ('') are allowed;
6.5 Inline Markup 6.4 Showing Code Examples
Examples of Python source code or interactive sessions arerepresented as verbatim environments.
This environmentis a standard part of LaTeX.
It is important to only usespaces for indentation in code examples since TeX drops tabsinstead of converting them to spaces.Representing an interactive session requires including the promptsand output along with the Python code.
No special markup isrequired for interactive sessions.
After the last line of inputor output presented, there should not be an ``unused'' primaryprompt; this is an example of what not to do:
Within the verbatim environment, characters special toLaTeX do not need to be specially marked in any way.
The entireexample will be presented in a monospaced font; no attempt at``pretty-printing'' is made, as the environment must work fornon-Python code and non-code displays.
There should be no blanklines at the top or bottom of any verbatim display.Longer displays of verbatim text may be included by storing theexample text in an external file containing only plain text.
Thefile may be included using the standard verbatiminputmacro; this macro takes a single argument naming the filecontaining the text.
For example, to include the Python sourcefile example.py, use:
Use of verbatiminput allows easier use of special editingmodes for the included file.
The file should be placed in thesame directory as the LaTeX files for the document.The Python Documentation Special Interest Group has discussed anumber of approaches to creating pretty-printed code displays andinteractive sessions; see the Doc-SIG area on the Python Web sitefor more information on this topic.
This example is the implementation of the copytree()function, described above, with the docstring omitted.
Itdemonstrates many of the other functions provided by this module.
1.2 A Simple Example
The setup script is usually quite simple, although since it's writtenin Python, there are no arbitrary limits to what you can do with it,though you should be careful about putting arbitrarily expensiveoperations in your setup script.
Unlike, say, Autoconf-style configurescripts, the setup script may be run multiple times in the course ofbuilding and installing your module distribution.
If all you want to do is distribute a module called foo,contained in a file foo.py, then your setup script can be assimple as this:
Some observations:
most information that you supply to the Distutils is supplied askeyword arguments to the setup() function
those keyword arguments fall into two categories: packagemetadata (name, version number) and information about what's in thepackage (a list of pure Python modules, in this case)
modules are specified by module name, not filename (the same willhold true for packages and extensions)
it's recommended that you supply a little more metadata, inparticular your name, email address and a URL for the project(see section2 for an example)
To create a source distribution for this module, you would create asetup script, setup.py, containing the above code, and run:
The archive file will be named foo-1.0.tar.gz (or.zip), and will unpack into a directory foo-1.0.If an end-user wishes to install your foo module, all she hasto do is download foo-1.0.tar.gz (or .zip), unpack it,and--from the foo-1.0 directory--run
which will ultimately copy foo.py to the appropriate directoryfor third-party modules in their Python installation.This simple example demonstrates some fundamental concepts of theDistutils.
First, both developers and installers have the same basicuser interface, i.e. the setup script.
The difference is whichDistutils commands they use: the sdist command isalmost exclusively for module developers, while install ismore often for installers (although most developers will want to installtheir own code occasionally).If you want to make things really easy for your users, you can createone or more built distributions for them.
For instance, if you arerunning on a Windows machine, and want to make things easy for otherWindows users, you can create an executable installer (the mostappropriate type of built distribution for this platform) with thebdist_wininst command.
will create an executable installer, foo-1.0.win32.exe, in thecurrent directory.Other useful built distribution formats are RPM, implemented by thebdist_rpm command, Solaris pkgtool(bdist_pkgtool), and HP-UX swinstall(bdist_sdux).
For example, the following command willcreate an RPM file called foo-1.0.noarch.rpm:
(The bdist_rpm command uses the rpm executable,therefore this has to be run on an RPM-based system such as Red HatLinux, SuSE Linux, or Mandrake Linux.)You can find out what distribution formats are available at any time byrunning
python setup.py bdist --help-formats
The SimpleXMLRPCServer class is based onSocketServer.TCPServer and provides a means of creatingsimple, stand alone XML-RPC servers.
Register a function that can respond to XML-RPC requests.
Ifname is given, it will be the method name associated withfunction, otherwise
Register an object which is used to expose method names which havenot been registered using register_function().
Ifinstance contains a _dispatch() method, it is calledwith the requested method name and the parameters from the request.
ItsAPI is def _dispatch(self, method, params) (note thaparams does not represent a variable argument list).
If it calls anunderlying function to perform its task, that function is called asfunc(*params), expanding the parameter list.The return value from _dispatch() is returned to the client asthe result.
Ifinstance does not have a _dispatch() method, it issearched for an attribute matching the name of the requested method;if the requested method name contains periods, each component of themethod name is searched for individually, with the effect that asimple hierarchical search is performed.
methodHelp and system. methodSignature.
Registers the XML-RPC multicall function system. multicall.
Example:
6.
Simple statements
Simple statements are comprised within a single logical line.Several simple statements may occur on a single line separatedby semicolons.
The syntax for simple statements is:
Subsections 6.1 Expression statements
Let's create an extension module called "spam" (the favorite foodof Monty Python fans...) and let's say we want to create a Pythoninterface to the C library function system().
This function takes a null-terminated character string as argument andreturns an integer.
We want this function to be callable from Pythonas follows:
h which pulls in the Python API (you can add a comment describing thepurpose of the module and a copyright notice if you like).
Warning:Since Python may define some pre-processor definitions which affectthe standard headers on some systems, you must includePython.h before any standard headers are included.
All user-visible symbols defined by Python.h have a prefix of"Py" or "PY", except those defined in standard header files.For convenience, and since they are used extensively by the Pythoninterpreter, "Python.h" includes a few standard header files:stdio.h, string.h, errno.h, andstdlib.h.
There is a straightforward translation from the argument list inPython (for example, the single expression "ls -l") to thearguments passed to the C function.
The C function always has twoarguments, conventionally named self and args.The self argument is only used when the C function implements abuilt-in method, not a function.
In the example, self willalways be a NULL pointer, since we are defining a function, not amethod.
Each item of the tuple corresponds to anargument in the call's argument list.
The arguments are Pythonobjects -- in order to do anything with them in our C function we haveto convert them to C values.
The function PyArg_ParseTuple()in the Python API checks the argument types and converts them to Cvalues.
It uses a template string to determine the required types ofthe arguments as well as the types of the C variables into which tostore the converted values.
More about this later.
PyArg_ParseTuple() returns true (nonzero) if all arguments havethe right type and its components have been stored in the variableswhose addresses are passed.
It returns false (zero) if an invalidargument list was passed.
In the latter case it also raises anappropriate exception so the calling function can returnNULL immediately (as we saw in the example).
Footnotes ...system().
Aninterface for this function already exists in the standard moduleos -- it was chosen as a simple and straightfoward example.
Extension modules are specified using the ext_modules option.package_dir has no effect on where extension source files arefound; it only affects the source for pure Python modules.
The simplest case, a single extension module in a single C source file, is:
root/setup.pyfoo.c
If the foo extension belongs in the root package, the setupscript for this could be
from distutils.core import setupsetup(name='foobar',version='1.0',ext_modules=[Extension('foo', ['foo.c'])],)
If the extension actually belongs in a package, say foopkg,then With exactly the same source tree layout, this extension can be put inthe foopkg package simply by changing the name of theextension:
from distutils.core import setupsetup(name='foobar',version='1.0',ext_modules=[Extension('foopkg.foo', ['foo.c'])],)
The type object for slice objects.
This is the same astypes.SliceType.
Returns true if ob is a slice object; ob must not beNULL.
Return a new slice object with the given values.
The start,stop, and step parameters are used as the values of theslice object attributes of the same names.
Any of the values may beNULL, in which case the None will be used for thecorresponding attribute.
Returns NULL if the new object couldnot be allocated.
Retrieve the start, stop and step indices from the slice objectslice, assuming a sequence of length length.
If you want to useslice objects in versions of Python prior to 2.3, you would probablydo well to incorporate the source of PySlice_GetIndicesEx,suitably renamed, in the source of your extension.
Usable replacement for PySlice_GetIndices.
Out of bounds indices are clipped ina manner consistent with the handling of normal slices.Returns 0 on success and -1 on error with exception set.
A slicing selects a range of items in a sequence object (e.g., astring, tuple or list).
Slicings may be used as expressions or astargets in assignment or del statements.
The syntax for a slicing:
There is ambiguity in the formal syntax here: anything that looks likean expression list also looks like a slice list, so any subscriptioncan be interpreted as a slicing.
Rather than further complicating thesyntax, this is disambiguated by defining that in this case theinterpretation as a subscription takes priority over theinterpretation as a slicing (this is the case if the slice listcontains no proper slice nor ellipses).
Similarly, when the slicelist has exactly one short slice and no trailing comma, theinterpretation as a simple slicing takes priority over that as anextended slicing.
The semantics for a simple slicing are as follows.
The primary mustevaluate to a sequence object.
The lower and upper bound expressions,if present, must evaluate to plain integers; defaults are zero and thesys.maxint, respectively.
If either bound is negative, thesequence's length is added to it.
The slicing now selects all itemswith index k such that
where iand j are the specified lower and upper bounds.
This may be anempty sequence.
The primarymust evaluate to a mapping object, and it is indexed with a key thatis constructed from the slice list, as follows.
If the slice listcontains at least one comma, the key is a tuple containing theconversion of the slice items; otherwise, the conversion of the loneslice item is the key.
The conversion of a slice item that is anexpression is that expression.
The conversion of an ellipsis sliceitem is the built-in Ellipsis object.
The conversion of aproper slice is a slice object (see section 3.2) whosestart, stop and step attributes are thevalues of the expressions given as lower bound, upper bound andstride, respectively, substituting None for missingexpressions.
By default, instances of both old and new-style classes have a dictionaryfor attribute storage.
This wastes space for objects having very few instancevariables.
The space consumption can become acute when creating large numbersof instances.The default can be overridden by defining __slots__ in a new-style classdefinition.
The __slots__ declaration takes a sequence of instancevariables and reserves just enough space in each instance to hold a valuefor each variable.
Space is saved because __dict__ is not created foreach instance.
This class variable can be assigned a string, iterable, or sequence of stringswith variable names used by instances.
If defined in a new-style class,__slots__ reserves space for the declared variablesand prevents the automatic creation of __dict__ and __weakref__for each instance.New in version 2.2.
Notes on using __slots__
Without a __dict__ variable, instances cannot be assigned newvariables not listed in the __slots__ definition.
Attempts to assignto an unlisted variable name raises AttributeError.
If dynamicassignment of new variables is desired, then add '__dict__' to thesequence of strings in the __slots__ declaration.
Changed in version 2.3:Previously, adding '__dict__' to the __slots__declaration would not enable the assignment of new attributes notspecifically listed in the sequence of instance variable names.
Without a __weakref__ variable for each instance, classesdefining __slots__ do not support weak references to its instances.If weak reference support is needed, then add '__weakref__' to thesequence of strings in the __slots__ declaration.
Changed in version 2.3:Previously, adding '__weakref__' to the __slots__declaration would not enable support for weak references.
__slots__ are implemented at the class level by creatingdescriptors (3.3.2) for each variable name.
As a result,class attributes cannot be used to set default values for instancevariables defined by __slots__; otherwise, the class attribute wouldoverwrite the descriptor assignment.
If a class defines a slot also defined in a base class, the instancevariable defined by the base class slot is inaccessible (except by retrievingits descriptor directly from the base class).
This renders the meaning of theprogram undefined.
In the future, a check may be added to prevent this.
The action of a __slots__ declaration is limited to the classwhere it is defined.
As a result, subclasses will have a __dict__unless they also define __slots__.
__slots__ do not work for classes derived from ``variable-length''built-in types such as long, str and tuple.
Any non-string iterable may be assigned to __slots__.Mappings may also be used; however, in the future, special meaning maybe assigned to the values corresponding to each key.
7.2.3 Example Here are four minimal example programs using the TCP/IP protocol: aserver that echoes all data that it receives back (servicing only oneclient), and a client using it.
Note that a server must perform thesequence socket(), bind(), listen(),accept() (possibly repeating the accept() to servicemore than one client), while a client only needs the sequencesocket(), connect().
Also note that the serverdoes not send()/recv() on the socket it is listening on but on the new socket returned byaccept().The first two examples support IPv4 only.
The next two examples are identical to the above two, but support bothIPv4 and IPv6.The server side will listen to the first address family available(it should listen to both instead).On most of IPv6-ready systems, IPv6 will take precedenceand the server may not accept IPv4 traffic.The client side will try to connect to the all addresses returned as a resultof the name resolution, and sends traffic to the first one connectedsuccessfully.
Socket objects have the following methods.
Except formakefile() these correspond to Unix system callsapplicable to sockets.
)
Accept a connection.The socket must be bound to an address and listening for connections.The return value is a pair (conn, address)where conn is a new socket object usable to send andreceive data on the connection, and address is the address boundto the socket on the other end of the connection.
Bind the socket to address.
The socket must not already be bound.(The format of address depends on the address family -- seeabove.)
Note:This method has historically accepted a pairof parameters for AF_INET addresses instead of only atuple.
This was never intentional and is no longer available inPython 2.0 and later.
Connect to a remote socket at address.(The format of address depends on the address family -- seeabove.)
Note:This method has historically accepted a pairof parameters for AF_INET addresses instead of only atuple.
Like connect(address), but return an error indicatorinstead of raising an exception for errors returned by the C-levelconnect() call (other problems, such as ``host not found,''can still raise exceptions).
The error indicator is 0 if theoperation succeeded, otherwise the value of the errnovariable.
This is useful to support, for example, asynchronous connects.
Note:This method has historically accepted a pair ofparameters for AF_INET addresses instead of only a tuple.This was never intentional and is no longer available in Python2.0 and later.
Return the socket's file descriptor (a small integer).
Unix doesnot have this limitation.
Return the remote address to which the socket is connected.
This isuseful to find out the port number of a remote IPv4/v6 socket, for instance.(The format of the address returned depends on the address family --see above.)
On some systems this function is not supported.
Return the socket's own address.
This is useful to find out the portnumber of an IPv4/v6 socket, for instance.(The format of the address returned depends on the address family --see above.)
Return the value of the given socket option (see the Unix man page
getsockopt(2)).
The needed symbolic constants(SO_* etc.) are defined in this module.
If buflenis absent, an integer option is assumed and its integer valueis returned by the function.
If buflen is present, it specifiesthe maximum length of the buffer used to receive the option in, andthis buffer is returned as a string.
It is up to the caller to decodethe contents of the buffer (see the optional built-in module
for a way to decode C structures encoded as strings).
Listen for connections made to the socket.
The backlog argumentspecifies the maximum number of queued connections and should be atleast 1; the maximum value is system-dependent (usually 5).
Return a file object associated with the socket.
(File objectsare described in 2.3.9, ``File Objects.'')The file object references a dup()ped version of thesocket file descriptor, so the file object and socket object may beclosed or garbage-collected independently.The socket should be in blocking mode.
The optional modeand bufsize arguments are interpreted the same way as by thebuilt-in file() function; see ``Built-in Functions''(section 2.1) for more information.
Receive data from the socket.
See the Unix manual page
recv(2) for the meaning of the optional argumentflags; it defaults to zero.
Receive data from the socket.
The return value is a pair(string, address) where string is a stringrepresenting the data received and address is the address of thesocket sending the data.
The optional flags argument has thesame meaning as for recv() above.(The format of address depends on the address family -- see above.)
Send data to the socket.
The socket must be connected to a remotesocket.
The optional flags argument has the same meaning as forrecv() above.
Unlike send(), this method continuesto send data from string until either all data has been sent oran error occurs.
None is returned on success.
On error, anexception is raised, and there is no way to determine how much data,if any, was successfully sent.
The socket should not be connected to aremote socket, since the destination socket is specified byaddress.
The optional flags argument has the samemeaning as for recv() above.
Return the number of bytes sent.(The format of address depends on the address family -- see above.)
Set blocking or non-blocking mode of the socket: if flag is 0,the socket is set to non-blocking, else to blocking mode.
Initiallyall sockets are in blocking mode.
In non-blocking mode, if arecv() call doesn't find any data, or if asend() call can't immediately dispose of the data, aerror exception is raised; in blocking mode, the callsblock until they can proceed.
s.setblocking(0) is equivalent to s.settimeout(0);s.setblocking(1) is equivalent to s.settimeout(None).
Set a timeout on blocking socket operations.
The value argumentcan be a nonnegative float expressing seconds, or None.If a float isgiven, subsequent socket operations will raise an timeoutexception if the timeout period value has elapsed before theoperation has completed.
Setting a timeout of None disablestimeouts on socket operations.
s.settimeout(0.0) is equivalent to s.setblocking(0);s.settimeout(None) is equivalent to s.setblocking(1).New in version 2.3.
)
Returns the timeout in floating seconds associated with socketoperations, or None if no timeout is set.
This reflectsthe last call to setblocking() or settimeout().New in version 2.3.
Some notes on socket blocking and timeouts: A socket object can be inone of three modes: blocking, non-blocking, or timeout.
Sockets arealways created in blocking mode.
In blocking mode, operations blockuntil complete.
In non-blocking mode, operations fail (with an errorthat is unfortunately system-dependent) if they cannot be completedimmediately.
In timeout mode, operations fail if they cannot becompleted within the timeout specified for the socket.
Thesetblocking() method is simply a shorthand for certainsettimeout() calls.Timeout mode internally sets the socket in non-blocking mode.
Theblocking and timeout modes are shared between file descriptors andsocket objects that refer to the same network endpoint.
Set the value of the given socket option (see the Unix manual page
setsockopt(2)).
The needed symbolic constants are defined inthe socket module (SO_* etc.).
The value can be aninteger or a string representing a buffer.
In the latter case it isup to the caller to ensure that the string contains the proper bits(see the optional built-in module
for a way to encode Cstructures as strings).
Shut down one or both halves of the connection.
If how isSHUT_RD, further receives are disallowed.
If how is SHUT_WR,further sends are disallowed.
If how is SHUT_RDWR, further sendsand receives are disallowed.
Note that there are no methods read() or write();use recv() and send() without flags argumentinstead.
Optional Operating System Services
The modules described in this chapter provide interfaces to operatingsystem features that are available on selected operating systems only.The interfaces are generally modeled after the Unix or Cinterfaces but they are available on some other systems as well(e.g.
Windows or NT).
Here's an overview:
Set handlers for asynchronous events.
Low-level networking interface.
Wait for I/O completion on multiple streams.
Create multiple threads of control within one interpreter.
Higher-level threading interface.
module.
A synchronized queue class.
Interface to memory-mapped files for Unix and Windows.
Generic interface to DBM-style database modules.
DBM-style interface to the BSD database library.
Guess which DBM-style module created a given database.
Interface to Berkeley DB database library
Portable implementation of the simple DBM interface.
Low-level interface to compression and decompressionroutines compatible with gzip.
Interfaces for gzip compression anddecompression using file objects.
Interface to compression and decompressionroutines compatible with bzip2.
Read and write ZIP-format archive files.
Read and write tar-format archive files.
GNU readline support for Python.
Python identifier completion for the GNU readline library.
3. Writing the Setup
6.1 Markup for the 6 Special Markup Constructs
The Python document classes define a lot of new environments andmacros.
This section contains the reference material for thesefacilities.
Documentation for ``standard'' LaTeX constructs isnot included here, though they are used in the Python documentation.
Subsections 6.1 Markup for the Preamble
6.1 Markup for the
The implementation adds a few special read-only attributes to severalobject types, where they are relevant.
Some of these are not reportedby the dir() built-in function.
A dictionary or other mapping object used to store anobject's (writable) attributes.
Deprecated since release 2.2.Use the built-in function dir() to get alist of an object's attributes.
This attribute is no longer available.
The class to which a class instance belongs.
The tuple of base classes of a class object.
A class can implement certain operations that are invoked by specialsyntax (such as arithmetic operations or subscripting and slicing) bydefining methods with special names.
This is Python's approach to operator overloading, allowingclasses to define their own behavior with respect to languageoperators.
For instance, if a class definesa method named __getitem__(), and x is an instance ofthis class, then x[i] is equivalent tox.__getitem__(i).
Except where mentioned, attempts to executean operation raise an exception when no appropriate method is defined.
When implementing a class that emulates any built-in type, it isimportant that the emulation only be implemented to the degree that itmakes sense for the object being modelled.
For example, somesequences may work well with retrieval of individual elements, butextracting a slice may not make sense.
(One example of this is theNodeList interface in the W3C's Document Object Model.)
SSL objects have the following methods.
Writes the string s to the on the object's SSL connection.The return value is the number of bytes written.
If n is provided, read n bytes from the SSL connection, otherwiseread until EOF.
The return value is a string of the bytes read.
Python comes with a number of codecs builtin, either implemented as Cfunctions, or with dictionaries as mapping tables.
The following tablelists the codecs by name, together with a few common aliases, and thelanguages for which the encoding is likely used.
Neither the list ofaliases nor the list of languages is meant to be exhaustive.
Noticethat spelling alternatives that only differ in case or use a hypheninstead of an underscore are also valid aliases.Many of the character sets support the same languages.
They vary inindividual characters (e.g. whether the EURO SIGN is supported ornot), and in the assignment of characters to code positions.
For theEuropean languages in particular, the following variants typicallyexist:
an ISO 8859 codeset
a Microsoft Windows code page, which is typically derived froma 8859 codeset, but replaces control characters with additionalgraphic characters
an IBM EBCDIC code page
an IBM PC code page, which is ASCII compatible
Aliases
Languages
English
Traditional Chinese
Hebrew
Western Europe
Greek
Baltic languages cp850
Western Europe
Central and Eastern Europe
Bulgarian, Byelorussian, Macedonian, Russian, Serbian
Turkish
Portuguese
Icelandic
Canadian
Arabic
Danish, Norwegian
Russian
Thai
Japanese
Korean
Western Europe
Greek
Turkish
Hebrew
Arabic
Baltic languages
Vietnamese
Simplified Chinese
Unified Chinese
Japanese, Korean, Simplified Chinese, Western Europe, Greek
West Europe
Esperanto, Maltese
Baltic languagues
Nordic languages
Celtic languages
Ukrainian
Icelandic
Kazakh
all languages
all languages (BMP only)
A number of codecs are specific to Python, so their codec names haveno meaning outside Python.
Some of them don't convert from Unicodestrings to byte strings, but instead use the property of the Pythoncodecs machinery that any bijective function with one argument can beconsidered as an encoding.For the codecs listed below, the result in the ``encoding'' directionis always a byte string.
The result of the ``decoding'' direction islisted as operand type in the table.
Operand type
Purpose
Convert operand to MIME base64
Compress the operand using bz2
Convert operand to hexadecimal representation, with twodigits per byte
Implements RFC 3490.New in version 2.3.See also
Windows only: Encode operand according to the ANSI codepage (CP_ACP)
Encoding of PalmOS 3.5
Implements RFC 3492.New in version 2.3.
Convert operand to MIME quoted printable
Produce a string that is suitable as raw Unicode literal inPython source code
Returns the Caesar-cypher encryption of the operand
Produce a string that is suitable as string literal inPython source code
Raise an exception for all conversion.
Can be used as thesystem encoding if no automatic coercion between byte andUnicode strings is desired.
Produce a string that is suitable as Unicode literal inPython source code
Return the internal represenation of the operand
Convert the operand using uuencode
Compress the operand using gzip
Subsections 2.1 Platform variations
As described in section1.2, building and installinga module distribution using the Distutils is usually one simple command:
On Unix, you'd run this command from a shell prompt; on Windows, youhave to open a command prompt window (``DOS box'') and do it there; onMac OS, things are a tad more complicated (see below).
You should always run the setup command from the distribution rootdirectory, i.e. the top-level subdirectory that the module sourcedistribution unpacks into.
For example, if you've just downloaded amodule source distribution foo-1.0.tar.gz onto aUnix system, the normal thing to do is:
On Windows, you'd probably download foo-1.0.zip.
If youdownloaded the archive file to C:Temp, then itwould unpack into C:Tempfoo-1.0;you can use either a archive manipulator with a graphical user interface(such as WinZip) or a command-line tool (such as unzip orpkunzip) to unpack the archive.
Then, open a command promptwindow (``DOS box''), and run:
Running setup.py install builds and installs all modules in onerun.
If you prefer to work incrementally--especially useful if youwant to customize the build process, or if things are going wrong--youcan use the setup script to do one thing at a time.
This isparticularly helpful when the build and install will be done bydifferent users--for example, you might want to build a module distributionand hand it off to a system administrator for installation (or do ityourself, with super-user privileges).For example, you can build everything in one step, and then installeverything in a second step, by invoking the setup script twice:
If you do this, you will notice that running the installcommand first runs the build command, which--in thiscase--quickly notices that it has nothing to do, since everything inthe build directory is up-to-date.You may not need this ability to break things down often if all you dois install modules downloaded off the 'net, but it's very handy for moreadvanced tasks.
If you get into distributing your own Python modulesand extensions, you'll run lots of individual Distutils commands ontheir own.
As implied above, the build command is responsible for puttingthe files to install into a build directory.
By default, this isbuild under the distribution root; if you're excessivelyconcerned with speed, or want to keep the source tree pristine, you canchange the build directory with the --build-base option.For example:
(Or you could do this permanently with a directive in your system orpersonal Distutils configuration file; seesection5.)
Normally, this isn't necessary.The default layout for the build tree is as follows:
--- build/ --- lib/or--- build/ --- lib.plat/temp.plat/
where plat expands to a brief description of the currentOS/hardware platform and Python version.
The first form, with just alib directory, is used for ``pure module distributions''--thatis, module distributions that include only pure Python modules.
If amodule distribution contains any extensions (modules written in C/C++),then the second form, with two plat directories, is used.
Inthat case, the temp.plat
directory holds temporaryfiles generated by the compile/link process that don't actually getinstalled.
In either case, the lib (orlib.plat
) directory contains all Python modules (purePython and extensions) that will be installed.In the future, more directories will be added to handle Python scripts,documentation, binary executables, and whatever else is needed to handlethe job of installing Python modules and applications.
After the build command runs (whether you run it explicitly,or the install command does it for you), the work of theinstall command is relatively simple: all it has to do is copyeverything under build/lib (or build/lib.plat
)to your chosen installation directory.If you don't choose an installation directory--i.e., if you just runsetup.py install--then the install command installs tothe standard location for third-party Python modules.
This locationvaries by platform and by how you built/installed Python itself.
OnUnix and Mac OS, it also depends on whether the module distributionbeing installed is pure Python or contains extensions (``non-pure''):
Platform
Standard installation location
Default value
Unix (non-pure)
Mac OS (non-pure)
Most Linux distributions include Python as a standard part ofthe system, so prefix and exec-prefix are usuallyboth /usr on Linux.
If you build Python yourself on Linux (orany Unix-like system), the default prefix andexec-prefix are /usr/local.
The default installation directory on Windows wasC:Program FilesPython underPython 1.6a1, 1.5.2, and earlier.
prefix and exec-prefix stand for the directoriesthat Python is installed to, and where it finds its libraries atrun-time.
They are always the same under Windows and Mac OS, and veryoften the same under Unix.
You can find out what your Pythoninstallation uses for prefix and exec-prefix byrunning Python in interactive mode and typing a few simple commands.Under Unix, just type python at the shell prompt.
UnderWindows, choose Start Programs Python2.4 Python (command line).
Once the interpreter is started, you type Python code at theprompt.
For example, on my Linux system, I type the three Pythonstatements shown below, and get the output as shown, to find out myprefix and exec-prefix:
If you don't want to install modules to the standard location, or if youdon't have permission to write there, then you need to read aboutalternate installations in section3.
If you want tocustomize your installation directories more heavily, seesection4 on custom installations.
4.2 Deprecation of String
All standard Python exceptions are available as global variables whosenames are "PyExc_" followed by the Python exception name.
Thesehave the type PyObject*; they are all class objects.
Forcompleteness, here are all the variables:
C Name
Python Name
This is a base class for other standard exceptions.
This is the same as weakref.ReferenceError.
Only defined on Windows; protect code that uses this by testing thatthe preprocessor macro MS_WINDOWS is defined.
The StreamReader class is a subclass of Codec anddefines the following methods which every stream reader must define inorder to be compatible to the Python codec registry.
classStreamReader
Constructor for a StreamReader instance.
All stream readers must provide this constructor interface.
They arefree to add additional keyword arguments, but only the ones definedhere are used by the Python codec registry.
stream must be a file-like object open for reading (binary)data.The StreamReader may implement different error handlingschemes by providing the errors keyword argument.
Theseparameters are defined:
Ignore the character and continue with the next.
'replace' Replace with a suitable replacement character.
The errors argument will be assigned to an attribute of thesame name.
Assigning to this attribute makes it possible to switchbetween different error handling strategies during the lifetimeof the StreamReader object.The set of allowed values for the errors argument canbe extended with register_error().
Decodes data from the stream and returns the resulting object.
chars indicates the number of characters to read from thestream. read() will never return more than charscharacters, but it might return less, if there are not enoughcharacters available.
size indicates the approximate maximum number of bytes to readfrom the stream for decoding purposes.
The decoder can modify thissetting as appropriate.
Changed in version 2.4:chars argument added.
Read one line from the input stream and return thedecoded data.
size, if given, is passed as size argument to the stream'sreadline() method.If keepends is false lineends will be stripped from thelines returned.
Changed in version 2.4:keepends argument added.
Read all lines available on the input stream and return them as listof lines.Line breaks are implemented using the codec's decoder method and areincluded in the list entries if keepends is true.
sizehint, if given, is passed as size argument to thestream's read() method.
Resets the codec buffers used for keeping state.Note that no stream repositioning should take place.
This method isprimarily intended to be able to recover from decoding errors.
In addition to the above methods, the StreamReader must alsoinherit all other methods and attribute from the underlying stream.The next two base classes are included for convenience.
They are notneeded by the codec registry, but may provide useful in practice.
The StreamReaderWriter allows wrapping streams which work inboth read and write modes.The design is such that one can use the factory functions returned bythe lookup() function to construct the instance.
classStreamReaderWriter
Creates a StreamReaderWriter instance.
StreamReaderWriter instances define the combined interfaces ofStreamReader and StreamWriter classes.
They inheritall other methods and attribute from the underlying stream.
classStreamRecoder
Creates a StreamRecoder instance which implements a two-wayconversion: encode and decode work on the frontend (theinput to read() and output of write()) whileReader and Writer work on the backend (reading andwriting to the stream).You can use these objects to do transparent direct recodings frome.g.
Latin-1 to UTF-8 and back.
stream must be a file-like object.
encode, decode must adhere to the Codecinterface, Reader, Writer must be factory functions orclasses providing objects of the StreamReader andStreamWriter interface respectively.
encode and decode are needed for the frontendtranslation, Reader and Writer for the backendtranslation.
StreamRecoder instances define the combined interfaces ofStreamReader and StreamWriter classes.
They inheritall other methods and attribute from the underlying stream.
The StreamWriter class is a subclass of Codec anddefines the following methods which every stream writer must define inorder to be compatible to the Python codec registry.
classStreamWriter
Constructor for a StreamWriter instance.
All stream writers must provide this constructor interface.
stream must be a file-like object open for writing (binary)data.The StreamWriter may implement different error handlingschemes by providing the errors keyword argument.
Theseparameters are predefined:
'strict' Raise ValueError (or a subclass);this is the default.
'ignore'
'replace' Replace with a suitable replacement character
'xmlcharrefreplace' Replace with the appropriate XMLcharacter reference
'backslashreplace' Replace with backslashed escape sequences.
Assigning to this attribute makes it possible to switchbetween different error handling strategies during the lifetimeof the StreamWriter object.The set of allowed values for the errors argument canbe extended with register_error().
Writes the object's contents encoded to the stream.
Writes the concatenated list of strings to the stream (possibly byreusing the write() method).
Flushes and resets the codec buffers used for keeping state.Calling this method should ensure that the data on the output is putinto a clean state, that allows appending of new fresh data withouthaving to rescan the whole stream to recover state.
In addition to the above methods, the StreamWriter must alsoinherit all other methods and attribute from the underlying stream.
Multiple adjacent string literals (delimited by whitespace), possiblyusing different quoting conventions, are allowed, and their meaning isthe same as their concatenation.
Thus, "hello" 'world' isequivalent to "helloworld".
This feature can be used to reducethe number of backslashes needed, to split long strings convenientlyacross long lines, or even to add comments to parts of strings, forexample:
re.compile("[A-Za-z_]" # letter or underscore"[A-Za-z0-9_]*" # letter, digit or underscore)
Note that this feature is defined at the syntactical level, butimplemented at compile time.
The `+' operator must be used toconcatenate string expressions at run time.
Also note that literalconcatenation can use different quoting styles for each component(even mixing raw strings and triple quoted strings).
A string conversion is an expression list enclosed in reverse (a.k.a.backward) quotes:
The built-in function repr() performs exactly the sameconversion in its argument as enclosing it in parentheses and reversequotes does.
The built-in function str() performs asimilar but more user-friendly conversion.
These are the string methods which both 8-bit strings and Unicodeobjects support:
Return a copy of the string with only its first character capitalized.For 8-bit strings, this method is locale-dependent.
Return centered in a string of length width.
Padding is doneusing the specified fillchar (default is a space).Changed in version 2.4:Support for the fillchar argument.
Return the number of occurrences of substring sub in stringS[start:end].
Optional arguments start andend are interpreted as in slice notation.
The default is'strict', meaning that encoding errors raiseUnicodeError.
Other possible values are 'ignore','replace' and any other name registered viacodecs.
register_error.New in version 2.2.
Changed in version 2.3:Support for other error handling schemes added.
Return an encoded version of the string.
Default encoding is the currentdefault string encoding. errors may be given to set a differenterror handling scheme.
The default for errors is'strict', meaning that encoding errors raise aUnicodeError.
Other possible values are 'ignore','replace', 'xmlcharrefreplace', 'backslashreplace'and any other name registered via codecs.
register_error.For a list of possible encodings, see section4.9.2.New in version 2.0.
Changed in version 2.3:Support for 'xmlcharrefreplace' and'backslashreplace' and other error handling schemes added.
Return True if the string ends with the specified suffix,otherwise return False.
With optional start, test beginning atthat position.
With optional end, stop comparing at that position.
Return a copy of the string where all tab characters are expandedusing spaces.
If tabsize is not given, a tab size of 8characters is assumed.
Return the lowest index in the string where substring sub isfound, such that sub is contained in the range [start,end).
Optional arguments start and end areinterpreted as in slice notation.
Return -1 if sub isnot found.
Like find(), but raise ValueError when thesubstring is not found.
Return true if all characters in the string are alphanumeric and thereis at least one character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return true if all characters in the string are alphabetic and thereis at least one character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return true if all characters in the string are digits and thereis at least one character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return true if all cased characters in the string are lowercase andthere is at least one cased character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return true if there are only whitespace characters in the string andthere is at least one character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return true if the string is a titlecased string and there is at least onecharacter, for example uppercase characters may only follow uncasedcharacters and lowercase characters only cased ones.
Return falseotherwise.For 8-bit strings, this method is locale-dependent.
Return true if all cased characters in the string are uppercase andthere is at least one cased character, false otherwise.For 8-bit strings, this method is locale-dependent.
Return a string which is the concatenation of the strings in thesequence seq.
The separator between elements is the stringproviding this method.
Return the string left justified in a string of length width.Padding is done using the specified fillchar (default is aspace).
The original string is returned ifwidth is less than len(s).Changed in version 2.4:Support for the fillchar argument.
Return a copy of the string converted to lowercase.For 8-bit strings, this method is locale-dependent.
Return a copy of the string with leading characters removed.
Ifchars is omitted or None, whitespace characters areremoved.
If given and not None, chars must be a string;the characters in the string will be stripped from the beginning ofthe string this method is called on.Changed in version 2.2.2:Support for the chars argument.
Return a copy of the string with all occurrences of substringold replaced by new.
If the optional argumentcount is given, only the first count occurrences arereplaced.
Return the highest index in the string where substring sub isfound, such that sub is contained within s[start,end].
Optionalarguments start and end are interpreted as in slicenotation.
Return -1 on failure.
Like rfind() but raises ValueError when thesubstring sub is not found.
)
Return a list of the words in the string, using sep as thedelimiter string.
If maxsplit is given, at most maxsplitsplits are done, the rightmost ones.
If sep is not specifiedor None, any whitespace string is a separator.New in version 2.4.
Return a copy of the string with trailing characters removed.
If given and not None, chars must be a string;the characters in the string will be stripped from the end of thestring this method is called on.Changed in version 2.2.2:Support for the chars argument.
Return a list of the words in the string, using sep as thedelimiter string. If maxsplit is given, at most maxsplitsplits are done.
(thus, the list will have at most
maxsplit+1elements). If maxsplit is not specified or is zero, then thereis no limit on the number of splits (all possible splits are made).Consecutive delimiters are not grouped together and aredeemed to delimit empty strings (for example, "'1,,2'.split(',')"returns "['1', '', '2']").
The sep argument may consist ofmultiple characters (for example, "'1, 2, 3'.split(', ')" returns"['1', '2', '3']").
Splitting an empty string with a specifiedseparator returns an empty list.If sep is not specified or is None, a different splittingalgorithm is applied.
Splitting anempty string returns "['']".
Return a list of the lines in the string, breaking at lineboundaries.
Line breaks are not included in the resulting list unlesskeepends is given and true.
Return True if string starts with the prefix, otherwisereturn False.
With optional start, test string beginning atthat position.
With optional end, stop comparing string at thatposition.
Return a copy of the string with leading and trailing charactersremoved.
If chars is omitted or None, whitespacecharacters are removed.
If given and not None, charsmust be a string; the characters in the string will be stripped fromthe both ends of the string this method is called on.Changed in version 2.2.2:Support for the chars argument.
Return a copy of the string with uppercase characters converted tolowercase and vice versa.For 8-bit strings, this method is locale-dependent.
Return a titlecased version of the string: words start with uppercasecharacters, all remaining cased characters are lowercase.For 8-bit strings, this method is locale-dependent.
)
Characters mapped to Noneare deleted.
Note, a more flexible approach is to create a customcharacter mapping codec using the
module (seeencodings. cp1251 for an example).
Return a copy of the string converted to uppercase.For 8-bit strings, this method is locale-dependent.
Return the numeric string left filled with zeros in a stringof length width.
The original string is returned ifwidth is less than len(s).New in version 2.2.2.
These functions raise TypeError when expecting a stringparameter and are called with a non-string parameter.
This subtype of PyObject represents a Python string object.
This instance of PyTypeObject represents the Python stringtype; it is the same object as types.TypeType in the Pythonlayer.
Returns true if the object o is a string object or an instanceof a subtype of the string type.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if the object o is a string object, but not aninstance of a subtype of the string type.New in version 2.2.
Returns a new string object with the value v on success, andNULL on failure.
The parameter v must not be NULL; itwill not be checked.
Returns a new string object with the value v and lengthlen on success, and NULL on failure.
If v isNULL, the contents of the string are uninitialized.
Takes a C printf()-style format string and avariable number of arguments, calculates the size of the resultingPython string and returns a string with the values formatted intoit.
The variable arguments must be C types and must correspondexactly to the format characters in the format string.
Thefollowing format characters are allowed:
Format Characters
Type
Comment
The literal % character.
A single character, represented as an C int.
Exactly equivalent to printf("%d").
Exactly equivalent to printf("%ld").
Exactly equivalent to printf("%i").
Exactly equivalent to printf("%x").
A null-terminated C character array.
The hex representation of a C pointer.Mostly equivalent to printf("%p") except that it isguaranteed to start with the literal 0x regardless ofwhat the platform's printf yields.
Identical to PyString_FromFormat() except that it takesexactly two arguments.
Returns the length of the string in string object string.
Macro form of PyString_Size() but without errorchecking.
Returns a NUL-terminated representation of the contents ofstring.
The pointer refers to the internal buffer ofstring, not a copy.
The data must not be modified in any way,unless the string was just created usingPyString_FromStringAndSize(NULL, size).It must not be deallocated.
If string is a Unicode object,this function computes the default encoding of string andoperates on that.
If string is not a string object at all,PyString_AsString() returns NULL and raisesTypeError.
Macro form of PyString_AsString() but without errorchecking.
Only string objects are supported; no Unicode objectsshould be passed.
Returns a NUL-terminated representation of the contents of theobject obj through the output variables buffer andlength.The function accepts both string and Unicode objects as input.
ForUnicode objects it returns the default encoded version of theobject.
If length is NULL, the resulting buffer may notcontain NUL characters; if it does, the function returns -1and a TypeError is raised.The buffer refers to an internal string buffer of obj, not acopy.
The data must not be modified in any way, unless the stringwas just created using PyString_FromStringAndSize(NULL,size).
It must not be deallocated.
If string is aUnicode object, this function computes the default encoding ofstring and operates on that.
If string is not a stringobject at all, PyString_AsString() returns NULL andraises TypeError.
Creates a new string object in *string containing the contentsof newpart appended to string; the caller will own thenew reference.
The reference to the old value of string willbe stolen.
If the new string cannot be created, the old referenceto string will still be discarded and the value of*string will be set to NULL; the appropriate exception willbe set.
Creates a new string object in *string containing the contentsof newpart appended to string.
This version decrementsthe reference count of newpart.
A way to resize a string object even though it is ``immutable''.Only use this to build up a brand new string object; don't use thisif the string may already be known in other parts of the code.
Itis an error to call this function if the refcount on the input stringobject is not one.Pass the address of an existing string object as an lvalue (it maybe written into), and the new size desired.
On success, *stringholds the resized string object and 0 is returned; the address in*string may differ from its input value.
If thereallocation fails, the original string object at *string isdeallocated, *string is set to NULL, a memory exception is set,and -1 is returned.
Returns a new string object from format and args.Analogous to
.
The argsargument must be a tuple.
Intern the argument *string in place.
The argument must bethe address of a pointer variable pointing to a Python stringobject.
If there is an existing interned string that is the same as*string, it sets *string to it (decrementing thereference count of the old string object and incrementing thereference count of the interned string object), otherwise it leaves*string alone and interns it (incrementing its referencecount).
(Clarification: even though there is a lot of talk aboutreference counts, think of this function as reference-count-neutral;you own the object after the call if and only if you owned it beforethe call.)
A combination of PyString_FromString() andPyString_InternInPlace(), returning either a new stringobject that has been interned, or a new (``owned'') reference to anearlier interned string object with the same value.
Creates an object by decoding size bytes of the encodedbuffer s using the codec registered forencoding. encoding and errors have the samemeaning as the parameters of the same name in theunicode() built-in function.
Returns NULL ifan exception was raised by the codec.
Decodes a string object by passing it to the codec registered forencoding and returns the result as Pythonobject. encoding and errors have the same meaning as theparameters of the same name in the string encode() method.The codec to be used is looked up using the Python codec registry.Returns NULL if an exception was raised by the codec.
Most of the small changes to the LaTeX markup have been madewith an eye to divorcing the markup from the presentation, makingboth a bit more maintainable.
Over the course of 1998, a largenumber of changes were made with exactly this in mind; previously,changes had been made but in a less systematic manner and withmore concern for not needing to update the existing content.
Theresult has been a highly structured and semantically loaded markuplanguage implemented in LaTeX.
With almost no basic TeX orLaTeX markup in use, however, the markup syntax is about theonly evidence of LaTeX in the actual document sources.One side effect of this is that while we've been able to usestandard ``engines'' for manipulating the documents, such asLaTeX and LaTeX2HTML, most of the actual transformations havebeen created specifically for Python.
The LaTeX documentclasses and LaTeX2HTML support are both complete implementationsof the specific markup designed for these documents.Combining highly customized markup with the somewhat esotericsystems used to process the documents leads us to ask somequestions: Can we do this more easily? and, Can we do thisbetter?
After a great deal of discussion with the community, wehave determined that actively pursuing modern structureddocumentation systems is worth some investment of time.There appear to be two real contenders in this arena: the StandardGeneral Markup Language (SGML), and the Extensible Markup Language(XML).
Both of these standards have advantages and disadvantages,and many advantages are shared.SGML offers advantages which may appeal most to authors,especially those using ordinary text editors.
There are alsoadditional abilities to define content models.
A number ofhigh-quality tools with demonstrated maturity are available, butmost are not free; for those which are, portability issues remaina problem.The advantages of XML include the availability of a large numberof evolving tools.
Unfortunately, many of the associatedstandards are still evolving, and the tools will have to followalong.
This means that developing a robust tool set that usesmore than the basic XML 1.0 recommendation is not possible in theshort term.
The promised availability of a wide variety ofhigh-quality tools which support some of the most importantrelated standards is not immediate.
XXX Eventual migration to XML.The documentation will be moved to XML in the future, and toolsare being written which will convert the documentation from thecurrent format to something close to a finished version, to theextent that the desired information is already present in thedocumentation.
3 Style Guide The Python documentation should follow the
wherever possible.
This particularstyle guide was selected mostly because it seems reasonable and iseasy to get online.Topics which are not covered in the Apple's style guide will bediscussed in this document if necessary.Many special names are used in the Python documentation, includingthe names of operating systems, programming languages, standardsbodies, and the like.
Many of these were assigned LaTeX macrosat some point in the distant past, and these macros lived on longpast their usefulness.
For ``central processing unit.'' Many style guides say thisshould be spelled out on the first use (and if you must use it,do so!).
For the Python documentation, this abbreviation shouldbe avoided since there's no reasonable way to predict which occurancewill be the first seen by the reader.
It is better to use theword ``processor'' instead.
The name assigned to a particular group of standards.
This isalways uppercase.
Use the macro POSIX to represent thisname.
The name of our favorite programming language is alwayscapitalized.
The name of a character set and matching encoding.
This isalways written capitalized.
The name of the operating system developed at ATT Bell Labsin the early 1970s.
Use the macro UNIX to use thisname.
String Services
The modules described in this chapter provide a wide range of stringmanipulation operations.
Common string operations.
Regular expression search and match operations with aPerl-style expression syntax.
Interpret strings as packed binary data.
Helpers for computing differences between objects.
General floating point formatting functions.
Read and write strings as if they were files.
Faster version of StringIO, but notsubclassable.
Text wrapping and filling
Encode and decode data and streams.
Internationalized Domain Names implementation
String preparation, as per RFC 3453
Information on the methods of string objects can be found insection2.3.6, ``String Methods.''
The use of dynamic dispatching by Repr.repr1() allowssubclasses of Repr to add support for additional built-inobject types or to modify the handling of types already supported.This example shows how special support for file objects could beadded:
A subscription selects an item of a sequence (string, tuple or list)or mapping (dictionary) object:
(The expression list is a tuple except if it has exactly oneitem.)If the primary is a sequence, the expression (list) must evaluate to aplain integer.
If this value is negative, the length of the sequenceis added to it (so that, e.g., x[-1] selects the last item ofx.)
The resulting value must be a nonnegative integer lessthan the number of items in the sequence, and the subscription selectsthe item whose index is that value (counting from zero).A string's items are characters.
A character is not a separate datatype but a string of exactly one character.
The following table summarizes the operatorprecedences
in Python, from lowestprecedence (least binding) to highest precedence (most binding).Operators in the same box have the same precedence.
Unless the syntaxis explicitly given, operators are binary.
Operator
Lambda expression
Boolean OR
Boolean AND
Boolean NOT
Membership tests
Identity tests
Comparisons
Bitwise OR
Bitwise XOR
Bitwise AND
Shifts
Addition and subtraction
Multiplication, division, remainder
Positive, negative
Bitwise not
Attribute reference
Subscription
Slicing
Function call (expressions..
Binding or tuple display
List display
Dictionary display
String conversion
The modules described in this chapter provide interfaces to featuresthat are unique to SunOS 5 (also known as Solaris version 2). Subsections
Python's support for detecting and collecting garbage which involvescircular references requires support from object types which are``containers'' for other objects which may also be containers.
Typeswhich do not store references to other objects, or which only storereferences to atomic types (such as numbers or strings), do not needto provide any explicit support for garbage collection.An example showing the use of these interfaces can be found in``Supporting the CycleCollector'' in
Extending and Embedding the PythonInterpreter
.To create a container type, the tp_flags field of the typeobject must include the Py_TPFLAGS_HAVE_GC and provide animplementation of the tp_traverse handler.
If instances of thetype are mutable, a tp_clear implementation must also beprovided.
Objects with a type with this flag set must conform with the rulesdocumented here.
For convenience these objects will be referred toas container objects.
Constructors for container types must conform to two rules:
The memory for the object must be allocated usingPyObject_GC_New() or PyObject_GC_VarNew().
Once all the fields which may contain references to othercontainers are initialized, it must callPyObject_GC_Track().
Analogous to PyObject_New() but for container objects withthe Py_TPFLAGS_HAVE_GC flag set.
Analogous to PyObject_NewVar() but for container objectswith the Py_TPFLAGS_HAVE_GC flag set.
Resize an object allocated by PyObject_NewVar().
Returnsthe resized object or NULL on failure.
Adds the object op to the set of container objects tracked bythe collector.
The collector can run at unexpected times so objectsmust be valid while being tracked.
This should be called once allthe fields followed by the tp_traverse handler become valid,usually near the end of the constructor.
A macro version of PyObject_GC_Track().
It should not beused for extension modules.
Similarly, the deallocator for the object must conform to a similarpair of rules:
Before fields which refer to other containers are invalidated,PyObject_GC_UnTrack() must be called.
The object's memory must be deallocated usingPyObject_GC_Del().
Releases memory allocated to an object usingPyObject_GC_New() or PyObject_GC_NewVar().
Remove the object op from the set of container objects trackedby the collector.
Note that PyObject_GC_Track() can becalled again on this object to add it back to the set of trackedobjects.
The deallocator (tp_dealloc handler) should callthis for the object before any of the fields used by thetp_traverse handler become invalid.
A macro version of PyObject_GC_UnTrack().
The tp_traverse handler accepts a function parameter of thistype:
Type of the visitor function passed to the tp_traversehandler.
The function should be called with an object to traverseas object and the third parameter to the tp_traversehandler as arg.
The Python core uses several visitor functionsto implement cyclic garbage detection; it's not expected that users willneed to write their own visitor functions.
The tp_traverse handler must have the following type:
Traversal function for a container object.
Implementations mustcall the visit function for each object directly contained byself, with the parameters to visit being the containedobject and the arg value passed to the handler.
The visitfunction must not be called with a NULL object argument.
Ifvisit returns a non-zero valuethat value should be returned immediately.
To simplify writing tp_traverse handlers, aPy_VISIT() macro is provided.
In order to use this macro,the tp_traverse implementation must name its argumentsexactly visit and arg:
Call the visit callback, with arguments o and arg.If visit returns a non-zero value, then return it.
Using thismacro, tp_traverse handlers look like:
The tp_clear handler must be of the inquiry type, orNULL if the object is immutable.
Drop references that may have created reference cycles.
Immutableobjects do not have to define this method since they can neverdirectly create reference cycles.
Note that the object must stillbe valid after calling this method (don't just callPy_DECREF() on a reference).
The collector will callthis method if it detects that this object is involved in areference cycle.
6.9 Table Markup There are three general-purpose table environments defined whichshould be used whenever possible.
These environments are definedto provide tables of specific widths and some convenience forformatting. These environments are not meant to be generalreplacements for the standard LaTeX table environments, but canbe used for an advantage when the documents are processed usingthe tools for Python documentation processing.
In particular, thegenerated HTML looks good!
There is also an advantage for theeventual conversion of the documentation to XML (see section9, ``Future Directions'').Each environment is named tablecols
, where colsis the number of columns in the table specified in lower-caseRoman numerals.
Within each of these environments, an additionalmacro, linecols
, is defined, where colsmatches the cols value of the corresponding tableenvironment.
These are supported for cols values ofii, iii, and iv.
These environments are allbuilt on top of the tabular environment.
Variants based onthe longtable environment are also provided.Note that all tables in the standard Python documentation usevertical lines between columns, and this must be specified in themarkup for each table.
Create a two-column table using the LaTeX column specifiercolspec.
The column specifier should indicate verticalbars between columns as appropriate for the specific table, butshould not specify vertical bars on the outside of the table(that is considered a stylesheet issue).
The col1fontparameter is used as a stylistic treatment of the first columnof the table: the first column is presented ascol1font{column1}.
To avoid treating the firstcolumn specially, col1font may be "textrm".
Thecolumn headings are taken from the values heading1 andheading2.
Like tableii, but produces a table which may be brokenacross page boundaries.
The parameters are the same as fortableii.
Create a single table row within a tableii orlongtableii environment.The text for the first column will be generated by applying themacro named by the col1font value when the tableiiwas opened.
Like the tableii environment, but with a third column.The heading for the third column is given by heading3.
Like tableiii, but produces a table which may be brokenacross page boundaries.
The parameters are the same as fortableiii.
Like the lineii macro, but with a third column.
Thetext for the third column is given by column3.
Like the tableiii environment, but with a fourth column.The heading for the fourth column is given by heading4.
Like tableiv, but produces a table which may be brokenacross page boundaries.
The parameters are the same as fortableiv.
Like the lineiii macro, but with a fourth column.
Thetext for the fourth column is given by column4.
Like the tableiv environment, but with a fifth column.The heading for the fifth column is given by heading5.
Like tablev, but produces a table which may be brokenacross page boundaries.
The parameters are the same as fortablev.
Like the lineiv macro, but with a fifth column.
Thetext for the fifth column is given by column5.
An additional table-like environment is synopsistable.
Thetable generated by this environment contains two columns, and eachrow is defined by an alternate definition ofmodulesynopsis.
This environment is not normally used byauthors, but is created by the localmoduletable macro.Here is a small example of a table given in the documentation forthe warnings module; markup inside the table cells isminimal so the markup for the table itself is readily discernable.Here is the markup for the table:
Here is the resulting table:
Class
This is the base class of all warning category classes.
Itis a subclass of Exception.
The default category for warn().
Base category for warnings about deprecated features.
Base category for warnings about dubious syntacticfeatures.
Base category for warnings about dubious runtime features.
To create a table usingdifferent markup for the first column, use textrm for thecol1font value and mark each entry individually.To add a horizontal line between vertical sections of a table, usethe standard hline macro between the rows which should beseparated:
\begin{tableii}{l|l}{constant}{Language}{Audience}\lineii{APL}{Masochists.}\lineii{BASIC}{First-time programmers on PC hardware.}\lineii{C}{\UNIX{} \\ Linux kernel developers.}\hline\lineii{Python}{Everyone!}\end{tableii}
Note that not all presentation formats are capable of displaying ahorizontal rule in this position.
This is how the table looks inthe format you're reading now:
Everyone!
How to create an uncompressed tar archive from a list of filenames:
How to read a gzip compressed tar archive and display some member information:
How to create a tar archive with faked information:
The only way to extract an uncompressed tar stream fromsys.stdin:
The TarFile object provides an interface to a tar archive.
A tararchive is a sequence of blocks.
An archive member (a stored file) is made upof a header block followed by data blocks.
It is possible, to store a file in atar archive several times.
Each archive member is represented by aTarInfo object, see TarInfo Objects (section7.19.2) for details.
classTarFile
Open an (uncompressed) tar archive name.
fileobj is not closed, when TarFile is closed.
Alternative constructor.
The open() function on module level isactually a shortcut to this classmethod.
See section7.19for details.
Return a TarInfo object for member name.
If name cannot be found in the archive, KeyError is raised.
Note:If a member occurs more than once in the archive, its lastoccurrence is assumed to be the most up-to-date version.
)
Return the members of the archive as a list of TarInfo objects.The list has the same order as the members in the archive.
Return the members as a list of their names.
It has the same order asthe list returned by getmembers().
Print a table of contents to sys.stdout.
If verbose isFalse, only the names of the members are printed.
If it isTrue, output similar to that of ls -l is produced.
Return the next member of the archive as a TarInfo object, whenTarFile is opened for reading.
Return None if there is nomore available.
Extract a member from the archive to the current working directory,using its full name.
Note:The file-like object is read-only and provides the following methods:read(), readline(), readlines(),seek(), tell().
]
)
Add the file name to the archive. name may be any typeof file (directory, fifo, symbolic link, etc.).If given, arcname specifies an alternative name for the file in thearchive.
Directories are added recursively by default.This can be avoided by setting recursive to False;the default is True.
Add the TarInfo object tarinfo to the archive.If fileobj is given,
tarinfo.size bytes are readfrom it and added to the archive.
You can create TarInfo objectsusing gettarinfo().
Note:On Windows platforms, fileobj should always be opened with mode'rb' to avoid irritation about the file size.
Create a TarInfo object for either the file name orthe file object fileobj (using os. fstat() on itsfile descriptor).
You can modify some of the TarInfo'sattributes before you add it using addfile().
If given,arcname specifies an alternative name for the file in thearchive.
Close the TarFile.
In write mode, two finishing zeroblocks are appended to the archive.
If true, create a POSIX 1003.1-1990 compliant archive. GNUextensions are not used, because they are not part of the POSIXstandard.
If false, add symbolic and hard links to archive.
If true, add thecontent of the target files to the archive.
This has no effect onsystems that do not support symbolic links.
If false, treat an empty block as the end of the archive.
If true,skip empty (and invalid) blocks and try to get as many members aspossible.
This is only useful for concatenated or damagedarchives.
To be set from 0 (no debug messages; the default) up to3 (all debug messages).
The messages are written tosys.stdout.
If 0 (the default), all errors are ignored when usingextract().
Nevertheless, they appear as error messagesin the debug output, when debugging is enabled.
If 1, allfatal errors are raised as OSError orIOError exceptions.
If 2, all non-fatalerrors are raised as TarError exceptions as well.
A TarInfo object represents one member in aTarFile.
Aside from storing all required attributes of a file(like file type, size, time, permissions, owner etc.), it providessome useful methods to determine its type.
It does not containthe file's data itself.
TarInfo objects are returned by TarFile's methodsgetmember(), getmembers() and gettarinfo().
classTarInfo
Create a TarInfo object.
Create and return a TarInfo object from a string buffer.
Create a string buffer from a TarInfo object.
A TarInfo object has the following public data attributes:
Name of the archive member.
Size in bytes.
Time of last modification.
Permission bits.
File type. type is usually one of these constants:REGTYPE, AREGTYPE, LNKTYPE,SYMTYPE, DIRTYPE, FIFOTYPE,CONTTYPE, CHRTYPE, BLKTYPE,GNUTYPE_SPARSE. To determine the type of aTarInfo object more conveniently, use the is_*()methods below.
Name of the target file name, which is only present inTarInfo objects of type LNKTYPE andSYMTYPE.
User ID of the user who originally stored this member.
Group ID of the user who originally stored this member.
User name.
Group name.
A TarInfo object also provides some convenient query methods:
Return True if the Tarinfo object is a regularfile.
Same as isfile().
Return True if it is a directory.
Return True if it is a symbolic link.
Return True if it is a hard link.
Return True if it is a character device.
Return True if it is a block device.
Return True if it is a FIFO.
Return True if it is one of character device, blockdevice or FIFO.
A simple example illustrating typical use:
Telnet instances have the following methods:
Read until a given string, expected, is encountered or untiltimeout seconds have passed.When no match is found, return whatever is available instead,possibly the empty string.
Raise EOFError if the connectionis closed and no cooked data is available.
Read all data until EOF; block until connection closed.
Read at least one byte of cooked data unless EOF is hit.Return '' if EOF is hit.
Block if no data is immediatelyavailable.
Read everything that can be without blocking in I/O (eager).Raise EOFError if connection closed and no cooked dataavailable.
Return '' if no cooked data available otherwise.Do not block unless in the midst of an IAC sequence.
)
Read readily available data.Raise EOFError if connection closed and no cooked dataavailable.
Do not blockunless in the midst of an IAC sequence.
This methodnever blocks.
Return the data collected between a SB/SE pair (suboption begin/end).The callback should access these data when it was invoked with aSE command.
This method never blocks.
)
)
Print a debug message when the debug level is 0.If extra arguments are present, they are substituted in themessage using the standard string formatting operator.
Set the debug level.
The higher the value of debuglevel, themore debug output you get (on sys.stdout).
Close the connection.
Return the socket object used internally.
Return the file descriptor of the socket object used internally.
May raisesocket.error if the connection is closed.
Interaction function, emulates a very dumb Telnet client.
Multithreaded version of interact().
)
Each time a telnet option is read on the input flow, thiscallback (if set) is called with the following parameters :callback(telnet socket, command (DO/DONT/WILL/WONT), option).
No otheraction is done afterwards by telnetlib.
Template objects following methods:
Restore a pipeline template to its initial state.
Return a new, equivalent, pipeline template.
If flag is true, turn debugging on.
Otherwise, turn debuggingoff.
When debugging is on, commands to be executed are printed, andthe shell is given set -x command to be more verbose.
Append a new action at the end.
The cmd variable must be a validbourne shell command.
Add a new action at the beginning.
See append() for explanationsof the arguments.
Return a file-like object, open to file, but read from orwritten to by the pipeline.
Note that only one of 'r','w' may be given.
Copy infile to outfile through the pipe.
Each TestCase instance represents a single test, but eachconcrete subclass may be used to define multiple tests -- theconcrete class represents a single test fixture.
The fixture iscreated and cleaned up for each test case.
TestCase instances provide three groups of methods: one groupused to run the test, another used by the test implementation tocheck conditions and report failures, and some inquiry methodsallowing information about the test itself to be gathered.Methods in the first group are:
Method called to prepare the test fixture.
This is calledimmediately before calling the test method; any exception raised bythis method will be considered an error rather than a test failure.The default implementation does nothing.
Method called immediately after the test method has been called andthe result recorded.
This is called even if the test method raisedan exception, so the implementation in subclasses may need to beparticularly careful about checking internal state.
Any exceptionraised by this method will be considered an error rather than a testfailure.
This method will only be called if the setUp()succeeds, regardless of the outcome of the test method.The default implementation does nothing.
Run the test, collecting the result into the test result objectpassed as result.
If result is omitted or None,a temporary result object is created and used, but is not madeavailable to the caller.
This is equivalent to simply calling theTestCase instance.
Run the test without collecting the result.
This allows exceptionsraised by the test to be propogated to the caller, and can be usedto support running tests under a debugger.
The test code can use any of the following methods to check for andreport failures.
Signal a test failure if expr is false; the explanation forthe error will be msg if given, otherwise it will beNone.
Test that first and second are equal.
If the values donot compare equal, the test will fail with the explanation given bymsg, or None.
Note that using failUnlessEqual()improves upon doing the comparison as the first parameter tofailUnless(): the default value for msg can becomputed to include representations of both first andsecond.
Test that first and second are not equal.
If the valuesdo compare equal, the test will fail with the explanation given bymsg, or None.
Note that using failIfEqual()improves upon doing the comparison as the first parameter tofailUnless() is that the default value for msg can becomputed to include representations of both first andsecond.
Test that first and second are approximately equalby computing the difference, rounding to the given number of places,and comparing to zero.
Note that comparing a given number of decimal placesis not the same as comparing a given number of significant digits.If the values do not compare equal, the test will fail with the explanationgiven by msg, or None.
Test that first and second are not approximately equalby computing the difference, rounding to the given number of places,and comparing to zero.
Note that comparing a given number of decimal placesis not the same as comparing a given number of significant digits.If the values do not compare equal, the test will fail with the explanationgiven by msg, or None.
Test that an exception is raised when callable is called withany positional or keyword arguments that are also passed toassertRaises().
The test passes if exception israised, is an error if another exception is raised, or fails if noexception is raised.
To catch any of a group of exceptions, a tuplecontaining the exception classes may be passed as exception.
The inverse of the failUnless() method is thefailIf() method.
This signals a test failure if expris true, with msg or None for the error message.
Signals a test failure unconditionally, with msg orNone for the error message.
This class attribute gives the exception raised by thetest() method.
If a test framework needs to use aspecialized exception, possibly to carry additional information, itmust subclass this exception in order to ``play fair'' with theframework.
The initial value of this attribute isAssertionError.
Testing frameworks can use the following methods to collectinformation on the test:
Return the number of tests represented by the this test object.
ForTestCase instances, this will always be 1, but thismethod is also implemented by the TestSuite class, which canreturn larger values.
Return the default type of test result object to be used to run thistest.
Return a string identifying the specific test case.
This is usuallythe full name of the test method, including the module and classnames.
Returns a one-line description of the test, or None if nodescription has been provided.
The default implementation of thismethod returns the first line of the test method's docstring, ifavailable, or None.
The TestLoader class is used to create test suites fromclasses and modules.
Normally, there is no need to create an instanceof this class; the
module provides an instancethat can be shared as the defaultTestLoader module attribute.Using a subclass or instance would allow customization of someconfigurable properties.
TestLoader objects have the following methods:
Return a suite of all tests cases contained in theTestCase-derived class testCaseClass.
Return a suite of all tests cases contained in the given module.This method searches module for classes derived fromTestCase and creates an instance of the class for each testmethod defined for the class.
Warning:While using a hierarchy ofTestcase-derived classes can be convenient in sharingfixtures and helper functions, defining test methods on base classesthat are not intended to be instantiated directly does not play wellwith this method.
Doing so, however, can be useful when thefixtures are different and defined in subclasses.
)
Return a suite of all tests cases given a string specifier.The specifier name is a ``dotted name'' that may resolveeither to a module, a test case class, a test method within a testcase class, or a callable object which returns a TestCase orTestSuite instance.
For example, if you have a moduleSampleTests containing a TestCase-derived classSampleTestCase with three test methods (test_one(),test_two(), and test_three()), the specifier'SampleTests.SampleTestCase' would cause this method toreturn a suite which will run all three test methods.
Using thespecifier 'SampleTests.SampleTestCase.test_two' would causeit to return a test suite which will run only thetest_two() test method.
Similar to loadTestsFromName(), but takes a sequence ofnames rather than a single name.
The return value is a test suitewhich supports all the tests defined for each name.
Return a sorted sequence of method names found withintestCaseClass.
The following attributes of a TestLoader can be configuredeither by subclassing or assignment on an instance:
String giving the prefix of method names which will be interpretedas test methods.
The default value is 'test'.
Function to be used to compare method names when sorting them ingetTestCaseNames().
The default value is the built-incmp() function; it can be set to None to disablethe sort.
Callable object that constructs a test suite from a list of tests.No methods on the resulting object are needed.
The default value isthe TestSuite class.
A TestResult object stores the results of a set of tests.
TheTestCase and TestSuite classes ensure that results areproperly stored; test authors do not need to worry about recording theoutcome of tests.Testing frameworks built on top of
may wantaccess to the TestResult object generated by running a set oftests for reporting purposes; a TestResult instance isreturned by the TestRunner.run() method for this purpose.Each instance holds the total number of tests run, and collections offailures and errors that occurred among those test runs.
Thecollections contain tuples of (testcase,traceback), where traceback is a string containing aformatted version of the traceback for the exception.
TestResult instances have the following attributes that willbe of interest when inspecting the results of running a set of tests:
The number of tests which have been started.
Returns true if all tests run so far have passed, otherwise returnsfalse.
The following methods of the TestResult class are used tomaintain the internal data structures, and may be extended insubclasses to support additional reporting requirements. This isparticularly useful in building tools which support interactivereporting while tests are being run.
Called when the test case test is about to be run.
Called when the test case test has been executed, regardlessof the outcome.
Called when the test case test raises an exception withoutsignalling a test failure. err is a tuple of the formreturned by sys.exc_info(): (type,value, traceback).
Called when the test case test signals a failure.err is a tuple of the form returned bysys.exc_info(): (type, value,traceback).
This method is called for a test that does not fail; test isthe test case object.
One additional method is available for TestResult objects:
This method can be called to signal that the set of tests being runshould be aborted.
Once this has been called, theTestRunner object return to its caller without running anyadditional tests.
This is used by the TextTestRunner classto stop the test framework when the user signals an interrupt fromthe keyboard. Interactive tools which provide runners can use thisin a similar manner.
TestSuite objects behave much like TestCase objects,except they do not actually implement a test. Instead, they are usedto aggregate tests into groups that should be run together.
Someadditional methods are available to add tests to TestSuiteinstances:
Add a TestCase or TestSuite to the set of tests thatmake up the suite.
Add all the tests from a sequence of TestCase andTestSuite instances to this test suite.
The run() method is also slightly different:
Run the tests associated with this suite, collecting the result intothe test result object passed as result.
Note that unlikeTestCase.run(), TestSuite.run() requires theresult object to be passed in.
In the typical usage of a TestSuite object, the run()method is invoked by a TestRunner rather than by the end-usertest harness.
There are a few situations where seemingly harmless use of a borrowedreference can lead to problems.
These all have to do with implicitinvocations of the interpreter, which can cause the owner of areference to dispose of it.The first and most important case to know about is usingPy_DECREF() on an unrelated object while borrowing areference to a list item.
For instance:
This function first borrows a reference to list[0], thenreplaces list[1] with the value 0, and finally printsthe borrowed reference.
Looks harmless, right?
But it's not!Let's follow the control flow into PyList_SetItem().
The listowns references to all its items, so when item 1 is replaced, it hasto dispose of the original item 1.
Now let's suppose the originalitem 1 was an instance of a user-defined class, and let's furthersuppose that the class defined a __del__() method.
If thisclass instance has a reference count of 1, disposing of it will callits __del__() method.Since it is written in Python, the __del__() method can executearbitrary Python code.
Could it perhaps do something to invalidatethe reference to item in bug()? You bet!
The correct version of thefunction reads:
This is a true story.
An older version of Python contained variantsof this bug and someone spent a considerable amount of time in a Cdebugger to figure out why his __del__() methods would fail...The second case of problems with a borrowed reference is a variantinvolving threads.
Normally, multiple threads in the Pythoninterpreter can't get in each other's way, because there is a globallock protecting Python's entire object space.
However, it is possibleto temporarily release this lock using the macroPy_BEGIN_ALLOW_THREADS, and to re-acquire it usingPy_END_ALLOW_THREADS.
This is common around blockingI/O calls, to let other threads use the processor while waiting forthe I/O to complete.
Obviously, the following function has the sameproblem as the previous one:
voidbug(PyObject *list){PyObject *item = PyList_GetItem(list, 0);Py_BEGIN_ALLOW_THREADS...some blocking I/O call...Py_END_ALLOW_THREADSPyObject_Print(item, stdout, 0); /* BUG! */}
This class represents an activity that is run in a separate threadof control.
There are two ways to specify the activity: bypassing a callable object to the constructor, or by overriding therun() method in a subclass.
No other methods (except for theconstructor) should be overridden in a subclass.
In other words, only override the __init__() and run()methods of this class.Once a thread object is created, its activity must be started bycalling the thread's start() method.
This invokes therun() method in a separate thread of control.Once the thread's activity is started, the thread is considered'alive' and 'active' (these concepts are almost, but not quiteexactly, the same; their definition is intentionally somewhatvague).
It stops being alive and active when its run()method terminates - either normally, or by raising an unhandledexception.
The isAlive() method tests whether the thread isalive.Other threads can call a thread's join() method.
This blocksthe calling thread until the thread whose join() method iscalled is terminated.A thread has a name.
The significanceof this flag is that the entire Python program exits when onlydaemon threads are left.
The initial value is inherited from thecreating thread.
It is not adaemon thread.There is the possibility that ``dummy thread objects'' arecreated.
These are thread objects corresponding to ``alienthreads''.
Dummy thread objectshave limited functionality; they are always considered alive,active, and daemonic, and cannot be join()ed.
They are never deleted, since it is impossible to detect the termination of alienthreads.
classThread
This constructor should always be called with keywordarguments.
Arguments are:
group should be None; reserved for future extension whena ThreadGroup class is implemented.
target is the callable object to be invoked by therun() method.
Defaults to None, meaning nothing iscalled.
name is the thread name.
By default, a unique name isconstructed of the form ``Thread-N'' where N is a smalldecimal number.
args is the argument tuple for the target invocation.
Defaultsto ().
kwargs is a dictionary of keyword arguments for the targetinvocation.
Defaults to {}.If the subclass overrides the constructor, it must make sureto invoke the base class constructor (Thread.__init__())before doing anything else to the thread.
Start the thread's activity.This must be called at most once per thread object.
Itarranges for the object's run() method to be invoked in aseparate thread of control.
Method representing the thread's activity.You may override this method in a subclass.
The standardrun() method invokes the callable object passed to theobject's constructor as the target argument, if any, withsequential and keyword arguments taken from the args andkwargs arguments, respectively.
)
Return the thread's name.
Multiple threads may be given the samename.
The initial name is set by the constructor.
)
Return whether the thread is alive.Roughly, a thread is alive from the moment the start() methodreturns until its run() method terminates.
Return the thread's daemon flag.
The Python interpreter is not fully thread safe.
. There's one globalvariable, however: the pointer to the currentPyThreadState
structure.
While mostthread packages have a way to store ``per-thread global data,''Python's internal platform independent thread abstraction doesn'tsupport this yet.
Therefore, the current thread state must bemanipulated explicitly.This is easy enough in most cases.
Most code manipulating the globalinterpreter lock has the following simple structure:
This is so common that a pair of macros exists to simplify it:
Py_BEGIN_ALLOW_THREADS...Do some blocking I/O operation..
macro opens a new block and declares a hidden local variable; thePy_END_ALLOW_THREADS
macro closes the block.
Another advantage of using these two macrosis that when Python is compiled without thread support, they aredefined empty, thus saving the thread state and lock manipulations.When thread support is enabled, the block above expands to thefollowing code:
PyThreadState *_save;_save = PyEval_SaveThread();...Do some blocking I/O operation.. .PyEval_RestoreThread(_save);
Using even lower level primitives, we can get roughly the same effectas follows:
PyThreadState *_save;_save = PyThreadState_Swap(NULL);PyEval_ReleaseLock();...Do some blocking I/O operation.. .PyEval_AcquireLock();PyThreadState_Swap(_save);
There are some subtle differences; in particular,PyEval_RestoreThread()
savesand restores the value of the global variableerrno
, since the lock manipulation does notguarantee that errno is left alone.
Also, when thread supportis disabled,PyEval_SaveThread()
andPyEval_RestoreThread() don't manipulate the lock; in thiscase, PyEval_ReleaseLock()
andPyEval_AcquireLock()
are notavailable.
This is done so that dynamically loaded extensionscompiled with thread support enabled can be loaded by an interpreterthat was compiled with disabled thread support.The global interpreter lock is used to protect the pointer to thecurrent thread state.
When releasing the lock and saving the threadstate, the current thread state pointer must be retrieved before thelock is released (since another thread could immediately acquire thelock and store its own thread state in the global variable).Conversely, when acquiring the lock and restoring the thread state,the lock must be acquired before storing the thread state pointer.Why am I going on with so much detail about this?
Because whenthreads are created from C, they don't have the global interpreterlock, nor is there a thread state data structure for them.
Suchthreads must bootstrap themselves into existence, by first creating athread state data structure, then acquiring the lock, and finallystoring their thread state pointer, before they can start using thePython/C API.
When they are done, they should reset the thread statepointer, release the lock, and finally free their thread state datastructure.When creating a thread data structure, you need to provide aninterpreter state data structure.
The interpreter state datastructure holds global data that is shared by all threads in aninterpreter, for example the module administration(sys.modules).
Depending on your needs, you can either createa new interpreter state data structure, or share the interpreter statedata structure used by the Python main thread (to access the latter,you must obtain the thread state and access its interp member;this must be done by a thread that is created by Python or by the mainthread after Python is initialized).Assuming you have access to an interpreter object, the typical idiomfor calling into Python from a C thread is
PyGILState_STATE gstate;gstate = PyGILState_Ensure();/* Perform Python actions here.
This data structure represents the state shared by a number ofcooperating threads.
The global interpreter lock is also shared by allthreads, regardless of to which interpreter they belong.
This data structure represents the state of a single thread.
Theonly public data member is PyInterpreterState*
interp, which points to this thread's interpreter state.
Initialize and acquire the global interpreter lock.
It should becalled in the main thread before creating a second thread orengaging in any other thread operations such asPyEval_ReleaseLock()
orPyEval_ReleaseThread(tstate)
.It is not needed before callingPyEval_SaveThread() orPyEval_RestoreThread()
.This is a no-op when called for a second time.
It is safe to callthis function before callingPy_Initialize()
This situation isequivalent to having acquired the lock: when there is only a singlethread, all object accesses are safe.
Therefore, when this functioninitializes the lock, it also acquires it.
Before the Pythonthread
module creates a new thread,knowing that either it has the lock or the lock hasn't been createdyet, it calls PyEval_InitThreads().
When this callreturns, it is guaranteed that the lock has been created and that thecalling thread has acquired it.It is not safe to call this function when it is unknownwhich thread (if any) currently has the global interpreter lock.This function is not available when thread support is disabled atcompile time.
Returns a non-zero value if PyEval_InitThreads() has beencalled.
This function can be called without holding the lock, andtherefore can be used to avoid calls to the locking API when runningsingle-threaded.
This function is not available when thread supportis disabled at compile time.
Acquire the global interpreter lock.
The lock must have beencreated earlier.
If this thread already has the lock, a deadlockensues.
This function is not available when thread support isdisabled at compile time.
Release the global interpreter lock.
Acquire the global interpreter lock and set the current threadstate to tstate, which should not be NULL.
The lock musthave been created earlier.
If this thread already has the lock,deadlock ensues.
Reset the current thread state to NULL and release the globalinterpreter lock.
The lock must have been created earlier and mustbe held by the current thread.
The tstate argument, whichmust not be NULL, is only used to check that it represents thecurrent thread state -- if it isn't, a fatal error is reported.This function is not available when thread support is disabled atcompile time.
Release the interpreter lock (if it has been created and threadsupport is enabled) and reset the thread state to NULL, returningthe previous thread state (which is not NULL).
If the lock hasbeen created, the current thread must have acquired it. (Thisfunction is available even when thread support is disabled atcompile time.)
Acquire the interpreter lock (if it has been created and threadsupport is enabled) and set the thread state to tstate, whichmust not be NULL.
If the lock has been created, the current threadmust not have acquired it, otherwise deadlock ensues.
(Thisfunction is available even when thread support is disabled atcompile time.)
The following macros are normally used without a trailing semicolon;look for example usage in the Python source distribution.
This macro expands to"{ PyThreadState *_save; _save = PyEval_SaveThread();".Note that it contains an opening brace; it must be matched with afollowing Py_END_ALLOW_THREADS macro.
See above forfurther discussion of this macro.
It is a no-op when thread supportis disabled at compile time.
Py_END_ALLOW_THREADS
This macro expands to "PyEval_RestoreThread(_save); }".Note that it contains a closing brace; it must be matched with anearlier Py_BEGIN_ALLOW_THREADS macro.
This macro expands to "PyEval_RestoreThread(_save);": it isequivalent to Py_END_ALLOW_THREADS without theclosing brace.
It is a no-op when thread support is disabled atcompile time.
This macro expands to "_save = PyEval_SaveThread();": it isequivalent to Py_BEGIN_ALLOW_THREADS without theopening brace and variable declaration.
It is a no-op when threadsupport is disabled at compile time.
All of the following functions are only available when thread supportis enabled at compile time, and must be called only when theinterpreter lock has been created.
Create a new interpreter state object.
The interpreter lock neednot be held, but may be held if it is necessary to serialize callsto this function.
Reset all information in an interpreter state object.
Theinterpreter lock must be held.
Destroy an interpreter state object.
The interpreter lock need notbe held.
The interpreter state must have been reset with a previouscall to PyInterpreterState_Clear().
Create a new thread state object belonging to the given interpreterobject.
The interpreter lock need not be held, but may be held ifit is necessary to serialize calls to this function.
Reset all information in a thread state object.
The interpreter lockmust be held.
Destroy a thread state object.
The interpreter lock need not beheld.
The thread state must have been reset with a previous call toPyThreadState_Clear().
Return the current thread state.
The interpreter lock must beheld.
Return a dictionary in which extensions can store thread-specificstate information.
Each extension should use a unique key to use tostore state in the dictionary.
Asynchronously raise an exception in a thread.
Must be called with the GIL held.
Returns the number of thread states modified; if it returns a number greater than one, you're in trouble, and you should call it again with exc set to NULL to revert the effect.This raises no exceptions.New in version 2.3.
Ensure that the current thread is ready to call the PythonC API regardless of the current state of Python, or of itsthread lock.
This may be called as many times as desiredby a thread as long as each call is matched with a call to PyGILState_Release().
Release any resources previously acquired.
This class represents an action that should be run only after acertain amount of time has passed -- a timer.
Timer is asubclass of Thread and as such also functions as an example ofcreating custom threads.Timers are started, as with threads, by calling their start()method.
The timer can be stopped (before its action has begun) bycalling the cancel() method.
The interval the timer willwait before executing its action may not be exactly the same as theinterval specified by the user.For example:
Create a timer that will run function with arguments args and keyword arguments kwargs, after interval seconds have passed.
Stop the timer, and cancel the execution of the timer's action.
Thiswill only work if the timer is still in its waiting stage.
16.1.3 A (Very) Quick
16.1.5 How Tk and
Class commands in Tk correspond to class constructors in Tkinter.
The master of an object is implicit in the new name given to it atcreation time.
In Tkinter, masters are specified explicitly.
The configuration options in Tk are given in lists of hyphened tagsfollowed by values.
In Tkinter, options are specified askeyword-arguments in the instance constructor, and keyword-args forconfigure calls or as instance indices, in dictionary style, forestablished instances.
See section16.1.6 onsetting options.
button .fred -fg red ===== fred = Button(panel, fg = "red").fred configure -fg red ===== fred["fg"] = redOR == fred.config(fg = "red")
In Tk, to perform an action on a widget, use the widget name as acommand, and follow it with an action name, possibly with arguments(options).
In Tkinter, you call methods on the class instance toinvoke actions on the widget.
The actions (methods) that a givenwidget can perform are listed in the Tkinter.py module.
To give a widget to the packer (geometry manager), you call pack withoptional arguments.
In Tkinter, the Pack class holds all thisfunctionality, and the various forms of the pack command areimplemented as methods. All widgets in
aresubclassed from the Packer, and so inherit all the packingmethods.
See the
module documentation for additionalinformation on the Form geometry manager.
Options control things like the color and border width of a widget.Options can be set in three ways:
At object creation time, using keyword arguments
After object creation, treating the option name like a dictionary index
Use the config() method to update multiple attrs subesequent toobject creation
For a complete explanation of a given option and its behavior, see theTk man pages for the widget in question.Note that the man pages list "STANDARD OPTIONS" and "WIDGET SPECIFICOPTIONS" for each widget.
The former is a list of options that arecommon to many widgets, the latter are the options that areideosyncratic to that particular widget.
The Standard Options aredocumented on the
options(3) man page.No distinction between standard and widget-specific options is made inthis document.
The return value of thesecalls is a dictionary whose key is the name of the option as a string(for example, 'relief') and whose values are 5-tuples.Some options, like bg are synonyms for common options with longnames (bg is shorthand for "background").
Passing theconfig() method the name of a shorthand option will return a2-tuple, not 5-tuple.
The 2-tuple passed back will contain the name ofthe synonym and the ``real'' option (such as ('bg','background')).
Example
option name for database lookup
option class for database lookup
current value
Of course, the dictionary printed will include all the optionsavailable and their values.
This is meant only as an example.
Tk/Tcl has long been an integral part of Python.
It provides a robustand platform independent windowing toolkit, that is available toPython programmers using the
module, and itsextension, the
module.The
module is a thin object-oriented layer on top ofTcl/Tk. To use
, you don't need to write Tcl code,but you will need to consult the Tk documentation, and occasionallythe Tcl documentation.
is a set of wrappers thatimplement the Tk widgets as Python classes.
In addition, the internalmodule _tkinter provides a threadsafe mechanism which allowsPython and Tcl to interact.Tk is not the only GUI for Python, but is however the most commonlyused one; see section
, ``Other User InterfaceModules and Packages,'' for more information on other GUI toolkits forPython.
Interface to Tcl/Tk for graphical user interfaces
Tk Extension Widgets for Tkinter
Text widget with a vertical scroll bar.
An environment for turtle graphics.
There are a set of modules that provide interfaces to various MacOStoolboxes.
If applicable the module will define a number of Pythonobjects for the various structures declared by the toolbox, andoperations will be implemented as methods of the object.
Otheroperations will be implemented as functions in the module.
Not alloperations possible in C will also be possible in Python (callbacksare often a problem), and parameters will occasionally be different inPython (input and output buffers, especially).
All methods andfunctions have a __doc__ string describing their argumentsand return values, and for additional description you are referred to
or similar works.These modules all live in a package called Carbon.
Warning! These modules are not yet documented.
If youwish to contribute documentation of any of these modules, please getin touch with docs@python.org.
Interface to the Apple Events toolbox.
Interface to the Apple Help manager.
Interface to the Appearance Manager.
Interface to the Core Foundation.
Interface to the Component Manager.
Interface to the Carbon Event Manager.
Interface to the Control Manager.
Interface to the Dialog Manager.
Interface to the classic Event Manager.
Interface to the Font Manager.
Interface to the Folder Manager.
Interface to the Carbon Help Manager.
Interface to the List Manager.
Interface to the Menu Manager.
Interface to the MultiLingual Text Editor.
Interface to the QuickDraw toolbox.
Interface to the QuickDraw Offscreen APIs.
Interface to the QuickTime toolbox.
Interface to the Resource Manager and Handles.
Interface to the Carbon Scrap Manager.
Interface to the Sound Manager.
Interface to TextEdit.
Interface to the Window Manager.
Interface to the standard color selection dialog.
7.1 External Tools Many tools are needed to be able to process the Pythondocumentation if all supported formats are required.
Thissection lists the tools used and when each is required.
Consultthe Doc/README file to see if there are specific versionrequirements for any of these.
This program is a typical part of TeX installations.
It isused to generate PostScript from the ``device independent''.dvi files.
It is needed for the conversion toPostScript.
Emacs is the kitchen sink of programmers' editors, and a damnfine kitchen sink it is.
It also comes with some of theprocessing needed to support the proper menu structures forTexinfo documents when an info conversion is desired.
This isneeded for the info conversion. Using xemacsinstead of FSF emacs may lead to instability in theconversion, but that's because nobody seems to maintain theEmacs Texinfo code in a portable manner.
LaTeX is a large and extensible macro package by LeslieLamport, based on TeX, a world-class typesetter by DonaldKnuth.
It is used for the conversion to PostScript, and isneeded for the HTML conversion as well (LaTeX2HTML requiresone of the intermediate files it creates).
Probably the longest Perl script anyone ever attempted tomaintain.
This converts LaTeX documents to HTML documents,and does a pretty reasonable job.
It is required for theconversions to HTML and GNU info.
This is a text-mode Web browser which includes anHTML-to-plain text conversion.
This is used to converthowto documents to text.
Just about any version should work for the standard documents,but GNU make is required for the experimentalprocesses in Doc/tools/sgmlconv/, at least whilethey're experimental.
This is not required for running themkhowto script.
This is a standard program for converting LaTeX index datato a formatted index; it should be included with all LaTeXinstallations.
It is needed for the PDF and PostScriptconversions.
GNU makeinfo is used to convert Texinfo documents toGNU info files.
Since Texinfo is used as an intermediateformat in the info conversion, this program is needed in thatconversion.
pdfTeX is a relatively new variant of TeX, and is used togenerate the PDF version of the manuals.
It is typicallyinstalled as part of most of the large TeX distributions.
pdflatex is pdfTeX using the LaTeX format.
Perl is required for LaTeX2HTML and one of the scripts usedto post-process LaTeX2HTML output, as well as theHTML-to-Texinfo conversion.
This is required forthe HTML and GNU info conversions.
Python is used for many of the scripts in theDoc/tools/ directory; it is required for allconversions.
This shouldn't be a problem if you're interestedin writing documentation for Python!
7.2 Internal Tools This section describes the various scripts that are used toimplement various stages of document processing or to orchestrateentire build sequences.
Most of these tools are only usefulin the context of building the standard documentation, but someare more general.
This is the primary script used to format third-partydocuments.
mkhowto can be used for both howto andmanual class documents.
It is usually a good idea toalways use the latest version of this tool rather than aversion from an older source release of Python.
It can beused to generate DVI, HTML, PDF, PostScript, and plain textdocuments.
The GNU info and iSilo formats will be supportedby this script in some future version.Use the --help option on this script's commandline to get a summary of options for this script.XXX Need more here.
Subsections 7.1 External Tools
The Python interpreter can get its input from a number of sources:from a script passed to it as standard input or as program argument,typed in interactively, from a module source file, etc.
This chaptergives the syntax used in these cases. Subsections
This simple example implements a basic read-eval-print loop, similarto (but less useful than) the standard Python interactive interpreterloop.
For a more complete implementation of the interpreter loop,refer to the
module.
Subsections 1.1 Best case: trivial installation
Although Python's extensive standard library covers many programmingneeds, there often comes a time when you need to add some newfunctionality to your Python installation in the form of third-partymodules.
This might be necessary to support your own programming, or tosupport an application that you want to use and that happens to bewritten in Python.In the past, there has been little support for adding third-partymodules to an existing Python installation.
Youdon't need to know Python to read this document; there will be somebrief forays into using Python's interactive mode to explore yourinstallation, but that's it.
If you're looking for information on howto distribute your own Python modules so that others may use them, seethe
In the best case, someone will have prepared a special version of themodule distribution you want to install that is targeted specifically atyour platform and is installed just like any other software on yourplatform.
For example, the module developer might make an executableinstaller available for Windows users, an RPM package for users ofRPM-based Linux systems (Red Hat, SuSE, Mandrake, and many others), aDebian package for users of Debian-based Linux systems, and so forth.In that case, you would download the installer appropriate to yourplatform and do the obvious thing with it: run it if it's an executableinstaller, rpm -install it if it's an RPM, etc.
You don't needto run Python or a setup script, you don't need to compileanything--you might not even need to read any instructions (althoughit's always a good idea to do so anyways).Of course, things will not always be that easy.
You might be interestedin a module distribution that doesn't have an easy-to-use installer foryour platform.
In that case, you'll have to start with the sourcedistribution released by the module's author/maintainer.
Installingfrom a source distribution is not too hard, as long as the modules arepackaged in the standard way.
The bulk of this document is aboutbuilding and installing modules from standard source distributions.
If you download a module source distribution, you can tell prettyquickly if it was packaged and distributed in the standard way, i.e.using the Distutils.
First, the distribution's name and version numberwill be featured prominently in the name of the downloaded archive, e.g.foo-1.0.tar.gz or widget-0.9.7.zip.
Next, the archivewill unpack into a similarly-named directory: foo-1.0 orwidget-0.9.7.
Additionally, the distribution will contain asetup script setup.py, and a file named README.txt or possiblyjust README, which should explain that building and installing themodule distribution is a simple matter of running
Or rather, the abovecommand is everything you need to get out of this manual.
2.3.1 Truth Value Testing
Any object can be tested for truth value, for use in an if orwhile condition or as operand of the Boolean operations below.The following values are considered false:
zero of any numeric type, for example, 0, 0L,0.0, 0j.
any empty sequence, for example, '', (), [].
any empty mapping, for example, {}.
instances of user-defined classes, if the class defines a__nonzero__() or __len__() method, when thatmethod returns the integer zero or bool valueFalse.
All other values are considered true -- so objects of many types arealways true.
Operations and built-in functions that have a Boolean result alwaysreturn 0 or False for false and 1 or Truefor true, unless otherwise stated. (Important exception: the Booleanoperations "or"
and "and"
alwaysreturn one of their operands.
Additional information on these special methods may be found in the
.
The try statement specifies exception handlers and/or cleanupcode for a group of statements:
There are two forms of try statement:try...except andtry...finally.
These forms cannot be mixed (butthey can be nested in each other).The try...except form specifies one or moreexception handlers(the except clauses).
When no exception occurs in thetry clause, no exception handler is executed.
When anexception occurs in the try suite, a search for an exceptionhandler is started.
This search inspects the except clauses in turn untilone is found that matches the exception.
An expression-less exceptclause, if present, must be last; it matches any exception.
For anexcept clause with an expression, that expression is evaluated, and theclause matches the exception if the resulting object is ``compatible''with the exception.
An object is compatible with an exception if itis either the object that identifies the exception, or (for exceptionsthat are classes) it is a base class of the exception, or it is atuple containing an item that is compatible with the exception.
Notethat the object identities must match, i.e. it must be the sameobject, not just an object with the same value.
All except clauses musthave an executable block.
When the end of this blockis reached, execution continues normally after the entire trystatement.
module: sys.exc_type receivesthe object identifying the exception; sys.exc_value receivesthe exception's parameter; sys.exc_traceback receives atraceback object
Use of the corresponding variables isdeprecated in favor of this function, since their use is unsafe in athreaded program.
As of Python 1.5, the variables are restored totheir previous values (before the call) when returning from a functionthat handled an exception.
The optional else clause is executed if and when controlflows off the end of the try clause.
Exceptions in the else clause are not handled by thepreceding except clauses.
The try...finally form specifies a `cleanup' handler.
Thetry clause is executed.
When no exception occurs, thefinally clause is executed.
When an exception occurs in thetry clause, the exception is temporarily saved, thefinally clause is executed, and then the saved exception isre-raised.
If the finally clause raises another exception orexecutes a return or break statement, the savedexception is lost.
A continue statement is illegal in thefinally clause. (The reason is a problem with the currentimplementation - this restriction may be lifted in the future).
Theexception information is not available to the program during execution ofthe finally clause.
When a return, break or continue statement isexecuted in the try suite of a try...finallystatement, the finally clause is also executed `on the way out.'
Acontinue statement is illegal in the finally clause.(The reason is a problem with the current implementation -- thisrestriction may be lifted in the future).
Additional information on exceptions can be found insection4.2, and information on using the raisestatement to generate exceptions may be found in section6.9.
Footnotes ... clause.
Currently, control ``flows off the end'' except in the case of anexception or the execution of a return,continue, or break statement.
This subtype of PyObject represents a Python tuple object.
This instance of PyTypeObject represents the Python tupletype; it is the same object as types.TupleType in the Pythonlayer.
.
Return true if p is a tuple object or an instance of a subtypeof the tuple type.Changed in version 2.2:Allowed subtypes to be accepted.
Return true if p is a tuple object, but not an instance of asubtype of the tuple type.New in version 2.2.
Return a new tuple object of size len, or NULL on failure.
"PyTuple_Pack(2, a, b)" is equivalent to "Py_BuildValue("(OO)", a, b)".New in version 2.4.
Takes a pointer to a tuple object, and returns the size of thattuple.
Return the size of the tuple p, which must be non-NULL andpoint to a tuple; no error checking is performed.
Returns the object at position pos in the tuple pointed to byp.
Like PyTuple_GetItem(), but does no checking of itsarguments.
Takes a slice of the tuple pointed to by p from low tohigh and returns it as a new tuple.
Inserts a reference to object o at position pos of thetuple pointed to by p.
It returns 0 on success.
Note:This function ``steals'' a reference to o.
Like PyTuple_SetItem(), but does no error checking, andshould only be used to fill in brand new tuples.
Note:Thisfunction ``steals'' a reference to o.
Can be used to resize a tuple. newsize will be the new lengthof the tuple.
Because tuples are supposed to be immutable,this should only be used if there is only one reference to theobject.
Do not use this if the tuple may already be known tosome other part of the code.
The tuple will always grow or shrinkat the end.
will be the same as before calling this function.If the object referenced by *p
is replaced, theoriginal *p
is destroyed.
On failure, returns-1 and sets *p
to NULL, and raisesMemoryError orSystemError.Changed in version 2.2:Removed unused third parameter, last_is_sticky.
12. What Now?
About this document ... Subsections
Whenever possible, the Distutils try to use the configurationinformation made available by the Python interpreter used to run thesetup.py script.
For example, the same compiler and linkerflags used to compile Python will also be used for compilingextensions.
Usually this will work well, but in complicatedsituations this might be inappropriate.
This section discusses how tooverride the usual Distutils behaviour.
Compiling a Python extension written in C or C++ will sometimesrequire specifying custom flags for the compiler and linker in orderto use a particular library or produce a special kind of object code.This is especially true if the extension hasn't been tested on your platform, or if you're trying to cross-compile Python.In the most general case, the extension author might have foreseenthat compiling the extensions would be complicated, and provided aSetup file for you to edit.
Each line in a Setup describes a singlemodule.
Lines have the following structure:
Let's examine each of the fields in turn.
module is the name of the extension module to be built,and should be a valid Python identifier.
You can't just changethis in order to rename a module (edits to the source code wouldalso be needed), so this should be left alone.
sourcefile is anything that's likely to be a source codefile, at least judging by the filename.
Filenames ending in.c are assumed to be written in C, filenames ending in.C, .cc, and .c++ are assumed to beC++, and filenames ending in .m or .mm areassumed to be in Objective C.
cpparg is an argument for the C preprocessor, and is anything starting with -I, -D,-U or -C.
library is anything ending in .a or beginning with-l or -L.
If a particular platform requires a special library on your platform,you can add it by editing the Setup file and runningpython setup.py build.
For example, if the module defined by the line
c must be linked with the math library libm.a on your platform,simply add -lm to the line:
Arbitrary switches intended for the compiler or the linker can besupplied with the -Xcompiler arg and-Xlinker arg options:
The next option after -Xcompiler and-Xlinker will be appended to the proper command line, soin the above example the compiler will be passed the -o32option, and the linker will be passed -shared.
If acompiler option requires an argument, you'll have to supply multiple-Xcompiler options; for example, to pass -x c++ theSetup file would have to contain-Xcompiler -x -Xcompiler c++.Compiler flags can also be supplied through setting theCFLAGS environment variable.
If set, the contents ofCFLAGS will be added to the compiler flags specified in the Setup file.
This subsection describes the necessary steps to use Distutils with the Borland C++ compiler version 5.5.First you have to know that Borland's object file format (OMF) isdifferent from the format used by the Python version you can downloadfrom the Python or ActiveState Web site.
(Python is built withMicrosoft Visual C++, which uses COFF as the object file format.)For this reason you have to convert Python's librarypython24.lib into the Borland format.
The coff2omf program comes with the Borland compiler.
The filepython24.lib is in the Libs directory of your Pythoninstallation.
If your extension uses other libraries (zlib,...) youhave to convert them too.The converted files have to reside in the same directories as thenormal libraries.How does Distutils manage to use these libraries with their changednames?
If the extension needs a library (eg. foo) Distutilschecks first if it finds a library with suffix _bcpp(eg. foo_bcpp.lib) and then uses this library.
In the case itdoesn't find such a special library it uses the default name(foo.lib.)
To let Distutils compile your extension with Borland C++ you now haveto type:
If you want to use the Borland C++ compiler as the default, youcould specify this in your personal or system-wide configuration filefor Distutils (see section5.)
Information about the free C++ compiler from Borland,including links to the download pages.
Document describing how to use Borland's free command-line C++compiler to build Python.
This section describes the necessary steps to use Distutils with theGNU C/C++ compilers in their Cygwin and MinGWdistributions.
Then you can create from these information an import library for gcc.
python setup.py build --compiler=cygwin
and for Cygwin in no-cygwin mode
or for MinGW type:
If you want to use any of these options/compilers as default, you shouldconsider to write it in your personal or system-wide configuration filefor Distutils (see section5.)
Information about building the required libraries for the MinGWenvironment.
Converted import libraries in Cygwin/MinGW and Borland format,and a script to create the registry entries needed for Distutilsto locate the built Python.
Footnotes ...foo.lib.)
This also means you could replace allexisting COFF-libraries with OMF-libraries of the same name.
Checkhttp://sources.
Then you have noPOSIX emulation available, but you also don't needcygwin1.dll.
About this document ...
Perhaps one of the most important structures of the Python objectsystem is the structure that defines a new type: thePyTypeObject structure.
The fields of the type objectare examined in detail in this section.
For convenience of reference, this repeatsthe definition found there:
The type object structure extends the PyVarObject structure.The ob_size field is used for dynamic types (createdby type_new(), usually called from a class statement).Note that PyType_Type (the metatype) initializestp_itemsize, which means that its instances (i.e. typeobjects) must have the ob_size field.
These fields are only present when the macro Py_TRACE_REFS isdefined.
Their initialization to NULL is taken care of by thePyObject_HEAD_INIT macro.
For statically allocated objects,these fields always remain NULL.
For dynamically allocatedobjects, these two fields are used to link the object into adoubly-linked list of all live objects on the heap.
Thiscould be used for various debugging purposes; currently the only useis to print the objects that are still alive at the end of a runwhen the environment variable PYTHONDUMPREFS is set.These fields are not inherited by subtypes.
ob_refcnt
This is the type object's reference count, initialized to 1by the PyObject_HEAD_INIT macro.
Note that for staticallyallocated type objects, the type's instances (objects whoseob_type points back to the type) do not count asreferences.
But for dynamically allocated type objects, theinstances do count as references.This field is not inherited by subtypes.
It isinitialized by the argument to the PyObject_HEAD_INIT macro,and its value should normally be PyType_Type.
However, fordynamically loadable extension modules that must be usable onWindows (at least), the compiler complains that this is not a validinitializer.
Therefore, the convention is to pass NULL to thePyObject_HEAD_INIT macro and to initialize this fieldexplicitly at the start of the module's initialization function,before doing anything else.
This is typically done like this:
Foo_Type.ob_type = PyType_Type;
This should be done before any instances of the type are created.PyType_Ready() checks if ob_type is NULL, andif so, initializes it: in Python 2.2, it is set toPyType_Type; in Python 2.2.1 and later it isinitialized to the ob_type field of the base class.
PyType_Ready() will not change this field if it isnon-zero.In Python 2.2, this field is not inherited by subtypes.
In 2.2.1,and in 2.3 and beyond, it is inherited by subtypes.
For statically allocated type objects, this should be initializedto zero.
For dynamically allocated type objects, this field has aspecial internal meaning.This field is not inherited by subtypes.
tp_name
Pointer to a NUL-terminated string containing the name of the type.For types that are accessible as module globals, the string shouldbe the full module name, followed by a dot, followed by the typename; for built-in types, it should be just the type name.
If themodule is a submodule of a package, the full package name is part ofthe full module name.
Everything before the last dot is made accessible asthe __module__ attribute, and everything after the last dotis made accessible as the __name__ attribute.If no dot is present, the entire tp_name field is madeaccessible as the __name__ attribute, and the__module__ attribute is undefined (unless explicitly set inthe dictionary, as explained above).
This means your type will beimpossible to pickle.This field is not inherited by subtypes.
These fields allow calculating the size in bytes of instances ofthe type.There are two kinds of types: types with fixed-length instances havea zero tp_itemsize field, types with variable-lengthinstances have a non-zero tp_itemsize field.
The value of N is typically stored inthe instance's ob_size field.
There are exceptions: forexample, long ints use a negative ob_size to indicate anegative number, and N is abs(ob_size) there.
This means that theonly correct way to get an initializer for the tp_basicsizeis to use the sizeof operator on the struct used todeclare the instance layout.
The basic size does not include the GCheader size (this is new in Python 2.2; in 2.1 and 2.0, the GCheader size was included in tp_basicsize).These fields are inherited separately by subtypes.
If the base typehas a non-zero tp_itemsize, it is generally not safe to settp_itemsize to a different non-zero value in a subtype(though this depends on the implementation of the base type).A note about alignment: if the variable items require a particularalignment, this should be taken care of by the value oftp_basicsize.
A pointer to the instance destructor function.
This function mustbe defined unless the type guarantees that its instances will neverbe deallocated (as is the case for the singletons None andEllipsis).The destructor function is called by the Py_DECREF() andPy_XDECREF() macros when the new reference count iszero.
At this point, the instance is still in existence, but thereare no references to it.
The destructor function should free allreferences which the instance owns, free all memory buffers owned bythe instance (using the freeing function corresponding to theallocation function used to allocate the buffer), and finally (asits last action) call the type's tp_free function.
If thetype is not subtypable (doesn't have thePy_TPFLAGS_BASETYPE flag bit set), it is permissible tocall the object deallocator directly instead of viatp_free.
The object deallocator should be the one used toallocate the instance; this is normally PyObject_Del()if the instance was allocated using PyObject_New() orPyOject_VarNew(), or PyObject_GC_Del() ifthe instance was allocated using PyObject_GC_New() orPyObject_GC_VarNew().This field is inherited by subtypes.
An optional pointer to the instance print function.The print function is only called when the instance is printed to areal file; when it is printed to a pseudo-file (like aStringIO instance), the instance's tp_repr ortp_str function is called to convert it to a string.
Theseare also called when the type's tp_print field is NULL.
Atype should never implement tp_print in a way that producesdifferent output than tp_repr or tp_str would.The print function is called with the same signature asPyObject_Print(): int tp_print(PyObject *self, FILE*file, int flags).
The self argument is the instance to beprinted.
tp_getattr
An optional pointer to the get-attribute-string function.This field is deprecated.
When it is defined, it should point to afunction that acts the same as the tp_getattro function,but taking a C string instead of a Python string object to give theattribute name.
The signature is the same as forPyObject_GetAttrString().This field is inherited by subtypes together withtp_getattro: a subtype inherits both tp_getattrand tp_getattro from its base type when the subtype'stp_getattr and tp_getattro are both NULL.
tp_setattr
An optional pointer to the set-attribute-string function.This field is deprecated.
When it is defined, it should point to afunction that acts the same as the tp_setattro function,but taking a C string instead of a Python string object to give theattribute name.
The signature is the same as forPyObject_SetAttrString().This field is inherited by subtypes together withtp_setattro: a subtype inherits both tp_setattrand tp_setattro from its base type when the subtype'stp_setattr and tp_setattro are both NULL.
An optional pointer to the three-way comparison function.The signature is the same as for PyObject_Compare().The function should return 1 if self greater thanother, 0 if self is equal to other, and-1 if self less than other.
It should return-1 and set an exception condition when an error occurredduring the comparison.This field is inherited by subtypes together withtp_richcompare and tp_hash: a subtypes inheritsall three of tp_compare, tp_richcompare, andtp_hash when the subtype's tp_compare,tp_richcompare, and tp_hash are all NULL.
tp_repr
An optional pointer to a function that implements the built-infunction repr().
Ideally, this functionshould return a string that, when passed to eval(), givena suitable environment, returns an object with the same value.
tp_hash
An optional pointer to a function that implements the built-infunction hash().
tp_call
An optional pointer to a function that implements calling theobject.
This should be NULL if the object is not callable.
Thesignature is the same as for PyObject_Call().This field is inherited by subtypes.
tp_str
An optional pointer to a function that implements the built-inoperation str().
(Note that str is a type now,and str() calls the constructor for that type.
This function should return a``friendly'' string representation of the object, as this is therepresentation that will be used by the print statement.When this field is not set, PyObject_Repr() is called toreturn a string representation.This field is inherited by subtypes.
tp_getattro
An optional pointer to the get-attribute function.The signature is the same as for PyObject_GetAttr().
Itis usually convenient to set this field toPyObject_GenericGetAttr(), which implements the normalway of looking for object attributes.This field is inherited by subtypes together withtp_getattr: a subtype inherits both tp_getattr andtp_getattro from its base type when the subtype'stp_getattr and tp_getattro are both NULL.
tp_setattro
An optional pointer to the set-attribute function.The signature is the same as for PyObject_SetAttr().
Itis usually convenient to set this field toPyObject_GenericSetAttr(), which implements the normalway of setting object attributes.This field is inherited by subtypes together withtp_setattr: a subtype inherits both tp_setattr andtp_setattro from its base type when the subtype'stp_setattr and tp_setattro are both NULL.
Pointer to an additional structure that contains fields relevant only toobjects which implement the buffer interface.
These fields aredocumented in ``Buffer Object Structures'' (section10.7).The tp_as_buffer field is not inherited, but the containedfields are inherited individually.
This field is a bit mask of various flags.
Some flags indicatevariant semantics for certain situations; others are used toindicate that certain fields in the type object (or in the extensionstructures referenced via tp_as_number,tp_as_sequence, tp_as_mapping, andtp_as_buffer) that were historically not always present arevalid; if such a flag bit is clear, the type fields it guards mustnot be accessed and must be considered to have a zero or NULLvalue instead.Inheritance of this field is complicated.
Most flag bits areinherited individually, i.e. if the base type has a flag bit set,the subtype inherits this flag bit.
The flag bits that pertain toextension structures are strictly inherited if the extensionstructure is inherited, i.e. the base type's value of the flag bitis copied into the subtype together with a pointer to the extensionstructure.
The macro PyType_HasFeature()takes a type and a flags value, tp and f, and checkswhether
is non-zero.
If this bit is set, the PyBufferProcs struct referenced bytp_as_buffer has the bf_getcharbuffer field.
If this bit is set, the PySequenceMethods structreferenced by tp_as_sequence has the sq_containsfield.
This bit is obsolete.
The bit it used to name is no longer inuse.
The symbol is now defined as zero.
If this bit is set, the PySequenceMethods structreferenced by tp_as_sequence and thePyNumberMethods structure referenced bytp_as_number contain the fields for in-place operators.In particular, this means that the PyNumberMethodsstructure has the fields nb_inplace_add,nb_inplace_subtract, nb_inplace_multiply,nb_inplace_divide, nb_inplace_remainder,nb_inplace_power, nb_inplace_lshift,nb_inplace_rshift, nb_inplace_and,nb_inplace_xor, and nb_inplace_or; and thePySequenceMethods struct has the fieldssq_inplace_concat and sq_inplace_repeat.
Py_TPFLAGS_CHECKTYPES
If this bit is set, the binary and ternary operations in thePyNumberMethods structure referenced bytp_as_number accept arguments of arbitrary object types,and do their own type conversions if needed.
If this bit isclear, those operations require that all arguments have thecurrent type as their type, and the caller is supposed to performa coercion operation first.
This applies to nb_add,nb_subtract, nb_multiply, nb_divide,nb_remainder, nb_divmod, nb_power,nb_lshift, nb_rshift, nb_and,nb_xor, and nb_or.
If this bit is set, the type object has thetp_richcompare field, as well as the tp_traverseand the tp_clear fields.
If this bit is set, the tp_weaklistoffset field isdefined.
Instances of a type are weakly referenceable if thetype's tp_weaklistoffset field has a value greater thanzero.
If this bit is set, the type object has the tp_iter andtp_iternext fields.
If this bit is set, the type object has several new fields definedstarting in Python 2.2: tp_methods, tp_members,tp_getset, tp_base, tp_dict,tp_descr_get, tp_descr_set,tp_dictoffset, tp_init, tp_alloc,tp_new, tp_free, tp_is_gc,tp_bases, tp_mro, tp_cache,tp_subclasses, and tp_weaklist.
This bit is set when the type object itself is allocated on theheap.
In this case, the ob_type field of its instancesis considered a reference to the type, and the type object isINCREF'ed when a new instance is created, and DECREF'ed when aninstance is destroyed (this does not apply to instances ofsubtypes; only the type referenced by the instance's ob_type getsINCREF'ed or DECREF'ed).
Py_TPFLAGS_BASETYPE
This bit is set when the type can be used as the base type ofanother type.
If this bit is clear, the type cannot be subtyped(similar to a "final" class in Java).
This bit is set when the type object has been fully initialized byPyType_Ready().
This bit is set while PyType_Ready() is in the processof initializing the type object.
This bit is set when the object supports garbage collection.
Ifthis bit is set, instances must be created usingPyObject_GC_New() and destroyed usingPyObject_GC_Del().
More information in section XXXabout garbage collection.
This bit also implies that theGC-related fields tp_traverse and tp_clear arepresent in the type object; but those fields also exist whenPy_TPFLAGS_HAVE_GC is clear butPy_TPFLAGS_HAVE_RICHCOMPARE is set.
This is a bitmask of all the bits that pertain to the existence ofcertain fields in the type object and its extension structures.Currently, it includes the following bits:Py_TPFLAGS_HAVE_GETCHARBUFFER,Py_TPFLAGS_HAVE_SEQUENCE_IN,Py_TPFLAGS_HAVE_INPLACEOPS,Py_TPFLAGS_HAVE_RICHCOMPARE,Py_TPFLAGS_HAVE_WEAKREFS,Py_TPFLAGS_HAVE_ITER, andPy_TPFLAGS_HAVE_CLASS.
tp_doc
An optional pointer to a NUL-terminated C string giving thedocstring for this type object.
This is exposed as the__doc__ attribute on the type and instances of the type.This field is not inherited by subtypes.
The following three fields only exist if thePy_TPFLAGS_HAVE_RICHCOMPARE flag bit is set.
tp_traverse
An optional pointer to a traversal function for the garbagecollector.
This is only used if the Py_TPFLAGS_HAVE_GCflag bit is set.
More information in section10.9 about garbage collection.This field is inherited by subtypes together with tp_clearand the Py_TPFLAGS_HAVE_GC flag bit: the flag bit,tp_traverse, and tp_clear are all inherited fromthe base type if they are all zero in the subtype and thesubtype has the Py_TPFLAGS_HAVE_RICHCOMPARE flag bit set.
tp_clear
An optional pointer to a clear function for the garbage collector.This is only used if the Py_TPFLAGS_HAVE_GC flag bit isset.
An optional pointer to the rich comparison function.The signature is the same as for PyObject_RichCompare().The function should return 1 if the requested comparisonreturns true, 0 if it returns false.
Comparison
The next field only exists if the Py_TPFLAGS_HAVE_WEAKREFSflag bit is set.
If the instances of this type are weakly referenceable, this fieldis greater than zero and contains the offset in the instancestructure of the weak reference list head (ignoring the GC header,if present); this offset is used byPyObject_ClearWeakRefs() and thePyWeakref_*() functions.
The next two fields only exist if thePy_TPFLAGS_HAVE_CLASS flag bit is set.
An optional pointer to a function that returns an iterator for theobject. Its presence normally signals that the instances of thistype are iterable (although sequences may be iterable without thisfunction, and classic instances always have this function, even ifthey don't define an __iter__() method).This function has the same signature asPyObject_GetIter().This field is inherited by subtypes.
tp_iternext
An optional pointer to a function that returns the next item in aniterator, or raises StopIteration when the iterator isexhausted.
The next fields, up to and including tp_weaklist, only existif the Py_TPFLAGS_HAVE_CLASS flag bit is set.
tp_methods
tp_members
typedef PyObject *(*getter)(PyObject *, void *);typedef int (*setter)(PyObject *, PyObject *, void *);typedef struct PyGetSetDef {char *name; /* attribute name */getter get; /* C function to get the attribute */setter set; /* C function to set the attribute */char *doc; /* optional doc string */void *closure; /* optional additional data for getter and setter */} PyGetSetDef;
tp_base
An optional pointer to a base type from which type properties areinherited.
At this level, only single inheritance is supported;multiple inheritance require dynamically creating a type object bycalling the metatype.This field is not inherited by subtypes (obviously), but it defaultsto PyBaseObject_Type (which to Python programmers is knownas the type object).
tp_dict
The type's dictionary is stored here by PyType_Ready().This field should normally be initialized to NULL beforePyType_Ready is called; it may also be initialized to a dictionarycontaining initial attributes for the type.
OncePyType_Ready() has initialized the type, extraattributes for the type may be added to this dictionary only if theydon't correspond to overloaded operations (like __add__()).This field is not inherited by subtypes (though the attributesdefined in here are inherited through a different mechanism).
tp_descr_get
An optional pointer to a "descriptor get" function.
XXX blah, blah.This field is inherited by subtypes.
tp_descr_set
An optional pointer to a "descriptor set" function.
tp_dictoffset
If the instances of this type have a dictionary containing instancevariables, this field is non-zero and contains the offset in theinstances of the type of the instance variable dictionary; thisoffset is used by PyObject_GenericGetAttr().Do not confuse this field with tp_dict; that is thedictionary for attributes of the type object itself.If the value of this field is greater than zero, it specifies theoffset from the start of the instance structure.
If the value isless than zero, it specifies the offset from the end of theinstance structure.
A negative offset is more expensive to use, andshould only be used when the instance structure contains avariable-length part.
This is used for example to add an instancevariable dictionary to subtypes of str or tuple.Note that the tp_basicsize field should account for thedictionary added to the end in that case, even though the dictionaryis not included in the basic object layout.
On a system with apointer size of 4 bytes, tp_dictoffset should be set to-4 to indicate that the dictionary is at the very end of thestructure.The real dictionary offset in an instance can be computed from anegative tp_dictoffset as follows:
where tp_basicsize, tp_itemsize andtp_dictoffset are taken from the type object, andob_size is taken from the instance.
The absolute value istaken because long ints use the sign of ob_size to storethe sign of the number.
(There's never a need to do thiscalculation yourself; it is done for you by_PyObject_GetDictPtr().)This field is inherited by subtypes, but see the rules listed below.A subtype may override this offset; this means that the subtypeinstances store the dictionary at a difference offset than the basetype.
Since the dictionary is always found viatp_dictoffset, this should not be a problem.When a type defined by a class statement has no __slots__declaration, and none of its base types has an instance variabledictionary, a dictionary slot is added to the instance layout andthe tp_dictoffset is set to that slot's offset.When a type defined by a class statement has a __slots__declaration, the type inherits its tp_dictoffset from itsbase type.(Adding a slot named __dict__ to the __slots__declaration does not have the expected effect, it just causesconfusion.
tp_init
An optional pointer to an instance initialization function.This function corresponds to the __init__() method ofclasses.
Ifthe tp_new function returns an instance of some other typethat is not a subtype of the original type, no tp_initfunction is called; if tp_new returns an instance of asubtype of the original type, the subtype's tp_init iscalled.
(VERSION NOTE: described here is what is implemented inPython 2.2.1 and later.
In Python 2.2, the tp_init of thetype of the object returned by tp_new was always called, ifnot NULL.)This field is inherited by subtypes.
An optional pointer to an instance allocation function.The function signature is
PyObject *tp_alloc(PyTypeObject *self, int nitems)
The purpose of this function is to separate memory allocation frommemory initialization.
It should return a pointer to a block ofmemory of adequate length for the instance, suitably aligned, andinitialized to zeros, but with ob_refcnt set to 1and ob_type set to the type argument.
That is also therecommended value for statically defined types.
An optional pointer to an instance creation function.If this function is NULL for a particular type, that type cannotbe called to create new instances; presumably there is some otherway to create instances, like a factory function.The function signature is
PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)
The subtype argument is the type of the object being created; theargs and kwds arguments represent positional and keywordarguments of the call to the type.
Note that subtype doesn't haveto equal the type whose tp_new function is called; it maybe a subtype of that type (but not an unrelated type).The tp_new function should call
subtype-tp_alloc(subtype, nitems) toallocate space for the object, and then do only as much furtherinitialization as is absolutely necessary.
Initialization that cansafely be ignored or repeated should be placed in thetp_init handler.
The latter exception is a precaution sothat old extension types don't become callable simply by beinglinked with Python 2.2.
tp_free
An optional pointer to an instance deallocation function.The signature of this function has changed slightly: in Python2.2 and 2.2.1, its signature is destructor:
In Python 2.3 and beyond, its signature is freefunc:
tp_is_gc
An optional pointer to a function called by the garbage collector.The garbage collector needs to know whether a particular object iscollectible or not.
Normally, it is sufficient to look at theobject's type's tp_flags field, and check thePy_TPFLAGS_HAVE_GC flag bit.
But some types have amixture of statically and dynamically allocated instances, and thestatically allocated instances are not collectible.
Such typesshould define this function; it should return 1 for acollectible instance, and 0 for a non-collectible instance.The signature is
int tp_is_gc(PyObject *self)
(The only example of this are types themselves.
The metatype,PyType_Type, defines this function to distinguish betweenstatically and dynamically allocated types.)This field is inherited by subtypes.
(VERSION NOTE: in Python2.2, it was not inherited.
It is inherited in 2.2.1 and laterversions.)
Tuple of base types.This is set for types created by a class statement.
It should beNULL for statically defined types.This field is not inherited.
Tuple containing the expanded set of base types, starting with thetype itself and ending with object, in Method ResolutionOrder.This field is not inherited; it is calculated fresh byPyType_Ready().
Unused.
Not inherited.
Internal use only.
Weak reference list head, for weak references to this typeobject.
None of these fields areinherited by subtypes.
Number of allocations.
Number of frees.
Maximum simultaneously allocated objects.
Pointer to the next type object with a non-zero tp_allocsfield.
Also, note that, in a garbage collected Python, tp_dealloc may becalled from any Python thread, not just the thread which created theobject (if the object becomes part of a refcount cycle, that cyclemight be collected by a garbage collection on any thread).
This isnot a problem for Python API calls, since the thread on whichtp_dealloc is called will own the Global Interpreter Lock (GIL).However, if the object being destroyed in turn destroys objects fromsome other C or C++ library, care should be taken to ensure thatdestroying those objects on the thread which called tp_dealloc willnot violate any assumptions of the library.
The C structure of the objects used to describe built-in types.
This is the type object for type objects; it is the same object astypes.TypeType in the Python layer.
Returns true if the object o is a type object, includinginstances of types derived from the standard type object.
Returnsfalse in all other cases.
Returns true if the object o is a type object, but not asubtype of the standard type object.
Returns true if the type object o sets the featurefeature.
Type features are denoted by single bit flags.
Return true if the type object includes support for the cycledetector; this tests the type flag Py_TPFLAGS_HAVE_GC.New in version 2.0.
Returns true if a is a subtype of b.New in version 2.2.
Finalize a type object.
This should be called on all type objectsto finish their initialization.
This function is responsible foradding inherited slots from a type's base class.
Returns 0on success, or returns -1 and sets an exception on error.New in version 2.2.
2.3.4.1 Bit-string Operations on
Python supports a concept of iteration over containers.
This isimplemented using two distinct methods; these are used to allowuser-defined classes to support iteration.
Sequences, described belowin more detail, always support the iteration methods.One method needs to be defined for container objects to provideiteration support:
The object is required to support theiterator protocol described below.
If a container supportsdifferent types of iteration, additional methods can be provided tospecifically request iterators for those iteration types.
(Anexample of an object supporting multiple forms of iteration would bea tree structure which supports both breadth-first and depth-firsttraversal.)
This method corresponds to the tp_iter slot ofthe type structure for Python objects in the Python/C API.
The iterator objects themselves are required to support the followingtwo methods, which together form the iterator protocol:
Return the iterator object itself.
This is required to allow bothcontainers and iterators to be used with the for andin statements.
This method corresponds to thetp_iter slot of the type structure for Python objects inthe Python/C API.
Return the next item from the container.
If there are no furtheritems, raise the StopIteration exception.
This methodcorresponds to the tp_iternext slot of the type structurefor Python objects in the Python/C API.
Python defines several iterator objects to support iteration overgeneral and specific sequence types, dictionaries, and other morespecialized forms.
The specific types are not important beyond theirimplementation of the iterator protocol.The intention of the protocol is that once an iterator'snext() method raises StopIteration, it willcontinue to do so on subsequent calls.
Implementations thatdo not obey this property are deemed broken.
(This constraintwas added in Python 2.3; in Python 2.2, various iterators arebroken according to this rule.)Python's generators provide a convenient way to implement theiterator protocol.
If a container object's __iter__()method is implemented as a generator, it will automaticallyreturn an iterator object (technically, a generator object)supplying the __iter__() and next() methods.
2.3.7 Set Types
Like other collections, sets support
,len(set), and for x in set
Being anunordered collection, sets do not record element position or order ofinsertion.
Accordingly, sets do not support indexing, slicing, orother sequence-like behavior.
There are currently two builtin set types, set and frozenset.The set type is mutable -- the contents can be changed using methodslike add() and remove().
Since it is mutable, it has nohash value and cannot be used as either a dictionary key or as an element ofanother set.
cardinality of set s
test x for membership in s
test x for non-membership in s
test whether every element in s is in t
test whether every element in t is in s
new set with elements from both s and t
new set with elements common to s and t
new set with elements in s but not in t
new set with elements in either s or t but not both
new set with a shallow copy of s
Note, the non-operator versions of union(), intersection(),difference(), and symmetric_difference(),issubset(), and issuperset() methods will accept anyiterable as an argument.
In contrast, their operator based counterpartsrequire their arguments to be sets.
For example, "set('abc')
== frozenset('abc')" returnsTrue.
The subset and equality comparisons do not generalize to a completeordering function.
For example, any two disjoint sets are not equal andare not subsets of each other, so all of the following returnFalse:
For example:"frozenset('ab') | set('bc')" returns an instance of frozenset.The following table lists operations available for setthat do not apply to immutable instances of frozenset:
return set s with elements added from t
return set s keeping only elements also found in t
return set s after removing elements found in t
return set s with elements from s or tbut not both
add element x to set s
s.remove(x)
remove x from set s; raises KeyError if not present
removes x from set s if present
remove and return an arbitrary element from s; raisesKeyError if empty
remove all elements from set s
Note, the non-operator versions of the update(),intersection_update(), difference_update(), andsymmetric_difference_update() methods will accept any iterableas an argument.
There are few other data types that play a significant role in the Python/C API; most are simple C types such as int, long, double and char*.
A few structure types are used to describe static tables used to list the functions exported by a module or the data attributes of a new object type, and anotheris used to describe the value of a complex number.
These will be discussed together with the functions that use them.
2.3.10.2 Classes and Class
Function objects are created by function definitions.
The onlyoperation on a function object is to call it:
func(argument-list).There are really two flavors of function objects: built-in functionsand user-defined functions.
Both support the same operation (to callthe function), but the implementation is different, hence thedifferent object types.See the
for moreinformation.
See the
for thisinformation.
It describes stack frame objects, traceback objects, andslice objects.
A mapping object maps immutable values toarbitrary objects.
Mappings are mutable objects.
There is currentlyonly one standard mapping type, the dictionary.
A dictionary's keys arealmost arbitrary values.
the number of items in a
the item of a with key k
set a[k] to v
remove
a[k] from a
remove all items from a
a (shallow) copy of a
True if a has a key k, else False
Equivalent to a.has_key(k)
Equivalent to not a.has_key(k)
a copy of a's list of (key, value) pairs
a copy of a's list of keys
updates (and overwrites) key/value pairs from b
Creates a new dictionary with keys from seq and values set to value
a copy of a's list of values
])
k in a
,else x
,else x (also setting it)
,else x (and remove k)
remove and return an arbitrary (key, value) pair
return an iterator over (key, value) pairs
return an iterator over the mapping's keys
return an iterator over the mapping's values
Raises a KeyError exception if k is notin the map.
This allows the creation of(value, key) pairs using zip():"pairs = zip(a.values(), a.keys())".
The samerelationship holds for the iterkeys() anditervalues() methods: "pairs = zip(a.itervalues(),a.iterkeys())" provides the same value for pairs.Another way to create the same list is "pairs = [(v, k) for (k,v) in a.iteritems()]".
Never raises an exception if k is not in the map,instead it returns x. x is optional; when x is notprovided and k is not in the map, None is returned.
setdefault() is like get(), exceptthat if k is missing, x is both returned and inserted intothe dictionary as the value of k. x defaults to None.
popitem() is useful to destructively iterateover a dictionary, as often used in set algorithms.
fromkeys() is a class method that returns anew dictionary. value defaults to None.
pop() raises a KeyError when no defaultvalue is given and the key is not found.
update() accepts either another mapping objector an iterable of key/value pairs (as a tuple or other iterable oflength two).
Methods are functions that are called using the attribute notation.There are two flavors: built-in methods (such as append() onlists) and class instance methods.
Built-in methods are describedwith the types that support them.The implementation adds two special read-only attributes to classinstance methods:
m.im_self is the object on which themethod operates, and
m.im_func is the functionimplementing the method.
Calling
m(arg-1,arg-2, ..., arg-n) is completely equivalent tocalling
m.im_func(m.im_self, arg-1,arg-2, ..., arg-n).Class instance methods are either bound or unbound,referring to whether the method was accessed through an instance or aclass, respectively.
When a method is unbound, its im_selfattribute will be None and if called, an explicit selfobject must be passed as the first argument.
In this case,self must be an instance of the unbound method's class (or asubclass of that class), otherwise a TypeError is raised.Like function objects, methods objects support gettingarbitrary attributes.
However, since method attributes are actuallystored on the underlying function object (meth.im_func),setting method attributes on either bound or unbound methods isdisallowed.
Attempting to set a method attribute results in aTypeError being raised.
In order to set a method attribute,you need to explicitly set it on the underlying function object:
See the
The only special operation on a module is attribute access:
m.name
, where m is a module and nameaccesses a name defined in m's symbol table.
Module attributescan be assigned to.
(Note that the import statement is not,strictly speaking, an operation on a module object; importfoo
m.__dict__['a'] = 1, whichdefines
m.a to be 1, but you can't write
m.__dict__ = {}).
Modifying __dict__ directlyis not recommended.Modules built into the interpreter are written like this:module 'sys' (built-in).
If loaded from a file, they arewritten as module 'os' from'/usr/local/lib/python2.4/os.pyc'.
Long integers have unlimited precision.
Floatingpoint numbers are implemented using double in C. All bets ontheir precision are off unless you happen to know the machine you areworking with.
Complex numbers have a real and imaginary part, which are eachimplemented using double in C.
To extract these parts froma complex number z, use
z.real and
z.imag.Numbers are created by numeric literals or as the result of built-infunctions and operators.
Unadorned integer literals (including hexand octal numbers) yield plain integers unless the value they denoteis too large to be represented as a plain integer, in which casethey yield a long integer.
Integer literals with an"L" or "l" suffix yield long integers("L" is preferred because "1l" looks too much likeeleven!).
Numeric literals containing a decimal point or an exponentsign yield floating point numbers.
Appending "j" or"J" to a numeric literal yields a complex number with azero real part.
A complex numeric literal is the sum of a real andan imaginary part.
Python fully supports mixed arithmetic: when a binary arithmeticoperator has operands of different numeric types, the operand with the``narrower'' type is widened to that of the other, where plaininteger is narrower than long integer is narrower than floating point isnarrower than complex.Comparisons between numbers of mixed type use the same rule.
The constructors int(), long(), float(),and complex() can be usedto produce numbers of a specific type.
All numeric types (except complex) support the following operations,sorted by ascending priority (operations in the same box have the samepriority; all numeric operations have a higher priority thancomparison operations):
sum of x and y
difference of x and y
product of x and y
quotient of x and y
remainder of
x negated
x unchanged
absolute value or magnitude of x
x converted to integer
x converted to long integer
x converted to floating point
a complex number with real part re, imaginary part im. im defaults to zero.
conjugate of the complex number c
the pair (x / y, x % y)
x to the power y
For (plain or long) integer division, the result is an integer.The result is always rounded towards minus infinity: 1/2 is 0,(-1)/2 is -1, 1/(-2) is -1, and (-1)/(-2) is 0.
Note that the resultis a long integer if either operand is a long integer, regardless ofthe numeric value.
Conversion from floating point to (long or plain) integer may round ortruncate as in C; see functions floor() andceil() in the
modulefor well-defined conversions.
See section 2.1, ``Built-in Functions,'' for a fulldescription.
Complex floor division operator, modulo operator, and divmod().
Deprecated since release 2.3.Instead convert to float using abs()if appropriate.
Footnotes ... rule.
As a consequence, the list [1, 2] is considered equalto [1.0, 2.0], and similarly for tuples.
Subsections
The interpreter supports several other kinds of objects.Most of these support only one or two operations.
Subsections
item i of s is replaced by x
slice of s from i to j is replaced by t
same as s[i:j] = []
the elements of s[i:j:k] are replaced by those of t
s[i:j:k] from the list
s.append(x)
s[len(s):len(s)] = [x]
s[len(s):len(s)] = x
return number of i's for which
]
return smallest k such that
same as
s[i:i] = [x]
x = s[i]; del s[i]; return x
same as del s[s.index(x)]
reverses the items of s in place
sort the items of s in place
t must have the same length as the slice it is replacing.
The C implementation of Python has historically acceptedmultiple parameters and implicitly joined them into a tuple; thisno longer works in Python 2.0.
Use of this misfeature has beendeprecated since Python 1.4.
Raises an exception when x is not a list object.
Raises ValueError when x is not found ins.
When a negative index is passed as the second or third parameterto the index() method, the list length is added, as for sliceindices.
If it is still negative, it is truncated to zero, as forslice indices.
Changed in version 2.3:Previously, index() didn'thave arguments for specifying start and stop positions.
When a negative index is passed as the first parameter tothe insert() method, the list length is added, as for sliceindices.
If it is still negative, it is truncated to zero, as forslice indices.
Changed in version 2.3:Previously, all negative indiceswere truncated to zero.
The pop() method is only supported by the list andarray types.
The optional argument i defaults to -1,so that by default the last item is removed and returned.
The sort() and reverse() methods modify thelist in place for economy of space when sorting or reversing a largelist.
To remind you that they operate by side effect, they don't returnthe sorted or reversed list.
The sort() method takes optional arguments forcontrolling the comparisons.
cmp specifies a custom comparison function of two arguments(list items) which should return a negative, zero or positive numberdepending on whether the first argument is considered smaller than,equal to, or larger than the second argument:"
key specifies a function of one argument that is used toextract a comparison key from each list element:"
reverse is a boolean value.
If set to True, then thelist elements are sorted as if each comparison were reversed.In general, the key and reverse conversion processes aremuch faster than specifying an equivalent cmp function.
This isbecause cmp is called multiple times for each list element whilekey and reverse touch each element only once.
Changed in version 2.3:Support for None as an equivalent to omittingcmp was added.
Changed in version 2.4:Support for key and reverse was added.
Starting with Python 2.3, the sort() method isguaranteed to be stable.
A sort is stable if it guarantees not tochange the relative order of elements that compare equal -- this ishelpful for sorting in multiple passes (for example, sort bydepartment, then by salary grade).
While a list is being sorted, the effect of attempting tomutate, or even inspect, the list is undefined.
The Cimplementation of Python 2.3 and newer makes the list appear emptyfor the duration, and raises ValueError if it can detectthat the list has been mutated during a sort.
String and Unicode objects have one unique built-in operation: the% operator (modulo).
This is also known as the stringformatting or interpolation operator. Given
(where format is a string orUnicode object), % conversion specifications in formatare replaced with zero or more elements of values.
The effectis similar to the using sprintf() in the C language.
Ifformat is a Unicode object, or if any of the objects beingconverted using the %s conversion are Unicode objects, theresult will also be a Unicode object.If format requires a single argument, values may be asingle non-tuple object.
2.8
Otherwise, values must be a tuple withexactly the number of items specified by the format string, or asingle mapping object (for example, a dictionary).A conversion specifier contains two or more characters and has thefollowing components, which must occur in this order:
The "%" character, which marks the start of thespecifier.
Conversion flags (optional), which affect the result of someconversion types.
Minimum field width (optional).
If specified as an"*" (asterisk), the actual width is read from thenext element of the tuple in values, and the object toconvert comes after the minimum field width and optionalprecision.
Precision (optional), given as a "." (dot) followedby the precision.
If specified as "*" (anasterisk), the actual width is read from the next element ofthe tuple in values, and the value to convert comes afterthe precision.
Length modifier (optional).
Conversion type.
When the right argument is a dictionary (or other mapping type), thenthe formats in the string must include a parenthesised mapping key intothat dictionary inserted immediately after the "%"character.
The mapping key selects the value to be formatted from themapping.
In this case no * specifiers may occur in a format (since theyrequire a sequential parameter list).The conversion flag characters are:
Flag
The value conversion will use the ``alternate form''(where defined below).
The conversion will be zero padded for numeric values.
The converted value is left adjusted (overridesthe "0" conversion if both are given).
(a space) A blank should be left before a positive number(or empty string) produced by a signed conversion.
A sign character ("+" or "-") willprecede the conversion (overrides a "space" flag).
The length modifier may be h, l, and L may bepresent, but are ignored as they are not necessary for Python.The conversion types are:
Conversion
Signed integer decimal.
Unsigned octal.
Unsigned decimal.
Unsigned hexidecimal (lowercase).
Unsigned hexidecimal (uppercase).
Floating point exponential format (lowercase).
Floating point exponential format (uppercase).
Floating point decimal format.
Same as "e" if exponent is greater than -4 orless than precision, "f" otherwise.
Same as "E" if exponent is greater than -4 orless than precision, "F" otherwise.
Single character (accepts integer or single characterstring).
String (converts any python object usingrepr()).
String (converts any python object usingstr()).
No argument is converted, results in a "%"character in the result.
The alternate form causes a leading zero ("0") to beinserted between left-hand padding and the formatting of thenumber if the leading character of the result is not already azero.
The alternate form causes a leading '0x' or '0X'(depending on whether the "x" or "X" formatwas used) to be inserted between left-hand padding and theformatting of the number if the leading character of the result isnot already a zero.
The %r conversion was added in Python 2.0.
If the object or format provided is a unicode string,the resulting string will also be unicode.
Since Python strings have an explicit length, %s conversionsdo not assume that '0' is the end of the string.For safety reasons, floating point precisions are clipped to 50;%f conversions for numbers whose absolute value is over 1e25are replaced by %g conversions.
2.9
All other errors raise exceptions.Additional string operations are defined in standard modules
Footnotes
... object.
To format only a tuple youshould therefore provide a singleton tuple whose only elementis the tuple to be formatted.
... conversions.
These numbers are fairly arbitrary.
They are intended toavoid printing endless strings of meaningless digits without hamperingcorrect use and without having to know the exact precision of floatingpoint values on a particular machine.
type is an immutable sequence whichis commonly used for looping.
The advantage of the xrangetype is that an xrange object will always take the same amountof memory, no matter the size of the range it represents.
There areno consistent performance advantages.
XRange objects have very little behavior: they only support indexing,iteration, and the len() function.
There are six sequence types: strings, Unicode strings, lists,tuples, buffers, and xrange objects.String literals are written in single or double quotes:'xyzzy', "frobozz".
See chapter 2 of the
for more aboutstring literals.
Unicode strings are much like strings, but arespecified in the syntax using a preceeding "u" character:u'abc', u"def".
Lists are constructed with square brackets,separating items with commas: [a, b, c].
Tuples areconstructed by the comma operator (not within square brackets), withor without enclosing parentheses, but an empty tuple must have theenclosing parentheses, such as a, b, c or ().
A singleitem tuple must have a trailing comma, such as (d,).
Buffer objects are not directly supported by Python syntax, but can becreated by calling the builtin functionbuffer().
They don't supportconcatenation or repetition.
Xrange objects are similar to buffers in that there is no specificsyntax to create them, but they are created using the xrange()function.
They don't support slicing,concatenation or repetition, and using in, not in,min() or max() on them is inefficient.
Most sequence types support the following operations.
The "in" and"not in" operations have the same priorities as the comparisonoperations.
The "+" and "*" operations have the samepriority as the corresponding numeric operations.
This table lists the sequence operations sorted in ascending priority(operations in the same box have the same priority).
In the table,s and t are sequences of the same type; n, iand j are integers:
True if an item of s is equal to x, else False
False if an item of s isequal to x, else True
the concatenation of s and t
n shallow copies of s concatenated
i'th item of s, origin 0
slice of s from i to j
slice of s from i to j with step k
length of s
smallest item of s
largest item of s
When s is a string or Unicode string object thein and not in operations act like a substring test.
InPython versions before 2.3, x had to be a string of length 1.In Python 2.3 and beyond, x may be a string of any length.
Values of n less than 0 are treated as0 (which yields an empty sequence of the same type ass).
Note also that the copies are shallow; nested structuresare not copied.
This often haunts new Python programmers; consider:
What has happened is that [[]] is a one-element list containingan empty list, so all three elements of [[]] * 3 are (pointers to)this single empty list.
Modifying any of the elements of listsmodifies this single list.
You can create a list of different lists thisway:
If i or j is negative, the index is relative tothe end of the string: len(s) + i
orlen(s) + j
is substituted.
But note that -0 isstill 0.
If i is omitted,use 0.
If j is omitted, use len(s).
Ifi is greater than or equal to j, the slice is empty.
If i or jis greater than len(s), use len(s).
Ifi or j are omitted then they become ``end'' values(which end depends on the sign of k).
Note, k cannotbe zero.
If s and t are both strings, some Pythonimplementations such as CPython can usually perform an in-place optimizationfor assignments of the form
.
When applicable, this optimization makesquadratic run-time much less likely.
This optimization is both versionand implementation dependent.
... operations.
They musthave since the parser can't tell the type of the operands.
Subsections 2.3.6.1 String Methods
All unary arithmetic (and bit-wise) operations have the same priority:
The unary - (minus) operator yields the negation of itsnumeric argument.
The unary + (plus) operator yields its numeric argumentunchanged.
The unary ~ (invert) operator yields the bit-wise inversionof its plain or long integer argument.
The bit-wise inversion ofx is defined as -(x+1).
It only applies to integralnumbers.
In all three cases, if the argument does not have the proper type,a TypeError exception is raised.
Here's a quick listing of modules that are currently undocumented, butthat should be documented.
Feel free to contribute documentation forthem!
(Send via email to docs@python.org.)The idea and original contents for this chapter were takenfrom a posting by Fredrik Lundh; the specific contents of this chapterhave been substantially revised. Subsections
Undocumented Modules
The modules in this chapter are poorly documented (if at all).
If youwish to contribute documentation of any of these modules, please get intouch with
.
Rudimentary decoder for AppleSingle format files.
Helper module for BuildApplet, BuildApplication andmacfreeze.
Helper to create 'PYC~' resources for compiledapplications.
Code Fragment Resource module.
Internet Config replacement for open().
Constant definitions for many Mac OS error codes.
Locate script resources.
Interface to Navigation Services.
Create CodeWarrior projects.
Wrapper around Netscape OSA modules.
Wrapper for PixMap objects.
Nice application preferences manager with support fordefaults.
Specialized preferences manager for the Pythoninterpreter.
Buffered, non-visible standard output.
Read QuickTime movies frame by frame for further processing.
.
Interface to the ``WorldScript-Aware Styled Text Engine.''
7.3.2.1 Built-in Codecs
The following APIs are capable of handling Unicode objects and stringson input (we refer to them as strings in the descriptions) and returnUnicode objects or integers as appropriate.They all return NULL or -1 if an exception occurs.
PyObject*
Concat two strings giving a new Unicode string.
Split a string giving a list of Unicode strings.
If sep is NULL,splitting will be done at all whitespace substrings.
Otherwise,splits occur at the given separator.
At most maxsplit splitswill be done.
If negative, no limit is set.
Separators are notincluded in the resulting list.
Split a Unicode string at line breaks, returning a list of Unicodestrings.
CRLF is considered to be one line break.
If keependis 0, the Line break characters are not included in the resultingstrings.
errors has the usual meaning for codecs.
It may be NULLwhich indicates to use the default error handling.
Join a sequence of strings using the given separator and return theresulting Unicode string.
Return 1 if substr matches str[start:end] atthe given tail end (direction == -1 means to do a prefixmatch, direction == 1 a suffix match), 0 otherwise.
Return the first position of substr instr[start:end] using the given direction(direction == 1 means to do a forward search,direction == -1 a backward search).
The return value is theindex of the first match; a value of -1 indicates that nomatch was found, and -2 indicates that an error occurred andan exception has been set.
Return the number of non-overlapping occurrences of substr in str[start:end].
Returns -1 if anerror occurred.
Replace at most maxcount occurrences of substr instr with replstr and return the resulting Unicode object.maxcount == -1 means replace all occurrences.
Compare two strings and return -1, 0, 1 for less than, equal, andgreater than, respectively.
Returns a new string object from format and args; thisis analogous to
.
Theargs argument must be a tuple.
Checks whether element is contained in container andreturns true or false accordingly.
element has to coerce to a one element Unicodestring.
-1 is returned if there was an error.
These are the basic Unicode object types used for the Unicodeimplementation in Python:
This type represents a 16-bit unsigned storage type which is used byPython internally as basis for holding Unicode ordinals.
Onplatforms where wchar_t is available and also has 16-bits,Py_UNICODE is a typedef alias for wchar_t to enhancenative platform compatibility.
On all other platforms,Py_UNICODE is a typedef alias for unsigned short.
This subtype of PyObject represents a Python Unicode object.
This instance of PyTypeObject represents the Python Unicodetype.
The following APIs are really C macros and can be used to do fastchecks and to access internal read-only data of Unicode objects:
Returns true if the object o is a Unicode object or aninstance of a Unicode subtype.Changed in version 2.2:Allowed subtypes to be accepted.
Returns true if the object o is a Unicode object, but not aninstance of a subtype.New in version 2.2.
Returns the size of the object. o has to be aPyUnicodeObject (not checked).
Returns the size of the object's internal buffer in bytes. ohas to be a PyUnicodeObject (not checked).
Py_UNICODE*
Returns a pointer to the internal Py_UNICODE buffer of theobject. o has to be a PyUnicodeObject (not checked).
Returns a pointer to the internal buffer of the object.o has to be a PyUnicodeObject (not checked).
Unicode provides many different character properties.
The most oftenneeded ones are available through these macros which are mapped to Cfunctions depending on the Python configuration.
Returns 1/0 depending on whether ch is a whitespacecharacter.
Returns 1/0 depending on whether ch is a lowercase character.
Returns 1/0 depending on whether ch is an uppercasecharacter.
Returns 1/0 depending on whether ch is a titlecase character.
Returns 1/0 depending on whether ch is a linebreak character.
Returns 1/0 depending on whether ch is a decimal character.
Returns 1/0 depending on whether ch is a digit character.
Returns 1/0 depending on whether ch is a numeric character.
Returns 1/0 depending on whether ch is an alphabeticcharacter.
Returns 1/0 depending on whether ch is an alphanumericcharacter.
These APIs can be used for fast direct character conversions:
Returns the character ch converted to lower case.
Returns the character ch converted to upper case.
Returns the character ch converted to title case.
Returns the character ch converted to a decimal positiveinteger.
Returns -1 if this is not possible.
Does not raiseexceptions.
Returns the character ch converted to a single digit integer.Returns -1 if this is not possible.
Does not raiseexceptions.
Returns the character ch converted to a (positive) double.Returns -1.0 if this is not possible.
Does not raiseexceptions.
To create Unicode objects and access their basic sequence properties,use these APIs:
Create a Unicode Object from the Py_UNICODE buffer u of thegiven size.
u may be NULL which causes the contents to beundefined.
It is the user's responsibility to fill in the neededdata.
The buffer is copied into the new object.
If the buffer isnot NULL, the return value might be a shared object.
Therefore,modification of the resulting Unicode object is only allowed whenu is NULL.
Return a read-only pointer to the Unicode object's internalPy_UNICODE buffer, NULL if unicode is not a Unicodeobject.
Return the length of the Unicode object.
Coerce an encoded object obj to an Unicode object and return areference with incremented refcount.Coercion is done in the following way:
Unicode objects are passed back as-is with incrementedrefcount.
Note:These cannot be decoded; passing a non-NULLvalue for encoding will result in a TypeError.
String and other char buffer compatible objects are decodedaccording to the given encoding and using the error handlingdefined by errors.
Both can be NULL to have the interfaceuse the default values (see the next section for details).
All other objects cause an exception.
The API returns NULL if there was an error.
The caller isresponsible for decref'ing the returned objects.
Shortcut for PyUnicode_FromEncodedObject(obj, NULL, "strict")which is used throughout the interpreter whenever coercion toUnicode is needed.
If the platform supports wchar_t and provides a header filewchar.h, Python can interface directly to this type using thefollowing functions.
Support is optimized if Python's ownPy_UNICODE type is identical to the system's wchar_t.
Create a Unicode object from the wchar_t buffer w ofthe given size.
Copies the Unicode object contents into the wchar_t bufferw.
At most size wchar_t characters are copied(excluding a possibly trailing 0-termination character).
Returnsthe number of wchar_t characters copied or -1 in case of anerror.
Note that the resulting wchar_t string may or maynot be 0-terminated.
It is the responsibility of the caller to makesure that the wchar_t string is 0-terminated in case this isrequired by the application.
Subsections 7.3.2.1 Built-in Codecs
classTestCase
Instances of the TestCase class represent the smallesttestable units in a set of tests.
This class is intended to be usedas a base class, with specific tests being implemented by concretesubclasses.
This class implements the interface needed by the testrunner to allow it to drive the test, and methods that the test codecan use to check for and report various kinds of failures.
classFunctionTestCase
This class implements the portion of the TestCase interfacewhich allows the test runner to drive the test, but does not providethe methods which test code can use to check and report errors.This is used to create test cases using legacy test code, allowingit to be integrated into a
-based testframework.
classTestSuite
This class represents an aggregation of individual tests cases andtest suites.
The class presents the interface needed by the testrunner to allow it to be run as any other test case, but all thecontained tests and test suites are executed.
Additional methodsare provided to add test cases and suites to the aggregation.
Iftests is given, it must be a sequence of individual tests thatwill be added to the suite.
classTestLoader
This class is responsible for loading tests according to variouscriteria and returning them wrapped in a TestSuite.It can load all tests within a given module or TestCaseclass.
When loading from a module, it considers allTestCase-derived classes. For each such class, it createsan instance for each method with a name beginning with the string"test".
Instance of the TestLoader class which can be shared.
If nocustomization of the TestLoader is needed, this instance canalways be used instead of creating new instances.
classTextTestRunner
A basic test runner implementation which prints results on standardoutput.
It has a few configurable parameters, but is essentiallyvery simple.
Graphical applications which run test suites shouldprovide alternate implementations.
A command-line program that runs a set of tests; this is primarilyfor making test modules conveniently executable.
The simplest usefor this function is:
In some cases, the existing tests may have be written using the
module.
If so, that module provides a DocTestSuite class that can automatically buildunittest.TestSuite instances from the existing test code.New in version 2.3.
Unix Specific Services
The modules described in this chapter provide interfaces to featuresthat are unique to the Unix operating system, or in some cases tosome or many variants of it.
Here's an overview:
The most common POSIX system calls (normally usedvia module
).
The password database (getpwnam() and friends).
The group database (getgrnam() and friends).
The crypt() function used to checkUnix passwords.
Call C functions in shared objects.
The standard ``database'' interface, based on ndbm.
GNU's reinterpretation of dbm.
POSIX style tty control.
Utility functions that perform common terminal controloperations.
Pseudo-Terminal Handling for SGI and Linux.
The fcntl() and ioctl() system calls.
A Python interface to Unix shell pipelines.
A file-like object with support for locking.
An interface to provide resource usage information onthe current process.
Interface to Sun's NIS (Yellow Pages) library.
An interface to the Unix syslog library routines.
Utility functions for running external commands.
Raise a URLError exception.
This example gets the python.org main page and displays the first 100bytes of it:
Here we are sending a data-stream to the stdin of a CGI and readingthe data it returns to us:
The code for the sample CGI used in the above example is:
Use of Basic HTTP Authentication:
import urllib2# Create an OpenerDirector with support for Basic HTTP Authentication...auth_handler = urllib2.HTTPBasicAuthHandler()auth_handler.add_password('realm', 'host', 'username', 'password')opener = urllib2.build_opener(auth_handler)# ...and install it globally so it can be used with urlopen.urllib2.install_opener(opener)urllib2.urlopen('http://www.example.com/login.html')
build_opener() provides many handlers by default, including aProxyHandler.
By default, ProxyHandler uses theenvironment variables named scheme_proxy, where schemeis the URL scheme involved.
For example, the http_proxyenvironment variable is read to obtain the HTTP proxy's URL.This example replaces the default ProxyHandler with one that usesprogramatically-supplied proxy URLs, and adds proxy authorization supportwith ProxyBasicAuthHandler.
proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})proxy_auth_handler = urllib2.HTTPBasicAuthHandler()proxy_auth_handler.add_password('realm', 'host', 'username', 'password')opener = build_opener(proxy_handler, proxy_auth_handler)# This time, rather than install the OpenerDirector, we use it directly:opener.open('http://www.example.com/login.html')
Adding HTTP headers:Use the headers argument to the Request constructor, or:
OpenerDirector automatically adds a User-Agent:header to every Request.
To change this:
import urllib2opener = urllib2.build_opener()opener.addheaders = [('User-agent', 'Mozilla/5.0')]opener.open('http://www.example.com/')
Also, remember that a few standard headers(Content-Length:, Content-Type: andHost:) are added when the Request is passed tourlopen() (or OpenerDirector.open()).
URLopener and FancyURLopener objects have thefollowing attributes.
Open fullurl using the appropriate protocol.
This method setsup cache and proxy information, then calls the appropriate open method withits input arguments.
If the scheme is not recognized,open_unknown() is called.
The data argumenthas the same meaning as the data argument of urlopen().
Overridable interface to open unknown URL types.
Retrieves the contents of url and places it in filename.
Thereturn value is a tuple consisting of a local filename and either amimetools.Message object containing the response headers (for remoteURLs) or None (for local URLs).
The caller must then open and read thecontents of filename.
If filename is not given and the URLrefers to a local file, the input filename is returned.
If the URL isnon-local and filename is not given, the filename is the output oftempfile.mktemp() with a suffix that matches the suffix of the lastpath component of the input URL.
If reporthook is given, it must bea function accepting three numeric parameters.
The data argumentmust in standard application/x-www-form-urlencoded format;see the urlencode() function below.
Variable that specifies the user agent of the opener object. To get
to tell servers that it is a particular user agent,set this in a subclass as a class variable or in the constructorbefore calling the base constructor.
The FancyURLopener class offers one additional method thatshould be overloaded to provide the appropriate behavior:
Return information needed to authenticate the user at the given hostin the specified security realm.
Many extension modules just provide new functions and types to beused from Python, but sometimes the code in an extension module canbe useful for other extension modules.
For example, an extensionmodule could implement a type ``collection'' which works like listswithout order.
Just like the standard Python list type has a C APIwhich permits extension modules to create and manipulate lists, thisnew collection type should have a set of C functions for directmanipulation from other extension modules.At first sight this seems easy: just write the functions (withoutdeclaring them static, of course), provide an appropriateheader file, and document the C API.
And in fact this would work ifall extension modules were always linked statically with the Pythoninterpreter.
And even ifsymbols are globally visible, the module whose functions one wishes tocall might not have been loaded yet!Portability therefore requires not to make any assumptions aboutsymbol visibility.
This means that all symbols in extension modulesshould be declared static, except for the module'sinitialization function, in order to avoid name clashes with otherextension modules (as discussed in section1.4).
CObjects can only be created and accessed via their C API, butthey can be passed around like any other Python object.
Each name could get its own CObject, or all CAPI pointers could be stored in an array whose address is published ina CObject.
And the various tasks of storing and retrieving the pointerscan be distributed in different ways between the module providing thecode and the client modules.The following example demonstrates an approach that puts most of theburden on the writer of the exporting module, which is appropriatefor commonly used library modules.
It stores all C API pointers(just one in the example!) in an array of void pointers whichbecomes the value of a CObject.
The header file corresponding tothe module provides a macro that takes care of importing the moduleand retrieving its C API pointers; client modules only have to callthis macro before accessing the C API.The exporting module is a modification of the spam module fromsection1.1.
The function spam.system()does not call the C library function system() directly,but a function PySpam_System(), which would of course dosomething more complicated in reality (such as adding ``spam'' toevery command).
This function PySpam_System() is alsoexported to other extension modules.The function PySpam_System() is a plain C function,declared static like everything else:
The function spam_system() is modified in a trivial way:
In the beginning of the module, right after the line
two more lines must be added:
h"
The #define is used to tell the header file that it is beingincluded in the exporting module, not a client module.
Finally,the module's initialization function must take care of initializingthe C API pointer array:
PyMODINIT_FUNCinitspam(void){PyObject *m;static void *PySpam_API[PySpam_API_pointers];PyObject *c_api_object;m = Py_InitModule("spam", SpamMethods);/* Initialize the C API pointer array */PySpam_API[PySpam_System_NUM] = (void *)PySpam_System;/* Create a CObject containing the API pointer array's address */c_api_object = PyCObject_FromVoidPtr((void *)PySpam_API, NULL);if (c_api_object != NULL)PyModule_AddObject(m, "_C_API", c_api_object);}
Note that PySpam_API is declared static; otherwisethe pointer array would disappear when initspam() terminates!The bulk of the work is in the header file spammodule.h,which looks like this:
#ifndef Py_SPAMMODULE_H#define Py_SPAMMODULE_H#ifdef __cplusplusextern "C" {#endif/* Header file for spammodule *//* C API functions */#define PySpam_System_NUM 0#define PySpam_System_RETURN int#define PySpam_System_PROTO (char *command)/* Total number of C API pointers */#define PySpam_API_pointers 1#ifdef SPAM_MODULE/* This section is used when compiling spammodule.c */static PySpam_System_RETURN PySpam_System PySpam_System_PROTO;#else/* This section is used in modules that use spammodule's API */static void **PySpam_API;#define PySpam_System \(*(PySpam_System_RETURN (*)PySpam_System_PROTO) PySpam_API[PySpam_System_NUM])/* Return -1 and set exception on error, 0 on success. */static intimport_spam(void){PyObject *module = PyImport_ImportModule("spam");if (module != NULL) {PyObject *c_api_object = PyObject_GetAttrString(module, "_C_API");if (c_api_object == NULL)return -1;if (PyCObject_Check(c_api_object))PySpam_API = (void **)PyCObject_AsVoidPtr(c_api_object);Py_DECREF(c_api_object);}return 0;}#endif#ifdef __cplusplus}#endif#endif /* !defined(Py_SPAMMODULE_H) */
All that a client module must do in order to have access to thefunction PySpam_System() is to call the function (orrather macro) import_spam() in its initializationfunction:
PyMODINIT_FUNCinitclient(void){PyObject *m;Py_InitModule("client", ClientMethods);if (import_spam() 0)return;/* additional initialization can happen here */}
The main disadvantage of this approach is that the filespammodule.h is rather complicated.
However, thebasic structure is the same for each function that isexported, so it has to be learned only once.Finally it should be mentioned that CObjects offer additionalfunctionality, which is especially useful for memory allocation anddeallocation of the pointer stored in a CObject.
The detailsare described in the
in the section``CObjects'' and in the implementationof CObjects (files Include/cobject.h andObjects/cobject.c in the Python source code distribution).
1.1 Getting and Installing 1.
Using Python on a Mac OS 9 Macintosh
Using Python on a Macintosh, especially on Mac OS 9 (MacPython-OSXincludes a complete Unix Python) can seem like something completelydifferent than using it on a Unix-like or Windows system.
Most of thePython documentation, both the ``official'' documentation and publishedbooks, describe only how Python is used on these systems, causingconfusion for the new user of MacPython-OS9.
This chapter gives a briefintroduction to the specifics of using Python on a Macintosh.The section on the IDE (see Section 1.3) is relevant to MacPython-OSXtoo. Subsections
1.2.2.1 Drag and drop
The functions in this chapter perform various utility tasks, rangingfrom helping C code be more portable across platforms, using Pythonmodules from C, and parsing function arguments and constructing Pythonvalues from C values. Subsections
The functions in this chapter will let you execute Python source codegiven in a file or a buffer, but they will not let you interact in amore detailed way with the interpreter.Several of these functions accept a start symbol from the grammar as a parameter.
The available start symbols are Py_eval_input,Py_file_input, and Py_single_input.
These aredescribed following the functions which accept them as parameters.Note also that several of these functions take FILE*parameters.
On particular issue which needs to be handled carefullyis that the FILE structure for different C libraries can bedifferent and incompatible.
Under Windows (at least), it is possiblefor dynamically linked extensions to actually use different libraries,so care should be taken that FILE* parameters are only passedto these functions if it is certain that they were created by the samelibrary that the Python runtime is using.
The main program for the standard interpreter.
This is madeavailable for programs which embed Python.
The argc andargv parameters should be prepared exactly as those which arepassed to a C program's main() function.
This is a simplified interface to PyRun_AnyFileExFlags()below, leaving closeit set to 0 and flags set to NULL.
This is a simplified interface to PyRun_AnyFileExFlags()below, leaving the closeit argument set to 0.
This is a simplified interface to PyRun_AnyFileExFlags()below, leaving the flags argument set to NULL.
If fp refers to a file associated with an interactive device(console or terminal input or Unix pseudo-terminal), return thevalue of PyRun_InteractiveLoop(), otherwise return theresult of PyRun_SimpleFile().
If filename isNULL, this function uses "???" as the filename.
This is a simplified interface to PyRun_SimpleStringFlags()below, leaving the PyCompilerFlags* argument set to NULL.
Executes the Python source code from command in the__main__ module according to the flags argument.If __main__ does not already exist, it is created.
Returns0 on success or -1 if an exception was raised.
If therewas an error, there is no way to get the exception information.For the meaning of flags, see below.
This is a simplified interface to PyRun_SimpleFileExFlags()below, leaving closeit set to 0 and flags set toNULL.
This is a simplified interface to PyRun_SimpleFileExFlags()below, leaving closeit set to 0.
This is a simplified interface to PyRun_SimpleFileExFlags()below, leaving flags set to NULL.
Similar to PyRun_SimpleStringFlags(), but the Python sourcecode is read from fp instead of an in-memory string.
filename should be the name of the file.
If closeit istrue, the file is closed before PyRun_SimpleFileExFlags returns.
This is a simplified interface to PyRun_InteractiveOneFlags()below, leaving flags set to NULL.
Read and execute a single statement from a file associated with aninteractive device according to the flags argument.
Iffilename is NULL, "???" is used instead.
The user willbe prompted using sys.
ps1 and sys.
ps2.
Returns 0when the input was executed successfully, -1 if there was anexception, or an error code from the errcode.h include filedistributed as part of Python if there was a parse error.
(Note thaterrcode.h is not included by Python.h, so must be includedspecifically if needed.)
This is a simplified interface to PyRun_InteractiveLoopFlags()below, leaving flags set to NULL.
Read and execute statements from a file associated with aninteractive device until EOF is reached.
If filename isNULL, "???" is used instead.
Returns 0 at EOF.
This is a simplified interface toPyParser_SimpleParseStringFlagsFilename() below, leaving filename set to NULL and flags set to 0.
This is a simplified interface toPyParser_SimpleParseStringFlagsFilename() below, leaving filename set to NULL.
Parse Python source code from str using the start tokenstart according to the flags argument.
The result canbe used to create a code object which can be evaluated efficiently.This is useful if a code fragment must be evaluated many times.
This is a simplified interface to PyParser_SimpleParseFileFlags()below, leaving flags set to 0
Similar to PyParser_SimpleParseStringFlagsFilename(), butthe Python source code is read from fp instead of an in-memorystring.
PyObject*
This is a simplified interface to PyRun_StringFlags() below,leaving flags set to NULL.
Execute Python source code from str in the context specifiedby the dictionaries globals and locals with the compilerflags specified by flags.
This is a simplified interface to PyRun_FileExFlags() below,leaving closeit set to 0 and flags set to NULL.
This is a simplified interface to PyRun_FileExFlags() below,leaving flags set to NULL.
This is a simplified interface to PyRun_FileExFlags() below,leaving closeit set to 0.
Similar to PyRun_StringFlags(), but the Python source code isread from fp instead of an in-memory string.
filename should be the name of the file.If closeit is true, the file is closed beforePyRun_FileExFlags() returns.
This is a simplified interface to Py_CompileStringFlags() below,leaving flags set to NULL.
Parse and compile the Python source code in str, returning theresulting code object.
The start token is given by start;this can be used to constrain the code which can be compiled and shouldbe Py_eval_input, Py_file_input, orPy_single_input.
The filename specified byfilename is used to construct the code object and may appearin tracebacks or SyntaxError exception messages.
Thisreturns NULL if the code cannot be parsed or compiled.
This isthe symbol to use when compiling arbitrarily long Python source code.
The start symbol from the Python grammar for a single statement; foruse with Py_CompileString()
.This is the symbol used for the interactive interpreter loop.
This is the structure used to hold compiler flags.
In cases wherecode is only being compiled, it is passed as int flags, and incases where code is being executed, it is passed asPyCompilerFlags *flags.
In this case, from __future__import can modify flags.Whenever PyCompilerFlags *flags is NULL, cf_flagsis treated as equal to 0, and any modification due tofrom __future__ import is discarded.
This bit can be set in flags to cause division operator /to be interpreted as ``true division'' according to PEP 238.
There are a number of built-in exceptions that represent warningcategories.
This categorization is useful to be able to filter outgroups of warnings.
The following warnings category classes arecurrently defined:
This is the base class of all warning categoryclasses.
It is a subclass of Exception.
Base category for warnings aboutdeprecated features.
Base category for warnings about dubioussyntactic features.
Base category for warnings about dubiousruntime features.
Base category for warnings about constructsthat will change semantically in the future.
While these are technically built-in exceptions, they are documentedhere, because conceptually they belong to the warnings mechanism.User code can define additional warning categories by subclassing oneof the standard warning categories.
A warning category must always bea subclass of the Warning class.
The warnings filter controls whether warnings are ignored, displayed,or turned into errors (raising an exception).Conceptually, the warnings filter maintains an ordered list of filterspecifications; any specific warning is matched against each filterspecification in the list in turn until a match is found; the matchdetermines the disposition of the match.
Each entry is a tuple of theform (action, message, category, module,lineno), where:
action is one of the following strings:
Disposition
turn matching warnings into exceptions
never print matching warnings
always print matching warnings
print the first occurrence of matchingwarnings for each location where the warning is issued
print the first occurrence of matchingwarnings for each module where the warning is issued
print only the first occurrence of matchingwarnings, regardless of location
message is a string containing a regular expression thatthe warning message must match (the match is compiled to always be case-insensitive)
category is a class (a subclass of Warning) ofwhich the warning category must be a subclass in order to match
module is a string containing a regular expression that the modulename must match (the match is compiled to be case-sensitive)
lineno is an integer that the line number where thewarning occurred must match, or 0 to match all linenumbers
Since the Warning class is derived from the built-inException class, to turn a warning into an error we simplyraise category(message).The warnings filter is initialized by -W options passedto the Python interpreter command line.
The interpreter saves thearguments for all -W options without interpretation insys.warnoptions; the warnings module parses these whenit is first imported (invalid options are ignored, after printing amessage to sys.stderr).
Issue a warning, or maybe ignore it or raise an exception.
Thecategory argument, if given, must be a warning category class(see above); it defaults to UserWarning.
Alternativelymessage can be a Warning instance, in which casecategory will be ignored and message.__class__ will be used.In this case the message text will be str(message).
This functionraises an exception if the particular warning issued is changedinto an error by the warnings filter see above.
The stacklevelargument can be used by wrapper functions written in Python, likethis:
This makes the warning refer to deprecation()'s caller,rather than to the source of deprecation() itself (sincethe latter would defeat the purpose of the warning message).
This is a low-level interface to the functionality ofwarn(), passing in explicitly the message, category,filename and line number, and optionally the module name and theregistry (which should be the __warningregistry__ dictionary ofthe module).
The module name defaults to the filename with .pystripped; if no registry is passed, the warning is never suppressed.
message must be a string and category a subclass ofWarning or message may be a Warning instance,in which case category will be ignored.
Write a warning to a file.
The default implementation callsformatwarning(message, category, filename,lineno) and writes the resulting string to file, whichdefaults to sys.stderr.
You may replace this function with analternative implementation by assigning towarnings. showwarning.
Format a warning the standard way.
This returns a string which maycontain embedded newlines and ends in a newline.
Insert an entry into the list of warnings filters.
The entry isinserted at the front by default; if append is true, it isinserted at the end.This checks the types of the arguments, compiles the message andmodule regular expressions, and inserts them as a tuple in frontof the warnings filter.
Entries inserted later override entriesinserted earlier, if both match a particular warning.
Omittedarguments default to a value that matches everything.
Reset the warnings filter.
This discards the effect of all previouscalls to filterwarnings(), including that of the-W command line options.
This simple example shows how an application can use objects IDs toretrieve objects that it has seen before.
The IDs of the objects canthen be used in other data structures without forcing the objects toremain alive, but the objects can still be retrieved by ID if theydo.
import weakref_id2obj_dict = weakref.WeakValueDictionary()def remember(obj):oid = id(obj)_id2obj_dict[oid] = objreturn oiddef id2obj(oid):return _id2obj_dict[oid]
It must also set the tp_weaklistoffsetfield of the corresponding type object to the offset of the field.Also, it needs to add Py_TPFLAGS_HAVE_WEAKREFS to thetp_flags slot.
For example, the instance type is defined with thefollowing structure:
typedef struct {PyObject_HEADPyClassObject *in_class; /* The class object */PyObject *in_dict; /* A dictionary */PyObject *in_weakreflist; /* List of weak references */} PyInstanceObject;
The statically-declared type object for instances is defined this way:
PyTypeObject PyInstance_Type = {PyObject_HEAD_INIT(PyType_Type)0,"module.instance",/* Lots of stuff omitted for brevity... */Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_WEAKREFS /* tp_flags */0, /* tp_doc */0, /* tp_traverse */0, /* tp_clear */0, /* tp_richcompare */offsetof(PyInstanceObject, in_weakreflist), /* tp_weaklistoffset */};
The type constructor is responsible for initializing the weak referencelist to NULL:
static PyObject *instance_new() {/* Other initialization stuff omitted for brevity */self-in_weakreflist = NULL;return (PyObject *) self;}
The only further addition is that the destructor needs to call theweak reference manager to clear any weak references.
This should bedone before any other parts of the destruction have occurred, but isonly required if the weak reference list is non-NULL:
static voidinstance_dealloc(PyInstanceObject *inst){/* Allocate temporaries if needed, but do not begindestruction just yet.*/if (inst-in_weakreflist != NULL)PyObject_ClearWeakRefs((PyObject *) inst);/* Proceed with object destruction normally.
*/}
Python supports weak references as first-class objects.
Thereare two specific object types which directly implement weakreferences.
The first is a simple reference object, and the secondacts as a proxy for the original object as much as it can.
Return true if ob is either a reference or proxy object.New in version 2.2.
Return true if ob is a reference object.New in version 2.2.
Return true if ob is a proxy object.New in version 2.2.
Return a weak reference object for the object ob.
This willalways return a new reference, but is not guaranteed to create a newobject; an existing reference object may be returned.
The secondparameter, callback, can be a callable object that receivesnotification when ob is garbage collected; it should accept asingle parameter, which will be the weak reference object itself.
callback may also be None or NULL.
If obis not a weakly-referencable object, or if callback is notcallable, None, or NULL, this will return NULL andraise TypeError.New in version 2.2.
Return a weak reference proxy object for the object ob.
Thiswill always return a new reference, but is not guaranteed to createa new object; an existing proxy object may be returned.
If ob is nota weakly-referencable object, or if callback is not callable,None, or NULL, this will return NULL and raiseTypeError.New in version 2.2.
Returns the referenced object from a weak reference, ref.
Ifthe referent is no longer live, returns None.New in version 2.2.
Similar to PyWeakref_GetObject(), but implemented as amacro that does no error checking.New in version 2.2.
The while statement is used for repeated execution as longas an expression is true:
This repeatedly tests the expression and, if it is true, executes thefirst suite; if the expression is false (which may be the first time itis tested) the suite of the else clause, if present, isexecuted and the loop terminates.
Acontinue statement executed in the first suite skips the restof the suite and goes back to testing the expression.
Except at the beginning of a logical line or in string literals, thewhitespace characters space, tab and formfeed can be usedinterchangeably to separate tokens.
Whitespace is needed between twotokens only if their concatenation could otherwise be interpreted as adifferent token (e.g., ab is one token, but a b is two tokens).
4.2 Differences Between Unix
There are two approaches to building extension modules on Windows,just as there are on Unix: use the
package tocontrol the build process, or do things manually.
The distutilsapproach works well for most extensions; documentation on using
to build and package extension modules isavailable in
The example files described here are distributedwith the Python sources in the PCexample_nt directory.
Copy the example files
The example_nt directory is a subdirectory of the PCdirectory, in order to keep all the PC-specific files under thesame directory in the source distribution.
However, theexample_nt directory can't actually be used from thislocation.
You first need to copy or move it up one level, so thatexample_nt is a sibling of the PC and Includedirectories.
Do all your work from within this new location.
Open the project
From VC++, use the File Open Workspacedialog (not File Open!).
Navigate to andselect the file example.dsw, in the copy of theexample_nt directory you made above.
Click Open.
Build the example DLL
In order to check that everything is set up right, try building:
Select a configuration.
This step is optional.
ChooseBuild Select Active Configuration andselect either example - Win32 Release orexample - Win32 Debug.
If you skip this step,VC++ will use the Debug configuration by default.
Build the DLL.
Choose Build Buildexample_d.dll in Debug mode, or Build Build example.dll in Release mode.
This creates allintermediate and result files in a subdirectory called eitherDebug or Release, depending on whichconfiguration you selected in the preceding step.
Testing the debug-mode DLL
Once the Debug build has succeeded, bring up a DOS box, and changeto the example_ntDebug directory.
Youshould now be able to repeat the following session (C isthe DOS prompt, is the Python prompt; note thatbuild information and various debug output from Python may notmatch this screen dump exactly):
Congratulations! You've successfully built your first Pythonextension module.
Creating your own project
Choose a name and create a directory for it.
Copy your C sourcesinto it.
Note that the module source file name does notnecessarily have to match the module name, but the name of theinitialization function should match the module name -- you canonly import a module spam if its initialization functionis called initspam(), and it should callPy_InitModule() with the string "spam" as itsfirst argument (use the minimal example.c in this directoryas a guide).
By convention, it lives in a file calledspam.c or spammodule.c.
The output file should becalled spam.dll or spam.pyd (the latter is supportedto avoid confusion with a system library spam.dll to whichyour module could be a Python interface) in Release mode, orspam_d.dll or spam_d.pyd in Debug mode.Now your options are:
Copy example.dsw and example.dsp, renamethem to spam.*, and edit them by hand, or
Create a brand new project; instructions are below.
In either case, copy example_ntexample.defto spamspam.def, and edit the newspam.def so its second line contains the string`initspam'.
If you created a new project yourself, add thefile spam.def to the project now. (This is an annoyinglittle file with only two lines.
An alternative approach is toforget about the .def file, and add the option/export:initspam somewhere to the Link settings, bymanually editing the setting in Project Options dialog).
Creating a brand new project
Use the File New Projects dialog tocreate a new Project Workspace.
Select Win32 Dynamic-LinkLibrary, enter the name ("spam"), and make sure theLocation is set to the spam directory you have created(which should be a direct subdirectory of the Python build tree, asibling of Include and PC).
Select Win32 as theplatform (in my version, this is the only choice). Make sure theCreate new workspace radio button is selected.
Click OK.Now open the Project Settings dialog.
Youonly need to change a few settings.
Make sure All Configurationsis selected from the Settings for: dropdown list.
Select theC/C++ tab. Choose the Preprocessor category in the popup menuat the top.
Type the following text in the entry box labeledAdditional include directories:
Then, choose the Input category in the Link tab, and enter
in the text box labelled Additional library path.Now you need to add some mode-specific settings:Select Win32 Release in the Settings fordropdown list.
Choose the Link tab, choose theInput Category, and append pythonXY.lib to thelist in the Object/library modules box.Select Win32 Debug in the Settings fordropdown list, and append pythonXY_d.lib to the list in theObject/library modules box.
Then click the C/C++tab, select Code Generation from theCategory dropdown list, and select Debug Multithreaded DLL from the Use run-time library dropdownlist.Select Win32 Release again from the Settingsfor dropdown list.
Select Multithreaded DLL from theUse run-time library: dropdown list.You should now create the file spam.def as instructed in theprevious section.
Then chose the Insert Filesinto Project dialog.
Set the pattern to *.* and selectboth spam.c and spam.def and click OK. (Insertingthem one by one is fine too.)
If your module creates a new type, you may have trouble with this line:
Change it to:
PyObject_HEAD_INIT(NULL) and add the following to the module initialization function:
Refer to section3 of the
for detailson why you must do this.
Windows Python is built in Microsoft Visual C++; using othercompilers may or may not work (though Borland seems to).
The rest ofthis section is MSVC++ specific.When creating DLLs in Windows, you must pass pythonXY.lib tothe linker.
To build two DLLs, spam and ni (which uses C functionsfound in spam), you could use these commands:
The first command created three files: spam.obj,spam.dll and spam.lib.
If you want anyother modules (including Python) to be able to see your identifiers,you have to say "_declspec(dllexport)", as in "void_declspec(dllexport) initspam(void)" or "PyObject_declspec(dllexport)
*NiGetSpamData(void)".Developer Studio will throw in a lot of import libraries that you donot really need, adding about 100K to your executable.
To get rid ofthem, use the Project Settings dialog, Link tab, to specifyignore default libraries.
Add the correctmsvcrtxx.lib to the list of libraries.
2.9.3 ControlsWindow Object 2.9.2 Window Objects
Window objects have the following methods, among others:
Override this method to open a window.
Store the MacOS window-id inself. wid and call the do_postopen() method toregister the window with the parent application.
Override this method to do any special processing on windowclose.
Call the do_postclose() method to cleanup the parentstate.
Called after the window is resized.
Override if more needs to be donethan calling InvalRect.
The user clicked in the content part of a window.
The arguments arethe coordinates (window-relative), the key modifiers and the rawevent.
An update event for the window was received.
Redraw the window.
The window was activated (
activate == 1) or deactivated(
activate == 0).
Handle things like focus highlighting,etc.
Three implementations of the writer object interface are provided asexamples by this module.
Most applications will need to derive newwriter classes from the NullWriter class.
classNullWriter
A writer which only provides the interface definition; no actions aretaken on any methods.
This should be the base class for all writerswhich do not need to inherit any implementation methods.
classAbstractWriter
A writer which can be used in debugging formatters, but not muchelse.
Each method simply announces itself by printing its name andarguments on standard output.
classDumbWriter
Simple writer class which writes output on the file object passed inas file or, if file is omitted, on standard output.
Theoutput is simply word-wrapped to the number of columns specified bymaxcol.
This class is suitable for reflowing a sequence ofparagraphs.
12.1.3 The Writer Interface
Interfaces to create writers are dependent on the specific writerclass being instantiated.
The interfaces described below are therequired interfaces which all writers must support once initialized.Note that while most applications can use theAbstractFormatter class as a formatter, the writer musttypically be provided by the application.
Flush any buffered output or device control events.
Set the alignment style.
The align value can be any object,but by convention is a string or None, where Noneindicates that the writer's ``preferred'' alignment should be used.Conventional align values are 'left', 'center','right', and 'justify'.
new_font
Set the font style.
The value of font will be None,indicating that the device's default font should be used, or a tupleof the form (
).
Size will be a string indicating the size offont that should be used; specific strings and their interpretationmust be defined by the application.
The italic, bold, andteletype values are Boolean values specifying which of thosefont attributes should be used.
Set the margin level to the integer level and the logical tagto margin.
Interpretation of the logical tag is at thewriter's discretion; the only restriction on the value of the logicaltag is that it not be a false value for non-zero values oflevel.
Set the spacing style to spacing.
Set additional styles.
The styles value is a tuple ofarbitrary values; the value AS_IS should be ignored.
Produce a paragraph separation of at least blankline blanklines, or the equivalent.
The blankline value will be aninteger.
Note that the implementation will receive a call tosend_line_break() before this call if a line break is needed; this method should not include ending the last line of the paragraph.It is only responsible for vertical spacing between paragraphs.
Display a horizontal rule on the output device.
The arguments to thismethod are entirely application- and writer-specific, and should beinterpreted with care.
The method implementation may assume that aline break has already been issued via send_line_break().
Output character data which may be word-wrapped and re-flowed asneeded.
Within any sequence of calls to this method, the writer mayassume that spans of multiple whitespace characters have beencollapsed to single space characters.
Output character data which has already been formattedfor display.
Generally, this should be interpreted to mean that linebreaks indicated by newline characters should be preserved and no newline breaks should be introduced.
The data may contain embeddednewline and tab characters, unlike data provided to thesend_formatted_data() interface.
Set data to the left of the current left margin, if possible.The value of data is not restricted; treatment of non-stringvalues is entirely application- and writer-dependent.
This methodwill only be called at the beginning of a line.
It is preferred that tests for the test package use the
This boilerplate code allows the testing suite to be run bytest.regrtest as well as on its own as a script.The goal for regression testing is to try to break code.This leads to a few guidelines to be followed:
The testing suite should exercise all classes, functions, andconstants.This includes not just the external API that is to be presented to theoutside world but also "private" code.
Whitebox testing (examining the code being tested when the tests arebeing written) is preferred.Blackbox testing (testing only the published user interface) is notcomplete enough to make sure all boundary and edge cases are tested.
Exhaust as many code paths as possible.Test where branching occurs and thus tailor input to make sure as manydifferent paths through the code are taken.
Add an explicit test for any bugs discovered for the tested code.This will make sure that the error does not crop up again if the code ischanged in the future.
Make sure to clean up after your tests (such as close and remove alltemporary files).
Import as few modules as possible and do it as soon as possible.This minimizes external dependencies of tests and also minimizes possibleanomalous behavior from side-effects of importing a module.
Try to maximize code reuse.On occasion, tests will vary by something as small as what typeof input is used.Minimize code duplication by subclassing a basic test class with a classthat specifies the input:
class TestFuncAcceptsSequences(unittest.TestCase):func = mySuperWhammyFunctiondef test_func(self):self.
A book by Kent Beck on writing tests before code.
Exceptions in this module are coded as class instances:
The base exception class.
Error has a single public datamember msg containing the description of the error.
Class derived from Error.
Contains no additional instancevariables.
Here is an example of how you would catch one of these exceptions:
Packer instances have the following methods:
Returns the current pack buffer as a string.
Resets the pack buffer to the empty string.
In general, you can pack any of the most common XDR data types bycalling the appropriate pack_type() method.
Each methodtakes a single argument, the value to pack.
The following simple datatype packing methods are supported: pack_uint(),pack_int(), pack_enum(), pack_bool(),pack_uhyper(), and pack_hyper().
Packs the single-precision floating point number value.
Packs the double-precision floating point number value.
The following methods support packing strings, bytes, and opaque data:
n, s)
Packs a fixed length string, s. n is the length of thestring but it is not packed into the data buffer.
The stringis padded with null bytes if necessary to guaranteed 4 byte alignment.
Packs a fixed length opaque data stream, similarly topack_fstring().
Packs a variable length string, s.
The length of the string isfirst packed as an unsigned integer, then the string data is packedwith pack_fstring().
Packs a variable length opaque data string, similarly topack_string().
Packs a variable length byte stream, similarly to pack_string().
The following methods support packing arrays and lists:
Packs a list of homogeneous items.
This method is useful forlists with an indeterminate size; i.e. the size is not available untilthe entire list has been walked.
For each item in the list, anunsigned integer 1 is packed first, followed by the data valuefrom the list. pack_item is the function that is called to packthe individual item.
At the end of the list, an unsigned integer0 is packed.For example, to pack a list of integers, the code might appear likethis:
import xdrlibp = xdrlib.Packer()p.pack_list([1, 2, 3], p.pack_int)
n, array, pack_item)
Packs a fixed length list (array) of homogeneous items. nis the length of the list; it is not packed into the buffer,but a ValueError exception is raised iflen(array) is not equal to n.
As above,pack_item is the function used to pack each element.
Packs a variable length list of homogeneous items.
First, thelength of the list is packed as an unsigned integer, then each elementis packed as in pack_farray() above.
The Unpacker class offers the following methods:
Resets the string buffer with the given data.
Returns the current unpack position in the data buffer.
Sets the data buffer unpack position to position.
You should becareful about using get_position() and set_position().
Returns the current unpack data buffer as a string.
Indicates unpack completion.
Raises an Error exceptionif all of the data has not been unpacked.
In addition, every data type that can be packed with a Packer,can be unpacked with an Unpacker.
Unpacking methods are of theform unpack_type(), and take no arguments.
They return theunpacked object.
Unpacks a single-precision floating point number.
Unpacks a double-precision floating point number, similarly tounpack_float().
In addition, the following methods unpack strings, bytes, and opaquedata:
Unpacks and returns a fixed length string.
n is the number ofcharacters expected.
Padding with null bytes to guaranteed 4 bytealignment is assumed.
Unpacks and returns a fixed length opaque data stream, similarly tounpack_fstring().
Unpacks and returns a variable length string.
The length of thestring is first unpacked as an unsigned integer, then the string datais unpacked with unpack_fstring().
Unpacks and returns a variable length opaque data string, similarly tounpack_string().
Unpacks and returns a variable length byte stream, similarly tounpack_string().
The following methods support unpacking arrays and lists:
Unpacks and returns a list of homogeneous items.
The list is unpackedone element at a timeby first unpacking an unsigned integer flag.
If the flag is 1,then the item is unpacked and appended to the list.
A flag of0 indicates the end of the list. unpack_item is thefunction that is called to unpack the items.
Unpacks and returns (as a list) a fixed length array of homogeneousitems.
n is number of list elements to expect in the buffer.As above, unpack_item is the function used to unpack each element.
Unpacks and returns a variable length list of homogeneous items.First, the length of the list is unpacked as an unsigned integer, theneach element is unpacked as in unpack_farray() above.
This module has support for XML namespaces as defined in the XMLNamespaces proposed recommendation.
Tag and attribute names that are defined in an XML namespace arehandled as if the name of the tag or element consisted of thenamespace (the URL that defines the namespace) followed by aspace and the name of the tag or attribute.
For instance, the taghtml xmlns='http://www.w3.org/TR/REC-html40' is treated as if the tag name was 'http://www.w3.org/TR/REC-html40 html', andthe tag html:a href='http://frob.com' inside the abovementioned element is treated as if the tag name were'http://www.w3.org/TR/REC-html40 a' and the attribute name asif it were 'http://www.w3.org/TR/REC-html40 href'.An older draft of the XML Namespaces proposal is also recognized, buttriggers a warning.
This World Wide Web Consortium recommendation describes theproper syntax and processing requirements for namespaces inXML.
xmlparser objects have the following methods:
Sets the base to be used for resolving relative URIs in systemidentifiers in declarations.
Resolving relative identifiers is leftto the application: this value will be passed through as thebase argument to the ExternalEntityRefHandler,NotationDeclHandler, andUnparsedEntityDeclHandler functions.
)
Returns a string containing the base set by a previous call toSetBase(), or None if SetBase() hasn't been called.
Create a ``child'' parser which can be used to parse an externalparsed entity referred to by content parsed by the parent parser.
Thecontext parameter should be the string passed to theExternalEntityRefHandler() handler function, described below.The child parser is created with the ordered_attributes,returns_unicode and specified_attributes set to thevalues of this parser.
Calling this with a true value for flag (the default) will causeExpat to call the ExternalEntityRefHandler withNone for all arguments to allow an alternate DTD to beloaded.
xmlparser objects have the following attributes:
The size of the buffer used when buffer_text is true.
Thisvalue cannot be changed at this time.New in version 2.3.
Setting this to true causes the xmlparser object to buffertextual content returned by Expat to avoid multiple calls to theCharacterDataHandler() callback whenever possible.
This canimprove performance substantially since Expat normally breakscharacter data into chunks at every line ending.
This attribute isfalse by default, and may be changed at any time.New in version 2.3.
buffer_used
If buffer_text is enabled, the number of bytes stored in thebuffer.
These bytes represent UTF-8 encoded text.
This attribute hasno meaningful interpretation when buffer_text is false.New in version 2.3.
ordered_attributes
Setting this attribute to a non-zero integer causes the attributes tobe reported as a list rather than a dictionary.
The attributes arepresented in the order found in the document text.
For eachattribute, two list entries are presented: the attribute name and theattribute value.
(Older versions of this module also used thisformat.)
By default, this attribute is false; it may be changed atany time.New in version 2.1.
returns_unicode
If this attribute is set to a non-zero integer, the handler functionswill be passed Unicode strings.
If returns_unicode is 0,8-bit strings containing UTF-8 encoded data will be passed to thehandlers.Changed in version 1.6:Can be changed at any time to affect the resulttype.
specified_attributes
If set to a non-zero integer, the parser will report only thoseattributes which were specified in the document instance and not thosewhich were derived from attribute declarations.
Applications whichset this need to be especially careful to use what additionalinformation is available from the declarations as needed to complywith the standards for the behavior of XML processors.
By default,this attribute is false; it may be changed at any time.New in version 2.1.
The following attributes contain values relating to the most recenterror encountered by an xmlparser object, and will only havecorrect values once a call to Parse() or ParseFile()has raised a xml.parsers.expat.ExpatError exception.
Byte index at which an error occurred.
Numeric code specifying the problem.
This value can be passed to theErrorString() function, or compared to one of the constantsdefined in the errors object.
Column number at which an error occurred.
Line number at which an error occurred.
The following attributes contain values relating to the current parselocation in an xmlparser object.
During a callback reportinga parse event they indicate the location of the first of the sequenceof characters that generated the event.
When called outside of acallback, the position indicated will be just past the last parseevent (regardless of whether there was an associated callback).New in version 2.4.
Current byte index in the parser input.
Current column number in the parser input.
Current line number in the parser input.
Here is the list of handlers that can be set.
To set a handler on anxmlparser object o, use
. handlername mustbe taken from the following list, and func must be a callableobject accepting the correct number of arguments.
The arguments areall strings, unless otherwise stated.
Called when the XML declaration is parsed.
Called when Expat begins parsing the document type declaration(!DOCTYPE ...).
The doctypeName is provided exactlyas presented.
Called when Expat is done parsing the document type delaration.This requires Expat version 1.2 or newer.
Called once for each element type declaration. name is the nameof the element type, and model is a representation of thecontent model.
Called for each declared attribute for an element type.
If anattribute list declaration declares three attributes, this handler iscalled three times, once for each attribute. elname is the nameof the element to which the declaration applies and attname isthe name of the attribute declared.
If the attributeis required to be given in the document instance, required willbe true.This requires Expat version 1.95.0 or newer.
Called for the start of every element. name is a stringcontaining the element name, and attributes is a dictionarymapping attribute names to their values.
Called for the end of every element.
Called for every processing instruction.
Called for character data.
This will be called for normal characterdata, CDATA marked content, and ignorable whitespace.
Applicationswhich must distinguish these cases can use theStartCdataSectionHandler, EndCdataSectionHandler,and ElementDeclHandler callbacks to collect the requiredinformation.
Called for unparsed (NDATA) entity declarations.
This is only presentfor version 1.2 of the Expat library; for more recent versions, useEntityDeclHandler instead. (The underlying function in theExpat library has been declared obsolete.)
Called for all entity declarations.
For parameter and internalentities, value will be a string giving the declared contentsof the entity; this will be None for external entities.
Called for notation declarations. notationName, base, andsystemId, and publicId are strings if given.
If thepublic identifier is omitted, publicId will be None.
Called when an element contains a namespace declaration.
Namespacedeclarations are processed before the StartElementHandler iscalled for the element on which declarations are placed.
Called when the closing tag is reached for an element that contained a namespace declaration.
This is called once for eachnamespace declaration on the element in the reverse of the order forwhich the StartNamespaceDeclHandler was called to indicatethe start of each namespace declaration's scope.
Calls to thishandler are made after the corresponding EndElementHandlerfor the end of the element.
Called for comments. data is the text of the comment, excludingthe leading `!-
-' and trailing `-
-'.
Called at the start of a CDATA section.
This andStartCdataSectionHandler are needed to be able to identifythe syntactical start and end for CDATA sections.
Called at the end of a CDATA section.
Called for any characters in the XML document forwhich no applicable handler has been specified.
This meanscharacters that are part of a construct which could be reported, butfor which no handler has been supplied.
This is the same as the DefaultHandler, but doesn't inhibit expansion of internal entities.The entity reference will not be passed to the default handler.
Called if theXML document hasn't been declared as being a standalone document.This happens when there is an external subset or a reference to aparameter entity, but the XML declaration does not set standalone toyes in an XML declaration.
If this handler returns 0,then the parser will throw an XML_ERROR_NOT_STANDALONEerror.
If this handler is not set, no exception is raised by theparser for this condition.
Called for references to external entities. base is the currentbase, as set by a previous call to SetBase().
The public andsystem identifiers, systemId and publicId, are strings ifgiven; if the public identifier is not given, publicId will beNone.
The XMLReader interface supports the following methods:
Process an input source, producing SAX events.
The sourceobject can be a system identifier (a string identifying theinput source - typically a file name or an URL), a file-likeobject, or an InputSource object.
When parse()returns, the input is completely processed, and the parser objectcan be discarded or reset.
As a limitation, the current implementationonly accepts byte streams; processing of character streams is forfurther study.
Return the current ContentHandler.
Set the current ContentHandler.
If noContentHandler is set, content events will be discarded.
Return the current DTDHandler.
Set the current DTDHandler.
If no DTDHandler isset, DTD events will be discarded.
Return the current EntityResolver.
Set the current EntityResolver.
If noEntityResolver is set, attempts to resolve an externalentity will result in opening the system identifier for the entity,and fail if it is not available.
Return the current ErrorHandler.
Set the current error handler.
If no ErrorHandler is set,errors will be raised as exceptions, and warnings will be printed.
Allow an application to set the locale for errors and warnings.
SAX parsers are not required to provide localization for errors andwarnings; if they cannot support the requested locale, however, theymust throw a SAX exception.
Applications may request a locale changein the middle of a parse.
Return the current setting for feature featurename.
If thefeature is not recognized, SAXNotRecognizedException israised.
The well-known featurenames are listed in the modulexml.sax.handler.
Set the featurename to value.
If the feature is notrecognized, SAXNotRecognizedException is raised.
If thefeature or its setting is not supported by the parser,SAXNotSupportedException is raised.
Return the current setting for property propertyname.
If theproperty is not recognized, a SAXNotRecognizedExceptionis raised.
The well-known propertynames are listed in the modulexml.sax.handler.
Set the propertyname to value.
If the property is notrecognized, SAXNotRecognizedException is raised.
If theproperty or its setting is not supported by the parser,SAXNotSupportedException is raised.
The body of thegenerator function is executed by calling the generator'snext() method repeatedly until it raises an exception.When a yield statement is executed, the state of thegenerator is frozen and the value of expression_list isreturned to next()'s caller.
By ``frozen'' we mean that alllocal state is retained, including the current bindings of localvariables, the instruction pointer, and the internal evaluation stack:enough information is saved so that the next time next() isinvoked, the function can proceed exactly as if the yieldstatement were just another external call.The yield statement is not allowed in the tryclause of a try ... finally construct.
Thedifficulty is that there's no guarantee the generator will ever beresumed, hence no guarantee that the finally block will everget executed.
Note:In Python 2.2, the yield statement is only allowedwhen the generators feature has been enabled.
It will alwaysbe enabled in Python 2.3.
This __future__ import statment canbe used to enable the feature:
PEP 0255, Simple Generators
The proposal for adding generators and the yieldstatement to Python.
classZipFile
Open a ZIP file, where file can be either a path to a file(a string) or a file-like object.
The mode parametershould be 'r' to read an existing file, 'w' totruncate and write a new file, or 'a' to append to anexisting file.
For mode is 'a' and filerefers to an existing ZIP file, then additional files are added toit.
If file does not refer to a ZIP file, then a new ZIParchive is appended to the file.
This is meant for adding a ZIParchive to another file, such as python.exe. Using
If ZIP_DEFLATEDis specified but the
module is not available,RuntimeError is also raised.
The default isZIP_STORED.
Close the archive file.
You must call close() beforeexiting your program or essential records will not be written.
Return a ZipInfo object with information about the archivemember name.
Return a list containing a ZipInfo object for each member ofthe archive.
The objects are in the same order as their entries inthe actual ZIP file on disk if an existing archive was opened.
Return a list of archive members by name.
Print a table of contents for the archive to sys.stdout.
Return the bytes of the file in the archive.
The archive must beopen for read or append.
)
Read all the files in the archive and check their CRC's.
Return thename of the first bad file, or else return None.
Write the file named filename to the archive, giving it thearchive name arcname (by default, this will be the same asfilename).
If given, compress_type overrides the valuegiven for the compression parameter to the constructor forthe new entry.
The archive must be open with mode 'w' or'a'.
zinfo_or_arcname, bytes)
Write the string bytes to the archive; zinfo_or_arcnameis either the file name it will be given in the archive, or aZipInfo instance.
If it's an instance, at least thefilename, date, and time must be given.
If it's a name, the dateand time is set to the current date and time.
The archive must beopened with mode 'w' or 'a'.
The following data attribute is also available:
The level of debug output to use.
This may be set from 0(the default, no output) to 3 (the most output).
Debugginginformation is written to sys.stdout.
Instances of the ZipInfo class are returned by thegetinfo() and infolist() methods ofZipFile objects.
Each object stores information about asingle member of the ZIP archive.Instances have the following attributes:
Name of the file in the archive.
The time and date of the last modification to the archivemember.
This is a tuple of six values:
Year
Month (one-based)
Day of month (one-based)
Hours (zero-based)
Minutes (zero-based)
Seconds (zero-based)
Type of compression for the archive member.
Comment for the individual archive member.
Expansion field data.
The
contains some comments on the internal structure of the datacontained in this string. create_system
System which created ZIP archive.
PKZIP version which created ZIP archive.
PKZIP version needed to extract archive.
reserved
Must be zero.
ZIP flag bits.
Volume number of file header.
Internal attributes.
External file attributes.
header_offset
file_offset Byte offset to the start of the file data.
CRC-32 of the uncompressed file. compress_size
Size of the compressed data.
Size of the uncompressed file.
